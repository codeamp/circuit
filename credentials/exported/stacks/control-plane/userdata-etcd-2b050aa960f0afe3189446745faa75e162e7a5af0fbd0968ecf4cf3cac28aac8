#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  units:
    - name: telegraf.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Teleport Monitoring Agent
        After=network-online.target
        After=etcd-member.service
        [Service]
        Restart=on-failure
        ExecStart=/bin/rkt run \
          --stage1-name=coreos.com/rkt/stage1-fly:1.26.0 \
          --set-env TELEGRAF_GLOBAL_TAGS_CLUSTER=production \
          --set-env TELEGRAF_GLOBAL_TAGS_SERVICE=etcd \
          --set-env HOST_ETC=/etc2 \
          --interactive \
          --volume=varlibetcd2,kind=host,source=/var/lib/etcd2 \
          --volume=etc,kind=host,source=/etc \
          --mount volume=etc,target=/etc2 \
          --mount volume=varlibetcd2,target=/var/lib/etcd2 \
          --hostname=%H \
          --dns=host \
          --net=host \
          --insecure-options=image,ondisk \
          docker://checkr/checkr-telegraf-kapacitor:latest \
          --exec /usr/bin/telegraf -- --config /etc/generic.system.telegraf.conf
        
    - name: cfn-etcd-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Configures EBS volume and R53 record set for this node and derives env vars for etcd bootstrap
        After=network-online.target
        Before=format-etcd2-volume.service

        [Service]
        EnvironmentFile=/var/run/coreos/etcd-node.env
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/opt/bin/cfn-etcd-environment
        ExecStartPre=/usr/bin/mv -f /var/run/coreos/etcd-environment /etc/etcd-environment
        ExecStart=/bin/true
        TimeoutStartSec=120

        [Install]
        RequiredBy=format-etcd2-volume.service


    - name: etcdadm-reconfigure.service
      enable: true
      content: |
        [Unit]
        Description=etcdadm reconfigure runner
        BindsTo=etcd-member.service
        Before=etcd-member.service
        Wants=cfn-etcd-environment.service
        After=cfn-etcd-environment.service
        After=network.target

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        RestartSec=5
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
        ExecStartPre=/usr/bin/mkdir -p /var/run/coreos/etcdadm/snapshots
        ExecStart=/opt/bin/etcdadm reconfigure
        ExecStartPost=/usr/bin/systemctl start etcdadm-check.timer
        TimeoutStartSec=120

        [Install]
        WantedBy=cfn-etcd-environment.service

    - name: etcdadm-update-status.service
      enable: true
      content: |
        [Unit]
        Description=etcdadm update status
        BindsTo=etcd-member.service
        After=etcd-member.service
        After=network.target

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        RestartSec=5
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStart=/opt/bin/etcdadm member_status_set_started
        ExecStartPost=/usr/bin/systemctl start etcdadm-save.timer
        TimeoutStartSec=120

    - name: etcdadm-check.service
      enable: true
      content: |
        [Unit]
        Description=etcd health check

        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStartPre=/usr/bin/systemctl is-active etcd-member.service
        ExecStart=/opt/bin/etcdadm check
        TimeoutStartSec=120

    - name: etcdadm-check.timer
      enable: true
      content: |
        [Unit]
        Description=periodic etcd health check

        [Timer]
        OnBootSec=120sec
        # Actual interval would be OnUnitInactiveSec+0~AccuracySec=10+0~5 sec
        OnUnitInactiveSec=10sec
        AccuracySec=5sec

        [Install]
        WantedBy=timers.target

    - name: etcdadm-save.service
      enable: true
      content: |
        [Unit]
        Description=etcd snapshot

        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStartPre=/usr/bin/systemctl is-active etcd-member.service
        ExecStart=/opt/bin/etcdadm save
        TimeoutStartSec=300

    - name: etcdadm-save.timer
      enable: true
      content: |
        [Unit]
        Description=periodic etcd snapshot

        [Timer]
        OnBootSec=120sec
        # Actual interval would be 60+0~5 sec
        OnUnitInactiveSec=60sec
        AccuracySec=5sec

        [Install]
        WantedBy=timers.target

    - name: etcd-member.service
      drop-ins:
        - name: 20-aws-cluster.conf
          content: |
            [Unit]
            Wants=cfn-etcd-environment.service
            After=cfn-etcd-environment.service
            Wants=decrypt-assets.service
            After=decrypt-assets.service
            
            BindsTo=etcdadm-reconfigure.service etcdadm-update-status.service
            After=etcdadm-reconfigure.service
            Before=etcdadm-update-status.service
            [Service]
            EnvironmentFile=-/etc/etcd-environment

            PermissionsStartOnly=true
            ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
            ExecStartPre=/usr/bin/systemctl is-active decrypt-assets.service
            ExecStartPre=/usr/bin/chown -R etcd:etcd /var/lib/etcd2
        
        - name: 40-version.conf
          content: |
            [Service]
            Environment="ETCD_IMAGE_TAG=v3.2.7"
        
      enable: true
      command: start

    - name: var-lib-etcd2.mount
      enable: true
      content: |
        [Unit]
        Before=etcd-member.service

        [Mount]
        What=/dev/xvdf
        Where=/var/lib/etcd2
        Type=ext4

        [Install]
        RequiredBy=etcd-member.service

    - name: format-etcd2-volume.service
      enable: true
      content: |
        [Unit]
        Description=Formats etcd2 ebs volume
        After=dev-xvdf.device
        Requires=dev-xvdf.device
        Before=var-lib-etcd2.mount

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/ext4-format-volume-once /dev/xvdf

        [Install]
        RequiredBy=var-lib-etcd2.mount


    - name: decrypt-assets.service
      enable: true
      content: |
        [Unit]
        Description=decrypt etcd2 tls assets using amazon kms
        Before=etcd-member.service

        [Service]
        Restart=on-failure
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/rkt run \
          --uuid-file-save=/var/run/coreos/decrypt-assets.uuid \
          --volume=ssl,kind=host,source=/etc/ssl/certs,readOnly=false \
          --mount=volume=ssl,target=/etc/ssl/certs \
          --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
          --mount volume=dns,target=/etc/resolv.conf \
          --net=host \
          --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
            -ec \
            'echo decrypting tls assets; \
             shopt -s nullglob; \
             for encKey in /etc/ssl/certs/*.pem.enc; do \
             echo decrypting $encKey; \
             /usr/bin/aws \
               --region us-east-1 kms decrypt \
               --ciphertext-blob fileb://$encKey \
               --output text \
               --query Plaintext \
             | base64 -d > $${encKey%.enc}; \
             done; \
             echo done.'
        ExecStart=-/usr/bin/rkt rm --uuid-file=/var/run/coreos/decrypt-assets.uuid

        [Install]
        RequiredBy=etcd-member.service



    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Wants=etcd-member.service
        After=etcd-member.service

        [Service]
        Type=simple
        Restart=on-failure
        RestartSec=10

        EnvironmentFile=/var/run/coreos/etcd-node.env
        ExecStartPre=/usr/bin/systemctl is-active etcd-member.service
        ExecStartPre=/usr/bin/rkt fetch quay.io/coreos/awscli:master
        ExecStart=-/opt/bin/cfn-signal




write_files:
  - path: /etc/rkt/auth.d/docker.json
    permissions: 0600
    encoding: gzip+base64
    content: H4sIAAAAAAAA/6pWUCrKLvHOzEtRslJQSslPzk4tciwtyVDSAUuEpRYVZ+bngeTKDMFiqemZxSVFmanFSlYK0TBupa6hHkSvXma+UqyOglJyUWpKal5JZmIOSGG1glJpcWoRyJjk/JTUtJz88oKi/BSQgQWJxcXl+UVg60NLjaKcSqOS3EJDjDN8080CTAtylBRqa7kAAQAA//+faTbrpgAAAA==

  - path: /opt/bin/cfn-init-etcd-server
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      cfn-init -v -c "etcd-server" --region us-east-1 --resource Etcd$KUBE_AWS_ETCD_INDEX --stack $KUBE_AWS_STACK_NAME

  - path: /opt/bin/attach-etcd-volume
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      # To omit the `--region us-east-1` flag for every aws-cli invocation
      export AWS_DEFAULT_REGION=us-east-1

      instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
      az=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)

      # values shared between cloud-config-etcd and stack-template.json
      stack_name=$KUBE_AWS_STACK_NAME
      name_tag_key="kube-aws:etcd:name"
      advertised_hostname_tag_key="kube-aws:etcd:advertised-hostname"
      eip_allocation_id_tag_key="kube-aws:etcd:eip-allocation-id"
      network_interface_id_tag_key="kube-aws:etcd:network-interface-id"

      etcd_index=$KUBE_AWS_ETCD_INDEX

      state_prefix=/var/run/coreos/etcd-volume
      output_prefix=/var/run/coreos/
      common_volume_filter="Name=tag:aws:cloudformation:stack-name,Values=$stack_name Name=tag:kube-aws:etcd:index,Values=$etcd_index"

      export $(cat /var/run/coreos/etcd-environment | grep -v ^# | xargs)

      export | grep ETCD

      # TODO: Locate the corresponding EBS volume via a tag on the ASG managing this EC2 instance
      # See https://github.com/coreos/kube-aws/pull/332#issuecomment-281531769

      # Skip the `while` block below when the EBS volume is already attached to this EC2 instance
      aws ec2 describe-volumes \
        --filters $common_volume_filter Name=attachment.instance-id,Values=$instance_id \
        | jq -r '([] + .Volumes)[0]' \
        > ${state_prefix}.json

      attached_vol_id=$(
        cat ${state_prefix}.json \
          | jq -r '"" + .VolumeId'
      )

      # Decide which volume to attach hence hostname to assume
      while [ "$attached_vol_id" = "" ]; do
        sleep 3

        aws ec2 describe-volumes \
          --filters $common_volume_filter Name=status,Values=available Name=availability-zone,Values=$az \
          > ${state_prefix}-candidates.json

        cat ${state_prefix}-candidates.json \
          | jq -r '([] + .Volumes)[0]' \
          > ${state_prefix}.json

        candidate_vol_id=$(
          cat ${state_prefix}.json \
            | jq -r '"" + .VolumeId'
        )

        if [ "$candidate_vol_id" = "" ]; then
          echo "[bug] no etcd volume found" 1>&2
          exit 1
        fi

        # See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html for device naming
        if aws ec2 attach-volume --volume-id $candidate_vol_id --instance-id $instance_id --device "/dev/xvdf"; then
          attached_vol_id=$candidate_vol_id
        fi
      done

      # Wait until the volume attachment completes
      until [ "$volume_status" = ok ]; do
        sleep 3
        describe_volume_status_result=$(aws ec2 describe-volume-status --volume-id $attached_vol_id)
        volume_status=$(echo "$describe_volume_status_result" | jq -r "([] + .VolumeStatuses)[0].VolumeStatus.Status")
      done

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$name_tag_key\").Value" \
        > ${output_prefix}name

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$advertised_hostname_tag_key\").Value" \
        > ${output_prefix}advertised-hostname

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$eip_allocation_id_tag_key\").Value" \
        > ${output_prefix}eip-allocation-id

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$network_interface_id_tag_key\").Value" \
        > ${output_prefix}network-interface-id

  

  - path: /opt/bin/assume-advertised-hostname-with-eip
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      # To omit the `--region us-east-1` flag for every aws-cli invocation
      export AWS_DEFAULT_REGION=us-east-1

      instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
      eip_alloc_id=$1

      aws ec2 associate-address --instance-id $instance_id --allocation-id $eip_alloc_id

      curl http://169.254.169.254/latest/meta-data/public-hostname

      curl http://169.254.169.254/latest/meta-data/local-ipv4 > /var/run/coreos/listen-private-ip

  - path: /opt/bin/append-etcd-server-env
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      private_ip=$(cat /var/run/coreos/listen-private-ip)
      name=$(cat /var/run/coreos/name)
      advertised_hostname=$(cat /var/run/coreos/advertised-hostname)

      echo "KUBE_AWS_ASSUMED_HOSTNAME=$advertised_hostname
      ETCD_NAME=$name
      ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd-trusted-ca.pem
      ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd.pem
      ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd-key.pem

      ETCD_CLIENT_CERT_AUTH=true
      ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd-trusted-ca.pem
      ETCD_CERT_FILE=/etc/ssl/certs/etcd.pem
      ETCD_KEY_FILE=/etc/ssl/certs/etcd-key.pem

      ETCD_INITIAL_CLUSTER_STATE=new
      ETCD_DATA_DIR=/var/lib/etcd2
      ETCD_LISTEN_CLIENT_URLS=https://$private_ip:2379
      ETCD_ADVERTISE_CLIENT_URLS=https://$advertised_hostname:2379
      ETCD_LISTEN_PEER_URLS=https://$private_ip:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS=https://$advertised_hostname:2380" >> /var/run/coreos/etcd-environment

  - path: /opt/bin/cfn-etcd-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      run() {
        rkt run \
           --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
           --mount volume=dns,target=/etc/resolv.conf \
           --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
           --mount volume=awsenv,target=/var/run/coreos \
           --volume=optbin,kind=host,source=/opt/bin,readOnly=false \
           --mount volume=optbin,target=/opt/bin \
           --uuid-file-save=/var/run/coreos/$1.uuid \
           --set-env=KUBE_AWS_STACK_NAME=$KUBE_AWS_STACK_NAME \
           --set-env=KUBE_AWS_ETCD_INDEX=$KUBE_AWS_ETCD_INDEX \
           --net=host \
           --trust-keys-from-https \
           quay.io/coreos/awscli:master --exec=/opt/bin/$1 -- $2

           rkt rm --uuid-file=/var/run/coreos/$1.uuid || :
        }

      run cfn-init-etcd-server
      run attach-etcd-volume

      eip_allocation_id=$(cat /var/run/coreos/eip-allocation-id)
      network_interface_id=$(cat /var/run/coreos/network-interface-id)
      if [ "$eip_allocation_id" != "" ]; then
        run assume-advertised-hostname-with-eip $eip_allocation_id
      elif [ "$network_interface_id" != "" ]; then
        run assume-advertised-hostname-with-eni $network_interface_id
        /opt/bin/reconfigure-ip-routing
      else
        echo '[bug] neither eip_allocation_id nor network_interface_id for this node found'
      fi

      run append-etcd-server-env

      /usr/bin/sed -i "s/^ETCDCTL_ENDPOINT.*$/ETCDCTL_ENDPOINT=https:\/\/$(cat /var/run/coreos/advertised-hostname):2379/" /etc/environment

  - path: /opt/bin/etcdadm
    permissions: 0755
    encoding: gzip+base64
    content: 

  - path: /etc/environment
    permissions: 0644
    content: |
      COREOS_PUBLIC_IPV4=$public_ipv4
      COREOS_PRIVATE_IPV4=$private_ipv4
      ETCDCTL_CA_FILE=/etc/ssl/certs/etcd-trusted-ca.pem
      ETCDCTL_CERT_FILE=/etc/ssl/certs/etcd-client.pem
      ETCDCTL_KEY_FILE=/etc/ssl/certs/etcd-client-key.pem
      ETCDCTL_ENDPOINT=

  - path: /opt/bin/ext4-format-volume-once
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash -e
      if [[ "$(wipefs -n -p $1 | grep ext4)" == "" ]];then
        mkfs.ext4 $1
      else
        echo "volume $1 is already formatted"
      fi


  - path: /opt/bin/cfn-signal
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-signal.uuid \
        --set-env=KUBE_AWS_STACK_NAME=$KUBE_AWS_STACK_NAME \
        --set-env=KUBE_AWS_ETCD_INDEX=$KUBE_AWS_ETCD_INDEX \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -vxec \
          '
           cfn-signal -e 0 --region us-east-1 --resource Etcd$KUBE_AWS_ETCD_INDEX --stack $KUBE_AWS_STACK_NAME
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-signal.uuid || :




  - path: /etc/ssl/certs/etcd-trusted-ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUyc6ySBSG91xF70kHUAFd/IuagFKmAhRwhzKIAoJTAVff+fzT3Ul3LZ9U8p7kec/58+dBYlL3D0SCiBoUgYh8qeBQijSMEMhRBTiFoKIQYODC6jZcbrW54TIE7GkADBonIBzzFB8Y2xF+eeTxthHs2FieZ8IcsDKBsidgdKxseaiPoXJNI1AYXB7dGahO5IwedhbO3GQGl6ffjIzC39BB+5FEwIeVe4DgHiHzpaTt/pUm+ewEgOPqm4wJz7/JduxeHEqhQK//HZcYAHgIsDX4+YCqHQKMgNWJvGY79WRUio/YV3jw0L1qi4VTPETtWGZW/u769jjTRYH3zaPJqubuiHy+hs+bHvbDyR0yRG0RGwSa9E3JZylr/cUXgsOp6PmyHCy59Kc72LPbUj1ueVnWTqg8PCWMw8k+klWe7dz01E1d0u3uk3cvVva8eybCON5UO7w26+dVXyASfG7bpvfi0fbNnVmHySa/P71Jr5Gye24sFTd6Z0tVN/mNnSkJcASC+rl/BKYq6qHZ6q8ZWalXvSlz+pOsJjTKV2kg802m6Uonr7rLe8h8ZOWee3jT9dUWwkObtHw5xDljCr7paee1G8sPyFS9psrv5I3aFaN13BLeiYwWVjg50YC5+rlklFMsAAbgfXI4jYD3o9BiawjKNYHAQWBgv4sTyBFglgTBngNOoDT/a074p2lfdQQok/HwN9bkR911o4LSCLbrDLesMFXuYFikjZ9VujxK/QsnWhAKUG6y1rXneu9G4rY2lDqkWmBIsvg0duqU21tDvIx1KkpnNWKbDuZqAwZV18+fANXaLFBoeURtPFJJuwK+g9HMX2dZOXMp7KJ7DofQvqYMofQ8Efth2ofTcWbLyt41weL60VpBX+ORawlySVW8sOFPIRNHZHl59Dhr/cFqYzu9nKhmFBnikLtS0jjmdr0ogZF+hostSDscahe9dq5882FLK/6kLGHaJImNT7ajmClnlXt4qE/vMRg02mZ1J/cLKfmUGY39pfBsVpI5P9azXU4xSm5HaBJrVS4kwETN3MadWMd38OuX8N1+4uL/X4S/AgAA//9IzTWILgQAAA==

  - path: /etc/ssl/certs/etcd-key.pem.enc
    encoding: gzip+base64
    content: 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

  - path: /etc/ssl/certs/etcd.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUObOySBiFc37F5LemWFUMvqC7aaBZbWhByGRREMQFsZFfP3XvnaoJ5g3PE5zgeev8/X0QWyT4C+GIEZMgwPBPKviEGNaCEDiHZ8AJBGdCqnZDVyvbnFqJGzRz3FtOmncZAIo9SAF3GI58oFtA3mMBNT45qkmbx3JTqf6MDRDCc5BA4DOovOTsun9lCuZ2UwY+K3nI8OKz8xJc/FXalIHgs46HBlF+Q8rTCxj8CHODZ0ZCqYt586xSp/dSUy0XHPsQ/DSD2Xe+i4U8lvvKCjqfEEguIIDn7tF0rbXlEgQUmwCECFAdfHN0dhGgGMw40upyyb4g8QTXl8e1N5Z2kRg6bu5prx9k92jaxtiM4urmP9yHEp8/1rLxXE0fd7IPbwo9lk4obTsVCPH7+fa6cCR1uho81i/qlsXtkYkrKX2DvSypsc2q8LLJbUCT7KXf1o2Iz5PoVLcd3uVCpz9BKNaXRazpRQTENe4vjbexwgjDfP9cnBtNTVFE9ZJvhwRbZ10BYTHe3R4yc6cJhV3G47wxSTo1FTMOmxcxRYWtmRRqCVvktXo/vsBBG0rPZtqyY4coRbWImgO3jjAehLc5p9FQlk8z98aqLizYP0OgKuuTnpks0/v5OqBPsh717vWAn2H9HsIdkMKqBvzmF7Ug7sozmud0zYkBKIA3SeLx8vsLNtUhOOkYAh/BI+D4W20k9RBwjs4ZcXkGBUj39jdywA+MIJS4pZHcbVeXQpF5dYh6j+EpS+Wmvm6n7FAt3jV4F+xXufCf8/Ff5xi0rR88V6FdY8lGVjy5i/WMjpBtdh3oC6KU3BblPtbT+dYKQTgp1+EzbYAcm6ti2hRwi1icB3nO51g+Bd3HzA5Jlx2fm8KNvTqF0XwybC+vh9x7KcLDM0f6epbwOOrOnjmn4zTN1C3XN/urPyRSmuTxR7H3TTyI/b21A3F1yFNUiOm9lag7C0H1Xr+C68W9JlqodF3Vr41dosI00KjZOWCxVCnfuaoiAaDjKlbd1UTdq6yJvGqjty4EIfjafqEKZDxapaUy2NZ2pFd0N91GfDtlr7R3qBbOVmPx890HwcvR0Ga7yb7o9Xhxe8E/GTevUvF8GfZfYD7d0/0iichEiM3b+2Mi8TXo5u1Hp3/+CD8TggPj/7PyTwAAAP//U1Q1KnMEAAA=

  - path: /etc/ssl/certs/etcd-client.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUy9KyOBCG91zF7K0pUT9PywQCBAwQQCLukEMQROQY8Oqnvn92M718e/F011v1/P07EOnY/ktBXoA1rIAA/UklgrGyVhUFZD4HAkPAMQY/b9mZ9Qn8JEKlkWk1d1xMiQ0oukAKhBkgj4CTDjZXJCkFwfEufN79TZHuyIxU4EBuhxCQAG6HTVRfh2iLhFEkNgkS4QToSwL+tUuyZ0ViSySohKPi7b8hFawEI/GQUEWkhpRaSBRdyszXhWm75IvuBCZ/yGAm9Bcs3f3NK9Xt6sLsPmbhmP6+4+P/ng4hBSrnyAW/e9oonCMILt1ash91ZLWbnJ2/LzN/NKZV3pLxsPOOp+3Rew/YaU7BB5u5w2SA/dN8mlec9aLqjVd3Tl1p86bK2esA6hnjURv5XQ8+iKYazHLeZ4v78lwTC9PVlzE9uIQ5HxLkw2prKZd2mfcSsEB3WBRUGuO3bP3qAIagREgfUa3FT49wG4msZZmRO53cTVrLIqfrrUaM3uAzo5bIXvXsi1hC+nlq07o43La5jzZUcw+P5BSzZle7V55OXZpnzwDdugSm27OWqJfHWgWsk4zKnvH0tOYBnOR9PAzW3K9jojtr4xHJp4XZrguM2fdna/uZp6DdssuhUWAd6blMe1kCpOnMZDmfZMczVslzRa4KEAiAmLyJchUqj9TQk11AjTUEVAWccQLJb5WpSSmRCGh0Rel1QK8aFEQhQNYVv9V9/NipFEFFXAH4wRBQcOBXL9mIoAjh/nKxu9OXulBqd1P61nBQyPo7XC18aeJi+e5C+/YYjko6bMJSb9V8MR0XoOIQr4l56MtU2/Tjmk6yJd33sZxOGbCdpkJw4mc3kFsv8HucwSqe9fDmZH1YVnZlLvVRGdaReeNLRJ6g9y4ssyV1fL2eQx2EZncuyOgOye79U3t8Zfrdzi65xyPjJmAlpmOal6wOv0NyDFDI0ptS0tGQyv0u/tx1WCxn+NJWFuPA3Bfn5J2fo4Jfd1lWU++O1gPrcLoilE7JN0CsDtsIbQNrlNwPn0SnyCtAntUn+Nb76Ei2IWaHZSbd61mi8bkxghdqkX39GdYv1GBN4PA+2Z9jtQ2lP1ZAtvp/U/wTAAD//yf9+7VGBAAA

  - path: /etc/ssl/certs/etcd-client-key.pem.enc
    encoding: gzip+base64
    content: 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




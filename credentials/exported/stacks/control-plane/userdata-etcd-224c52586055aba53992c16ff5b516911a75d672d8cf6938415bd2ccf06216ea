#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  units:
    - name: telegraf.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Teleport Monitoring Agent
        After=network-online.target
        After=etcd-member.service
        [Service]
        Restart=on-failure
        ExecStart=/bin/rkt run \
          --stage1-name=coreos.com/rkt/stage1-fly:1.26.0 \
          --set-env TELEGRAF_GLOBAL_TAGS_CLUSTER=production \
          --set-env TELEGRAF_GLOBAL_TAGS_SERVICE=etcd \
          --set-env HOST_ETC=/etc2 \
          --interactive \
          --volume=varlibetcd2,kind=host,source=/var/lib/etcd2 \
          --volume=etc,kind=host,source=/etc \
          --mount volume=etc,target=/etc2 \
          --mount volume=varlibetcd2,target=/var/lib/etcd2 \
          --hostname=%H \
          --dns=host \
          --net=host \
          --insecure-options=image,ondisk \
          docker://checkr/checkr-telegraf-kapacitor:latest \
          --exec /usr/bin/telegraf -- --config /etc/generic.system.telegraf.conf
        
    - name: cfn-etcd-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Configures EBS volume and R53 record set for this node and derives env vars for etcd bootstrap
        After=network-online.target
        Before=format-etcd2-volume.service

        [Service]
        EnvironmentFile=/var/run/coreos/etcd-node.env
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/opt/bin/cfn-etcd-environment
        ExecStartPre=/usr/bin/mv -f /var/run/coreos/etcd-environment /etc/etcd-environment
        ExecStart=/bin/true
        TimeoutStartSec=120

        [Install]
        RequiredBy=format-etcd2-volume.service

    - name: etcdadm-reconfigure.service
      enable: true
      content: |
        [Unit]
        Description=etcdadm reconfigure runner
        BindsTo=etcd-member.service
        Before=etcd-member.service
        Wants=cfn-etcd-environment.service
        After=cfn-etcd-environment.service
        After=network.target

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        RestartSec=5
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
        ExecStartPre=/usr/bin/mkdir -p /var/run/coreos/etcdadm/snapshots
        ExecStart=/opt/bin/etcdadm reconfigure
        ExecStartPost=/usr/bin/systemctl start etcdadm-check.timer
        TimeoutStartSec=120

        [Install]
        WantedBy=cfn-etcd-environment.service

    - name: etcdadm-update-status.service
      enable: true
      content: |
        [Unit]
        Description=etcdadm update status
        BindsTo=etcd-member.service
        After=etcd-member.service
        After=network.target

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        RestartSec=5
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStart=/opt/bin/etcdadm member_status_set_started
        ExecStartPost=/usr/bin/systemctl start etcdadm-save.timer
        TimeoutStartSec=120

    - name: etcdadm-check.service
      enable: true
      content: |
        [Unit]
        Description=etcd health check

        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStartPre=/usr/bin/systemctl is-active etcd-member.service
        ExecStart=/opt/bin/etcdadm check
        TimeoutStartSec=120

    - name: etcdadm-check.timer
      enable: true
      content: |
        [Unit]
        Description=periodic etcd health check

        [Timer]
        OnBootSec=120sec
        # Actual interval would be OnUnitInactiveSec+0~AccuracySec=10+0~5 sec
        OnUnitInactiveSec=10sec
        AccuracySec=5sec

        [Install]
        WantedBy=timers.target

    - name: etcdadm-save.service
      enable: true
      content: |
        [Unit]
        Description=etcd snapshot

        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStartPre=/usr/bin/systemctl is-active etcd-member.service
        ExecStart=/opt/bin/etcdadm save
        TimeoutStartSec=300

    - name: etcdadm-save.timer
      enable: true
      content: |
        [Unit]
        Description=periodic etcd snapshot

        [Timer]
        OnBootSec=120sec
        # Actual interval would be 60+0~5 sec
        OnUnitInactiveSec=60sec
        AccuracySec=5sec

        [Install]
        WantedBy=timers.target

    - name: etcd-member.service
      drop-ins:
        - name: 20-aws-cluster.conf
          content: |
            [Unit]
            Wants=cfn-etcd-environment.service
            After=cfn-etcd-environment.service
            Wants=decrypt-assets.service
            After=decrypt-assets.service
            
            BindsTo=etcdadm-reconfigure.service etcdadm-update-status.service
            After=etcdadm-reconfigure.service
            Before=etcdadm-update-status.service
            [Service]
            EnvironmentFile=-/etc/etcd-environment

            PermissionsStartOnly=true
            ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
            ExecStartPre=/usr/bin/systemctl is-active decrypt-assets.service
            ExecStartPre=/usr/bin/chown -R etcd:etcd /var/lib/etcd2
        
        - name: 40-version.conf
          content: |
            [Service]
            Environment="ETCD_IMAGE_TAG=v3.1.8"
        
      enable: true
      command: start

    - name: var-lib-etcd2.mount
      enable: true
      content: |
        [Unit]
        Before=etcd-member.service

        [Mount]
        What=/dev/xvdf
        Where=/var/lib/etcd2
        Type=ext4

        [Install]
        RequiredBy=etcd-member.service

    - name: format-etcd2-volume.service
      enable: true
      content: |
        [Unit]
        Description=Formats etcd2 ebs volume
        After=dev-xvdf.device
        Requires=dev-xvdf.device
        Before=var-lib-etcd2.mount

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/ext4-format-volume-once /dev/xvdf

        [Install]
        RequiredBy=var-lib-etcd2.mount


    - name: decrypt-assets.service
      enable: true
      content: |
        [Unit]
        Description=decrypt etcd2 tls assets using amazon kms
        Before=etcd-member.service

        [Service]
        Restart=on-failure
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/rkt run \
          --uuid-file-save=/var/run/coreos/decrypt-assets.uuid \
          --volume=ssl,kind=host,source=/etc/ssl/certs,readOnly=false \
          --mount=volume=ssl,target=/etc/ssl/certs \
          --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
          --mount volume=dns,target=/etc/resolv.conf \
          --net=host \
          --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
            -ec \
            'echo decrypting tls assets; \
             shopt -s nullglob; \
             for encKey in /etc/ssl/certs/*.pem.enc; do \
             echo decrypting $encKey; \
             /usr/bin/aws \
               --region us-east-1 kms decrypt \
               --ciphertext-blob fileb://$encKey \
               --output text \
               --query Plaintext \
             | base64 -d > $${encKey%.enc}; \
             done; \
             echo done.'
        ExecStart=-/usr/bin/rkt rm --uuid-file=/var/run/coreos/decrypt-assets.uuid

        [Install]
        RequiredBy=etcd-member.service



    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Wants=etcd-member.service
        After=etcd-member.service

        [Service]
        Type=simple
        Restart=on-failure
        RestartSec=10

        EnvironmentFile=/var/run/coreos/etcd-node.env
        ExecStartPre=/usr/bin/systemctl is-active etcd-member.service
        ExecStartPre=/usr/bin/rkt fetch quay.io/coreos/awscli:master
        ExecStart=-/opt/bin/cfn-signal




write_files:
  - path: /etc/rkt/auth.d/docker.json
    permissions: 0600
    encoding: gzip+base64
    content: H4sIAAAAAAAA/6pWUCrKLvHOzEtRslJQSslPzk4tciwtyVDSAUuEpRYVZ+bngeTKDMFiqemZxSVFmanFSlYK0TBupa6hHkSvXma+UqyOglJyUWpKal5JZmIOSGG1glJpcWoRyJjk/JTUtJz88oKi/BSQgQWJxcXl+UVg60NLjaKcSqOS3EJDjDN8080CTAtylBRqa7kAAQAA//+faTbrpgAAAA==
  - path: /opt/bin/cfn-init-etcd-server
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      cfn-init -v -c "etcd-server" --region us-east-1 --resource Etcd$KUBE_AWS_ETCD_INDEX --stack $KUBE_AWS_STACK_NAME

  - path: /opt/bin/attach-etcd-volume
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      # To omit the `--region us-east-1` flag for every aws-cli invocation
      export AWS_DEFAULT_REGION=us-east-1

      instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
      az=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)

      # values shared between cloud-config-etcd and stack-template.json
      stack_name=$KUBE_AWS_STACK_NAME
      name_tag_key="kube-aws:etcd:name"
      advertised_hostname_tag_key="kube-aws:etcd:advertised-hostname"
      eip_allocation_id_tag_key="kube-aws:etcd:eip-allocation-id"
      network_interface_id_tag_key="kube-aws:etcd:network-interface-id"

      etcd_index=$KUBE_AWS_ETCD_INDEX

      state_prefix=/var/run/coreos/etcd-volume
      output_prefix=/var/run/coreos/
      common_volume_filter="Name=tag:aws:cloudformation:stack-name,Values=$stack_name Name=tag:kube-aws:etcd:index,Values=$etcd_index"

      export $(cat /var/run/coreos/etcd-environment | grep -v ^# | xargs)

      export | grep ETCD

      # TODO: Locate the corresponding EBS volume via a tag on the ASG managing this EC2 instance
      # See https://github.com/coreos/kube-aws/pull/332#issuecomment-281531769

      # Skip the `while` block below when the EBS volume is already attached to this EC2 instance
      aws ec2 describe-volumes \
        --filters $common_volume_filter Name=attachment.instance-id,Values=$instance_id \
        | jq -r '([] + .Volumes)[0]' \
        > ${state_prefix}.json

      attached_vol_id=$(
        cat ${state_prefix}.json \
          | jq -r '"" + .VolumeId'
      )

      # Decide which volume to attach hence hostname to assume
      while [ "$attached_vol_id" = "" ]; do
        sleep 3

        aws ec2 describe-volumes \
          --filters $common_volume_filter Name=status,Values=available Name=availability-zone,Values=$az \
          > ${state_prefix}-candidates.json

        cat ${state_prefix}-candidates.json \
          | jq -r '([] + .Volumes)[0]' \
          > ${state_prefix}.json

        candidate_vol_id=$(
          cat ${state_prefix}.json \
            | jq -r '"" + .VolumeId'
        )

        if [ "$candidate_vol_id" = "" ]; then
          echo "[bug] no etcd volume found" 1>&2
          exit 1
        fi

        # See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html for device naming
        if aws ec2 attach-volume --volume-id $candidate_vol_id --instance-id $instance_id --device "/dev/xvdf"; then
          attached_vol_id=$candidate_vol_id
        fi
      done

      # Wait until the volume attachment completes
      until [ "$volume_status" = ok ]; do
        sleep 3
        describe_volume_status_result=$(aws ec2 describe-volume-status --volume-id $attached_vol_id)
        volume_status=$(echo "$describe_volume_status_result" | jq -r "([] + .VolumeStatuses)[0].VolumeStatus.Status")
      done

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$name_tag_key\").Value" \
        > ${output_prefix}name

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$advertised_hostname_tag_key\").Value" \
        > ${output_prefix}advertised-hostname

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$eip_allocation_id_tag_key\").Value" \
        > ${output_prefix}eip-allocation-id

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$network_interface_id_tag_key\").Value" \
        > ${output_prefix}network-interface-id

  

  - path: /opt/bin/assume-advertised-hostname-with-eip
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      # To omit the `--region us-east-1` flag for every aws-cli invocation
      export AWS_DEFAULT_REGION=us-east-1

      instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
      eip_alloc_id=$1

      aws ec2 associate-address --instance-id $instance_id --allocation-id $eip_alloc_id

      curl http://169.254.169.254/latest/meta-data/public-hostname

      curl http://169.254.169.254/latest/meta-data/local-ipv4 > /var/run/coreos/listen-private-ip

  - path: /opt/bin/append-etcd-server-env
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      private_ip=$(cat /var/run/coreos/listen-private-ip)
      name=$(cat /var/run/coreos/name)
      advertised_hostname=$(cat /var/run/coreos/advertised-hostname)

      echo "KUBE_AWS_ASSUMED_HOSTNAME=$advertised_hostname
      ETCD_NAME=$name
      ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem
      ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd.pem
      ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd-key.pem

      ETCD_CLIENT_CERT_AUTH=true
      ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem
      ETCD_CERT_FILE=/etc/ssl/certs/etcd.pem
      ETCD_KEY_FILE=/etc/ssl/certs/etcd-key.pem

      ETCD_INITIAL_CLUSTER_STATE=new
      ETCD_DATA_DIR=/var/lib/etcd2
      ETCD_LISTEN_CLIENT_URLS=https://$private_ip:2379
      ETCD_ADVERTISE_CLIENT_URLS=https://$advertised_hostname:2379
      ETCD_LISTEN_PEER_URLS=https://$private_ip:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS=https://$advertised_hostname:2380" >> /var/run/coreos/etcd-environment

  - path: /opt/bin/cfn-etcd-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      run() {
        rkt run \
           --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
           --mount volume=dns,target=/etc/resolv.conf \
           --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
           --mount volume=awsenv,target=/var/run/coreos \
           --volume=optbin,kind=host,source=/opt/bin,readOnly=false \
           --mount volume=optbin,target=/opt/bin \
           --uuid-file-save=/var/run/coreos/$1.uuid \
           --set-env=KUBE_AWS_STACK_NAME=$KUBE_AWS_STACK_NAME \
           --set-env=KUBE_AWS_ETCD_INDEX=$KUBE_AWS_ETCD_INDEX \
           --net=host \
           --trust-keys-from-https \
           quay.io/coreos/awscli:master --exec=/opt/bin/$1 -- $2

           rkt rm --uuid-file=/var/run/coreos/$1.uuid || :
        }

      run cfn-init-etcd-server
      run attach-etcd-volume

      eip_allocation_id=$(cat /var/run/coreos/eip-allocation-id)
      network_interface_id=$(cat /var/run/coreos/network-interface-id)
      if [ "$eip_allocation_id" != "" ]; then
        run assume-advertised-hostname-with-eip $eip_allocation_id
      elif [ "$network_interface_id" != "" ]; then
        run assume-advertised-hostname-with-eni $network_interface_id
        /opt/bin/reconfigure-ip-routing
      else
        echo '[bug] neither eip_allocation_id nor network_interface_id for this node found'
      fi

      run append-etcd-server-env

      /usr/bin/sed -i "s/^ETCDCTL_ENDPOINT.*$/ETCDCTL_ENDPOINT=https:\/\/$(cat /var/run/coreos/advertised-hostname):2379/" /etc/environment

  - path: /opt/bin/etcdadm
    permissions: 0755
    encoding: gzip+base64
    content: 

  - path: /etc/environment
    permissions: 0644
    content: |
      COREOS_PUBLIC_IPV4=$public_ipv4
      COREOS_PRIVATE_IPV4=$private_ipv4
      ETCDCTL_CA_FILE=/etc/ssl/certs/ca.pem
      ETCDCTL_CERT_FILE=/etc/ssl/certs/etcd-client.pem
      ETCDCTL_KEY_FILE=/etc/ssl/certs/etcd-client-key.pem
      ETCDCTL_ENDPOINT=

  - path: /opt/bin/ext4-format-volume-once
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash -e
      if [[ "$(wipefs -n -p $1 | grep ext4)" == "" ]];then
        mkfs.ext4 $1
      else
        echo "volume $1 is already formatted"
      fi


  - path: /opt/bin/cfn-signal
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-signal.uuid \
        --set-env=KUBE_AWS_STACK_NAME=$KUBE_AWS_STACK_NAME \
        --set-env=KUBE_AWS_ETCD_INDEX=$KUBE_AWS_ETCD_INDEX \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -vxec \
          '
           cfn-signal -e 0 --region us-east-1 --resource Etcd$KUBE_AWS_ETCD_INDEX --stack $KUBE_AWS_STACK_NAME
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-signal.uuid || :




  - path: /etc/ssl/certs/ca.pem.enc
    encoding: gzip+base64
    content: H4sIAAAAAAAA/wC/BED7AQECAHgtAXNFpLmjNXHaaI4vnp9Kiu39c7e3/npF4nDh5ZaiJwAABJYwggSSBgkqhkiG9w0BBwagggSDMIIEfwIBADCCBHgGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMIavdC0gAhlrmBg9qAgEQgIIESel5KdSj6HqSutYosDVzrkNvjnvi2q2dDWDwq+ctxFrAfauDsHuI1CNPJGtnmPrpjDEPbOhF0Tr3a4j0vWAt1Yycamc+RocCDASS9KWh8gvDanF8Dll6n+CdzgKMxatvA5x7Z0JcHo+yh1vsYMLLQCm0UWiru8Tr6j18+ZbD7z6BtmshpFKwbosWZotuqSLTBhYfuFIORUwXphGuCyJatmK14SbKA/4vblculPFDwc6OnqwJMcxbOoUgc8dVl/M8XHTudopDWrDYXtrMHpjyuzDgYqx8/DImdV5Mer66ftflF0O7RbB3JRyTPWd9vMzrE5g2yPKVh1wTb/tV+anU74WEuex1eCPBpxWfJyzGT8uP8UPngxsOocuVfOqUwXpYiwLA5teAJHRu2RVUwMurWnzeCVGvj6O9OHD53MOh5mG3+mfv3ZLZkJ4hOa/Ld/O4gn4E7dSFZZ76QRTI5Y9gFVYUhm39cH71fSFuH3Yb0UzL7xkT8w+bnXMPlx2ujKTElDE3XxRfW4yY4CPOEqP9FWQzgJwQpAo0oKL/INDUsjj3SUeGknd46fyKpItUniGiOLzfjFf8IMD+fqXtg5o3YofSR1dxoC28pNEDYWnaheeRJHL7cMs7TP5pSRYxPXxMTsOUleBPfj31EDp4NIyG24AFEpkoFCQt6xL3WXuvEgvqoctoZqhlD9pd2viUGN38TfjjB2Eur20YQAoOX74juIK5nvS3Iuwbi+6bxv8AdqPQkUC/sA/7bxTlorjvMQSdLg2yB3+qn6CLDEqs0Sa0Y40pN0T9uJ4cpAIBgev37I7+ZCT3c7bm2ljsSEmzeziNnatq44MZ7VYEGAXlegLwgyRYKjm0dLqVVJMlU1FTrdeyIRHYrb3glCI1o6PCZbaVCpONzzZIqEkcgGJYxTgso4HLv0ty9O61ziEjo3XUf9hLXrVekvV5kNJi/b4fOm04kT7loyFV05eaDWFmKMV8wbUn8kH96OH0+/b5ErsQMI1t71z0sZjzQ9CjvOn3HlQE7q8lb1XL5iNi4dBSuJb9xPlI66+gRRbxBeTPx6CauW3jOfMZIUnpYugljz1BTwiRHNvf99Rn3Jd21YhgoJqgyaP7JSIuCmbwXdpPQxs+vd7/r3wLcjum7GbZL0rjIp5FJu2h3VKa0Z7kzaBT87Jj0jadz2WOcFb2vkrrYmXE5PGJvnzqyKEa0kPiuaCxsW6fj8+DOs6BhdBgAaZ+3cAhUE7Ns/vXcCxWOpTadVkFvjJsfwH6fTVGN4G1qhuAK6fwPUWtR4trZ2vtuAWt2oOWXSMyZx/hWR7Cagl4ZzCzE/8IDAqtViW2z4Vn0Cc6NYHkfsGhFa/rwikalTGnQHpwaqLsiqIhRuCGuBf1Wtr8SKPEuQM9x5thKxOmtYNcBhVtmnvmCY5cOZi3xS7FKis4YiLJeeZGvPk1AvXbtvEW/Q6TMUC+Q9PL6wHOAQAA//+JGEI6vwQAAA==

  - path: /etc/ssl/certs/etcd-key.pem.enc
    encoding: gzip+base64
    content: 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

  - path: /etc/ssl/certs/etcd.pem.enc
    encoding: gzip+base64
    content: H4sIAAAAAAAA/wAEBfv6AQECAHgtAXNFpLmjNXHaaI4vnp9Kiu39c7e3/npF4nDh5ZaiJwAABNswggTXBgkqhkiG9w0BBwagggTIMIIExAIBADCCBL0GCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMORO5nD4CoQmnenqIAgEQgIIEjqcOaFct9XzJM8L/t/ZG9ej6LhEd6ZiUc+hOAMluAYEeye7KdOFWPnpgNkyhPeZKQH2xjgUECiwteXe1kpqmGoj2ZWGoMUcqQj/tgHtZtqiI96N2zG4wBCAJusStFF8bAmdRJtvZXu1Srl54Jq5SOzigtWWz2UdGScf2IB+JoOML6mhlWMLlvp7DpdgvYL6VPVBS7bg+BJ2Oc1MeQP8p1GL5EJNH677rux3Qtr3mIMSFuO5mCxy6D8bXjOF8a6Fmh6BctJSFgpmllJrqH+bGq0Jh3/N6KRXvEdIyfCAhv96rHW8/gZEJ0IvD0rnaCldiQKXInSFkne/OGqBCHygn0w2A1Rr728oyjw3WlLwt6q8+e/IdCB9k56ynkpedmxt7kHHkECkrdGCivKL6DEvLhOzYYxy0T4z0mgIX0Fr7FjzZZiSX+p124NptYxXBLTZatMr/C/0bHY3gjCCp0o/GKZYxNpIAZnRvlGBQVWDUa4PUr7pSCpKouOnpIEoEJ18bjXFLNLx7/2GNFxVJwbZPIWvzLR7/sdjkEO7kSY8iA1fmaE7hzEzl/yICY99VYSd5+oiwqyNAo8bvqeCt+0/hLE3iM+xHKvrTJJFvn/6EZVP68F2LCftaUmRA0n8pPMzq1EyUDpK8OT7fUpB0Ua367OYG1hG1kXPYIqZ1cx9eDsXotywsVRKPT/2qSaXzij+iUG8RWDZPylRUIRWAkvccLUCY9GuQMaIahdZdAv87KqZThifmGexmmBgTUWjPY1EE/uU4a6faanyMiB7niXDDJop435DpqOhlGEPNa6zCTRVJp2uEa9Z1fPfLVMaiyf8sJiEuqGO+rnhoMX2qkZZh1jyRXG3f2DgWtgnCvd3Nptdmg3fPKhk9ZShIq/65xC2pXPh0Mm+rTuN/X6PW1ymf3lLlwHzygUDFY+v6cM36fA5wiIButdfq2voC8J4O/LaKPgAC0yqFd4wJQxRhRtsYcEbFjICOxtyn/F+3LKwoKXtq9I9B/Hdrsq6qxtICX5DTU8q7Iyubp8oOeP1QuX0GGgbq5zo/N2JNg/27tL83rK9qPLRxKb0/QfJIs/PdeCkbl9I2Qlm0oTuPkKhD9ueZfSMrAqAal3M0qE40ElI4RIdrRaux5qqlisWM6MzaUiEs8p9IvMHHYyBAC5tMvdn1FVlHc5x1EkKitAZDqc7ATpBjOgXfnMUbfVfNu73ipraFMRLHh1yQRVwNcVjw3m/S5ylBkifAvqckoJZq0ePVXHwUMFkSoDrFHJ++nqOLsPZEVi7LJeZVFKkQ03gw/DAdQB4gBBdYH4Tx7refabUPIm1oGeAhddQ+ujAIMuKpZkTJQ9IsA3baE7k6+tfPMUg7g+PAhJSRxWuWgLciYf14+jXMe+OvfW8W7C8mUFCeGbXq9jFoiYRVHXR2FkMPKqGyYcobj+91nPGO1fnKYlN6dUdw5J0pmSqG2VCZ5J7bK7JuobVGyqHBL7nUqTPmXblr1XPqQvXV91GpaV9Z43uuMm/VS8lcNXzFbkot+R1s6cuXRkgpoREjXI0KrOo8FyMWAQAA//8JGg6sBAUAAA==

  - path: /etc/ssl/certs/etcd-client.pem.enc
    encoding: gzip+base64
    content: H4sIAAAAAAAA/wDXBCj7AQECAHgtAXNFpLmjNXHaaI4vnp9Kiu39c7e3/npF4nDh5ZaiJwAABK4wggSqBgkqhkiG9w0BBwagggSbMIIElwIBADCCBJAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMqgGl0NQOq6JNbc53AgEQgIIEYc+xRpRXbldPjRfenrc5y15CnOSMqCD7D106gJjONXH4+veet6jcXHTI//6PQ7xw2D0LI/HzxnMZbk1EQwjlfGr+NHHkViuFLPkYtbZCp6S3nNzycn7DwnPe+K80mGQu7OF5lGia9pkQ+ufpxuk/RFJmDBOXCr2RwWLn26F6Y3Da1bmjUsSDDwYlyqPWF2fXV2BG5Ir7J+Dl9gSGg3VEGz5zyj4YPlWNcLiiVx8ZtcFBQMHk5blv4wEkZyFsHTugnFgJSMKVMGSNus+vzuw7IPOhNESKhdGtOe5Fc30qFWCtCxTScr+jfDBq3EzAfwg9xNG38NakLA5I9amm73t4Umk2V16dGcvNrgNoaV8WmGp9fstVluBObpLtLSltiVkod+DeVp72+umzquNFov387EyU3KOt1ggt6x8JEXrwXz/O7wv22Q1twgQHApsph0ikPo1OlkdOU0CpKAaF5fyrMI7WKrMJIzkmIFjd2aE/PFfvkZ16MxpXDCrQPrbvj4ndSdYdhYGS1ukHO00H31eiJbs3aFlq2bbBWqIf9svZ1OuzQGIiVW/aLz2QEOytMP3/+M3EX6NbvaH8KtDqUWNXLDk23Uyay6elKUpCtlrFJf6Aj5jIvin2rjIUJWKbpEqVIuuq1WWYxYSsIf+9yPyg1XFcSaQy4Wt4KqHU0pJ7hXOXCce5B/rLGYBpdbnioEInwsBNHdZmwutz6KTRGSEVrif/7/21gaK41PipMjyeu8i9rLdc8jMC254T4FNC4CyY55WpRUCBfEvtYgr9R21OfnAl4utshQgPRNSDRcACJGKcGrPm35GEjjjdUwX4QTRUXimhY4AAw0bK3CuOORO7T+Pt9y8I19dA7la11PZk2JOcx0/9cLktV12sYFAm8tnEgjUVamIiBmFdfeM9NN3Sx+uRZbyZv7gPTAB+bSA/XHIeSHXgK3SzwRhMnROFVujfIu9boJL+eQZBq9GHQKEG05kpQfNVte48ta8s/qB0tOHP8YYNg5ziVcnB2zq5yITUj0XdA8dxYrf9C3b/CtmBGJIxi05VYug7EzmLZsUzkviOBKF0o6PhJxlpik2lDJ9fXr69bifCUIq9sMVHLvQFFK4aGq7NSRpJJUNtrfFXh5hB82UWrrLo6Wafl71LS0bzMec7EFQ8Ira8bUuXIyhfQkHjqkFcXeOZlteBBg9PvV5QJ40sfy+OwPC6ClFU+OUcbbhld8Lt1N8UoY6u9FFZ2hZlXlaj5Kzj2t02NkYLdNXb1PrO3vQhbL+0mnkaocObQDvComQk0jXIrZ/1wNItWTwt+irFruQQjcEP8S/UV34dEvBQlYJD+z6gKdTm3SCMx7PiBo5gRqs/fFo9U9Oo3JfIXcEsjzKeF+mIthdYUE1FAsZQJ+4HuCANn6xWYItDfOM8NvBhzp5sKM7ZmAS4rd2sFUVfVrmmt+JdMEF1iMDPM7mMeu+s7bxQYBJfW9w9Ku8Gn4kVQo6TsZ4U9BYKPzg0AQAA//+sLaaz1wQAAA==

  - path: /etc/ssl/certs/etcd-client-key.pem.enc
    encoding: gzip+base64
    content: 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



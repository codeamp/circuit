#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  units:
    - name: telegraf.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Teleport Monitoring Agent
        After=network-online.target
        After=etcd-member.service
        [Service]
        Restart=on-failure
        ExecStart=/bin/rkt run \
          --stage1-name=coreos.com/rkt/stage1-fly:1.26.0 \
          --set-env TELEGRAF_GLOBAL_TAGS_CLUSTER=production \
          --set-env TELEGRAF_GLOBAL_TAGS_SERVICE=etcd \
          --set-env HOST_ETC=/etc2 \
          --interactive \
          --volume=varlibetcd2,kind=host,source=/var/lib/etcd2 \
          --volume=etc,kind=host,source=/etc \
          --mount volume=etc,target=/etc2 \
          --mount volume=varlibetcd2,target=/var/lib/etcd2 \
          --hostname=%H \
          --dns=host \
          --net=host \
          --insecure-options=image,ondisk \
          docker://checkr/checkr-telegraf-kapacitor:latest \
          --exec /usr/bin/telegraf -- --config /etc/generic.system.telegraf.conf
    - name: cfn-etcd-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Configures EBS volume and R53 record set for this node and derives env vars for etcd bootstrap
        After=network-online.target
        Before=format-etcd2-volume.service

        [Service]
        EnvironmentFile=/var/run/coreos/etcd-node.env
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/opt/bin/cfn-etcd-environment
        ExecStartPre=/usr/bin/mv -f /var/run/coreos/etcd-environment /etc/etcd-environment
        ExecStart=/bin/true
        TimeoutStartSec=120

        [Install]
        RequiredBy=format-etcd2-volume.service


    - name: etcdadm-reconfigure.service
      enable: true
      content: |
        [Unit]
        Description=etcdadm reconfigure runner
        BindsTo=etcd-member.service
        Before=etcd-member.service
        Wants=cfn-etcd-environment.service
        After=cfn-etcd-environment.service
        After=network.target

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        RestartSec=5
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
        ExecStartPre=/usr/bin/mkdir -p /var/run/coreos/etcdadm/snapshots
        ExecStart=/opt/bin/etcdadm reconfigure
        ExecStartPost=/usr/bin/systemctl start etcdadm-check.timer
        TimeoutStartSec=120

        [Install]
        WantedBy=cfn-etcd-environment.service

    - name: etcdadm-update-status.service
      enable: true
      content: |
        [Unit]
        Description=etcdadm update status
        BindsTo=etcd-member.service
        After=etcd-member.service
        After=network.target

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        RestartSec=5
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStart=/opt/bin/etcdadm member_status_set_started
        ExecStartPost=/usr/bin/systemctl start etcdadm-save.timer
        TimeoutStartSec=120

    - name: etcdadm-check.service
      enable: true
      content: |
        [Unit]
        Description=etcd health check

        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStartPre=/usr/bin/systemctl is-active etcd-member.service
        ExecStart=/opt/bin/etcdadm check
        TimeoutStartSec=120

    - name: etcdadm-check.timer
      enable: true
      content: |
        [Unit]
        Description=periodic etcd health check

        [Timer]
        OnBootSec=120sec
        # Actual interval would be OnUnitInactiveSec+0~AccuracySec=10+0~5 sec
        OnUnitInactiveSec=10sec
        AccuracySec=5sec

        [Install]
        WantedBy=timers.target

    - name: etcdadm-save.service
      enable: true
      content: |
        [Unit]
        Description=etcd snapshot

        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/var/run/coreos/etcdadm-environment
        ExecStartPre=/usr/bin/systemctl is-active etcd-member.service
        ExecStart=/opt/bin/etcdadm save
        TimeoutStartSec=300

    - name: etcdadm-save.timer
      enable: true
      content: |
        [Unit]
        Description=periodic etcd snapshot

        [Timer]
        OnBootSec=120sec
        # Actual interval would be 60+0~5 sec
        OnUnitInactiveSec=60sec
        AccuracySec=5sec

        [Install]
        WantedBy=timers.target

    - name: etcd-member.service
      drop-ins:
        - name: 20-aws-cluster.conf
          content: |
            [Unit]
            Wants=cfn-etcd-environment.service
            After=cfn-etcd-environment.service
            Wants=decrypt-assets.service
            After=decrypt-assets.service
            
            BindsTo=etcdadm-reconfigure.service etcdadm-update-status.service
            After=etcdadm-reconfigure.service
            Before=etcdadm-update-status.service
            [Service]
            EnvironmentFile=-/etc/etcd-environment

            PermissionsStartOnly=true
            ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
            ExecStartPre=/usr/bin/systemctl is-active decrypt-assets.service
            ExecStartPre=/usr/bin/chown -R etcd:etcd /var/lib/etcd2
        
        - name: 40-version.conf
          content: |
            [Service]
            Environment="ETCD_IMAGE_TAG=v3.2.7"
        
      enable: true
      command: start

    - name: var-lib-etcd2.mount
      enable: true
      content: |
        [Unit]
        Before=etcd-member.service

        [Mount]
        What=/dev/xvdf
        Where=/var/lib/etcd2
        Type=ext4

        [Install]
        RequiredBy=etcd-member.service

    - name: format-etcd2-volume.service
      enable: true
      content: |
        [Unit]
        Description=Formats etcd2 ebs volume
        After=dev-xvdf.device
        Requires=dev-xvdf.device
        Before=var-lib-etcd2.mount

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/ext4-format-volume-once /dev/xvdf

        [Install]
        RequiredBy=var-lib-etcd2.mount


    - name: decrypt-assets.service
      enable: true
      content: |
        [Unit]
        Description=decrypt etcd2 tls assets using amazon kms
        Before=etcd-member.service

        [Service]
        Restart=on-failure
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/rkt run \
          --uuid-file-save=/var/run/coreos/decrypt-assets.uuid \
          --volume=ssl,kind=host,source=/etc/ssl/certs,readOnly=false \
          --mount=volume=ssl,target=/etc/ssl/certs \
          --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
          --mount volume=dns,target=/etc/resolv.conf \
          --net=host \
          --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
            -ec \
            'echo decrypting tls assets; \
             shopt -s nullglob; \
             for encKey in /etc/ssl/certs/*.pem.enc; do \
             echo decrypting $encKey; \
             /usr/bin/aws \
               --region us-east-1 kms decrypt \
               --ciphertext-blob fileb://$encKey \
               --output text \
               --query Plaintext \
             | base64 -d > $${encKey%.enc}; \
             done; \
             echo done.'
        ExecStart=-/usr/bin/rkt rm --uuid-file=/var/run/coreos/decrypt-assets.uuid

        [Install]
        RequiredBy=etcd-member.service



    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Wants=etcd-member.service
        After=etcd-member.service

        [Service]
        Type=simple
        Restart=on-failure
        RestartSec=10

        EnvironmentFile=/var/run/coreos/etcd-node.env
        ExecStartPre=/usr/bin/systemctl is-active etcd-member.service
        ExecStartPre=/usr/bin/rkt fetch quay.io/coreos/awscli:master
        ExecStart=-/opt/bin/cfn-signal




write_files:
  - path: /etc/rkt/auth.d/docker.json
    permissions: 0600
    encoding: gzip+base64
    content: H4sIAAAAAAAA/6pWUCrKLvHOzEtRslJQSslPzk4tciwtyVDSAUuEpRYVZ+bngeTKDMFiqemZxSVFmanFSlYK0TBupa6hHkSvXma+UqyOglJyUWpKal5JZmIOSGG1glJpcWoRyJjk/JTUtJz88oKi/BSQgQWJxcXl+UVg60NLjaKcSqOS3EJDjDN8080CTAtylBRqa7kAAQAA//+faTbrpgAAAA==

  - path: /opt/bin/cfn-init-etcd-server
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      cfn-init -v -c "etcd-server" --region us-east-1 --resource Etcd$KUBE_AWS_ETCD_INDEX --stack $KUBE_AWS_STACK_NAME

  - path: /opt/bin/attach-etcd-volume
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      # To omit the `--region us-east-1` flag for every aws-cli invocation
      export AWS_DEFAULT_REGION=us-east-1

      instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
      az=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)

      # values shared between cloud-config-etcd and stack-template.json
      stack_name=$KUBE_AWS_STACK_NAME
      name_tag_key="kube-aws:etcd:name"
      advertised_hostname_tag_key="kube-aws:etcd:advertised-hostname"
      eip_allocation_id_tag_key="kube-aws:etcd:eip-allocation-id"
      network_interface_id_tag_key="kube-aws:etcd:network-interface-id"

      etcd_index=$KUBE_AWS_ETCD_INDEX

      state_prefix=/var/run/coreos/etcd-volume
      output_prefix=/var/run/coreos/
      common_volume_filter="Name=tag:aws:cloudformation:stack-name,Values=$stack_name Name=tag:kube-aws:etcd:index,Values=$etcd_index"

      export $(cat /var/run/coreos/etcd-environment | grep -v ^# | xargs)

      export | grep ETCD

      # TODO: Locate the corresponding EBS volume via a tag on the ASG managing this EC2 instance
      # See https://github.com/coreos/kube-aws/pull/332#issuecomment-281531769

      # Skip the `while` block below when the EBS volume is already attached to this EC2 instance
      aws ec2 describe-volumes \
        --filters $common_volume_filter Name=attachment.instance-id,Values=$instance_id \
        | jq -r '([] + .Volumes)[0]' \
        > ${state_prefix}.json

      attached_vol_id=$(
        cat ${state_prefix}.json \
          | jq -r '"" + .VolumeId'
      )

      # Decide which volume to attach hence hostname to assume
      while [ "$attached_vol_id" = "" ]; do
        sleep 3

        aws ec2 describe-volumes \
          --filters $common_volume_filter Name=status,Values=available Name=availability-zone,Values=$az \
          > ${state_prefix}-candidates.json

        cat ${state_prefix}-candidates.json \
          | jq -r '([] + .Volumes)[0]' \
          > ${state_prefix}.json

        candidate_vol_id=$(
          cat ${state_prefix}.json \
            | jq -r '"" + .VolumeId'
        )

        if [ "$candidate_vol_id" = "" ]; then
          echo "[bug] no etcd volume found" 1>&2
          exit 1
        fi

        # See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html for device naming
        if aws ec2 attach-volume --volume-id $candidate_vol_id --instance-id $instance_id --device "/dev/xvdf"; then
          attached_vol_id=$candidate_vol_id
        fi
      done

      # Wait until the volume attachment completes
      until [ "$volume_status" = ok ]; do
        sleep 3
        describe_volume_status_result=$(aws ec2 describe-volume-status --volume-id $attached_vol_id)
        volume_status=$(echo "$describe_volume_status_result" | jq -r "([] + .VolumeStatuses)[0].VolumeStatus.Status")
      done

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$name_tag_key\").Value" \
        > ${output_prefix}name

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$advertised_hostname_tag_key\").Value" \
        > ${output_prefix}advertised-hostname

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$eip_allocation_id_tag_key\").Value" \
        > ${output_prefix}eip-allocation-id

      cat ${state_prefix}.json \
        | jq -r "([] + .Tags)[] | select(.Key == \"$network_interface_id_tag_key\").Value" \
        > ${output_prefix}network-interface-id

  

  - path: /opt/bin/assume-advertised-hostname-with-eip
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      # To omit the `--region us-east-1` flag for every aws-cli invocation
      export AWS_DEFAULT_REGION=us-east-1

      instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
      eip_alloc_id=$1

      aws ec2 associate-address --instance-id $instance_id --allocation-id $eip_alloc_id

      curl http://169.254.169.254/latest/meta-data/public-hostname

      curl http://169.254.169.254/latest/meta-data/local-ipv4 > /var/run/coreos/listen-private-ip

  - path: /opt/bin/append-etcd-server-env
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -vxe

      private_ip=$(cat /var/run/coreos/listen-private-ip)
      name=$(cat /var/run/coreos/name)
      advertised_hostname=$(cat /var/run/coreos/advertised-hostname)

      echo "KUBE_AWS_ASSUMED_HOSTNAME=$advertised_hostname
      ETCD_NAME=$name
      ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd-trusted-ca.pem
      ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd.pem
      ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd-key.pem

      ETCD_CLIENT_CERT_AUTH=true
      ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd-trusted-ca.pem
      ETCD_CERT_FILE=/etc/ssl/certs/etcd.pem
      ETCD_KEY_FILE=/etc/ssl/certs/etcd-key.pem

      ETCD_INITIAL_CLUSTER_STATE=new
      ETCD_DATA_DIR=/var/lib/etcd2
      ETCD_LISTEN_CLIENT_URLS=https://$private_ip:2379
      ETCD_ADVERTISE_CLIENT_URLS=https://$advertised_hostname:2379
      ETCD_LISTEN_PEER_URLS=https://$private_ip:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS=https://$advertised_hostname:2380" >> /var/run/coreos/etcd-environment

  - path: /opt/bin/cfn-etcd-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      run() {
        rkt run \
           --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
           --mount volume=dns,target=/etc/resolv.conf \
           --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
           --mount volume=awsenv,target=/var/run/coreos \
           --volume=optbin,kind=host,source=/opt/bin,readOnly=false \
           --mount volume=optbin,target=/opt/bin \
           --uuid-file-save=/var/run/coreos/$1.uuid \
           --set-env=KUBE_AWS_STACK_NAME=$KUBE_AWS_STACK_NAME \
           --set-env=KUBE_AWS_ETCD_INDEX=$KUBE_AWS_ETCD_INDEX \
           --net=host \
           --trust-keys-from-https \
           quay.io/coreos/awscli:master --exec=/opt/bin/$1 -- $2

           rkt rm --uuid-file=/var/run/coreos/$1.uuid || :
        }

      run cfn-init-etcd-server
      run attach-etcd-volume

      eip_allocation_id=$(cat /var/run/coreos/eip-allocation-id)
      network_interface_id=$(cat /var/run/coreos/network-interface-id)
      if [ "$eip_allocation_id" != "" ]; then
        run assume-advertised-hostname-with-eip $eip_allocation_id
      elif [ "$network_interface_id" != "" ]; then
        run assume-advertised-hostname-with-eni $network_interface_id
        /opt/bin/reconfigure-ip-routing
      else
        echo '[bug] neither eip_allocation_id nor network_interface_id for this node found'
      fi

      run append-etcd-server-env

      /usr/bin/sed -i "s/^ETCDCTL_ENDPOINT.*$/ETCDCTL_ENDPOINT=https:\/\/$(cat /var/run/coreos/advertised-hostname):2379/" /etc/environment

  - path: /opt/bin/etcdadm
    permissions: 0755
    encoding: gzip+base64
    content: 

  - path: /etc/environment
    permissions: 0644
    content: |
      COREOS_PUBLIC_IPV4=$public_ipv4
      COREOS_PRIVATE_IPV4=$private_ipv4
      ETCDCTL_CA_FILE=/etc/ssl/certs/etcd-trusted-ca.pem
      ETCDCTL_CERT_FILE=/etc/ssl/certs/etcd-client.pem
      ETCDCTL_KEY_FILE=/etc/ssl/certs/etcd-client-key.pem
      ETCDCTL_ENDPOINT=

  - path: /opt/bin/ext4-format-volume-once
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash -e
      if [[ "$(wipefs -n -p $1 | grep ext4)" == "" ]];then
        mkfs.ext4 $1
      else
        echo "volume $1 is already formatted"
      fi


  - path: /opt/bin/cfn-signal
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-signal.uuid \
        --set-env=KUBE_AWS_STACK_NAME=$KUBE_AWS_STACK_NAME \
        --set-env=KUBE_AWS_ETCD_INDEX=$KUBE_AWS_ETCD_INDEX \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -vxec \
          '
           cfn-signal -e 0 --region us-east-1 --resource Etcd$KUBE_AWS_ETCD_INDEX --stack $KUBE_AWS_STACK_NAME
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-signal.uuid || :




  - path: /etc/ssl/certs/etcd-trusted-ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUyc6rxhaF5zzFnVtXwG9MMziDKigaQwGF6Wc22PRgGzDN00fHURIpqeGnktaWvrX3/38/iDTD/p+MPN9QDRn46EspbBgyr8gyyOUCLAYEhQGBAmxYNK+yqTRpYSAgowoU0GIPLcqSKCEhJlrKdx6dW8qK1GO2I4IBpwE2QGDF+vUYVumFrRMf3NWFWe0dnLCPNqxgDu/pVV2Y7cuUZqP+glgOVuQDFxZ2CMHgy9rEJl0wJXG+Yw8sSvFNVtCSf5OtyC6xYUDKqP89LlIBcGRARPD7g1yYMiAIzGXMTdIgj6nzmVnhgxKuLpLRoe5zIIg3r2rGuGEey8Ktzp2rt/69g909bBmsBP5y45XX6dIxsyUF3q29KOvuMut2ds+Yog8kXAmz3bJTyOnFPWRxSStdVdiNBMHcWPeQqY709fZeieVf1cJ8BiPDGxo9KJ9XzlCLeL06T8fZWYmea0X0juwpHcTQ53TkapsAOs5rE92oNu+xj1emli0/La+Jq8W9dUAZtRVNKOEfnKLIzqowlHu5rE5OrTnV+XmA8YlZa2PkJlFiTcPXNbSU+9NR7iS/BT8fWqCesKXZoR/WNu1KeeffJznxpIig4/kQrTBHdKy5XgZvhpCbvN7tTJmxbtmLn8tHIIZCAQLgsOHF8IHzW6FORAgeIoIAy+BF/iyOx/iA6DQEwQIWBOn9H3PU3037qkNA55xMzwM67tLyJOVkPR9LiHqYRfwx3Tu+qPTwPsaNEklbIzsDxSV4aoj5QuuR6Sfs+SqY3aA3Do9D4g+hPZhZHbSu5k9l+Eme7DQnXZgKHs8+Db2qWmr/wbvaJm33eJcClynDspPIvbnRkQ0Z18VenIWvNDncgcr8HAXVGevLwA+9/QgWwPkslVuu6ZJCv3dpJHCxDtaybKU+4zoR0YzF8IvYqwSWmiVIdXM4v9t0/ZlO8ltHEveynxQtTTPt+/zGny46+xHfFn4nhzenb36sHdM9QOK2t5eUTSy52LM6Gj27YssajbaR65+Ooqe4NMkcurrISeGjQNFiPsqwQt0cC3sOxNnskuLXL+q7/chW/nsR/ggAAP//YTfvEi4EAAA=

  - path: /etc/ssl/certs/etcd-key.pem.enc
    encoding: gzip+base64
    content: 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

  - path: /etc/ssl/certs/etcd.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUu9KyShqFc65icmpKOQkEO+iGFhpsEDkoZApIcxYVG7n6qe/7/6oJ9huuJ1jB89b6789BZGHvPwY6RXiPDRCh35QjGJvWahig8ivAMAQVxmA4hhOOJkvTmBmkjjtmmH5yDwToAAPAnAidCNAsIMSIMyjBVymps1CghUQWZAIfVl4CAYmg+BbSPn6nImI2zT0S5cyP0EIasPomEc809zgStcw38fZvKJ0bMJATYiZLzSQIXMToszg73eG8l/IVhQSC32awEOenmMtCoSssryUYQ9wAD1btRNva0tkWggDtAfANEGjghxuVa4AAgWk4vcmiz8jdGlyxWXt3hqMbK8maqNZXFQpz6R/17cTv6nAJXHK63vIbCJPVK7N4yNQRMabN8vjkJ0/mKFtRfzk9aBRs6EvfX+roxT9nKFwjKmdqXtHItkWmvOJBSlOqT8GB17Zgs5i8tfHlE3d/PzZa1a21PlQh3Fd50khq3ffmZ1NoLOwOx7f/8OeGYNb07T1sk/mBZ54PWnoUoRhz+xbD6CiTaCGsU7T6aUU+btQdvUK+x3L/bqDb0+x4PSils8cHqHSyTsqtkFHJUvMLtz3nPD73tw897+7t973sqj5p7DHOtY6q0rQ8iQyip+tPU0na+LWm0u6lhum8n/L04XUc8NMVOFZ9ZdgEAYDjdsvC9c8v2IEGwV1DEBADXgFDP2pP2w4CxowqxS5LIQeD2P5BDviFJwi3zJJx5tZKcxMFVlxO3SFCc3oWaNnrc3op1kPvfW7RH+Xc/52//jpHwG8eKdnZen3+znS6KckM+CcvjBt5oN85915FHheJw4uH9Mt95NO3hGazfaQxqxApDMvbRrt3pXhNPBzFpfwKhDmSXTcbsVn68zDhUVf0722L+RstOeXNQpUq+caRPZgoJQzPwtH5Oiu9H0gSb0QzXdvNN92QKe2xfawb/yl/h+RyveDJMz3uSuxcXFKhtLVLkEUmeg/ezGTFd79T6jj3TmkUYWk3wr1YlnUXSn79uJSx3Suf8qUZiBtUqb7wpZFp4XTFawPFAqjmJNtX4MPi6d98j0/5wLmId0OUMjOE7aDrK3ILWVTHO+DGGHYfeowjvs/2SiPAZByTlmVad3Hd9ak7fmW3neiNwT//cL8Tgjzz37PyvwAAAP//tcp1HnMEAAA=

  - path: /etc/ssl/certs/etcd-client.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUybKySBCF9zxF740OlMFhWROTFFAyCTsEboGKAgKlPn3H/aNX3bk8ufgy40R8f/8OJKbt/YXIKbING4GI/EklattIxgiBOuRA2BBw26YHqwR2j0jOBGaZc3zmdrOUHmDEhQwIJyInCvYm2MREQg21CzVp83DTVCp9Ewx8yL0EAhpBZdpkXTxlChFWU3o0KoUfkTe9gq+PqZI2pSfR6CZ8bK//DdX0CmZ6IgKLDCeMHYloxip17m5qqOWX5BSWf8jgTdkvWMrDzb0yvZubeq8iTebq953Q/u/pEDKAOScB+N2zJ+KcQOA1T2mEvqOmsuvQcTcOpyFkp2b9Qs/JCuyp7NfOVmdNbhXGfJHvMsTdIEfXbGkXtlq3N62WjE/ZH2HA+UHVND2BnsWtxB9K1eJjcgfg3e7neF3N6+78jlfbH2+Rs/kYBVqqdIQstXQ9It34WkgAvA+9TUmOfXe3IuGrM1G6xv9oUaeOtVkdt2r7UNX5leWjC2HuXYLdAjypo/Jx88RdYO4f3uf7s9NDfOoBd392gUzbFCaxgr53cJbRwV5l1vbhlLW3xK4M6suErxK0bTIx49IaeNhyMObMeihudBomb4bzrv0EXHv5jtMMJ3Q4bsFby89pHH9CZ94nVb2TNNB3vkjuh02wyQv7Q5s1AoIAUNAHRbHAPMPJaR0AZskQMAx4yimkv1VWDmNUouBpIvQyAYsNKCiiYG2icDBD+6JiRiASMQCaDQFDkeXc0h1O66p8yMmgzsus6VIY9tMuiQ8xV0Bz077NS1k5cv5CL6A+brfO1S3ty68+bOX0+/V5KVw/PHTiDFbabt8DyXAKJ68beQZ+QV47rqd1dUNm1HhVncIKYCV/Nlz0c7XnPwOsp2oTbPPNTyKeavA9O9J1SXVtzQy3xQs2q9FWx8jB34v6dIs3FsakN6UeXpvWPbgDOP58fLEBie/tzYvYXZVBgnmdIv1WqGQd9v3KWvQMu0fnaZ4fvahf50ZniYYLb+rv4szq6LZ8lKzdPujdOvGnm0rWuYSoVoyxyj51Ygd4tc2LfiCXaCireUuz7j236ag71m2+FLvp/hhP2Tm8fHqD1I4ZSH+sQDz8f1P8EwAA///4XGfFRgQAAA==

  - path: /etc/ssl/certs/etcd-client-key.pem.enc
    encoding: gzip+base64
    content: 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




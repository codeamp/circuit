#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  flannel:
    interface: $private_ipv4
    etcd_cafile: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    etcd_certfile: /etc/kubernetes/ssl/etcd-client.pem
    etcd_keyfile: /etc/kubernetes/ssl/etcd-client-key.pem

  units:
    - name: telegraf.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Teleport Monitoring Agent
        After=network-online.target
        After=etcd-member.service
        [Service]
        Restart=on-failure
        ExecStart=/bin/rkt run \
          --stage1-name=coreos.com/rkt/stage1-fly:1.26.0 \
          --set-env TELEGRAF_GLOBAL_TAGS_CLUSTER=production \
          --set-env TELEGRAF_GLOBAL_TAGS_SERVICE=controller \
          --set-env HOST_ETC=/etc2 \
          --interactive \
          --volume=varlibetcd2,kind=host,source=/var/lib/etcd2 \
          --volume=etc,kind=host,source=/etc \
          --mount volume=etc,target=/etc2 \
          --mount volume=varlibetcd2,target=/var/lib/etcd2 \
          --hostname=%H \
          --dns=host \
          --net=host \
          --insecure-options=image,ondisk \
          docker://checkr/checkr-telegraf-kapacitor:latest \
          --exec /usr/bin/telegraf -- --config /etc/generic.system.telegraf.conf
        
    - name: docker-healthcheck.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Run docker-healthcheck once
        After=docker.service
        
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/docker-healthcheck
        
        [Install]
        WantedBy=multi-user.target
        
    - name: docker-healthcheck.timer
      command: start
      enable: true
      content: |
        [Unit]
        Description=Trigger docker-healthcheck periodically
        After=docker.service
        
        [Timer]
        OnUnitInactiveSec=30s
        Unit=docker-healthcheck.service
        
        [Install]
        WantedBy=multi-user.target
        


    - name: cfn-etcd-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Fetches etcd static IP addresses list from CF
        After=network-online.target

        [Service]
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/opt/bin/cfn-etcd-environment
        ExecStart=/usr/bin/mv -f /var/run/coreos/etcd-environment /etc/etcd-environment


    - name: docker.service
      drop-ins:

        - name: 10-post-start-check.conf
          content: |
            [Service]
            RestartSec=10
            ExecStartPost=/usr/bin/docker pull gcr.io/google_containers/pause-amd64:3.0

        - name: 40-flannel.conf
          content: |
            [Unit]
            Wants=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
            ExecStartPre=/usr/bin/systemctl is-active flanneld.service

        - name: 60-logfilelimit.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--log-opt max-size=50m --log-opt max-file=3"

    - name: flanneld.service
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Unit]
            Wants=cfn-etcd-environment.service
            After=cfn-etcd-environment.service

            [Service]
            EnvironmentFile=-/etc/etcd-environment
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            EnvironmentFile=-/run/flannel/etcd-endpoints.opts
            ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
            ExecStartPre=/bin/sh -ec "echo FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS} >/run/flannel/etcd-endpoints.opts"
            ExecStartPre=/opt/bin/decrypt-assets
            ExecStartPre=/usr/bin/etcdctl \
            --ca-file=/etc/kubernetes/ssl/etcd-trusted-ca.pem \
            --cert-file=/etc/kubernetes/ssl/etcd-client.pem \
            --key-file=/etc/kubernetes/ssl/etcd-client-key.pem \
            --endpoints="${ETCD_ENDPOINTS}" \
            set /coreos.com/network/config '{"Network" : "10.2.0.0/16", "Backend" : {"Type" : "vxlan"}}'
            TimeoutStartSec=120


    - name: kubelet.service
      command: start
      runtime: true
      content: |
        [Unit]
        Wants=flanneld.service cfn-etcd-environment.service
        After=cfn-etcd-environment.service
        [Service]
        # EnvironmentFile=/etc/environment allows the reading of COREOS_PRIVATE_IPV4
        EnvironmentFile=/etc/environment
        EnvironmentFile=-/etc/etcd-environment
        Environment=KUBELET_IMAGE_TAG=v1.7.5_coreos.0
        Environment=KUBELET_IMAGE_URL=quay.io/coreos/hyperkube
        Environment="RKT_RUN_ARGS=--volume dns,kind=host,source=/etc/resolv.conf \
        --set-env=ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd-trusted-ca.pem \
        --set-env=ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd-client.pem \
        --set-env=ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd-client-key.pem \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume var-lib-cni,kind=host,source=/var/lib/cni \
        --mount volume=var-lib-cni,target=/var/lib/cni \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log \
        --volume cni-bin,kind=host,source=/opt/cni/bin \
        --mount volume=cni-bin,target=/opt/cni/bin \
        --volume etc-kubernetes,kind=host,source=/etc/kubernetes \
        --mount volume=etc-kubernetes,target=/etc/kubernetes"
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/usr/bin/etcdctl \
                       --ca-file /etc/kubernetes/ssl/etcd-trusted-ca.pem \
                       --key-file /etc/kubernetes/ssl/etcd-client-key.pem \
                       --cert-file /etc/kubernetes/ssl/etcd-client.pem \
                       --endpoints "${ETCD_ENDPOINTS}" \
                       cluster-health

        ExecStartPre=/bin/sh -ec "find /etc/kubernetes/manifests /srv/kubernetes/manifests  -maxdepth 1 -type f | xargs --no-run-if-empty sed -i 's|#ETCD_ENDPOINTS#|${ETCD_ENDPOINTS}|'"
        ExecStartPre=/bin/sh -ec "find /etc/kubernetes/cni/net.d/ -maxdepth 1 -type f | xargs --no-run-if-empty sed -i 's|#ETCD_ENDPOINTS#|${ETCD_ENDPOINTS}|'"
        ExecStartPre=/usr/bin/docker run --rm -e SLEEP=false -e KUBERNETES_SERVICE_HOST= -e KUBERNETES_SERVICE_PORT= -v /opt/cni/bin:/host/opt/cni/bin quay.io/calico/cni:v1.10.0 /install-cni.sh
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --kubeconfig=/etc/kubernetes/controller-kubeconfig.yaml \
        --require-kubeconfig \
        --cni-conf-dir=/etc/kubernetes/cni/net.d \
        --cni-bin-dir=/opt/cni/bin \
        --network-plugin=cni \
        --container-runtime=docker \
        --rkt-path=/usr/bin/rkt \
        --rkt-stage1-image=coreos.com/rkt/stage1-coreos \
        --node-labels node-role.kubernetes.io/master \
        --register-with-taints=node.alpha.kubernetes.io/role=master:NoSchedule \
        --allow-privileged=true \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --cluster-dns=10.3.0.10 \
        --cluster-domain=cluster.local \
        --cloud-provider=aws \
        $KUBELET_OPTS
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target



    - name: install-kube-system.service
      command: start
      runtime: true
      content: |
        [Unit]
        Wants=kubelet.service docker.service

        [Service]
        Type=oneshot
        StartLimitInterval=0
        RemainAfterExit=true
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/systemctl is-active kubelet.service; do echo waiting until kubelet starts; sleep 10; done"
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/systemctl is-active docker.service; do echo waiting until docker starts; sleep 10; done"
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/curl -s -f http://127.0.0.1:8080/version; do echo waiting until apiserver starts; sleep 10; done"
        ExecStart=/opt/bin/retry 3 /opt/bin/install-kube-system

    - name: apply-kube-aws-plugins.service
      command: start
      runtime: true
      content: |
        [Unit]
        Requires=install-kube-system.service
        After=install-kube-system.service

        [Service]
        Type=oneshot
        StartLimitInterval=0
        RemainAfterExit=true
        ExecStart=/opt/bin/retry 3 /opt/bin/apply-kube-aws-plugins



    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Wants=kubelet.service docker.service install-kube-system.service apply-kube-aws-plugins.service
        After=kubelet.service install-kube-system.service apply-kube-aws-plugins.service

        [Service]
        Type=simple
        Restart=on-failure
        RestartSec=60
        StartLimitInterval=640
        StartLimitBurst=10
        ExecStartPre=/usr/bin/systemctl is-active install-kube-system.service
        ExecStartPre=/usr/bin/systemctl is-active apply-kube-aws-plugins.service
        ExecStartPre=/usr/bin/bash -c "while sleep 1; do if /usr/bin/curl -s -m 20 -f  http://127.0.0.1:8080/healthz > /dev/null &&  /usr/bin/curl -s -m 20 -f  http://127.0.0.1:10252/healthz > /dev/null && /usr/bin/curl -s -m 20 -f  http://127.0.0.1:10251/healthz > /dev/null &&  /usr/bin/curl --insecure -s -m 20 -f  https://127.0.0.1:10250/healthz > /dev/null ; then break ; fi;  done"
        
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/docker run --net=host --pid=host --rm calico/ctl:v1.5.0 node status > /dev/null; do sleep 3; done && echo Calico running"
        
        ExecStart=/opt/bin/cfn-signal









write_files:
  - path: /etc/rkt/auth.d/docker.json
    permissions: 0600
    encoding: gzip+base64
    content: H4sIAAAAAAAA/6pWUCrKLvHOzEtRslJQSslPzk4tciwtyVDSAUuEpRYVZ+bngeTKDMFiqemZxSVFmanFSlYK0TBupa6hHkSvXma+UqyOglJyUWpKal5JZmIOSGG1glJpcWoRyJjk/JTUtJz88oKi/BSQgQWJxcXl+UVg60NLjaKcSqOS3EJDjDN8080CTAtylBRqa7kAAQAA//+faTbrpgAAAA==
  - path: /opt/bin/docker-healthcheck
    permissions: 0700
    encoding: gzip+base64
    content: H4sIAAAAAAAA/7yRMW7rMBBEe55ivv4BpMCAGwNpc4TUFDmiFqFJY7lWktsHEiTETYo0aQeLh/fI///6UUo/+jY7JxNMrqx3w9OAWMMbFbeGZ/SRS1/uOV9gM4vjhxgGN4lzDHNFtx9PXjJjt48vskhJB+g0oDHUEhuS+kCMnKoSymZeTUrqXMvkDafhVy6PAspQF+rm8INjM8kZsb6XC0wlJeqD5W7TufbZjNdg+ZgQajEvhRr34wP86mXVx/m70CqSLDyoa8q6Hewt8/wHmeuHbC/7FQAA//+efA6i6QEAAA==


  - path: /etc/kubernetes/additional-configs/cloud.config
    owner: root:root
    permissions: 0644
    content: |
      [global]
      DisableSecurityGroupIngress = true


  - path: /opt/bin/apply-kube-aws-plugins
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash -vxe

      kubectl() {
          /usr/bin/docker run --rm --net=host \
            -v /etc/resolv.conf:/etc/resolv.conf \
            -v /srv/kube-aws/plugins:/srv/kube-aws/plugins \
            quay.io/coreos/hyperkube:v1.7.5_coreos.0 /hyperkube kubectl "$@"
      }

      helm() {
          /usr/bin/docker run --rm --net=host \
            -v /etc/resolv.conf:/etc/resolv.conf \
            -v /srv/kube-aws/plugins:/srv/kube-aws/plugins \
            quay.io/kube-aws/helm:v2.6.0 helm "$@"
      }

      while read m || [[ -n $m ]]; do
        kubectl apply -f $m
      done </srv/kube-aws/plugins/kubernetes-manifests

      while read r || [[ -n $r ]]; do
        release_name=$(jq .name $r)
        chart_name=$(jq .chart.name $r)
        chart_version=$(jq .chart.version $r)
        values_file=$(jq .values.file $r)
        if helm status $release_name; then
          helm upgrade $release_name $chart_name --version $chart_version -f $values_file
        else
          helm install $release_name $chart_name --version $chart_version -f $values_file
        fi
      done </srv/kube-aws/plugins/helm-releases



  - path: /opt/bin/cfn-signal
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-signal.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          'instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
           stack_name=$(
             aws ec2 describe-tags --region us-east-1 --filters \
               "Name=resource-id,Values=$instance_id" \
               "Name=key,Values=aws:cloudformation:stack-name" \
               --output json \
             | jq -r ".Tags[].Value"
           )
           cfn-signal -e 0 --region us-east-1 --resource Controllers --stack $stack_name
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-signal.uuid || :

  - path: /opt/bin/cfn-etcd-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-etcd-environment.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          'instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
           stack_name=$(
             aws ec2 describe-tags --region us-east-1 --filters \
               "Name=resource-id,Values=$instance_id" \
               "Name=key,Values=aws:cloudformation:stack-name" \
               --output json \
             | jq -r ".Tags[].Value"
           )
           cfn-init -v -c "etcd-client" --region us-east-1 --resource Controllers --stack $stack_name
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-etcd-environment.uuid || :

  - path: /etc/default/kubelet
    permissions: 0755
    owner: root:root
    content: |
      KUBELET_OPTS=""

  - path: /opt/bin/install-kube-system
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash -e

      kubectl() {
          /usr/bin/docker run --rm --net=host -v /srv/kubernetes:/srv/kubernetes quay.io/coreos/hyperkube:v1.7.5_coreos.0 /hyperkube kubectl "$@"
      }

      while ! kubectl get ns kube-system; do
        echo Waiting until kube-system created.
        sleep 3
      done

      mfdir=/srv/kubernetes/manifests

      
      /bin/bash /opt/bin/populate-tls-calico-etcd
      kubectl apply -f "${mfdir}/calico.yaml"
      

      

      # Configmaps
      kubectl apply -f "${mfdir}/kube-dns-cm.yaml"

      # Service Accounts
      for manifest in {kube-dns,heapster}; do
          kubectl apply -f "${mfdir}/$manifest-sa.yaml"
      done

      # Install tiller by default
      kubectl apply -f "${mfdir}/tiller.yaml"



      # Deployments
      for manifest in {kube-dns,kube-dns-autoscaler,kube-dashboard,heapster}; do
          kubectl apply -f "${mfdir}/$manifest-de.yaml"
      done

      # Services
      for manifest in {kube-dns,heapster,kube-dashboard}; do
          kubectl apply -f "${mfdir}/$manifest-svc.yaml"
      done

      mfdir=/srv/kubernetes/rbac

      # Cluster roles and bindings
      for manifest in {node-extensions,}; do
          kubectl apply -f "${mfdir}/cluster-roles/$manifest.yaml"
      done
      for manifest in {kube-admin,system-worker,node,node-proxier,node-extensions,heapster}; do
          kubectl apply -f "${mfdir}/cluster-role-bindings/$manifest.yaml"
      done

      # Roles and bindings
      for manifest in {pod-nanny,}; do
          kubectl apply -f "${mfdir}/roles/$manifest.yaml"
      done
      for manifest in {heapster-nanny,}; do
          kubectl apply -f "${mfdir}/role-bindings/$manifest.yaml"
      done

      

      
        mfdir=/srv/kubernetes/manifests
        kubectl apply -f "${mfdir}/kube2iam-rbac.yaml"
        kubectl apply -f "${mfdir}/kube2iam-ds.yaml";
      

  - path: /etc/kubernetes/cni/docker_opts_cni.env
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""

  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      # This is bind mounted into the kubelet rootfs and all rkt shell-outs go
      # through this rkt wrapper. It essentially enters the host mount namespace
      # (which it is already in) only for the purpose of breaking out of the chroot
      # before calling rkt. It makes things like rkt gc work and avoids bind mounting
      # in certain rkt filesystem dependancies into the kubelet rootfs. This can
      # eventually be obviated when the write-api stuff gets upstream and rkt gc is
      # through the api-server. Related issue:
      # https://github.com/coreos/rkt/issues/2878
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"


  - path: /srv/kubernetes/manifests/calico.yaml
    content: |
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: calico-config
        namespace: kube-system
      data:
        etcd_endpoints: "#ETCD_ENDPOINTS#"
        cni_network_config: |-
          {
              "name": "calico",
              "type": "flannel",
              "delegate": {
                  "type": "calico",
                  "etcd_endpoints": "__ETCD_ENDPOINTS__",
                  "etcd_key_file": "__ETCD_KEY_FILE__",
                  "etcd_cert_file": "__ETCD_CERT_FILE__",
                  "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
                  "log_level": "info",
                  "policy": {
                      "type": "k8s",
                      "k8s_api_root": "https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__",
                      "k8s_auth_token": "__SERVICEACCOUNT_TOKEN__"
                  },
                  "kubernetes": {
                      "kubeconfig": "__KUBECONFIG_FILEPATH__"
                  }
              }
          }

        etcd_ca: "/calico-secrets/etcd-ca"
        etcd_cert: "/calico-secrets/etcd-cert"
        etcd_key: "/calico-secrets/etcd-key"

      ---

      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: calico-etcd-secrets
        namespace: kube-system
      data:
        etcd-key: "$ETCDKEY"
        etcd-cert: "$ETCDCERT"
        etcd-ca: "$ETCDCA"

      ---

      kind: DaemonSet
      apiVersion: extensions/v1beta1
      metadata:
        name: calico-node
        namespace: kube-system
        labels:
          k8s-app: calico-node
      spec:
        selector:
          matchLabels:
            k8s-app: calico-node
        updateStrategy:
          type: RollingUpdate
        template:
          metadata:
            labels:
              k8s-app: calico-node
            annotations:
              scheduler.alpha.kubernetes.io/critical-pod: ''
          spec:
            tolerations:
            - operator: Exists
              effect: NoSchedule
            - operator: Exists
              effect: NoExecute
            - operator: Exists
              key: CriticalAddonsOnly
            hostNetwork: true
            containers:
              - name: calico-node
                image: quay.io/calico/node:v2.5.1
                env:
                  - name: ETCD_ENDPOINTS
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_endpoints
                  - name: CALICO_NETWORKING_BACKEND
                    value: "none"
                  - name: CLUSTER_TYPE
                    value: "kubeaws,canal"
                  - name: CALICO_DISABLE_FILE_LOGGING
                    value: "true"
                  - name: NO_DEFAULT_POOLS
                    value: "true"
                  - name: ETCD_CA_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_ca
                  - name: ETCD_KEY_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_key
                  - name: ETCD_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_cert
                securityContext:
                  privileged: true
                volumeMounts:
                  - mountPath: /lib/modules
                    name: lib-modules
                    readOnly: true
                  - mountPath: /var/run/calico
                    name: var-run-calico
                    readOnly: false
                  - mountPath: /calico-secrets
                    name: etcd-certs
                  - mountPath: /etc/resolv.conf
                    name: dns
                    readOnly: true
            volumes:
              - name: lib-modules
                hostPath:
                  path: /lib/modules
              - name: var-run-calico
                hostPath:
                  path: /var/run/calico
              - name: cni-bin-dir
                hostPath:
                  path: /opt/cni/bin
              - name: cni-net-dir
                hostPath:
                  path: /etc/kubernetes/cni/net.d
              - name: etcd-certs
                secret:
                  secretName: calico-etcd-secrets
              - name: dns
                hostPath:
                  path: /etc/resolv.conf

      ---

      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: calico-policy-controller
        namespace: kube-system
        labels:
          k8s-app: calico-policy
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ''

      spec:
        replicas: 1
        template:
          metadata:
            name: calico-policy-controller
            namespace: kube-system
            labels:
              k8s-app: calico-policy
          spec:
            tolerations:
            - key: "node.alpha.kubernetes.io/role"
              operator: "Equal"
              value: "master"
              effect: "NoSchedule"
            - key: "CriticalAddonsOnly"
              operator: "Exists"
            hostNetwork: true
            containers:
              - name: calico-policy-controller
                image: quay.io/calico/kube-policy-controller:v0.7.0
                env:
                  - name: ETCD_ENDPOINTS
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_endpoints
                  - name: ETCD_CA_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_ca
                  - name: ETCD_KEY_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_key
                  - name: ETCD_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_cert
                  - name: K8S_API
                    value: "https://kubernetes.default:443"
                  - name: CONFIGURE_ETC_HOSTS
                    value: "true"
                volumeMounts:
                  - mountPath: /calico-secrets
                    name: etcd-certs
            volumes:
              - name: etcd-certs
                secret:
                  secretName: calico-etcd-secrets

  - path: /opt/bin/populate-tls-calico-etcd
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      etcd_ca=$(cat /etc/kubernetes/ssl/etcd-trusted-ca.pem | base64 | tr -d '\n')
      etcd_key=$(cat /etc/kubernetes/ssl/etcd-client-key.pem | base64 | tr -d '\n')
      etcd_cert=$(cat /etc/kubernetes/ssl/etcd-client.pem | base64 | tr -d '\n')

      sed -i -e "s#\$ETCDCA#$etcd_ca#g" /srv/kubernetes/manifests/calico.yaml
      sed -i -e "s#\$ETCDCERT#$etcd_cert#g" /srv/kubernetes/manifests/calico.yaml
      sed -i -e "s#\$ETCDKEY#$etcd_key#g" /srv/kubernetes/manifests/calico.yaml





  - path: /opt/bin/decrypt-assets
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=kube,kind=host,source=/etc/kubernetes,readOnly=false \
        --mount=volume=kube,target=/etc/kubernetes \
        --uuid-file-save=/var/run/coreos/decrypt-assets.uuid \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          'echo decrypting assets
           shopt -s nullglob
           for encKey in /etc/kubernetes/{ssl,}/*.enc; do
             echo decrypting $encKey
             f=$(mktemp $encKey.XXXXXXXX)
             /usr/bin/aws \
               --region us-east-1 kms decrypt \
               --ciphertext-blob fileb://$encKey \
               --output text \
               --query Plaintext \
             | base64 -d > $f
             mv -f $f ${encKey%.enc}
           done;

           echo done.'

      rkt rm --uuid-file=/var/run/coreos/decrypt-assets.uuid || :




  # TODO: remove the following binding once the TLS Bootstrapping feature is enabled by default, see:
  # https://github.com/kubernetes-incubator/kube-aws/pull/618#discussion_r115162048
  # https://kubernetes.io/docs/admin/authorization/rbac/#core-component-roles

  # Makes kube-worker user behave like a regular member of system:nodes group,
  # needed when TLS bootstrapping is disabled
  - path: /srv/kubernetes/rbac/cluster-role-bindings/node.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:node
        subjects:
          - kind: User
            name: kube-worker
        roleRef:
          kind: ClusterRole
          name: system:node
          apiGroup: rbac.authorization.k8s.io

  # We need to give nodes a few extra permissions so that both the node
  # draining and node labeling with AWS metadata work as expected
  - path: /srv/kubernetes/rbac/cluster-roles/node-extensions.yaml
    content: |
        kind: ClusterRole
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
            name: kube-aws:node-extensions
        rules:
          - apiGroups: ["extensions"]
            resources:
            - daemonsets
            verbs:
            - get
          # Can be removed if node authorizer is enabled
          - apiGroups: [""]
            resources:
            - nodes
            verbs:
            - patch
            - update
          - apiGroups: ["extensions"]
            resources:
            - replicasets
            verbs:
            - get
          - apiGroups: ["batch"]
            resources:
            - jobs
            verbs:
            - get
          - apiGroups: [""]
            resources:
            - replicationcontrollers
            verbs:
            - get
          - apiGroups: [""]
            resources:
            - pods/eviction
            verbs:
            - create
          - nonResourceURLs: ["*"]
            verbs: ["*"]

  # Grants super-user permissions to the kube-admin user
  - path: /srv/kubernetes/rbac/cluster-role-bindings/kube-admin.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:admin
        subjects:
          - kind: User
            name: kube-admin
        roleRef:
          kind: ClusterRole
          name: cluster-admin
          apiGroup: rbac.authorization.k8s.io

  # Allows both `kube-worker` user and members of the `system:nodes` group
  # to perform actions needed by the `kube-proxy` component. Once kube-proxy
  # is migrated to DaemonSets, we could set up a ServiceAccount for it and
  # associate this role to it instead.
  - path: /srv/kubernetes/rbac/cluster-role-bindings/node-proxier.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:node-proxier
        subjects:
          - kind: User
            name: kube-worker
          - kind: Group
            name: system:nodes
        roleRef:
          kind: ClusterRole
          name: system:node-proxier
          apiGroup: rbac.authorization.k8s.io

  # Allows add-ons running with the default service account in kube-sytem to have super-user access
  - path: /srv/kubernetes/rbac/cluster-role-bindings/system-worker.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:system-worker
        subjects:
          - kind: ServiceAccount
            namespace: kube-system
            name: default
        roleRef:
          kind: ClusterRole
          name: cluster-admin
          apiGroup: rbac.authorization.k8s.io

  # TODO: remove the following binding once the TLS Bootstrapping feature is enabled by default, see:
  # https://github.com/kubernetes-incubator/kube-aws/pull/618#discussion_r115162048
  # https://kubernetes.io/docs/admin/authorization/rbac/#core-component-roles

  # Associates the add-on role `kube-aws:node-extensions` to all nodes, so that
  # extra kube-aws features (like node draining) work as expected
  - path: /srv/kubernetes/rbac/cluster-role-bindings/node-extensions.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:node-extensions
        subjects:
          - kind: User
            name: kube-worker
          - kind: Group
            name: system:nodes
        roleRef:
          kind: ClusterRole
          name: kube-aws:node-extensions
          apiGroup: rbac.authorization.k8s.io

  # Allow heapster access to the built in cluster role via its service account
  - path: /srv/kubernetes/rbac/cluster-role-bindings/heapster.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: heapster
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: system:heapster
        subjects:
        - kind: ServiceAccount
          name: heapster
          namespace: kube-system

  # Heapster's pod_nanny monitors the heapster deployment & its pod(s), and scales
  # the resources of the deployment if necessary.
  - path: /srv/kubernetes/rbac/roles/pod-nanny.yaml
    content: |
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: Role
        metadata:
          name: system:pod-nanny
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"
            addonmanager.kubernetes.io/mode: Reconcile
        rules:
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
        - apiGroups:
          - "extensions"
          resources:
          - deployments
          verbs:
          - get
          - update

  # Allow heapster nanny access to the pod nanny role via its service account (same pod as heapster)
  - path: /srv/kubernetes/rbac/role-bindings/heapster-nanny.yaml
    content: |
        kind: RoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: heapster-nanny
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"
            addonmanager.kubernetes.io/mode: Reconcile
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: system:pod-nanny
        subjects:
        - kind: ServiceAccount
          name: heapster
          namespace: kube-system



  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    content: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-proxy
          namespace: kube-system
          labels:
            k8s-app: kube-proxy
          annotations:
            rkt.alpha.kubernetes.io/stage1-name-override: coreos.com/rkt/stage1-fly

        spec:
          hostNetwork: true
          containers:
          - name: kube-proxy
            image: quay.io/coreos/hyperkube:v1.7.5_coreos.0
            command:
            - /hyperkube
            - proxy
            - --master=http://127.0.0.1:8080
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /etc/ssl/certs
              name: ssl-certs-host
              readOnly: true
            - mountPath: /var/run/dbus
              name: dbus
              readOnly: false
          volumes:
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host
          - hostPath:
              path: /var/run/dbus
            name: dbus

  - path: /etc/kubernetes/manifests/kube-apiserver.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
        labels:
          k8s-app: kube-apiserver
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: quay.io/coreos/hyperkube:v1.7.5_coreos.0
          command:
          - /hyperkube
          - apiserver
          - --apiserver-count=2
          - --bind-address=0.0.0.0
          - --etcd-servers=#ETCD_ENDPOINTS#
          - --etcd-cafile=/etc/kubernetes/ssl/etcd-trusted-ca.pem
          - --etcd-certfile=/etc/kubernetes/ssl/etcd-client.pem
          - --etcd-keyfile=/etc/kubernetes/ssl/etcd-client-key.pem
          - --allow-privileged=true
          - --service-cluster-ip-range=10.3.0.0/24
          - --secure-port=443
          
          - --storage-backend=etcd3
          
          - --kubelet-preferred-address-types=InternalIP,Hostname,ExternalIP
          
          
          - --audit-log-maxage=30
          - --audit-log-path=/dev/stdout
          - --audit-log-maxbackup=1
          
          - --authorization-mode=RBAC
          
          - --advertise-address=$private_ipv4
          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,DenyEscalatingExec
          - --anonymous-auth=false
          - --cert-dir=/etc/kubernetes/ssl
          - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
          - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --client-ca-file=/etc/kubernetes/ssl/ca.pem
          - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --runtime-config=extensions/v1beta1/networkpolicies=true,batch/v2alpha1,rbac.authorization.k8s.io/v1beta1=true
          - --cloud-provider=aws
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              port: 8080
              path: /healthz
            initialDelaySeconds: 15
            timeoutSeconds: 15
          ports:
          - containerPort: 443
            hostPort: 443
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
          
          
          
          - mountPath: /var/log
            name: var-log
            readOnly: false
          
          
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
        
        
        
        - hostPath:
            path: /var/log
          name: var-log
        
        

  - path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
        labels:
          k8s-app: kube-controller-manager
      spec:
        containers:
        - name: kube-controller-manager
          image: quay.io/coreos/hyperkube:v1.7.5_coreos.0
          command:
          - /hyperkube
          - controller-manager
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
          - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          
          - --root-ca-file=/etc/kubernetes/ssl/ca.pem
          - --cloud-provider=aws
          
          - --node-monitor-grace-period=300s
          
          
          - --cloud-config=/etc/kubernetes/additional-configs/cloud.config
          
          resources:
            requests:
              cpu: 200m
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10252
            initialDelaySeconds: 15
            timeoutSeconds: 15
          volumeMounts:
          
          - mountPath: /etc/kubernetes/additional-configs
            name: additional-configs
            readOnly: true
          
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        hostNetwork: true
        volumes:
        
        - hostPath:
            path: /etc/kubernetes/additional-configs
          name: additional-configs
        
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host

  - path: /etc/kubernetes/manifests/kube-scheduler.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
        labels:
          k8s-app: kube-scheduler
      spec:
        hostNetwork: true
        containers:
        - name: kube-scheduler
          image: quay.io/coreos/hyperkube:v1.7.5_coreos.0
          command:
          - /hyperkube
          - scheduler
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
          resources:
            requests:
              cpu: 100m
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
            timeoutSeconds: 15

  - path: /srv/kubernetes/manifests/kube-dns-sa.yaml
    content: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: kube-dns
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"

  - path: /srv/kubernetes/manifests/kube-dns-cm.yaml
    content: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: kube-dns
          namespace: kube-system

  - path: /srv/kubernetes/manifests/kube-dns-autoscaler-de.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: kube-dns-autoscaler
          namespace: kube-system
          labels:
            k8s-app: kube-dns-autoscaler
            kubernetes.io/cluster-service: "true"
        spec:
          template:
            metadata:
              labels:
                k8s-app: kube-dns-autoscaler
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              tolerations:
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              containers:
              - name: autoscaler
                image: gcr.io/google_containers/cluster-proportional-autoscaler-amd64:1.1.2
                resources:
                    requests:
                        cpu: "20m"
                        memory: "10Mi"
                command:
                  - /cluster-proportional-autoscaler
                  - --namespace=kube-system
                  - --configmap=kube-dns-autoscaler
                  - --target=Deployment/kube-dns
                  - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"min":2}}
                  - --logtostderr=true
                  - --v=2



  - path: /srv/kubernetes/manifests/kube-dns-de.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: kube-dns
          namespace: kube-system
          labels:
            k8s-app: kube-dns
            kubernetes.io/cluster-service: "true"
        spec:
          # replicas: not specified here:
          # 1. In order to make Addon Manager do not reconcile this replicas parameter.
          # 2. Default is 1.
          # 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.
          strategy:
            rollingUpdate:
              maxSurge: 10%
              maxUnavailable: 0
          selector:
            matchLabels:
              k8s-app: kube-dns
          template:
            metadata:
              labels:
                k8s-app: kube-dns
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              volumes:
              - name: kube-dns-config
                configMap:
                  name: kube-dns
                  optional: true
              tolerations:
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              containers:
              - name: kubedns
                image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.4
                resources:
                  limits:
                    memory: 170Mi
                  requests:
                    cpu: 100m
                    memory: 70Mi
                livenessProbe:
                  httpGet:
                    path: /healthcheck/kubedns
                    port: 10054
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                readinessProbe:
                  httpGet:
                    path: /readiness
                    port: 8081
                    scheme: HTTP
                  initialDelaySeconds: 3
                  timeoutSeconds: 5
                args:
                - --domain=cluster.local.
                - --dns-port=10053
                - --config-dir=/kube-dns-config
                # This should be set to v=2 only after the new image (cut from 1.5) has
                # been released, otherwise we will flood the logs.
                - --v=2
                env:
                - name: PROMETHEUS_PORT
                  value: "10055"
                ports:
                - containerPort: 10053
                  name: dns-local
                  protocol: UDP
                - containerPort: 10053
                  name: dns-tcp-local
                  protocol: TCP
                - containerPort: 10055
                  name: metrics
                  protocol: TCP
                volumeMounts:
                - name: kube-dns-config
                  mountPath: /kube-dns-config
              - name: dnsmasq
                image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.4
                livenessProbe:
                  httpGet:
                    path: /healthcheck/dnsmasq
                    port: 10054
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                args:
                - -v=2
                - -logtostderr
                - -configDir=/etc/k8s/dns/dnsmasq-nanny
                - -restartDnsmasq=true
                - --
                - -k
                - --cache-size=1000
                - --log-facility=-
                - --server=/cluster.local/127.0.0.1#10053
                - --server=/in-addr.arpa/127.0.0.1#10053
                - --server=/ip6.arpa/127.0.0.1#10053
                ports:
                - containerPort: 53
                  name: dns
                  protocol: UDP
                - containerPort: 53
                  name: dns-tcp
                  protocol: TCP
                # see: https://github.com/kubernetes/kubernetes/issues/29055 for details
                resources:
                  requests:
                    cpu: 150m
                    memory: 20Mi
                volumeMounts:
                - name: kube-dns-config
                  mountPath: /etc/k8s/dns/dnsmasq-nanny
              - name: sidecar
                image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.4
                livenessProbe:
                  httpGet:
                    path: /metrics
                    port: 10054
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                args:
                - --v=2
                - --logtostderr
                - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
                - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
                ports:
                - containerPort: 10054
                  name: metrics
                  protocol: TCP
                resources:
                  requests:
                    memory: 20Mi
                    cpu: 10m
              dnsPolicy: Default
              serviceAccountName: kube-dns

  - path: /srv/kubernetes/manifests/kube-dns-svc.yaml
    content: |
        apiVersion: v1
        kind: Service
        metadata:
          name: kube-dns
          namespace: kube-system
          labels:
            k8s-app: kube-dns
            kubernetes.io/cluster-service: "true"
            kubernetes.io/name: "KubeDNS"
        spec:
          selector:
            k8s-app: kube-dns
          clusterIP: 10.3.0.10
          ports:
          - name: dns
            port: 53
            protocol: UDP
          - name: dns-tcp
            port: 53
            protocol: TCP

  - path: /srv/kubernetes/manifests/heapster-sa.yaml
    content: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: heapster
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"

  - path: /srv/kubernetes/manifests/heapster-de.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: heapster
          namespace: kube-system
          labels:
            k8s-app: heapster
            kubernetes.io/cluster-service: "true"
            version: v1.4.1
        spec:
          replicas: 1
          selector:
            matchLabels:
              k8s-app: heapster
              version: v1.4.1
          template:
            metadata:
              labels:
                k8s-app: heapster
                version: v1.4.1
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              tolerations:
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              serviceAccountName: heapster
              containers:
                - image: gcr.io/google_containers/heapster:v1.4.1
                  name: heapster
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 8082
                      scheme: HTTP
                    initialDelaySeconds: 180
                    timeoutSeconds: 5
                  resources:
                    limits:
                      cpu: 80m
                      memory: 200Mi
                    requests:
                      cpu: 80m
                      memory: 200Mi
                  command:
                    - /heapster
                    - --source=kubernetes.summary_api:''
                - image: gcr.io/google_containers/addon-resizer:2.0
                  name: heapster-nanny
                  resources:
                    limits:
                      cpu: 50m
                      memory: 90Mi
                    requests:
                      cpu: 50m
                      memory: 90Mi
                  env:
                    - name: MY_POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: MY_POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                  command:
                    - /pod_nanny
                    - --cpu=80m
                    - --extra-cpu=4m
                    - --memory=200Mi
                    - --extra-memory=4Mi
                    - --deployment=heapster
                    - --container=heapster
                    - --poll-period=300000

  

  - path: /srv/kubernetes/manifests/heapster-svc.yaml
    content: |
        kind: Service
        apiVersion: v1
        metadata:
          name: heapster
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"
            kubernetes.io/name: "Heapster"
            k8s-app: heapster
        spec:
          ports:
            - port: 80
              targetPort: 8082
          selector:
            k8s-app: heapster

  - path: /srv/kubernetes/manifests/kube-dashboard-de.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: kubernetes-dashboard
          namespace: kube-system
          labels:
            k8s-app: kubernetes-dashboard
            version: v1.6.3
            kubernetes.io/cluster-service: "true"
        spec:
          replicas: 1
          selector:
            matchLabels:
              k8s-app: kubernetes-dashboard
          template:
            metadata:
              labels:
                k8s-app: kubernetes-dashboard
                version: v1.6.3
                kubernetes.io/cluster-service: "true"
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              tolerations:
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              containers:
              - name: kubernetes-dashboard
                image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.3
                resources:
                  limits:
                    cpu: 100m
                    memory: 50Mi
                  requests:
                    cpu: 100m
                    memory: 50Mi
                ports:
                - containerPort: 9090
                livenessProbe:
                  httpGet:
                    path: /
                    port: 9090
                  initialDelaySeconds: 30
                  timeoutSeconds: 30

  - path: /srv/kubernetes/manifests/kube-dashboard-svc.yaml
    content: |
        apiVersion: v1
        kind: Service
        metadata:
          name: kubernetes-dashboard
          namespace: kube-system
          labels:
            k8s-app: kubernetes-dashboard
            kubernetes.io/cluster-service: "true"
        spec:
          selector:
            k8s-app: kubernetes-dashboard
          ports:
          - port: 80
            targetPort: 9090

  - path: /srv/kubernetes/manifests/tiller.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          creationTimestamp: null
          labels:
            app: helm
            name: tiller
          name: tiller-deploy
          namespace: kube-system
        spec:
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: helm
                name: tiller
              # Addition to the default tiller deployment for prioritizing tiller over other non-critical pods with rescheduler
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              tolerations:
              # Additions to the default tiller deployment for allowing to schedule tiller onto controller nodes
              # so that helm can be used to install pods running only on controller nodes
              - key: "node.alpha.kubernetes.io/role"
                operator: "Equal"
                value: "master"
                effect: "NoSchedule"
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              containers:
              - env:
                - name: TILLER_NAMESPACE
                  value: kube-system
                image: gcr.io/kubernetes-helm/tiller:v2.6.0
                imagePullPolicy: IfNotPresent
                livenessProbe:
                  httpGet:
                    path: /liveness
                    port: 44135
                  initialDelaySeconds: 1
                  timeoutSeconds: 1
                name: tiller
                ports:
                - containerPort: 44134
                  name: tiller
                readinessProbe:
                  httpGet:
                    path: /readiness
                    port: 44135
                  initialDelaySeconds: 1
                  timeoutSeconds: 1
                resources: {}
              nodeSelector:
                beta.kubernetes.io/os: linux
        status: {}
        ---
        apiVersion: v1
        kind: Service
        metadata:
          creationTimestamp: null
          labels:
            app: helm
            name: tiller
          name: tiller-deploy
          namespace: kube-system
        spec:
          ports:
          - name: tiller
            port: 44134
            targetPort: tiller
          selector:
            app: helm
            name: tiller
          type: ClusterIP
        status:
          loadBalancer: {}

  - path: /srv/kube-aws/plugins/kubernetes-manifests
    encoding: gzip+base64
    content: H4sIAAAAAAAA/wEAAP//AAAAAAAAAAA=



  - path: /srv/kube-aws/plugins/helm-releases
    encoding: gzip+base64
    content: H4sIAAAAAAAA/wEAAP//AAAAAAAAAAA=





  - path: /etc/kubernetes/auth/kubelet-tls-bootstrap-token.tmp.enc
    encoding: gzip+base64
    content: H4sIAAAAAAAA/wDpARb+AQECAHgtAXNFpLmjNXHaaI4vnp9Kiu39c7e3/npF4nDh5ZaiJwAAAcAwggG8BgkqhkiG9w0BBwagggGtMIIBqQIBADCCAaIGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMEZyeUScvvR9bSzKsAgEQgIIBc0qY1qmLAKfbfdxyYaveBjlJiSXUQS6burs8BvXX79vvKBJULgXhmrj0tEDiqaOaD6BS6VnMSvif7MSLBPvIqyO+D5dUchPfrgOGire+25WpZ4H8B/SKt0esMDsHeyLLHAF0St75vZVgYU4D9WQbru0CuAozqQfUnilRgt9sGjK9SPUwWpsjf0ov5ebyBHJyPl2Y9vNjx7lm9lvu+l265+KuPiUQ/SAkETWExjvdE+YIXaenMMbX4H0dE5GBuTXeymx55YPcaivePp77jdZ9qhT4eNGeEkuMetjafe+ng5hp9skgRUtTa6FuGeLkgDu1gx2qFwiiYHa3crHXdU+mAqxQWdz7z1N/Y23X25JotYtRA0hxpMVMMDhUDh88rlCwKe/5srPpOj/l7LvbmoQZqx/WkMAqcuZDjmSggZ/tdkBKi+jT/h1Gll393OqsPUk/K8WwNKXItCEWYGfN69EuSXzK92qI48RNMK8lC0e1bk/jJjpUAQAA//9D+Scb6QEAAA==





  - path: /etc/kubernetes/ssl/ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUyc6ySBSG91xF70kHUAFd/IuagFKmAhRwhzKIAoJTAVff+fzT3Ul3LZ9U8p7kec/58+dBYlL3D0SCiBoUgYh8qeBQijSMEMhRBTiFoKIQYODC6jZcbrW54TIE7GkADBonIBzzFB8Y2xF+eeTxthHs2FieZ8IcsDKBsidgdKxseaiPoXJNI1AYXB7dGahO5IwedhbO3GQGl6ffjIzC39BB+5FEwIeVe4DgHiHzpaTt/pUm+ewEgOPqm4wJz7/JduxeHEqhQK//HZcYAHgIsDX4+YCqHQKMgNWJvGY79WRUio/YV3jw0L1qi4VTPETtWGZW/u769jjTRYH3zaPJqubuiHy+hs+bHvbDyR0yRG0RGwSa9E3JZylr/cUXgsOp6PmyHCy59Kc72LPbUj1ueVnWTqg8PCWMw8k+klWe7dz01E1d0u3uk3cvVva8eybCON5UO7w26+dVXyASfG7bpvfi0fbNnVmHySa/P71Jr5Gye24sFTd6Z0tVN/mNnSkJcASC+rl/BKYq6qHZ6q8ZWalXvSlz+pOsJjTKV2kg802m6Uonr7rLe8h8ZOWee3jT9dUWwkObtHw5xDljCr7paee1G8sPyFS9psrv5I3aFaN13BLeiYwWVjg50YC5+rlklFMsAAbgfXI4jYD3o9BiawjKNYHAQWBgv4sTyBFglgTBngNOoDT/a074p2lfdQQok/HwN9bkR911o4LSCLbrDLesMFXuYFikjZ9VujxK/QsnWhAKUG6y1rXneu9G4rY2lDqkWmBIsvg0duqU21tDvIx1KkpnNWKbDuZqAwZV18+fANXaLFBoeURtPFJJuwK+g9HMX2dZOXMp7KJ7DofQvqYMofQ8Efth2ofTcWbLyt41weL60VpBX+ORawlySVW8sOFPIRNHZHl59Dhr/cFqYzu9nKhmFBnikLtS0jjmdr0ogZF+hostSDscahe9dq5882FLK/6kLGHaJImNT7ajmClnlXt4qE/vMRg02mZ1J/cLKfmUGY39pfBsVpI5P9azXU4xSm5HaBJrVS4kwETN3MadWMd38OuX8N1+4uL/X4S/AgAA//9IzTWILgQAAA==



  - path: /etc/kubernetes/ssl/apiserver.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUy66rOhqE5zxFz6NWQsh1aIwhJhgwd5gBWWASnAsBTHj6VtYetM7ZnrnKckn//6n++z0qMrD9H4i8AOsYggD9qhLBWKtnCAEfaiCwCmqMT2wRz5O9RngjNJqa50eG2VjagCJLpUCYAfIIOBhADpEEGcG5EjWZL7OLQiakAUet7UgFJFDXvZzysE/XSJxYaZOgFE6AZhLUs30l25iVtkSCm3A0vP4jUhFfwZt4SGgi1SJKz0iw7hKbrRXrSjmjhKjhbzKYiPMNlr7JpdHOWWKuswSLukYNASsD+i/Dx4WiUaQCGgKwwaomwNc/gwdWAdVat+ZXSbvpB9rsRdN7nUEz/XysttyLw/CHL3TzdaW5dWuEoygpXv50aaNnjlJ4HbfryuvVhyGxZt/kcr+62VayMFviFCw0bsmpbAir7JOcd7k8g6k+j+XOjWvmyEu8sZRwaclVqXdUCrfWOf/Iy4MTTzu8hMnexvE6kt39Z9uPSuSsV1aWmz00V8p9VWai2LgdS7Zm9rwqO6ZKx4f+fIuH6+LW48curgJEFWHvPCY3q24B69R2q6OfZscPHV8WN0y1U/Kh2V6exRIOTykdHoPb2ToPotOheMFKnkm+FEhPRgiG53ANfx4v9xICy8fcXsLmszM/g9O+3Jyfk8GSxuONNFVvGOb6x0fdCGqiAmBc6/wg6lwIrU61yFu5gJ6W39GDOq6JSr6rvJiUEomAhwHh2wA01FVBVIIN9AXp5CFUBeq+rp+/HJR8216MaK6Z+Y+7ZHGvzbguFycf6vxLXvQpeLTKEjJkRsTTJHpf4Ha+cAeaxt++9P8HZEjXk1wqXls223extlmBcfQH8+01N6JrrpiP0pdvWZIO30+YoGcJCKD+mzwo/pAHKKTnUfhvlC2AYmpasnk0Bb8H0656nZw9Pxed1If0OdLrrPiar1l93bCtuQ34TQvaoZuK3jsAHVvAxWS/e/3kjytf7NgM8okSh2swlnLlhX0sGsiKI9+/r5XyYcfPYvNKxgDIi4+1DHxjVe1zbThAxu/laVrn0Vx2CKa5b2VSGH5635FPt/ANd/pp1z9XrDpGi9ddvhOlaTbJ9FluMpLNRVya+e1+m8Z52VaVZ/ixeDDJdc6z/rRs1SvjtCxWTQLx4cfl3dl7PQxv7Fs2XLkFY3347ItFobf6vgevDK2Pze7S+9JOaS/ywlGnwJ3EpVfy6Vgnzt02u7FrWakDkKN2Svnotpaf1KIuaCj9lhmytb8L7n8BAAD//2g3GLD9BAAA

  - path: /etc/kubernetes/ssl/apiserver-key.pem.enc
    encoding: gzip+base64
    content: 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

  - path: /etc/kubernetes/ssl/etcd-client.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUy9KyOBCG91zF7K0pUT9PywQCBAwQQCLukEMQROQY8Oqnvn92M718e/F011v1/P07EOnY/ktBXoA1rIAA/UklgrGyVhUFZD4HAkPAMQY/b9mZ9Qn8JEKlkWk1d1xMiQ0oukAKhBkgj4CTDjZXJCkFwfEufN79TZHuyIxU4EBuhxCQAG6HTVRfh2iLhFEkNgkS4QToSwL+tUuyZ0ViSySohKPi7b8hFawEI/GQUEWkhpRaSBRdyszXhWm75IvuBCZ/yGAm9Bcs3f3NK9Xt6sLsPmbhmP6+4+P/ng4hBSrnyAW/e9oonCMILt1ash91ZLWbnJ2/LzN/NKZV3pLxsPOOp+3Rew/YaU7BB5u5w2SA/dN8mlec9aLqjVd3Tl1p86bK2esA6hnjURv5XQ8+iKYazHLeZ4v78lwTC9PVlzE9uIQ5HxLkw2prKZd2mfcSsEB3WBRUGuO3bP3qAIagREgfUa3FT49wG4msZZmRO53cTVrLIqfrrUaM3uAzo5bIXvXsi1hC+nlq07o43La5jzZUcw+P5BSzZle7V55OXZpnzwDdugSm27OWqJfHWgWsk4zKnvH0tOYBnOR9PAzW3K9jojtr4xHJp4XZrguM2fdna/uZp6DdssuhUWAd6blMe1kCpOnMZDmfZMczVslzRa4KEAiAmLyJchUqj9TQk11AjTUEVAWccQLJb5WpSSmRCGh0Rel1QK8aFEQhQNYVv9V9/NipFEFFXAH4wRBQcOBXL9mIoAjh/nKxu9OXulBqd1P61nBQyPo7XC18aeJi+e5C+/YYjko6bMJSb9V8MR0XoOIQr4l56MtU2/Tjmk6yJd33sZxOGbCdpkJw4mc3kFsv8HucwSqe9fDmZH1YVnZlLvVRGdaReeNLRJ6g9y4ssyV1fL2eQx2EZncuyOgOye79U3t8Zfrdzi65xyPjJmAlpmOal6wOv0NyDFDI0ptS0tGQyv0u/tx1WCxn+NJWFuPA3Bfn5J2fo4Jfd1lWU++O1gPrcLoilE7JN0CsDtsIbQNrlNwPn0SnyCtAntUn+Nb76Ei2IWaHZSbd61mi8bkxghdqkX39GdYv1GBN4PA+2Z9jtQ2lP1ZAtvp/U/wTAAD//yf9+7VGBAAA

  - path: /etc/kubernetes/ssl/etcd-client-key.pem.enc
    encoding: gzip+base64
    content: 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

  - path: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUyc6ySBSG91xF70kHUAFd/IuagFKmAhRwhzKIAoJTAVff+fzT3Ul3LZ9U8p7kec/58+dBYlL3D0SCiBoUgYh8qeBQijSMEMhRBTiFoKIQYODC6jZcbrW54TIE7GkADBonIBzzFB8Y2xF+eeTxthHs2FieZ8IcsDKBsidgdKxseaiPoXJNI1AYXB7dGahO5IwedhbO3GQGl6ffjIzC39BB+5FEwIeVe4DgHiHzpaTt/pUm+ewEgOPqm4wJz7/JduxeHEqhQK//HZcYAHgIsDX4+YCqHQKMgNWJvGY79WRUio/YV3jw0L1qi4VTPETtWGZW/u769jjTRYH3zaPJqubuiHy+hs+bHvbDyR0yRG0RGwSa9E3JZylr/cUXgsOp6PmyHCy59Kc72LPbUj1ueVnWTqg8PCWMw8k+klWe7dz01E1d0u3uk3cvVva8eybCON5UO7w26+dVXyASfG7bpvfi0fbNnVmHySa/P71Jr5Gye24sFTd6Z0tVN/mNnSkJcASC+rl/BKYq6qHZ6q8ZWalXvSlz+pOsJjTKV2kg802m6Uonr7rLe8h8ZOWee3jT9dUWwkObtHw5xDljCr7paee1G8sPyFS9psrv5I3aFaN13BLeiYwWVjg50YC5+rlklFMsAAbgfXI4jYD3o9BiawjKNYHAQWBgv4sTyBFglgTBngNOoDT/a074p2lfdQQok/HwN9bkR911o4LSCLbrDLesMFXuYFikjZ9VujxK/QsnWhAKUG6y1rXneu9G4rY2lDqkWmBIsvg0duqU21tDvIx1KkpnNWKbDuZqAwZV18+fANXaLFBoeURtPFJJuwK+g9HMX2dZOXMp7KJ7DofQvqYMofQ8Efth2ofTcWbLyt41weL60VpBX+ORawlySVW8sOFPIRNHZHl59Dhr/cFqYzu9nKhmFBnikLtS0jjmdr0ogZF+hostSDscahe9dq5882FLK/6kLGHaJImNT7ajmClnlXt4qE/vMRg02mZ1J/cLKfmUGY39pfBsVpI5P9azXU4xSm5HaBJrVS4kwETN3MadWMd38OuX8N1+4uL/X4S/AgAA//9IzTWILgQAAA==


  - path: /etc/kubernetes/controller-kubeconfig.yaml
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: local
          cluster:
            server: http://localhost:8080
        users:
        - name: kubelet
        contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
        current-context: kubelet-context



  - path: /etc/kubernetes/cni/net.d/10-calico.conf
    content: |
      {
        "name": "calico",
        "type": "flannel",
        "delegate": {
          "type": "calico",
          "etcd_endpoints": "#ETCD_ENDPOINTS#",
          "etcd_key_file": "/etc/kubernetes/ssl/etcd-client-key.pem",
          "etcd_cert_file": "/etc/kubernetes/ssl/etcd-client.pem",
          "etcd_ca_cert_file": "/etc/kubernetes/ssl/etcd-trusted-ca.pem",
          "log_level": "info",
          "policy": {
            "type": "k8s",
            "k8s_api_root": "http://127.0.0.1:8080/api/v1/"
          }
        }
      }







  - path: /srv/kubernetes/manifests/kube2iam-ds.yaml
    content: |
      apiVersion: extensions/v1beta1
      kind: DaemonSet
      metadata:
        name: kube2iam
        namespace: kube-system
        labels:
          app: kube2iam
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ''
      spec:
        updateStrategy:
          type: RollingUpdate
        template:
          metadata:
            labels:
              name: kube2iam
          spec:
            serviceAccountName: kube2iam
            hostNetwork: true
            tolerations:
            - operator: Exists
              effect: NoSchedule
            - operator: Exists
              effect: NoExecute
            - operator: Exists
              key: CriticalAddonsOnly
            containers:
              - image: jtblin/kube2iam:0.7.0
                name: kube2iam
                args:
                  - "--app-port=8282"
                  - "--auto-discover-base-arn"
                  - "--auto-discover-default-role"
                  - "--iptables=true"
                  - "--host-ip=$(HOST_IP)"
                  - "--host-interface=cali+"
           
                env:
                  - name: HOST_IP
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
                ports:
                  - containerPort: 8282
                    hostPort: 8282
                    name: http
                resources:
                  limits:
                    cpu: 10m
                    memory: 32Mi
                  requests:
                    cpu: 10m
                    memory: 32Mi
                securityContext:
                  privileged: true
  - path: /srv/kubernetes/manifests/kube2iam-rbac.yaml
    content: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: kube2iam
        namespace: kube-system
      ---

      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRole
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: kube2iam
        name: kube2iam
      rules:
      - apiGroups:
        - ""
        resources:
        - pods
        - namespaces
        verbs:
        - get
        - list
        - watch
      ---

      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: kube2iam
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: kube2iam
      subjects:
      - kind: ServiceAccount
        name: kube2iam
        namespace: kube-system


  - path: /opt/bin/retry
    owner: root:root
    permissions: 0755
    content: |
      #!/bin/bash
      max_attempts="$1"; shift
      cmd="$@"
      attempt_num=1
      attempt_interval_sec=3

      until $cmd
      do
          if (( attempt_num == max_attempts ))
          then
              echo "Attempt $attempt_num failed and there are no more attempts left!"
              return 1
          else
              echo "Attempt $attempt_num failed! Trying again in $attempt_interval_sec seconds..."
              ((attempt_num++))
              sleep $attempt_interval_sec;
          fi
      done


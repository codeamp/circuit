#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  flannel:
    interface: $private_ipv4
    etcd_cafile: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    etcd_certfile: /etc/kubernetes/ssl/etcd-client.pem
    etcd_keyfile: /etc/kubernetes/ssl/etcd-client-key.pem

  units:
    - name: telegraf.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Teleport Monitoring Agent
        After=network-online.target
        After=etcd-member.service
        [Service]
        Restart=on-failure
        ExecStart=/bin/rkt run \
          --stage1-name=coreos.com/rkt/stage1-fly:1.26.0 \
          --set-env TELEGRAF_GLOBAL_TAGS_CLUSTER=production \
          --set-env TELEGRAF_GLOBAL_TAGS_SERVICE=worker \
          --set-env HOST_ETC=/etc2 \
          --interactive \
          --volume=varlibetcd2,kind=host,source=/var/lib/etcd2 \
          --volume=etc,kind=host,source=/etc \
          --mount volume=etc,target=/etc2 \
          --mount volume=varlibetcd2,target=/var/lib/etcd2 \
          --hostname=%H \
          --dns=host \
          --net=host \
          --insecure-options=image,ondisk \
          docker://checkr/checkr-telegraf-kapacitor:latest \
          --exec /usr/bin/telegraf -- --config /etc/generic.system.telegraf.conf
        
    - name: docker-healthcheck.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Run docker-healthcheck once
        After=docker.service
        
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/docker-healthcheck
        
        [Install]
        WantedBy=multi-user.target
        
    - name: docker-healthcheck.timer
      command: start
      enable: true
      content: |
        [Unit]
        Description=Trigger docker-healthcheck periodically
        After=docker.service
        
        [Timer]
        OnUnitInactiveSec=30s
        Unit=docker-healthcheck.service
        
        [Install]
        WantedBy=multi-user.target
        



    - name: cfn-etcd-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Fetches etcd static IP addresses list from CF
        After=network-online.target

        [Service]
        EnvironmentFile=/etc/environment
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/opt/bin/cfn-etcd-environment
        ExecStart=/usr/bin/mv -f /var/run/coreos/etcd-environment /etc/etcd-environment

    - name: docker.service
      drop-ins:

        - name: 10-post-start-check.conf
          content: |
            [Service]
            RestartSec=10
            ExecStartPost=/usr/bin/docker pull gcr.io/google_containers/pause-amd64:3.0

        - name: 40-flannel.conf
          content: |
            [Unit]
            Wants=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
            ExecStartPre=/usr/bin/systemctl is-active flanneld.service

        - name: 60-logfilelimit.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--log-opt max-size=50m --log-opt max-file=3"

    - name: flanneld.service
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Unit]
            Wants=cfn-etcd-environment.service
            After=cfn-etcd-environment.service

            [Service]
            EnvironmentFile=-/etc/etcd-environment
            EnvironmentFile=-/run/flannel/etcd-endpoints.opts
            ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
            ExecStartPre=/bin/sh -ec "echo FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS} >/run/flannel/etcd-endpoints.opts"
            ExecStartPre=/opt/bin/decrypt-assets
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            TimeoutStartSec=120


    - name: kubelet.service
      command: start
      runtime: true
      content: |
        [Unit]
        Wants=flanneld.service cfn-etcd-environment.service
        After=cfn-etcd-environment.service
        [Service]
        EnvironmentFile=/etc/environment
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/etc/default/kubelet
        Environment=KUBELET_IMAGE_TAG=v1.7.5_coreos.0
        Environment=KUBELET_IMAGE_URL=quay.io/coreos/hyperkube
        Environment="RKT_RUN_ARGS=--volume dns,kind=host,source=/etc/resolv.conf \
        --set-env=ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd-trusted-ca.pem \
        --set-env=ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd-client.pem \
        --set-env=ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd-client-key.pem \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume var-lib-cni,kind=host,source=/var/lib/cni \
        --mount volume=var-lib-cni,target=/var/lib/cni \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log \
        --volume cni-bin,kind=host,source=/opt/cni/bin \
        --mount volume=cni-bin,target=/opt/cni/bin"
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/sh -ec "find /etc/kubernetes/manifests /etc/kubernetes/cni/net.d/  -maxdepth 1 -type f | xargs --no-run-if-empty sed -i 's|#ETCD_ENDPOINTS#|${ETCD_ENDPOINTS}|'"
        ExecStartPre=/usr/bin/etcdctl \
                       --ca-file /etc/kubernetes/ssl/etcd-trusted-ca.pem \
                       --key-file /etc/kubernetes/ssl/etcd-client-key.pem \
                       --cert-file /etc/kubernetes/ssl/etcd-client.pem \
                       --endpoints "${ETCD_ENDPOINTS}" \
                       cluster-health
        ExecStartPre=/usr/bin/docker run --rm -e SLEEP=false -e KUBERNETES_SERVICE_HOST= -e KUBERNETES_SERVICE_PORT= -v /opt/cni/bin:/host/opt/cni/bin quay.io/calico/cni:v1.10.0 /install-cni.sh
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --cni-conf-dir=/etc/kubernetes/cni/net.d \
        --cni-bin-dir=/opt/cni/bin \
        --network-plugin=cni \
        --container-runtime=docker \
        --rkt-path=/usr/bin/rkt \
        --rkt-stage1-image=coreos.com/rkt/stage1-coreos \
        --node-labels checkr/role=default \
        --register-node=true \
        --allow-privileged=true \
        --node-status-update-frequency=20s \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --cluster-dns=10.3.0.10 \
        --cluster-domain=cluster.local \
        --cloud-provider=aws \
        --cert-dir=/etc/kubernetes/ssl \
        --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem \
        --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
        --require-kubeconfig \
        $KUBELET_OPTS
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target










    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Wants=kubelet.service docker.service
        After=kubelet.service

        [Service]
        Type=oneshot
        EnvironmentFile=/etc/environment
        ExecStartPre=/usr/bin/bash -c "while sleep 1; do if /usr/bin/curl  --insecure -s -m 20 -f  https://127.0.0.1:10250/healthz > /dev/null ; then break ; fi;  done"
        
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/docker run --net=host --pid=host --rm calico/ctl:v1.5.0 node status > /dev/null; do sleep 3; done && echo Calico running"
        
        ExecStart=/opt/bin/cfn-signal



    - name: kube-node-label.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Label this kubernetes node with additional AWS parameters
        After=kubelet.service
        Before=cfn-signal.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStop=/bin/true
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment INSTANCE_ID=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id)"
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment SECURITY_GROUPS=\"$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/security-groups | tr '\n' ',')\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment AUTOSCALINGGROUP=\"$(/usr/bin/docker run --rm --net=host \
          quay.io/coreos/awscli:master aws \
          autoscaling describe-auto-scaling-instances \
          --instance-ids ${INSTANCE_ID} --region us-east-1 \
          --query 'AutoScalingInstances[].AutoScalingGroupName' --output text)\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment \
          LAUNCHCONFIGURATION=\"$(/usr/bin/docker run --rm --net=host \
          quay.io/coreos/awscli:master \
          aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-name $AUTOSCALINGGROUP --region us-east-1 \
          --query 'AutoScalingGroups[].LaunchConfigurationName' --output text)\""
        ExecStart=/usr/bin/docker run --rm -t --net=host \
          -v /etc/kubernetes:/etc/kubernetes \
          -v /etc/resolv.conf:/etc/resolv.conf \
          -e INSTANCE_ID=${INSTANCE_ID} \
          -e SECURITY_GROUPS=${SECURITY_GROUPS} \
          -e AUTOSCALINGGROUP=${AUTOSCALINGGROUP} \
          -e LAUNCHCONFIGURATION=${LAUNCHCONFIGURATION} \
          quay.io/coreos/hyperkube:v1.7.5_coreos.0 /bin/bash \
            -ec 'echo "placing labels and annotations with additional AWS parameters."; \
             kctl="/kubectl --server=https://kube.checkrhq-dev.net:443 --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml"; \
             kctl_label="$kctl label --overwrite nodes/$(hostname)"; \
             kctl_annotate="$kctl annotate --overwrite nodes/$(hostname)"; \
             $kctl_label kube-aws.coreos.com/autoscalinggroup=${AUTOSCALINGGROUP}; \
             $kctl_label kube-aws.coreos.com/launchconfiguration=${LAUNCHCONFIGURATION}; \
             $kctl_annotate kube-aws.coreos.com/securitygroups=${SECURITY_GROUPS}; \
             echo "done."'











write_files:
  - path: /etc/rkt/auth.d/docker.json
    permissions: 0600
    encoding: gzip+base64
    content: H4sIAAAAAAAA/6pWUCrKLvHOzEtRslJQSslPzk4tciwtyVDSAUuEpRYVZ+bngeTKDMFiqemZxSVFmanFSlYK0TBupa6hHkSvXma+UqyOglJyUWpKal5JZmIOSGG1glJpcWoRyJjk/JTUtJz88oKi/BSQgQWJxcXl+UVg60NLjaKcSqOS3EJDjDN8080CTAtylBRqa7kAAQAA//+faTbrpgAAAA==
  - path: /opt/bin/docker-healthcheck
    permissions: 0700
    encoding: gzip+base64
    content: H4sIAAAAAAAA/7yRMW7rMBBEe55ivv4BpMCAGwNpc4TUFDmiFqFJY7lWktsHEiTETYo0aQeLh/fI///6UUo/+jY7JxNMrqx3w9OAWMMbFbeGZ/SRS1/uOV9gM4vjhxgGN4lzDHNFtx9PXjJjt48vskhJB+g0oDHUEhuS+kCMnKoSymZeTUrqXMvkDafhVy6PAspQF+rm8INjM8kZsb6XC0wlJeqD5W7TufbZjNdg+ZgQajEvhRr34wP86mXVx/m70CqSLDyoa8q6Hewt8/wHmeuHbC/7FQAA//+efA6i6QEAAA==



  - path: /opt/bin/cfn-signal
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-signal.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          '
            cfn-signal -e 0 --region us-east-1 --resource Workers --stack '$KUBE_AWS_STACK_NAME'
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-signal.uuid || :

  - path: /opt/bin/cfn-etcd-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-etcd-environment.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          '
            cfn-init -v -c "etcd-client" --region us-east-1 --resource Workers --stack '$KUBE_AWS_STACK_NAME'
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-etcd-environment.uuid || :

  - path: /etc/default/kubelet
    permissions: 0755
    owner: root:root
    content: |
      KUBELET_OPTS=""

  - path: /etc/kubernetes/cni/docker_opts_cni.env
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""

  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      # This is bind mounted into the kubelet rootfs and all rkt shell-outs go
      # through this rkt wrapper. It essentially enters the host mount namespace
      # (which it is already in) only for the purpose of breaking out of the chroot
      # before calling rkt. It makes things like rkt gc work and avoids bind mounting
      # in certain rkt filesystem dependancies into the kubelet rootfs. This can
      # eventually be obviated when the write-api stuff gets upstream and rkt gc is
      # through the api-server. Related issue:
      # https://github.com/coreos/rkt/issues/2878
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"



  - path: /etc/kubernetes/ssl/etcd-client.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUy9KyOBCG91zF7K0pUT9PywQCBAwQQCLukEMQROQY8Oqnvn92M718e/F011v1/P07EOnY/ktBXoA1rIAA/UklgrGyVhUFZD4HAkPAMQY/b9mZ9Qn8JEKlkWk1d1xMiQ0oukAKhBkgj4CTDjZXJCkFwfEufN79TZHuyIxU4EBuhxCQAG6HTVRfh2iLhFEkNgkS4QToSwL+tUuyZ0ViSySohKPi7b8hFawEI/GQUEWkhpRaSBRdyszXhWm75IvuBCZ/yGAm9Bcs3f3NK9Xt6sLsPmbhmP6+4+P/ng4hBSrnyAW/e9oonCMILt1ash91ZLWbnJ2/LzN/NKZV3pLxsPOOp+3Rew/YaU7BB5u5w2SA/dN8mlec9aLqjVd3Tl1p86bK2esA6hnjURv5XQ8+iKYazHLeZ4v78lwTC9PVlzE9uIQ5HxLkw2prKZd2mfcSsEB3WBRUGuO3bP3qAIagREgfUa3FT49wG4msZZmRO53cTVrLIqfrrUaM3uAzo5bIXvXsi1hC+nlq07o43La5jzZUcw+P5BSzZle7V55OXZpnzwDdugSm27OWqJfHWgWsk4zKnvH0tOYBnOR9PAzW3K9jojtr4xHJp4XZrguM2fdna/uZp6DdssuhUWAd6blMe1kCpOnMZDmfZMczVslzRa4KEAiAmLyJchUqj9TQk11AjTUEVAWccQLJb5WpSSmRCGh0Rel1QK8aFEQhQNYVv9V9/NipFEFFXAH4wRBQcOBXL9mIoAjh/nKxu9OXulBqd1P61nBQyPo7XC18aeJi+e5C+/YYjko6bMJSb9V8MR0XoOIQr4l56MtU2/Tjmk6yJd33sZxOGbCdpkJw4mc3kFsv8HucwSqe9fDmZH1YVnZlLvVRGdaReeNLRJ6g9y4ssyV1fL2eQx2EZncuyOgOye79U3t8Zfrdzi65xyPjJmAlpmOal6wOv0NyDFDI0ptS0tGQyv0u/tx1WCxn+NJWFuPA3Bfn5J2fo4Jfd1lWU++O1gPrcLoilE7JN0CsDtsIbQNrlNwPn0SnyCtAntUn+Nb76Ei2IWaHZSbd61mi8bkxghdqkX39GdYv1GBN4PA+2Z9jtQ2lP1ZAtvp/U/wTAAD//yf9+7VGBAAA

  - path: /etc/kubernetes/ssl/etcd-client-key.pem.enc
    encoding: gzip+base64
    content: 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

  - path: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUyc6ySBSG91xF70kHUAFd/IuagFKmAhRwhzKIAoJTAVff+fzT3Ul3LZ9U8p7kec/58+dBYlL3D0SCiBoUgYh8qeBQijSMEMhRBTiFoKIQYODC6jZcbrW54TIE7GkADBonIBzzFB8Y2xF+eeTxthHs2FieZ8IcsDKBsidgdKxseaiPoXJNI1AYXB7dGahO5IwedhbO3GQGl6ffjIzC39BB+5FEwIeVe4DgHiHzpaTt/pUm+ewEgOPqm4wJz7/JduxeHEqhQK//HZcYAHgIsDX4+YCqHQKMgNWJvGY79WRUio/YV3jw0L1qi4VTPETtWGZW/u769jjTRYH3zaPJqubuiHy+hs+bHvbDyR0yRG0RGwSa9E3JZylr/cUXgsOp6PmyHCy59Kc72LPbUj1ueVnWTqg8PCWMw8k+klWe7dz01E1d0u3uk3cvVva8eybCON5UO7w26+dVXyASfG7bpvfi0fbNnVmHySa/P71Jr5Gye24sFTd6Z0tVN/mNnSkJcASC+rl/BKYq6qHZ6q8ZWalXvSlz+pOsJjTKV2kg802m6Uonr7rLe8h8ZOWee3jT9dUWwkObtHw5xDljCr7paee1G8sPyFS9psrv5I3aFaN13BLeiYwWVjg50YC5+rlklFMsAAbgfXI4jYD3o9BiawjKNYHAQWBgv4sTyBFglgTBngNOoDT/a074p2lfdQQok/HwN9bkR911o4LSCLbrDLesMFXuYFikjZ9VujxK/QsnWhAKUG6y1rXneu9G4rY2lDqkWmBIsvg0duqU21tDvIx1KkpnNWKbDuZqAwZV18+fANXaLFBoeURtPFJJuwK+g9HMX2dZOXMp7KJ7DofQvqYMofQ8Efth2ofTcWbLyt41weL60VpBX+ORawlySVW8sOFPIRNHZHl59Dhr/cFqYzu9nKhmFBnikLtS0jjmdr0ogZF+hostSDscahe9dq5882FLK/6kLGHaJImNT7ajmClnlXt4qE/vMRg02mZ1J/cLKfmUGY39pfBsVpI5P9azXU4xSm5HaBJrVS4kwETN3MadWMd38OuX8N1+4uL/X4S/AgAA//9IzTWILgQAAA==


  - path: /etc/kubernetes/ssl/worker.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUu9ayOBiFe65ietcsEUS0+IuEBAwQMByFjoNyUFARCHr1s75vyv8t9y6e4t3r+ffnIDaI84+GvYDoRAMB/k0FSgiiSNNA3VSAEwgqQqIMP69qtAK04oglpvVIST0XDmDYhgxwM8AeBXsDbEIsaDUlmRw1qb+pS5kuGAEXVk4EAQ2gNG6SLhwTCfNjXTg0KLgb4C8Nqq/TUiWuC0egwY27iEj/h4zHLXhSD3PEExQxZmFeD2Vs3u1Yl4svDikkv2SwUPsHLKT+Rs5lc0jPhFcVbigQDc1/GT7JZcQwBCwEYEsg4uCnt8CDQMDQMDNDG7zvVmhjZD3SzbDXQ5WoUTr1lqYW7GQbktr2E5TFcvCDvvSva7MnZmA2/n5Ye8mpJIPBH57AJuX6TKu1GvfKrpvuTH1K8up6kgN92ixfdBJFjR+GaXcKVFDp4W1xZrMUz+rOaIbM5QJbK5/3q7nBbSsu2yJf4XeabZ0m33zL1P9wTq5P2bYveVyYluUw2T41sFgNbWruz7kChflyXIyE7totoNZ0TNbVFdulx09hBc+S3qFl+8ptMfG//LjZJ1YuN0vm4OFIH5uH+ybCvI3nMXl1nHfd0xHlei/S+UneQ1gn9/asd4k/+1Na+E737EQMP7jGSTVDUr7FdWYuAi2aZfzU9dPMAlBRCIDRJgheKNj+vKtEHMM1Zxhwoj8QCH42cvRDjBCwYFUNAqywDlmBQAvk39LDmCIwVTV/2X30teOoLmQ2Ul9pc2nDy7N3t7v7VBrRJ+/0t1BV25fdRS1tlGfee/eiU+ocAQdWt1d9a4wDFyFgbx0AVwMMA0taK5ciqh7nbYHnVhQ4OjTHCqts0c3mCVetzMRLOWJ0n75EWcWZFTkqP3yXp/PhPrablZ9r2nDfHEPz0CwnIdb3ZXtKIC6lQpHSJDwv0ChO8ouY71M2+XqqAx5Jd2qK96RU4aHVe3sxN04xWidb0oU42wZS5JKLWSoX97F/787jtO/ha9+2ab5zDUvxwugBk2ysxcuNjzm99rock0m1dMAW4Xt+7JvsWz/wHN2GG3al7m6YZG7WxWgp0XD5vFzIgFJ+elDWg4946K3q2ZcP+CaBgyqYqph4hrnrbLU3vJXKh4Bb3Gu8PYP8mN1tLdY/S9Kdr8AZB8kVlUuPLWQ69i4a3QsSyvjAVvzPH+HXL9hBfzvnvwAAAP//Ek5OFJAEAAA=

  - path: /etc/kubernetes/ssl/worker-key.pem.enc
    encoding: gzip+base64
    content: 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


  - path: /etc/kubernetes/ssl/ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUyc6ySBSG91xF70kHUAFd/IuagFKmAhRwhzKIAoJTAVff+fzT3Ul3LZ9U8p7kec/58+dBYlL3D0SCiBoUgYh8qeBQijSMEMhRBTiFoKIQYODC6jZcbrW54TIE7GkADBonIBzzFB8Y2xF+eeTxthHs2FieZ8IcsDKBsidgdKxseaiPoXJNI1AYXB7dGahO5IwedhbO3GQGl6ffjIzC39BB+5FEwIeVe4DgHiHzpaTt/pUm+ewEgOPqm4wJz7/JduxeHEqhQK//HZcYAHgIsDX4+YCqHQKMgNWJvGY79WRUio/YV3jw0L1qi4VTPETtWGZW/u769jjTRYH3zaPJqubuiHy+hs+bHvbDyR0yRG0RGwSa9E3JZylr/cUXgsOp6PmyHCy59Kc72LPbUj1ueVnWTqg8PCWMw8k+klWe7dz01E1d0u3uk3cvVva8eybCON5UO7w26+dVXyASfG7bpvfi0fbNnVmHySa/P71Jr5Gye24sFTd6Z0tVN/mNnSkJcASC+rl/BKYq6qHZ6q8ZWalXvSlz+pOsJjTKV2kg802m6Uonr7rLe8h8ZOWee3jT9dUWwkObtHw5xDljCr7paee1G8sPyFS9psrv5I3aFaN13BLeiYwWVjg50YC5+rlklFMsAAbgfXI4jYD3o9BiawjKNYHAQWBgv4sTyBFglgTBngNOoDT/a074p2lfdQQok/HwN9bkR911o4LSCLbrDLesMFXuYFikjZ9VujxK/QsnWhAKUG6y1rXneu9G4rY2lDqkWmBIsvg0duqU21tDvIx1KkpnNWKbDuZqAwZV18+fANXaLFBoeURtPFJJuwK+g9HMX2dZOXMp7KJ7DofQvqYMofQ8Efth2ofTcWbLyt41weL60VpBX+ORawlySVW8sOFPIRNHZHl59Dhr/cFqYzu9nKhmFBnikLtS0jjmdr0ogZF+hostSDscahe9dq5882FLK/6kLGHaJImNT7ajmClnlXt4qE/vMRg02mZ1J/cLKfmUGY39pfBsVpI5P9azXU4xSm5HaBJrVS4kwETN3MadWMd38OuX8N1+4uL/X4S/AgAA//9IzTWILgQAAA==




  - path: /opt/bin/decrypt-assets
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false \
        --mount=volume=ssl,target=/etc/kubernetes/ssl \
        --uuid-file-save=/var/run/coreos/decrypt-assets.uuid \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          'echo decrypting assets
           shopt -s nullglob
           for encKey in /etc/kubernetes/{ssl,}/*.enc; do
             echo decrypting $encKey
             f=$(mktemp $encKey.XXXXXXXX)
             /usr/bin/aws \
               --region us-east-1 kms decrypt \
               --ciphertext-blob fileb://$encKey \
               --output text \
               --query Plaintext \
             | base64 -d > $f
             mv -f $f ${encKey%.enc}
           done;

           
           echo done.'

      rkt rm --uuid-file=/var/run/coreos/decrypt-assets.uuid || :





  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    content: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-proxy
          namespace: kube-system
          annotations:
            rkt.alpha.kubernetes.io/stage1-name-override: coreos.com/rkt/stage1-fly
        spec:
          hostNetwork: true
          containers:
          - name: kube-proxy
            image: quay.io/coreos/hyperkube:v1.7.5_coreos.0
            command:
            - /hyperkube
            - proxy
            - --master=https://kube.checkrhq-dev.net
            - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
            securityContext:
              privileged: true
            volumeMounts:
              - mountPath: /etc/ssl/certs
                name: ssl-certs
              - mountPath: /etc/kubernetes
                name: kubeconfig
                readOnly: true
              - mountPath: /var/run/dbus
                name: dbus
                readOnly: false
          volumes:
            - name: ssl-certs
              hostPath:
                path: /usr/share/ca-certificates
            - name: kubeconfig
              hostPath:
                path: /etc/kubernetes
            - name: dbus
              hostPath:
                path: /var/run/dbus


  - path: /etc/kubernetes/worker-kubeconfig.yaml
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/ssl/ca.pem
            server: https://kube.checkrhq-dev.net:443
        users:
        - name: kubelet
          user:
            client-certificate: /etc/kubernetes/ssl/worker.pem
            client-key: /etc/kubernetes/ssl/worker-key.pem
        contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
        current-context: kubelet-context




  - path: /etc/kubernetes/cni/net.d/10-calico.conf
    content: |
      {
        "name": "calico",
        "type": "flannel",
        "delegate": {
          "type": "calico",
          "etcd_endpoints": "#ETCD_ENDPOINTS#",
          "etcd_key_file": "/etc/kubernetes/ssl/etcd-client-key.pem",
          "etcd_cert_file": "/etc/kubernetes/ssl/etcd-client.pem",
          "etcd_ca_cert_file": "/etc/kubernetes/ssl/etcd-trusted-ca.pem",
          "log_level": "info",
          "policy": {
            "type": "k8s",
            "k8s_api_root": "https://kube.checkrhq-dev.net/api/v1/",
            "k8s_client_key": "/etc/kubernetes/ssl/worker-key.pem",
            "k8s_client_certificate": "/etc/kubernetes/ssl/worker.pem",
            "k8s_certificate_authority": "/etc/kubernetes/ssl/ca.pem"
          }
        }
      }






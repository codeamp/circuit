#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  flannel:
    interface: $private_ipv4
    etcd_cafile: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    etcd_certfile: /etc/kubernetes/ssl/etcd-client.pem
    etcd_keyfile: /etc/kubernetes/ssl/etcd-client-key.pem

  units:
    - name: telegraf.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Teleport Monitoring Agent
        After=network-online.target
        After=etcd-member.service
        [Service]
        Restart=on-failure
        ExecStart=/bin/rkt run \
          --stage1-name=coreos.com/rkt/stage1-fly:1.26.0 \
          --set-env TELEGRAF_GLOBAL_TAGS_CLUSTER=production \
          --set-env TELEGRAF_GLOBAL_TAGS_SERVICE=worker \
          --set-env HOST_ETC=/etc2 \
          --interactive \
          --volume=varlibetcd2,kind=host,source=/var/lib/etcd2 \
          --volume=etc,kind=host,source=/etc \
          --mount volume=etc,target=/etc2 \
          --mount volume=varlibetcd2,target=/var/lib/etcd2 \
          --hostname=%H \
          --dns=host \
          --net=host \
          --insecure-options=image,ondisk \
          docker://checkr/checkr-telegraf-kapacitor:latest \
          --exec /usr/bin/telegraf -- --config /etc/generic.system.telegraf.conf
    - name: docker-healthcheck.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Run docker-healthcheck once
        After=docker.service
        
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/docker-healthcheck
        
        [Install]
        WantedBy=multi-user.target
    - name: docker-healthcheck.timer
      command: start
      enable: true
      content: |
        [Unit]
        Description=Trigger docker-healthcheck periodically
        After=docker.service
        
        [Timer]
        OnUnitInactiveSec=30s
        Unit=docker-healthcheck.service
        
        [Install]
        WantedBy=multi-user.target



    - name: cfn-etcd-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Fetches etcd static IP addresses list from CF
        After=network-online.target

        [Service]
        EnvironmentFile=/etc/environment
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/opt/bin/cfn-etcd-environment
        ExecStart=/usr/bin/mv -f /var/run/coreos/etcd-environment /etc/etcd-environment

    - name: docker.service
      drop-ins:

        - name: 10-post-start-check.conf
          content: |
            [Service]
            RestartSec=10
            ExecStartPost=/usr/bin/docker pull gcr.io/google_containers/pause-amd64:3.0

        - name: 40-flannel.conf
          content: |
            [Unit]
            Wants=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
            ExecStartPre=/usr/bin/systemctl is-active flanneld.service

        - name: 60-logfilelimit.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--log-opt max-size=50m --log-opt max-file=3"

    - name: flanneld.service
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Unit]
            Wants=cfn-etcd-environment.service
            After=cfn-etcd-environment.service

            [Service]
            EnvironmentFile=-/etc/etcd-environment
            EnvironmentFile=-/run/flannel/etcd-endpoints.opts
            ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
            ExecStartPre=/bin/sh -ec "echo FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS} >/run/flannel/etcd-endpoints.opts"
            ExecStartPre=/opt/bin/decrypt-assets
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            TimeoutStartSec=120


    - name: kubelet.service
      command: start
      runtime: true
      content: |
        [Unit]
        Wants=flanneld.service cfn-etcd-environment.service
        After=cfn-etcd-environment.service
        [Service]
        EnvironmentFile=/etc/environment
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/etc/default/kubelet
        Environment=KUBELET_IMAGE_TAG=v1.7.7_coreos.0
        Environment=KUBELET_IMAGE_URL=quay.io/coreos/hyperkube
        Environment="RKT_RUN_ARGS=--volume dns,kind=host,source=/etc/resolv.conf \
        --set-env=ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd-trusted-ca.pem \
        --set-env=ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd-client.pem \
        --set-env=ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd-client-key.pem \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume var-lib-cni,kind=host,source=/var/lib/cni \
        --mount volume=var-lib-cni,target=/var/lib/cni \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log \
        --volume cni-bin,kind=host,source=/opt/cni/bin \
        --mount volume=cni-bin,target=/opt/cni/bin"
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/sh -ec "find /etc/kubernetes/manifests /etc/kubernetes/cni/net.d/  -maxdepth 1 -type f | xargs --no-run-if-empty sed -i 's|#ETCD_ENDPOINTS#|${ETCD_ENDPOINTS}|'"
        ExecStartPre=/usr/bin/etcdctl \
                       --ca-file /etc/kubernetes/ssl/etcd-trusted-ca.pem \
                       --key-file /etc/kubernetes/ssl/etcd-client-key.pem \
                       --cert-file /etc/kubernetes/ssl/etcd-client.pem \
                       --endpoints "${ETCD_ENDPOINTS}" \
                       cluster-health
        ExecStartPre=/usr/bin/docker run --rm -e SLEEP=false -e KUBERNETES_SERVICE_HOST= -e KUBERNETES_SERVICE_PORT= -v /opt/cni/bin:/host/opt/cni/bin quay.io/calico/cni:v1.10.0 /install-cni.sh
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --cni-conf-dir=/etc/kubernetes/cni/net.d \
        --cni-bin-dir=/opt/cni/bin \
        --network-plugin=cni \
        --container-runtime=docker \
        --rkt-path=/usr/bin/rkt \
        --rkt-stage1-image=coreos.com/rkt/stage1-coreos \
        --node-labels checkr/role=default \
        --register-node=true \
        --allow-privileged=true \
        --node-status-update-frequency=20s \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --cluster-dns=10.3.0.10 \
        --cluster-domain=cluster.local \
        --cloud-provider=aws \
        --cert-dir=/etc/kubernetes/ssl \
        --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem \
        --kubeconfig=/etc/kubernetes/kubeconfig/worker.yaml \
        --require-kubeconfig \
        $KUBELET_OPTS
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target










    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Wants=kubelet.service docker.service
        After=kubelet.service

        [Service]
        Type=oneshot
        EnvironmentFile=/etc/environment
        ExecStartPre=/usr/bin/bash -c "while sleep 1; do if /usr/bin/curl  --insecure -s -m 20 -f  https://127.0.0.1:10250/healthz > /dev/null ; then break ; fi;  done"
        
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/docker run --net=host --pid=host --rm calico/ctl:v1.5.0 node status > /dev/null; do sleep 3; done && echo Calico running"
        
        ExecStart=/opt/bin/cfn-signal



    - name: kube-node-label.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Label this kubernetes node with additional AWS parameters
        After=kubelet.service
        Before=cfn-signal.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStop=/bin/true
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment INSTANCE_ID=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id)"
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment SECURITY_GROUPS=\"$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/security-groups | tr '\n' ',')\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment AUTOSCALINGGROUP=\"$(/usr/bin/docker run --rm --net=host \
          quay.io/coreos/awscli:master aws \
          autoscaling describe-auto-scaling-instances \
          --instance-ids ${INSTANCE_ID} --region us-east-1 \
          --query 'AutoScalingInstances[].AutoScalingGroupName' --output text)\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment \
          LAUNCHCONFIGURATION=\"$(/usr/bin/docker run --rm --net=host \
          quay.io/coreos/awscli:master \
          aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-name $AUTOSCALINGGROUP --region us-east-1 \
          --query 'AutoScalingGroups[].LaunchConfigurationName' --output text)\""
        ExecStart=/usr/bin/docker run --rm -t --net=host \
          -v /etc/kubernetes:/etc/kubernetes \
          -v /etc/resolv.conf:/etc/resolv.conf \
          -e INSTANCE_ID=${INSTANCE_ID} \
          -e SECURITY_GROUPS=${SECURITY_GROUPS} \
          -e AUTOSCALINGGROUP=${AUTOSCALINGGROUP} \
          -e LAUNCHCONFIGURATION=${LAUNCHCONFIGURATION} \
          quay.io/coreos/hyperkube:v1.7.7_coreos.0 /bin/bash \
            -ec 'echo "placing labels and annotations with additional AWS parameters."; \
             kctl="/kubectl --server=https://kube.checkrhq-dev.net:443 --kubeconfig=/etc/kubernetes/kubeconfig/worker.yaml"; \
             kctl_label="$kctl label --overwrite nodes/$(hostname)"; \
             kctl_annotate="$kctl annotate --overwrite nodes/$(hostname)"; \
             $kctl_label kube-aws.coreos.com/autoscalinggroup=${AUTOSCALINGGROUP}; \
             $kctl_label kube-aws.coreos.com/launchconfiguration=${LAUNCHCONFIGURATION}; \
             $kctl_annotate kube-aws.coreos.com/securitygroups=${SECURITY_GROUPS}; \
             echo "done."'











write_files:
  - path: /etc/rkt/auth.d/docker.json
    permissions: 0600
    encoding: gzip+base64
    content: H4sIAAAAAAAA/6pWUCrKLvHOzEtRslJQSslPzk4tciwtyVDSAUuEpRYVZ+bngeTKDMFiqemZxSVFmanFSlYK0TBupa6hHkSvXma+UqyOglJyUWpKal5JZmIOSGG1glJpcWoRyJjk/JTUtJz88oKi/BSQgQWJxcXl+UVg60NLjaKcSqOS3EJDjDN8080CTAtylBRqa7kAAQAA//+faTbrpgAAAA==
  - path: /opt/bin/docker-healthcheck
    permissions: 0700
    encoding: gzip+base64
    content: H4sIAAAAAAAA/7yRMW7rMBBEe55ivv4BpMCAGwNpc4TUFDmiFqFJY7lWktsHEiTETYo0aQeLh/fI///6UUo/+jY7JxNMrqx3w9OAWMMbFbeGZ/SRS1/uOV9gM4vjhxgGN4lzDHNFtx9PXjJjt48vskhJB+g0oDHUEhuS+kCMnKoSymZeTUrqXMvkDafhVy6PAspQF+rm8INjM8kZsb6XC0wlJeqD5W7TufbZjNdg+ZgQajEvhRr34wP86mXVx/m70CqSLDyoa8q6Hewt8/wHmeuHbC/7FQAA//+efA6i6QEAAA==



  - path: /opt/bin/cfn-signal
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-signal.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          '
            cfn-signal -e 0 --region us-east-1 --resource Workers --stack '$KUBE_AWS_STACK_NAME'
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-signal.uuid || :

  - path: /opt/bin/cfn-etcd-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-etcd-environment.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          '
            cfn-init -v -c "etcd-client" --region us-east-1 --resource Workers --stack '$KUBE_AWS_STACK_NAME'
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-etcd-environment.uuid || :

  - path: /etc/default/kubelet
    permissions: 0755
    owner: root:root
    content: |
      KUBELET_OPTS=""

  - path: /etc/kubernetes/cni/docker_opts_cni.env
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""

  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      # This is bind mounted into the kubelet rootfs and all rkt shell-outs go
      # through this rkt wrapper. It essentially enters the host mount namespace
      # (which it is already in) only for the purpose of breaking out of the chroot
      # before calling rkt. It makes things like rkt gc work and avoids bind mounting
      # in certain rkt filesystem dependancies into the kubelet rootfs. This can
      # eventually be obviated when the write-api stuff gets upstream and rkt gc is
      # through the api-server. Related issue:
      # https://github.com/coreos/rkt/issues/2878
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"



  - path: /etc/kubernetes/ssl/etcd-client.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUybKySBCF9zxF740OlMFhWROTFFAyCTsEboGKAgKlPn3H/aNX3bk8ufgy40R8f/8OJKbt/YXIKbING4GI/EklattIxgiBOuRA2BBw26YHqwR2j0jOBGaZc3zmdrOUHmDEhQwIJyInCvYm2MREQg21CzVp83DTVCp9Ewx8yL0EAhpBZdpkXTxlChFWU3o0KoUfkTe9gq+PqZI2pSfR6CZ8bK//DdX0CmZ6IgKLDCeMHYloxip17m5qqOWX5BSWf8jgTdkvWMrDzb0yvZubeq8iTebq953Q/u/pEDKAOScB+N2zJ+KcQOA1T2mEvqOmsuvQcTcOpyFkp2b9Qs/JCuyp7NfOVmdNbhXGfJHvMsTdIEfXbGkXtlq3N62WjE/ZH2HA+UHVND2BnsWtxB9K1eJjcgfg3e7neF3N6+78jlfbH2+Rs/kYBVqqdIQstXQ9It34WkgAvA+9TUmOfXe3IuGrM1G6xv9oUaeOtVkdt2r7UNX5leWjC2HuXYLdAjypo/Jx88RdYO4f3uf7s9NDfOoBd392gUzbFCaxgr53cJbRwV5l1vbhlLW3xK4M6suErxK0bTIx49IaeNhyMObMeihudBomb4bzrv0EXHv5jtMMJ3Q4bsFby89pHH9CZ94nVb2TNNB3vkjuh02wyQv7Q5s1AoIAUNAHRbHAPMPJaR0AZskQMAx4yimkv1VWDmNUouBpIvQyAYsNKCiiYG2icDBD+6JiRiASMQCaDQFDkeXc0h1O66p8yMmgzsus6VIY9tMuiQ8xV0Bz077NS1k5cv5CL6A+brfO1S3ty68+bOX0+/V5KVw/PHTiDFbabt8DyXAKJ68beQZ+QV47rqd1dUNm1HhVncIKYCV/Nlz0c7XnPwOsp2oTbPPNTyKeavA9O9J1SXVtzQy3xQs2q9FWx8jB34v6dIs3FsakN6UeXpvWPbgDOP58fLEBie/tzYvYXZVBgnmdIv1WqGQd9v3KWvQMu0fnaZ4fvahf50ZniYYLb+rv4szq6LZ8lKzdPujdOvGnm0rWuYSoVoyxyj51Ygd4tc2LfiCXaCireUuz7j236ag71m2+FLvp/hhP2Tm8fHqD1I4ZSH+sQDz8f1P8EwAA///4XGfFRgQAAA==

  - path: /etc/kubernetes/ssl/etcd-client-key.pem.enc
    encoding: gzip+base64
    content: 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

  - path: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUyc6rxhaF5zzFnVtXwG9MMziDKigaQwGF6Wc22PRgGzDN00fHURIpqeGnktaWvrX3/38/iDTD/p+MPN9QDRn46EspbBgyr8gyyOUCLAYEhQGBAmxYNK+yqTRpYSAgowoU0GIPLcqSKCEhJlrKdx6dW8qK1GO2I4IBpwE2QGDF+vUYVumFrRMf3NWFWe0dnLCPNqxgDu/pVV2Y7cuUZqP+glgOVuQDFxZ2CMHgy9rEJl0wJXG+Yw8sSvFNVtCSf5OtyC6xYUDKqP89LlIBcGRARPD7g1yYMiAIzGXMTdIgj6nzmVnhgxKuLpLRoe5zIIg3r2rGuGEey8Ktzp2rt/69g909bBmsBP5y45XX6dIxsyUF3q29KOvuMut2ds+Yog8kXAmz3bJTyOnFPWRxSStdVdiNBMHcWPeQqY709fZeieVf1cJ8BiPDGxo9KJ9XzlCLeL06T8fZWYmea0X0juwpHcTQ53TkapsAOs5rE92oNu+xj1emli0/La+Jq8W9dUAZtRVNKOEfnKLIzqowlHu5rE5OrTnV+XmA8YlZa2PkJlFiTcPXNbSU+9NR7iS/BT8fWqCesKXZoR/WNu1KeeffJznxpIig4/kQrTBHdKy5XgZvhpCbvN7tTJmxbtmLn8tHIIZCAQLgsOHF8IHzW6FORAgeIoIAy+BF/iyOx/iA6DQEwQIWBOn9H3PU3037qkNA55xMzwM67tLyJOVkPR9LiHqYRfwx3Tu+qPTwPsaNEklbIzsDxSV4aoj5QuuR6Sfs+SqY3aA3Do9D4g+hPZhZHbSu5k9l+Eme7DQnXZgKHs8+Db2qWmr/wbvaJm33eJcClynDspPIvbnRkQ0Z18VenIWvNDncgcr8HAXVGevLwA+9/QgWwPkslVuu6ZJCv3dpJHCxDtaybKU+4zoR0YzF8IvYqwSWmiVIdXM4v9t0/ZlO8ltHEveynxQtTTPt+/zGny46+xHfFn4nhzenb36sHdM9QOK2t5eUTSy52LM6Gj27YssajbaR65+Ooqe4NMkcurrISeGjQNFiPsqwQt0cC3sOxNnskuLXL+q7/chW/nsR/ggAAP//YTfvEi4EAAA=


  - path: /etc/kubernetes/ssl/worker.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUvbKyOhiFe67i9M4ZQRC1+IoEAgQIbiCA0ElUwo8iiITt1Z/Ze073veVaxVO8a55/fw4iGwf/GCii2MIGoOg3lQjGJjENA/C6AgJDUGFsbJmmOGhtHXJhhrnr9QXmMwtAiHwYAuFSFBGwt4GSIMngBJ/VtC5ihV9UsiATHGEVpBAQCjeTkt+TKd8g4XAWEMrEkaKFNOBzNMkm4yyQCG3F0cTy/6GaNeBJIiRMkZtpGHpI8PGSuZ2fWSr7oIRA/EsGC/F/wFIRK2qpumNxwqKqUE2AbBvxYMe4VM0QQRAmAGgYmgL89B7oMQShoePxPJ99IUvw66NaL+d6Y7Td15DQGj6dJw8iN43acwj7wdfed1QZ36FD/JMnxNFv50VPETvUWpNLMFormnwKXMGYH86P9y0vl69THcX5Lt1llr1653YXbC5eK695U2kcc30KsWLxWXl+91Krldo7APo+t71qYBFV9GT3+Jqyou+p2OJ9ZL0X1baOwzd4WOcY5a3Va72DxFpLsnMvFWmuk5g2/HbU+W54lkx15ayw3BFx73Wg20jdL7sijdTu4mVnqujUAVNipvrk2h/aSF7wqh+li4gnsjRC8oZud1OsMM4qsu7HzTReNviL3E+egdcPoRVj/Xme9+sWooh2X6l0NlZFm/reAO0FVAQCYDe5Ca8EaD/vupgCwbUIERDY6k1AfzbixAkyTeDBqholWCELhswEDVB/ywghYoJ3xcXgP9KPn6WcqeFE4m1TbhRxOUWdf+/eFzv9Lu/WS6oqbfDvaUPq7bN8RB27b3lpggBW7cDb2j4IGYLwZQFwNECIQNK+pnq4+akYGv/srCTt+3VxC3jYzAfc7lbrvcFvdXY9+du2PnfrQp5fPt8rx/SiKfHUp3rUM+Ptnei1HWj80KXN4lhll97Lx6wqwrwFWqKU2cV9seQ1GKazQ59vYyAzSFZRc9L33J27EluhF94LnrNe2uMPqAamCEUPg/hmt0veDM9V1Z+CL/KMrKd+435/jV5UJXaRnHDUfyp5o0zHYMmmhkkT6t6a5s/aWDnInww2bXY9KdbQWsZ529j9bBuySAplGNdj5sSMmcVOVic7VZ0VlS2JGbdPz1Y3+Fnfz/WNzvd+2S0u7eYquNj+lb/JlbbN6baAdzfJNFPUk2Znr3w6P/rWfErt+5CO4Z8/0q9fUGD+7Zz/AgAA//8UzQRskAQAAA==

  - path: /etc/kubernetes/ssl/worker-key.pem.enc
    encoding: gzip+base64
    content: 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


  - path: /etc/kubernetes/ssl/ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUyc6rxhaF5zzFnVtXwG9MMziDKigaQwGF6Wc22PRgGzDN00fHURIpqeGnktaWvrX3/38/iDTD/p+MPN9QDRn46EspbBgyr8gyyOUCLAYEhQGBAmxYNK+yqTRpYSAgowoU0GIPLcqSKCEhJlrKdx6dW8qK1GO2I4IBpwE2QGDF+vUYVumFrRMf3NWFWe0dnLCPNqxgDu/pVV2Y7cuUZqP+glgOVuQDFxZ2CMHgy9rEJl0wJXG+Yw8sSvFNVtCSf5OtyC6xYUDKqP89LlIBcGRARPD7g1yYMiAIzGXMTdIgj6nzmVnhgxKuLpLRoe5zIIg3r2rGuGEey8Ktzp2rt/69g909bBmsBP5y45XX6dIxsyUF3q29KOvuMut2ds+Yog8kXAmz3bJTyOnFPWRxSStdVdiNBMHcWPeQqY709fZeieVf1cJ8BiPDGxo9KJ9XzlCLeL06T8fZWYmea0X0juwpHcTQ53TkapsAOs5rE92oNu+xj1emli0/La+Jq8W9dUAZtRVNKOEfnKLIzqowlHu5rE5OrTnV+XmA8YlZa2PkJlFiTcPXNbSU+9NR7iS/BT8fWqCesKXZoR/WNu1KeeffJznxpIig4/kQrTBHdKy5XgZvhpCbvN7tTJmxbtmLn8tHIIZCAQLgsOHF8IHzW6FORAgeIoIAy+BF/iyOx/iA6DQEwQIWBOn9H3PU3037qkNA55xMzwM67tLyJOVkPR9LiHqYRfwx3Tu+qPTwPsaNEklbIzsDxSV4aoj5QuuR6Sfs+SqY3aA3Do9D4g+hPZhZHbSu5k9l+Eme7DQnXZgKHs8+Db2qWmr/wbvaJm33eJcClynDspPIvbnRkQ0Z18VenIWvNDncgcr8HAXVGevLwA+9/QgWwPkslVuu6ZJCv3dpJHCxDtaybKU+4zoR0YzF8IvYqwSWmiVIdXM4v9t0/ZlO8ltHEveynxQtTTPt+/zGny46+xHfFn4nhzenb36sHdM9QOK2t5eUTSy52LM6Gj27YssajbaR65+Ooqe4NMkcurrISeGjQNFiPsqwQt0cC3sOxNnskuLXL+q7/chW/nsR/ggAAP//YTfvEi4EAAA=




  - path: /opt/bin/decrypt-assets
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false \
        --mount=volume=ssl,target=/etc/kubernetes/ssl \
        --uuid-file-save=/var/run/coreos/decrypt-assets.uuid \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          'echo decrypting assets
           shopt -s nullglob
           for encKey in /etc/kubernetes/{ssl,}/*.enc; do
             echo decrypting $encKey
             f=$(mktemp $encKey.XXXXXXXX)
             /usr/bin/aws \
               --region us-east-1 kms decrypt \
               --ciphertext-blob fileb://$encKey \
               --output text \
               --query Plaintext \
             | base64 -d > $f
             mv -f $f ${encKey%.enc}
           done;

           
           echo done.'

      rkt rm --uuid-file=/var/run/coreos/decrypt-assets.uuid || :





  # File needed on every node (used by the kube-proxy DaemonSet), including controllers
  - path: /etc/kubernetes/kubeconfig/kube-proxy.yaml
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: default
          cluster:
            certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            server: https://kube.checkrhq-dev.net:443
        users:
        - name: default
          user:
            tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
        contexts:
        - context:
            cluster: default
            user: default
          name: default
        current-context: default


  - path: /etc/kubernetes/kubeconfig/worker.yaml
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/ssl/ca.pem
            server: https://kube.checkrhq-dev.net:443
        users:
        - name: kubelet
          user:
            client-certificate: /etc/kubernetes/ssl/worker.pem
            client-key: /etc/kubernetes/ssl/worker-key.pem
        contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
        current-context: kubelet-context




  - path: /etc/kubernetes/cni/net.d/10-calico.conf
    content: |
      {
        "name": "calico",
        "type": "flannel",
        "delegate": {
          "type": "calico",
          "etcd_endpoints": "#ETCD_ENDPOINTS#",
          "etcd_key_file": "/etc/kubernetes/ssl/etcd-client-key.pem",
          "etcd_cert_file": "/etc/kubernetes/ssl/etcd-client.pem",
          "etcd_ca_cert_file": "/etc/kubernetes/ssl/etcd-trusted-ca.pem",
          "log_level": "info",
          "policy": {
            "type": "k8s",
            "k8s_api_root": "https://kube.checkrhq-dev.net/api/v1/",
            "k8s_client_key": "/etc/kubernetes/ssl/worker-key.pem",
            "k8s_client_certificate": "/etc/kubernetes/ssl/worker.pem",
            "k8s_certificate_authority": "/etc/kubernetes/ssl/ca.pem"
          }
        }
      }






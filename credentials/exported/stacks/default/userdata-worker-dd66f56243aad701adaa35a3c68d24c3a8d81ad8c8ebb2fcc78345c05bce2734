#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  flannel:
    interface: $private_ipv4
    etcd_cafile: /etc/kubernetes/ssl/ca.pem
    etcd_certfile: /etc/kubernetes/ssl/etcd-client.pem
    etcd_keyfile: /etc/kubernetes/ssl/etcd-client-key.pem

  units:
    - name: telegraf.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Teleport Monitoring Agent
        After=network-online.target
        After=etcd-member.service
        [Service]
        Restart=on-failure
        ExecStart=/bin/rkt run \
          --set-env TELEGRAF_GLOBAL_TAGS_CLUSTER=production \
          --set-env TELEGRAF_GLOBAL_TAGS_SERVICE=worker \
          --set-env HOST_ETC=/etc2 \
          --interactive \
          --volume=varlibetcd2,kind=host,source=/var/lib/etcd2 \
          --volume=etc,kind=host,source=/etc \
          --volume=sys,kind=host,source=/sys \
          --volume=proc,kind=host,source=/proc \
          --mount volume=etc,target=/etc2 \
          --mount volume=proc,target=/proc \
          --mount volume=sys,target=/sys \
          --mount volume=varlibetcd2,target=/var/lib/etcd2 \
          --hostname=%H \
          --dns=host \
          --net=host \
          --insecure-options=image,ondisk \
          docker://checkr/telegraf-kapacitor:latest \
          --exec /usr/bin/telegraf -- --config /etc/generic.system.telegraf.conf
        
    - name: docker-healthcheck.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Run docker-healthcheck once
        After=docker.service
        
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/docker-healthcheck
        
        [Install]
        WantedBy=multi-user.target
        
    - name: docker-healthcheck.timer
      command: start
      enable: true
      content: |
        [Unit]
        Description=Trigger docker-healthcheck periodically
        After=docker.service
        
        [Timer]
        OnUnitInactiveSec=30s
        Unit=docker-healthcheck.service
        
        [Install]
        WantedBy=multi-user.target
        

    - name: cfn-etcd-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Fetches etcd static IP addresses list from CF
        After=network-online.target

        [Service]
        EnvironmentFile=/etc/environment
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/opt/bin/cfn-etcd-environment
        ExecStart=/usr/bin/mv -f /var/run/coreos/etcd-environment /etc/etcd-environment

    - name: docker.service
      drop-ins:

        - name: 10-post-start-check.conf
          content: |
            [Service]
            RestartSec=10
            ExecStartPost=/usr/bin/docker pull gcr.io/google_containers/pause-amd64:3.0

        - name: 40-flannel.conf
          content: |
            [Unit]
            Wants=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
            ExecStartPre=/usr/bin/systemctl is-active flanneld.service

        - name: 60-logfilelimit.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--log-opt max-size=50m --log-opt max-file=3"

    - name: flanneld.service
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Unit]
            Wants=cfn-etcd-environment.service
            After=cfn-etcd-environment.service

            [Service]
            EnvironmentFile=-/etc/etcd-environment
            EnvironmentFile=-/run/flannel/etcd-endpoints.opts
            ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
            ExecStartPre=/bin/sh -ec "echo FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS} >/run/flannel/etcd-endpoints.opts"
            ExecStartPre=/opt/bin/decrypt-assets
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            TimeoutStartSec=120


    - name: kubelet.service
      command: start
      runtime: true
      content: |
        [Unit]
        Wants=flanneld.service cfn-etcd-environment.service
        After=cfn-etcd-environment.service
        [Service]
        EnvironmentFile=-/etc/etcd-environment
        Environment=KUBELET_IMAGE_TAG=v1.6.3_coreos.0
        Environment=KUBELET_IMAGE_URL=quay.io/coreos/hyperkube
        Environment="RKT_RUN_ARGS=--volume dns,kind=host,source=/etc/resolv.conf \
        --set-env=ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/ca.pem \
        --set-env=ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd-client.pem \
        --set-env=ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd-client-key.pem \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume var-lib-cni,kind=host,source=/var/lib/cni \
        --mount volume=var-lib-cni,target=/var/lib/cni \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log"
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/sh -ec "find /etc/kubernetes/manifests /etc/kubernetes/cni/net.d/  -maxdepth 1 -type f | xargs --no-run-if-empty sed -i 's|#ETCD_ENDPOINTS#|${ETCD_ENDPOINTS}|'"
        ExecStartPre=/usr/bin/etcdctl \
                       --ca-file /etc/kubernetes/ssl/ca.pem \
                       --key-file /etc/kubernetes/ssl/etcd-client-key.pem \
                       --cert-file /etc/kubernetes/ssl/etcd-client.pem \
                       --endpoints "${ETCD_ENDPOINTS}" \
                       cluster-health
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --cni-conf-dir=/etc/kubernetes/cni/net.d \
        --cni-bin-dir=/opt/cni/bin \
        --network-plugin=cni \
        --container-runtime=docker \
        --rkt-path=/usr/bin/rkt \
        --rkt-stage1-image=coreos.com/rkt/stage1-coreos \
        --node-labels checkr/role=default \
        --register-node=true \
        --allow-privileged=true \
        --node-status-update-frequency=20s \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --cluster_dns=10.3.0.10 \
        --cluster_domain=cluster.local \
        --cloud-provider=aws \
        --cert-dir=/etc/kubernetes/ssl \
        --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem \
        --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
        --require-kubeconfig
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target




    - name: kube-node-drainer.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=drain this k8s node to make running pods time to gracefully shut down before stopping kubelet
        After=multi-user.target

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/true
        TimeoutStopSec=60s
        ExecStop=/bin/sh -c '/usr/bin/rkt run \
        --volume=kube,kind=host,source=/etc/kubernetes,readOnly=true \
        --mount=volume=kube,target=/etc/kubernetes \
        --net=host \
        quay.io/coreos/hyperkube:v1.6.3_coreos.0 \
          --exec=/kubectl -- \
          --server=https://kube.checkrhq-dev.net:443 \
          --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
          drain $(hostname) \
          --ignore-daemonsets \
          --force'

        [Install]
        WantedBy=multi-user.target











    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Wants=kubelet.service docker.service
        After=kubelet.service

        [Service]
        Type=oneshot
        EnvironmentFile=/etc/environment
        ExecStartPre=/usr/bin/bash -c "while sleep 1; do if /usr/bin/curl  --insecure -s -m 20 -f  https://127.0.0.1:10250/healthz > /dev/null ; then break ; fi;  done"
        
        ExecStart=/opt/bin/cfn-signal



    - name: kube-node-label.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Label this kubernetes node with additional AWS parameters
        After=kubelet.service
        Before=cfn-signal.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStop=/bin/true
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment INSTANCE_ID=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id)"
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment SECURITY_GROUPS=\"$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/security-groups | tr '\n' ',')\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment AUTOSCALINGGROUP=\"$(/usr/bin/docker run --rm --net=host \
          quay.io/coreos/awscli:master aws \
          autoscaling describe-auto-scaling-instances \
          --instance-ids ${INSTANCE_ID} --region us-east-1 \
          --query 'AutoScalingInstances[].AutoScalingGroupName' --output text)\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment \
          LAUNCHCONFIGURATION=\"$(/usr/bin/docker run --rm --net=host \
          quay.io/coreos/awscli:master \
          aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-name $AUTOSCALINGGROUP --region us-east-1 \
          --query 'AutoScalingGroups[].LaunchConfigurationName' --output text)\""
        ExecStart=/usr/bin/docker run --rm -t --net=host \
          -v /etc/kubernetes:/etc/kubernetes \
          -v /etc/resolv.conf:/etc/resolv.conf \
          -e INSTANCE_ID=${INSTANCE_ID} \
          -e SECURITY_GROUPS=${SECURITY_GROUPS} \
          -e AUTOSCALINGGROUP=${AUTOSCALINGGROUP} \
          -e LAUNCHCONFIGURATION=${LAUNCHCONFIGURATION} \
          quay.io/coreos/hyperkube:v1.6.3_coreos.0 /bin/bash \
            -ec 'echo "placing labels and annotations with additional AWS parameters."; \
             kctl="/kubectl --server=https://kube.checkrhq-dev.net:443 --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml"; \
             kctl_label="$kctl label --overwrite nodes/$(hostname)"; \
             kctl_annotate="$kctl annotate --overwrite nodes/$(hostname)"; \
             $kctl_label kube-aws.coreos.com/autoscalinggroup=${AUTOSCALINGGROUP}; \
             $kctl_label kube-aws.coreos.com/launchconfiguration=${LAUNCHCONFIGURATION}; \
             $kctl_annotate kube-aws.coreos.com/securitygroups=${SECURITY_GROUPS}; \
             echo "done."'






write_files:
  - path: /etc/rkt/auth.d/docker.json
    permissions: 0600
    encoding: gzip+base64
    content: H4sIAAAAAAAA/6pWUCrKLvHOzEtRslJQSslPzk4tciwtyVDSAUuEpRYVZ+bngeTKDMFiqemZxSVFmanFSlYK0TBupa6hHkSvXma+UqyOglJyUWpKal5JZmIOSGG1glJpcWoRyJjk/JTUtJz88oKi/BSQgQWJxcXl+UVg60NLjaKcSqOS3EJDjDN8080CTAtylBRqa7kAAQAA//+faTbrpgAAAA==
  - path: /opt/bin/docker-healthcheck
    permissions: 0700
    encoding: gzip+base64
    content: H4sIAAAAAAAA/7yRMW7rMBBEe55ivv4BpMCAGwNpc4TUFDmiFqFJY7lWktsHEiTETYo0aQeLh/fI///6UUo/+jY7JxNMrqx3w9OAWMMbFbeGZ/SRS1/uOV9gM4vjhxgGN4lzDHNFtx9PXjJjt48vskhJB+g0oDHUEhuS+kCMnKoSymZeTUrqXMvkDafhVy6PAspQF+rm8INjM8kZsb6XC0wlJeqD5W7TufbZjNdg+ZgQajEvhRr34wP86mXVx/m70CqSLDyoa8q6Hewt8/wHmeuHbC/7FQAA//+efA6i6QEAAA==


  - path: /opt/bin/cfn-signal
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-signal.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          '
            cfn-signal -e 0 --region us-east-1 --resource Workers --stack '$KUBE_AWS_STACK_NAME'
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-signal.uuid || :

  - path: /opt/bin/cfn-etcd-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-etcd-environment.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          '
            cfn-init -v -c "etcd-client" --region us-east-1 --resource Workers --stack '$KUBE_AWS_STACK_NAME'
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-etcd-environment.uuid || :

  - path: /etc/kubernetes/cni/docker_opts_cni.env
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""

  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      # This is bind mounted into the kubelet rootfs and all rkt shell-outs go
      # through this rkt wrapper. It essentially enters the host mount namespace
      # (which it is already in) only for the purpose of breaking out of the chroot
      # before calling rkt. It makes things like rkt gc work and avoids bind mounting
      # in certain rkt filesystem dependancies into the kubelet rootfs. This can
      # eventually be obviated when the write-api stuff gets upstream and rkt gc is
      # through the api-server. Related issue:
      # https://github.com/coreos/rkt/issues/2878
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"



  - path: /etc/kubernetes/ssl/etcd-client.pem.enc
    encoding: gzip+base64
    content: H4sIAAAAAAAA/wDXBCj7AQECAHgtAXNFpLmjNXHaaI4vnp9Kiu39c7e3/npF4nDh5ZaiJwAABK4wggSqBgkqhkiG9w0BBwagggSbMIIElwIBADCCBJAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMqgGl0NQOq6JNbc53AgEQgIIEYc+xRpRXbldPjRfenrc5y15CnOSMqCD7D106gJjONXH4+veet6jcXHTI//6PQ7xw2D0LI/HzxnMZbk1EQwjlfGr+NHHkViuFLPkYtbZCp6S3nNzycn7DwnPe+K80mGQu7OF5lGia9pkQ+ufpxuk/RFJmDBOXCr2RwWLn26F6Y3Da1bmjUsSDDwYlyqPWF2fXV2BG5Ir7J+Dl9gSGg3VEGz5zyj4YPlWNcLiiVx8ZtcFBQMHk5blv4wEkZyFsHTugnFgJSMKVMGSNus+vzuw7IPOhNESKhdGtOe5Fc30qFWCtCxTScr+jfDBq3EzAfwg9xNG38NakLA5I9amm73t4Umk2V16dGcvNrgNoaV8WmGp9fstVluBObpLtLSltiVkod+DeVp72+umzquNFov387EyU3KOt1ggt6x8JEXrwXz/O7wv22Q1twgQHApsph0ikPo1OlkdOU0CpKAaF5fyrMI7WKrMJIzkmIFjd2aE/PFfvkZ16MxpXDCrQPrbvj4ndSdYdhYGS1ukHO00H31eiJbs3aFlq2bbBWqIf9svZ1OuzQGIiVW/aLz2QEOytMP3/+M3EX6NbvaH8KtDqUWNXLDk23Uyay6elKUpCtlrFJf6Aj5jIvin2rjIUJWKbpEqVIuuq1WWYxYSsIf+9yPyg1XFcSaQy4Wt4KqHU0pJ7hXOXCce5B/rLGYBpdbnioEInwsBNHdZmwutz6KTRGSEVrif/7/21gaK41PipMjyeu8i9rLdc8jMC254T4FNC4CyY55WpRUCBfEvtYgr9R21OfnAl4utshQgPRNSDRcACJGKcGrPm35GEjjjdUwX4QTRUXimhY4AAw0bK3CuOORO7T+Pt9y8I19dA7la11PZk2JOcx0/9cLktV12sYFAm8tnEgjUVamIiBmFdfeM9NN3Sx+uRZbyZv7gPTAB+bSA/XHIeSHXgK3SzwRhMnROFVujfIu9boJL+eQZBq9GHQKEG05kpQfNVte48ta8s/qB0tOHP8YYNg5ziVcnB2zq5yITUj0XdA8dxYrf9C3b/CtmBGJIxi05VYug7EzmLZsUzkviOBKF0o6PhJxlpik2lDJ9fXr69bifCUIq9sMVHLvQFFK4aGq7NSRpJJUNtrfFXh5hB82UWrrLo6Wafl71LS0bzMec7EFQ8Ira8bUuXIyhfQkHjqkFcXeOZlteBBg9PvV5QJ40sfy+OwPC6ClFU+OUcbbhld8Lt1N8UoY6u9FFZ2hZlXlaj5Kzj2t02NkYLdNXb1PrO3vQhbL+0mnkaocObQDvComQk0jXIrZ/1wNItWTwt+irFruQQjcEP8S/UV34dEvBQlYJD+z6gKdTm3SCMx7PiBo5gRqs/fFo9U9Oo3JfIXcEsjzKeF+mIthdYUE1FAsZQJ+4HuCANn6xWYItDfOM8NvBhzp5sKM7ZmAS4rd2sFUVfVrmmt+JdMEF1iMDPM7mMeu+s7bxQYBJfW9w9Ku8Gn4kVQo6TsZ4U9BYKPzg0AQAA//+sLaaz1wQAAA==

  - path: /etc/kubernetes/ssl/etcd-client-key.pem.enc
    encoding: gzip+base64
    content: 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


  - path: /etc/kubernetes/ssl/worker.pem.enc
    encoding: gzip+base64
    content: H4sIAAAAAAAA/wAhBd76AQECAHgtAXNFpLmjNXHaaI4vnp9Kiu39c7e3/npF4nDh5ZaiJwAABPgwggT0BgkqhkiG9w0BBwagggTlMIIE4QIBADCCBNoGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMkXyMiC8pszk5kKsBAgEQgIIEqzDmUeHWijryl1iSp5CByw3b8Mt3+1wblFrrtwxch0gNR/3UhsiT76RS4Adk0zCHLptW+7uhtr4MPBSqk5K3BECou7IEUQNmeNg5qCtUepiRl1iqaQYE/saTtLZiGu1GLw259Pg4i8xHZUd8irU9DnETTuIE2veLcAreGLW3562/pcmRYenrPEPj5/cGSaoKrHUnHPh604fsGqowAeZKSfnYdhzxQlv9pG5Y76yuUsI5+Th2y8HqjW3FChJ93XwxRZX4hvovf+ApA2KXAJofwJYpCd4rqkHWnu1hM8NPERNoh3esVh0hHUKc6u3znrcHikyhYB9HbpDhHwU1GtzA8EEYx+vB4iO4NQO84vPuCXV84K6Ph9+iXAzztsniJvgY1KpHydPm3BjBYPDA4c6KaDR48NandBCbex+OHwgrIEu8Y9cq16LK9+82xarr8Jp5Ra1s+g7Wfum6fwcilXZO8H4As3/+sXTfZo+7k5Dnhhkzpanu294QceHFxD/A0wQxHc0ykS6cbyUWBXzNMNwPmTKb8q4D1/S4C5rUAdUySqptcT+R1TQ8elNl0o/BXmWeW4yBsoIkyx1z1bZZoaySqIMe1/+xdqAQSrCmETY1XAIcvWtlNeBHFOnRhIHBlKhD7oCKo0pugW00rhu/c4lUyh/7dt15SIpyvJ07YPToAYeIbdblBeuRvJcvj1xEEAqVBYRTfwSqeesRFTa2007i60oDM37f4uw0lZPASWZ9gFjKabtYYsYmkEwP3CuDOYit9GVxjjm/oKHzhXuimaDDjEYhCLlLS8VIeEpvzSVQ/vHWU1DRRrIGQFWeFXT3Pjp+TmyQR7YafIsIB+WqFRB2aszzipBto+SEU02AP5UREX7CqMD/xeaKNg0pKJ09BF/Qm6f8ab8fFOv0xAhryJrtwhghnMei8U7yaI9GEt4EA2yMeqLSPImijXjP+mul9S6nmQIptu5ZpVrcvkJODSrH0RwMaeWb5Zqb8x3UNa4JMwZ+vG2biCTJRYTmD0xsTZwXBu2tekPQk/0Es9HCMKw2DXy4VoJBgDQjibbBXXbUeTuVPVcLoqPN58G5DxtxuZMf+UfrGJbFUGnp9mTpXyN0IhXCc1DNMeRE30WTDm7Twj2Vg0F2yQ6pqt5RIjPr718EE46Mq4LVFEV8RzFcyZ8KhiucYScvnDv3JJX32jD9lS4UDFmTEOx1sCBcund1NDiTMv+n5LJZrNpftIxDN1eFROPcpeGw5IAlnI6TVlQS0ciNSXmjNwbgDtltk89lGEqOMzltp2tAN+PikwHi9hV6zU2/Y9EFWIAN6oOoDuJ/nYNuuP+Wo7Rfl3vtFKHaTDfnEip3kpmR3RQukj7T6YIktDK3sQAsZUlVOJuKsSBoiOk6VqmGxnEuA/g8I/a5i8ruLCxkBdEN8OrdIJyX2lTmkxpKCJiqoyVsKSG1TL3c7Y+OJQrI6tU2zFeywhC9xJTDoPFfahYbnTdR4PC/wBiPPPJPQvoPsm0KthZY+kxw8FUKL1u7ZaKKboup3x/rO7DWylKnY5B/nfp3vGTb3oao1wCVU7RzsgPPvBEJMn0wmU9Bk2J2NYlYV8alLUkBAAD//zOVbDQhBQAA

  - path: /etc/kubernetes/ssl/worker-key.pem.enc
    encoding: gzip+base64
    content: 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


  - path: /etc/kubernetes/ssl/ca.pem.enc
    encoding: gzip+base64
    content: H4sIAAAAAAAA/wC/BED7AQECAHgtAXNFpLmjNXHaaI4vnp9Kiu39c7e3/npF4nDh5ZaiJwAABJYwggSSBgkqhkiG9w0BBwagggSDMIIEfwIBADCCBHgGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMIavdC0gAhlrmBg9qAgEQgIIESel5KdSj6HqSutYosDVzrkNvjnvi2q2dDWDwq+ctxFrAfauDsHuI1CNPJGtnmPrpjDEPbOhF0Tr3a4j0vWAt1Yycamc+RocCDASS9KWh8gvDanF8Dll6n+CdzgKMxatvA5x7Z0JcHo+yh1vsYMLLQCm0UWiru8Tr6j18+ZbD7z6BtmshpFKwbosWZotuqSLTBhYfuFIORUwXphGuCyJatmK14SbKA/4vblculPFDwc6OnqwJMcxbOoUgc8dVl/M8XHTudopDWrDYXtrMHpjyuzDgYqx8/DImdV5Mer66ftflF0O7RbB3JRyTPWd9vMzrE5g2yPKVh1wTb/tV+anU74WEuex1eCPBpxWfJyzGT8uP8UPngxsOocuVfOqUwXpYiwLA5teAJHRu2RVUwMurWnzeCVGvj6O9OHD53MOh5mG3+mfv3ZLZkJ4hOa/Ld/O4gn4E7dSFZZ76QRTI5Y9gFVYUhm39cH71fSFuH3Yb0UzL7xkT8w+bnXMPlx2ujKTElDE3XxRfW4yY4CPOEqP9FWQzgJwQpAo0oKL/INDUsjj3SUeGknd46fyKpItUniGiOLzfjFf8IMD+fqXtg5o3YofSR1dxoC28pNEDYWnaheeRJHL7cMs7TP5pSRYxPXxMTsOUleBPfj31EDp4NIyG24AFEpkoFCQt6xL3WXuvEgvqoctoZqhlD9pd2viUGN38TfjjB2Eur20YQAoOX74juIK5nvS3Iuwbi+6bxv8AdqPQkUC/sA/7bxTlorjvMQSdLg2yB3+qn6CLDEqs0Sa0Y40pN0T9uJ4cpAIBgev37I7+ZCT3c7bm2ljsSEmzeziNnatq44MZ7VYEGAXlegLwgyRYKjm0dLqVVJMlU1FTrdeyIRHYrb3glCI1o6PCZbaVCpONzzZIqEkcgGJYxTgso4HLv0ty9O61ziEjo3XUf9hLXrVekvV5kNJi/b4fOm04kT7loyFV05eaDWFmKMV8wbUn8kH96OH0+/b5ErsQMI1t71z0sZjzQ9CjvOn3HlQE7q8lb1XL5iNi4dBSuJb9xPlI66+gRRbxBeTPx6CauW3jOfMZIUnpYugljz1BTwiRHNvf99Rn3Jd21YhgoJqgyaP7JSIuCmbwXdpPQxs+vd7/r3wLcjum7GbZL0rjIp5FJu2h3VKa0Z7kzaBT87Jj0jadz2WOcFb2vkrrYmXE5PGJvnzqyKEa0kPiuaCxsW6fj8+DOs6BhdBgAaZ+3cAhUE7Ns/vXcCxWOpTadVkFvjJsfwH6fTVGN4G1qhuAK6fwPUWtR4trZ2vtuAWt2oOWXSMyZx/hWR7Cagl4ZzCzE/8IDAqtViW2z4Vn0Cc6NYHkfsGhFa/rwikalTGnQHpwaqLsiqIhRuCGuBf1Wtr8SKPEuQM9x5thKxOmtYNcBhVtmnvmCY5cOZi3xS7FKis4YiLJeeZGvPk1AvXbtvEW/Q6TMUC+Q9PL6wHOAQAA//+JGEI6vwQAAA==





  - path: /opt/bin/decrypt-assets
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false \
        --mount=volume=ssl,target=/etc/kubernetes/ssl \
        --uuid-file-save=/var/run/coreos/decrypt-assets.uuid \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          'echo decrypting assets
           shopt -s nullglob
           for encKey in /etc/kubernetes/{ssl,}/*.enc; do
             echo decrypting $encKey
             f=$(mktemp $encKey.XXXXXXXX)
             /usr/bin/aws \
               --region us-east-1 kms decrypt \
               --ciphertext-blob fileb://$encKey \
               --output text \
               --query Plaintext \
             | base64 -d > $f
             mv -f $f ${encKey%.enc}
           done;

           
           echo done.'

      rkt rm --uuid-file=/var/run/coreos/decrypt-assets.uuid || :





  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    content: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-proxy
          namespace: kube-system
          annotations:
            rkt.alpha.kubernetes.io/stage1-name-override: coreos.com/rkt/stage1-fly
        spec:
          hostNetwork: true
          containers:
          - name: kube-proxy
            image: quay.io/coreos/hyperkube:v1.6.3_coreos.0
            command:
            - /hyperkube
            - proxy
            - --master=https://kube.checkrhq-dev.net
            - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
            securityContext:
              privileged: true
            volumeMounts:
              - mountPath: /etc/ssl/certs
                name: ssl-certs
              - mountPath: /etc/kubernetes
                name: kubeconfig
                readOnly: true
              - mountPath: /var/run/dbus
                name: dbus
                readOnly: false
          volumes:
            - name: ssl-certs
              hostPath:
                path: /usr/share/ca-certificates
            - name: kubeconfig
              hostPath:
                path: /etc/kubernetes
            - name: dbus
              hostPath:
                path: /var/run/dbus


  - path: /etc/kubernetes/worker-kubeconfig.yaml
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/ssl/ca.pem
            server: https://kube.checkrhq-dev.net:443
        users:
        - name: kubelet
          user:
            client-certificate: /etc/kubernetes/ssl/worker.pem
            client-key: /etc/kubernetes/ssl/worker-key.pem
        contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
        current-context: kubelet-context



  - path: /etc/kubernetes/cni/net.d/10-flannel.conf
    content: |
        {
            "name": "podnet",
            "type": "flannel",
            "delegate": {
                "isDefaultGateway": true
            }
        }





#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  flannel:
    interface: $private_ipv4
    etcd_cafile: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    etcd_certfile: /etc/kubernetes/ssl/etcd-client.pem
    etcd_keyfile: /etc/kubernetes/ssl/etcd-client-key.pem

  units:
    - name: telegraf.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Teleport Monitoring Agent
        After=network-online.target
        After=etcd-member.service
        [Service]
        Restart=on-failure
        ExecStart=/bin/rkt run \
          --stage1-name=coreos.com/rkt/stage1-fly:1.26.0 \
          --set-env TELEGRAF_GLOBAL_TAGS_CLUSTER=production \
          --set-env TELEGRAF_GLOBAL_TAGS_SERVICE=worker \
          --set-env HOST_ETC=/etc2 \
          --interactive \
          --volume=varlibetcd2,kind=host,source=/var/lib/etcd2 \
          --volume=etc,kind=host,source=/etc \
          --mount volume=etc,target=/etc2 \
          --mount volume=varlibetcd2,target=/var/lib/etcd2 \
          --hostname=%H \
          --dns=host \
          --net=host \
          --insecure-options=image,ondisk \
          docker://checkr/checkr-telegraf-kapacitor:latest \
          --exec /usr/bin/telegraf -- --config /etc/generic.system.telegraf.conf
        
    - name: docker-healthcheck.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Run docker-healthcheck once
        After=docker.service
        
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/docker-healthcheck
        
        [Install]
        WantedBy=multi-user.target
        
    - name: docker-healthcheck.timer
      command: start
      enable: true
      content: |
        [Unit]
        Description=Trigger docker-healthcheck periodically
        After=docker.service
        
        [Timer]
        OnUnitInactiveSec=30s
        Unit=docker-healthcheck.service
        
        [Install]
        WantedBy=multi-user.target
        



    - name: cfn-etcd-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Fetches etcd static IP addresses list from CF
        After=network-online.target

        [Service]
        EnvironmentFile=/etc/environment
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/opt/bin/cfn-etcd-environment
        ExecStart=/usr/bin/mv -f /var/run/coreos/etcd-environment /etc/etcd-environment

    - name: docker.service
      drop-ins:

        - name: 10-post-start-check.conf
          content: |
            [Service]
            RestartSec=10
            ExecStartPost=/usr/bin/docker pull gcr.io/google_containers/pause-amd64:3.0

        - name: 40-flannel.conf
          content: |
            [Unit]
            Wants=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
            ExecStartPre=/usr/bin/systemctl is-active flanneld.service

        - name: 60-logfilelimit.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--log-opt max-size=50m --log-opt max-file=3"

    - name: flanneld.service
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Unit]
            Wants=cfn-etcd-environment.service
            After=cfn-etcd-environment.service

            [Service]
            EnvironmentFile=-/etc/etcd-environment
            EnvironmentFile=-/run/flannel/etcd-endpoints.opts
            ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
            ExecStartPre=/bin/sh -ec "echo FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS} >/run/flannel/etcd-endpoints.opts"
            ExecStartPre=/opt/bin/decrypt-assets
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            TimeoutStartSec=120


    - name: kubelet.service
      command: start
      runtime: true
      content: |
        [Unit]
        Wants=flanneld.service cfn-etcd-environment.service
        After=cfn-etcd-environment.service
        [Service]
        EnvironmentFile=/etc/environment
        EnvironmentFile=-/etc/etcd-environment
        EnvironmentFile=-/etc/default/kubelet
        Environment=KUBELET_IMAGE_TAG=v1.7.5_coreos.0
        Environment=KUBELET_IMAGE_URL=quay.io/coreos/hyperkube
        Environment="RKT_RUN_ARGS=--volume dns,kind=host,source=/etc/resolv.conf \
        --set-env=ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd-trusted-ca.pem \
        --set-env=ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd-client.pem \
        --set-env=ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd-client-key.pem \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume var-lib-cni,kind=host,source=/var/lib/cni \
        --mount volume=var-lib-cni,target=/var/lib/cni \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log \
        --volume cni-bin,kind=host,source=/opt/cni/bin \
        --mount volume=cni-bin,target=/opt/cni/bin"
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/sh -ec "find /etc/kubernetes/manifests /etc/kubernetes/cni/net.d/  -maxdepth 1 -type f | xargs --no-run-if-empty sed -i 's|#ETCD_ENDPOINTS#|${ETCD_ENDPOINTS}|'"
        ExecStartPre=/usr/bin/etcdctl \
                       --ca-file /etc/kubernetes/ssl/etcd-trusted-ca.pem \
                       --key-file /etc/kubernetes/ssl/etcd-client-key.pem \
                       --cert-file /etc/kubernetes/ssl/etcd-client.pem \
                       --endpoints "${ETCD_ENDPOINTS}" \
                       cluster-health
        ExecStartPre=/usr/bin/docker run --rm -e SLEEP=false -e KUBERNETES_SERVICE_HOST= -e KUBERNETES_SERVICE_PORT= -v /opt/cni/bin:/host/opt/cni/bin quay.io/calico/cni:v1.10.0 /install-cni.sh
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --cni-conf-dir=/etc/kubernetes/cni/net.d \
        --cni-bin-dir=/opt/cni/bin \
        --network-plugin=cni \
        --container-runtime=docker \
        --rkt-path=/usr/bin/rkt \
        --rkt-stage1-image=coreos.com/rkt/stage1-coreos \
        --node-labels checkr/role=default \
        --register-node=true \
        --allow-privileged=true \
        --node-status-update-frequency=20s \
        --pod-manifest-path=/etc/kubernetes/manifests \
        --cluster-dns=10.3.0.10 \
        --cluster-domain=cluster.local \
        --cloud-provider=aws \
        --cert-dir=/etc/kubernetes/ssl \
        --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
        --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem \
        --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
        --require-kubeconfig \
        $KUBELET_OPTS
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target










    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Wants=kubelet.service docker.service
        After=kubelet.service

        [Service]
        Type=oneshot
        EnvironmentFile=/etc/environment
        ExecStartPre=/usr/bin/bash -c "while sleep 1; do if /usr/bin/curl  --insecure -s -m 20 -f  https://127.0.0.1:10250/healthz > /dev/null ; then break ; fi;  done"
        
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/docker run --net=host --pid=host --rm calico/ctl:v1.5.0 node status > /dev/null; do sleep 3; done && echo Calico running"
        
        ExecStart=/opt/bin/cfn-signal



    - name: kube-node-label.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Label this kubernetes node with additional AWS parameters
        After=kubelet.service
        Before=cfn-signal.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStop=/bin/true
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment INSTANCE_ID=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id)"
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment SECURITY_GROUPS=\"$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/security-groups | tr '\n' ',')\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment AUTOSCALINGGROUP=\"$(/usr/bin/docker run --rm --net=host \
          quay.io/coreos/awscli:master aws \
          autoscaling describe-auto-scaling-instances \
          --instance-ids ${INSTANCE_ID} --region us-east-1 \
          --query 'AutoScalingInstances[].AutoScalingGroupName' --output text)\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment \
          LAUNCHCONFIGURATION=\"$(/usr/bin/docker run --rm --net=host \
          quay.io/coreos/awscli:master \
          aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-name $AUTOSCALINGGROUP --region us-east-1 \
          --query 'AutoScalingGroups[].LaunchConfigurationName' --output text)\""
        ExecStart=/usr/bin/docker run --rm -t --net=host \
          -v /etc/kubernetes:/etc/kubernetes \
          -v /etc/resolv.conf:/etc/resolv.conf \
          -e INSTANCE_ID=${INSTANCE_ID} \
          -e SECURITY_GROUPS=${SECURITY_GROUPS} \
          -e AUTOSCALINGGROUP=${AUTOSCALINGGROUP} \
          -e LAUNCHCONFIGURATION=${LAUNCHCONFIGURATION} \
          quay.io/coreos/hyperkube:v1.7.5_coreos.0 /bin/bash \
            -ec 'echo "placing labels and annotations with additional AWS parameters."; \
             kctl="/kubectl --server=https://kube.checkrhq-dev.net:443 --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml"; \
             kctl_label="$kctl label --overwrite nodes/$(hostname)"; \
             kctl_annotate="$kctl annotate --overwrite nodes/$(hostname)"; \
             $kctl_label kube-aws.coreos.com/autoscalinggroup=${AUTOSCALINGGROUP}; \
             $kctl_label kube-aws.coreos.com/launchconfiguration=${LAUNCHCONFIGURATION}; \
             $kctl_annotate kube-aws.coreos.com/securitygroups=${SECURITY_GROUPS}; \
             echo "done."'











write_files:
  - path: /etc/rkt/auth.d/docker.json
    permissions: 0600
    encoding: gzip+base64
    content: H4sIAAAAAAAA/6pWUCrKLvHOzEtRslJQSslPzk4tciwtyVDSAUuEpRYVZ+bngeTKDMFiqemZxSVFmanFSlYK0TBupa6hHkSvXma+UqyOglJyUWpKal5JZmIOSGG1glJpcWoRyJjk/JTUtJz88oKi/BSQgQWJxcXl+UVg60NLjaKcSqOS3EJDjDN8080CTAtylBRqa7kAAQAA//+faTbrpgAAAA==
  - path: /opt/bin/docker-healthcheck
    permissions: 0700
    encoding: gzip+base64
    content: H4sIAAAAAAAA/7yRMW7rMBBEe55ivv4BpMCAGwNpc4TUFDmiFqFJY7lWktsHEiTETYo0aQeLh/fI///6UUo/+jY7JxNMrqx3w9OAWMMbFbeGZ/SRS1/uOV9gM4vjhxgGN4lzDHNFtx9PXjJjt48vskhJB+g0oDHUEhuS+kCMnKoSymZeTUrqXMvkDafhVy6PAspQF+rm8INjM8kZsb6XC0wlJeqD5W7TufbZjNdg+ZgQajEvhRr34wP86mXVx/m70CqSLDyoa8q6Hewt8/wHmeuHbC/7FQAA//+efA6i6QEAAA==



  - path: /opt/bin/cfn-signal
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-signal.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          '
            cfn-signal -e 0 --region us-east-1 --resource Workers --stack '$KUBE_AWS_STACK_NAME'
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-signal.uuid || :

  - path: /opt/bin/cfn-etcd-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-etcd-environment.uuid \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          '
            cfn-init -v -c "etcd-client" --region us-east-1 --resource Workers --stack '$KUBE_AWS_STACK_NAME'
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-etcd-environment.uuid || :

  - path: /etc/default/kubelet
    permissions: 0755
    owner: root:root
    content: |
      KUBELET_OPTS=""

  - path: /etc/kubernetes/cni/docker_opts_cni.env
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""

  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      # This is bind mounted into the kubelet rootfs and all rkt shell-outs go
      # through this rkt wrapper. It essentially enters the host mount namespace
      # (which it is already in) only for the purpose of breaking out of the chroot
      # before calling rkt. It makes things like rkt gc work and avoids bind mounting
      # in certain rkt filesystem dependancies into the kubelet rootfs. This can
      # eventually be obviated when the write-api stuff gets upstream and rkt gc is
      # through the api-server. Related issue:
      # https://github.com/coreos/rkt/issues/2878
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"



  - path: /etc/kubernetes/ssl/etcd-client.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUuQ6rSBBFc75icmuEjfFC2Bu4wQ00O2Te2GwDXqCBrx/5aaKZCm8Fp0pXOn//BhKD2n8h4gVUpwgE5E8qMUqRjBECN78AgkJQUJrkRS2LKXxeucA8Na02o+VwsQEnR8iBMAPiMbA3wCokEioZPa2jKvNX5XXNRoKBAws7goAFUPmu0mf4TRUiDuXFZsFFOAGZWVDMrKYiLi+2xIK7cDBV/g3HuAY984jAIsUR5xYR5fsam49jrK8vM8kYvPwhg5HxH1jK/NXjatj3Y2x/TnHUX3/v+PS/p0PIAS4K4oLfnreoKAgEjoclk+dXDyU+ub8y3qSVsmqHe7dwh3dQ7casDWti9cEy3G/XaV5NN8+iimp47up8UF8LHUoXqLAeNHb8LbiyLJ3VQbbMRXKvA/U0dMdtZ9jvzeqztAZ/pddjsFw2QaNPj8c6LJbqWpde38Px0WjPYY/t4NoNGoBt2H7kp3k7Y+OQN9w24HiPSMCKhuaRPg1ns5j3NOmg9lUUqdnM/Kmlhibe1YMnjketQzCDMO5R9F7wHfa7wV4X23y4nqqW6PU3NPY7x5pL8MaTE0nPVenOFnL8JDfu/SdxSu/RnBa7V4rfSPskeD4q5yEN9/NmqlM9XgTOZg8yV/Pr7ViQUgqt2xcnTwunVY5UJ6ncEAFBADixhqFQ4CLFkbd0AT/IEHAMirhgkP2qvJqcM4mB1kDoYwAe6lAwxMDSQP7L8Ol5jTmBSIQAqBQCDuy1y+0Pg/53kXgyuRjCRWdpay0WNFBv4flIc1r2/sqi/qT1u/06J9fylIIg3aUfmU2qumLeK2NnfU2bS1ff1ci5V5Ja5rZ1VDZ9bd36zag6UTy4h5Mia1b2GQ+eGK34uylxND5QudnoeVFsLpllu0kbM17rUvwANxSaJLX38lCkLKp2ddyIcdtU4OAY20q2FvDVbm1jpuZQPfEFbCbEVbp7NC07WVKGtDYSU34qNEIhUd9JLMtlb70W2DXG5fP+Snuh2CDrnJyukW623ccpniGJqWeUu1HqvCefsJqIzte+R3Gbvvl786mW7M5rIXPg5LIS2NPgu8ouc/dbPCoRMofwlJ0dq4Oz9McKxMb/N8U/AQAA//9zpb5pRgQAAA==

  - path: /etc/kubernetes/ssl/etcd-client-key.pem.enc
    encoding: gzip+base64
    content: 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

  - path: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUy86ySBCG91zF7MkEUVRc/IvqpjnIsQHlsFMQRFAExQaufvL5Z2aSmV4+6eSt5Hmr/vx5iGiG8wcmfmioBoaQfClnGwbeKBhDjktgBoLSQKCAg8q6u9aVtmMLBPSlggKN7ROmsEQ5UmoSdu3zaN9wVqSusplQGyQNxAOB0dZPq2OVBuItCeGissXozLC2Q3t0FXuyb+ikssX0m5GR+xva+DCSEDxUOkcEbYi1t5jcD+8kzmfbB6aU32SFsPybbEXO1TYMxBm3/45LVAAXA5Xh5wMuTQyUwBzvU9NyX3JJK++xFddq0gtFY3G4ei+DxfGzVBPaLuOp0gZ6HUjDZ5QkeqaGczLm6UbHx7mWrZW/kH3bQs1RcntHaoaAS3lpF7vSIxr6zovs0c0NRwFaQAO7RiGkUSo51ZcBfkTtPtzJfBPa4zqZis24NPCn5d5S4Sb1XFnRVX/Un7a41+0hjusxLMP6VGhrJ3bR+ZEPlw5Wp9es2540PROI885uTjuBk+Vy5TWvzBZOvLfAa3nYCqn5pC2RE8L318Yx6ttnKrrRyijWKtWKmf/hl3qz0LdLVHEfbx241Fts8+vMLPoWM//sHJi+P2O+Sti6ikSsaa60DeiE4uCT8mJqpgp/ky5HjRkKBxRQO9nMCMH9UahTGUEhEwQ2ho7+Lo6/CIHqAoIDA0aQMP9rjvunaV91BJJ6/3AEtpnU5Qmxhxjk5/oMW6F4Mb7EYzAdDKubSbKrJAG6jcQR785XfLJ7iJdUN2dkpdmzEozxuN2Oa/Z0V8S9ycOB37RvLdP5F5t8CClmfbnHhbcfufywCtr7uZ+kiFbGY1vh4hW/Lv2lMFHh1cY+/aAomNrW8UWqIw9lj15WZOtcLaO0FwYOd+/OYM8T/xLucibfXJEisTvy5+59H+z6SvLV9oLHuJMbLPBTe3/fLrrjlsHRG7SkDzl+2w9Pa09LWIIniWKzup0u8roL123T+PyJNZfKDHeBqHQ+y6NZS5tltns6emO6ZlWNnG6hDEz3VX/AUs7wLsXX2USdonuiun+frdvG0BH8+sV9t584yv8vwl8BAAD//4Bs1gYuBAAA


  - path: /etc/kubernetes/ssl/worker.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUPZOySBSFc37F5tbWgIBI8Aa37QYRGuRDFDIBh0ZFvm3k12/N1GbvDc8JnuCeev79OURMy/1nR4LIMqwdROQ3FahlYYp3O2BVCdxCUFoWOuGu32i7N+Qc+8nBblKLvXMXfOIgH/ghIgGFrQnSiQg7Rq2rHFdpKLFCpjPB4KHSjRHQCK1HKalPY7ImfM9yl0Y59yKy0Khc6N3iZ5a7Ao0e3MPW+v9wPt+hpQHhmCc49n2bcNYX58PTORtyvpATRdYvGWbq/ICFNJTkTD706cXiZUkqCqK5CzsztDIZ+wSBfwJQLIQ5/PQ2NBYCH7tKk7YKH4+CHgbXka98MVV6XbQu5Yah1rtu2sTr3/320z6MuiBG0d7PW3mX3G4jUlbfc7y5KHdHDEVh39W1oUL1oUesL5nlRnG0EGslR7f1q8DmlMTO3D6OwMSlnGJlbX+LG8kPFQler/KcCWnObusFrbUxQNrgjpkI8/O6TNfjB8RGSoP9vF8lafFYfRRJPaap2EjxpPX2tjx9gvoqJM6eiRCdnS62FBuPw17h8eEyzig1U9fNu3tkOqBo8byIj2OooKmv2p2jJUuxaCxxBBYmuuybadUmstsgsHVYeIceLr8ceaSTPPQ/j/exMAJvqKQhJu4qaTS/m97xSnY1KsxTlpBUUxdZL6CkCMC8JxjdKCg/7yowJ+iL+wS4ZTQYop+N7MMTwRhsVJa9gEpiID/HcAf5twwIoRimkvHOecWLc45ZLvsjDdV7tpZ4cQmeTv2cCjP+ZLUxCGWpdE4d32mlttkreOa1yjIMLiofHXtUps5FBP5gAHg78Ak81uH1uKsCv5/ydduPwtG/NXh9fDa3LjMucKXMK16rjb0Z73r6GrjkG81r2CbKJkW9I9++FmRrqnJ/TwmuNsFGiJtuTJBYwon5+DizhbLWWXV22MN6x+ovsLtZPKvv1v52p8pQo5nOCdOm6RVcutrphAbb6Bmrn0aWQVKNUBMXdPWMDEU3NC3qec9j++qdw+Jdj67KBm4fLvO3030dBkPXwkl47LMQPnut5/yQka9mL23NQ7CFBuPUOlTTe0AbJyjK8sBZPtTlolE3lXPvcql0PTFnQeT+EbTPuPPXr6R5DqZs7w9N+L3E+geT6bTY3j03bxfurWrZP23k8DvXgdpu9ig3TPWE2rx7Dfz5I/z6hbj4b+f8FwAA//+7r0lAkAQAAA==

  - path: /etc/kubernetes/ssl/worker-key.pem.enc
    encoding: gzip+base64
    content: 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


  - path: /etc/kubernetes/ssl/ca.pem
    encoding: gzip+base64
    content: H4sIAAAAAAAA/2SUy86ySBCG91zF7MkEUVRc/IvqpjnIsQHlsFMQRFAExQaufvL5Z2aSmV4+6eSt5Hmr/vx5iGiG8wcmfmioBoaQfClnGwbeKBhDjktgBoLSQKCAg8q6u9aVtmMLBPSlggKN7ROmsEQ5UmoSdu3zaN9wVqSusplQGyQNxAOB0dZPq2OVBuItCeGissXozLC2Q3t0FXuyb+ikssX0m5GR+xva+DCSEDxUOkcEbYi1t5jcD+8kzmfbB6aU32SFsPybbEXO1TYMxBm3/45LVAAXA5Xh5wMuTQyUwBzvU9NyX3JJK++xFddq0gtFY3G4ei+DxfGzVBPaLuOp0gZ6HUjDZ5QkeqaGczLm6UbHx7mWrZW/kH3bQs1RcntHaoaAS3lpF7vSIxr6zovs0c0NRwFaQAO7RiGkUSo51ZcBfkTtPtzJfBPa4zqZis24NPCn5d5S4Sb1XFnRVX/Un7a41+0hjusxLMP6VGhrJ3bR+ZEPlw5Wp9es2540PROI885uTjuBk+Vy5TWvzBZOvLfAa3nYCqn5pC2RE8L318Yx6ttnKrrRyijWKtWKmf/hl3qz0LdLVHEfbx241Fts8+vMLPoWM//sHJi+P2O+Sti6ikSsaa60DeiE4uCT8mJqpgp/ky5HjRkKBxRQO9nMCMH9UahTGUEhEwQ2ho7+Lo6/CIHqAoIDA0aQMP9rjvunaV91BJJ6/3AEtpnU5Qmxhxjk5/oMW6F4Mb7EYzAdDKubSbKrJAG6jcQR785XfLJ7iJdUN2dkpdmzEozxuN2Oa/Z0V8S9ycOB37RvLdP5F5t8CClmfbnHhbcfufywCtr7uZ+kiFbGY1vh4hW/Lv2lMFHh1cY+/aAomNrW8UWqIw9lj15WZOtcLaO0FwYOd+/OYM8T/xLucibfXJEisTvy5+59H+z6SvLV9oLHuJMbLPBTe3/fLrrjlsHRG7SkDzl+2w9Pa09LWIIniWKzup0u8roL123T+PyJNZfKDHeBqHQ+y6NZS5tltns6emO6ZlWNnG6hDEz3VX/AUs7wLsXX2USdonuiun+frdvG0BH8+sV9t584yv8vwl8BAAD//4Bs1gYuBAAA




  - path: /opt/bin/decrypt-assets
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false \
        --mount=volume=ssl,target=/etc/kubernetes/ssl \
        --uuid-file-save=/var/run/coreos/decrypt-assets.uuid \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --net=host \
        --trust-keys-from-https \
        quay.io/coreos/awscli:master --exec=/bin/bash -- \
          -ec \
          'echo decrypting assets
           shopt -s nullglob
           for encKey in /etc/kubernetes/{ssl,}/*.enc; do
             echo decrypting $encKey
             f=$(mktemp $encKey.XXXXXXXX)
             /usr/bin/aws \
               --region us-east-1 kms decrypt \
               --ciphertext-blob fileb://$encKey \
               --output text \
               --query Plaintext \
             | base64 -d > $f
             mv -f $f ${encKey%.enc}
           done;

           
           echo done.'

      rkt rm --uuid-file=/var/run/coreos/decrypt-assets.uuid || :





  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    content: |
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-proxy
          namespace: kube-system
          annotations:
            rkt.alpha.kubernetes.io/stage1-name-override: coreos.com/rkt/stage1-fly
        spec:
          hostNetwork: true
          containers:
          - name: kube-proxy
            image: quay.io/coreos/hyperkube:v1.7.5_coreos.0
            command:
            - /hyperkube
            - proxy
            - --master=https://kube.checkrhq-dev.net
            - --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml
            securityContext:
              privileged: true
            volumeMounts:
              - mountPath: /etc/ssl/certs
                name: ssl-certs
              - mountPath: /etc/kubernetes
                name: kubeconfig
                readOnly: true
              - mountPath: /var/run/dbus
                name: dbus
                readOnly: false
          volumes:
            - name: ssl-certs
              hostPath:
                path: /usr/share/ca-certificates
            - name: kubeconfig
              hostPath:
                path: /etc/kubernetes
            - name: dbus
              hostPath:
                path: /var/run/dbus


  - path: /etc/kubernetes/worker-kubeconfig.yaml
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/ssl/ca.pem
            server: https://kube.checkrhq-dev.net:443
        users:
        - name: kubelet
          user:
            client-certificate: /etc/kubernetes/ssl/worker.pem
            client-key: /etc/kubernetes/ssl/worker-key.pem
        contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
        current-context: kubelet-context




  - path: /etc/kubernetes/cni/net.d/10-calico.conf
    content: |
      {
        "name": "calico",
        "type": "flannel",
        "delegate": {
          "type": "calico",
          "etcd_endpoints": "#ETCD_ENDPOINTS#",
          "etcd_key_file": "/etc/kubernetes/ssl/etcd-client-key.pem",
          "etcd_cert_file": "/etc/kubernetes/ssl/etcd-client.pem",
          "etcd_ca_cert_file": "/etc/kubernetes/ssl/etcd-trusted-ca.pem",
          "log_level": "info",
          "policy": {
            "type": "k8s",
            "k8s_api_root": "https://kube.checkrhq-dev.net/api/v1/",
            "k8s_client_key": "/etc/kubernetes/ssl/worker-key.pem",
            "k8s_client_certificate": "/etc/kubernetes/ssl/worker.pem",
            "k8s_certificate_authority": "/etc/kubernetes/ssl/ca.pem"
          }
        }
      }






# Copyright 2020 VMware, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-present

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-present

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-contains

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-contains

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-notcontains

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-notcontains

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-exact

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-exact

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-notexact

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-header-notexact

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: header-conditions
spec:
  virtualhost:
    fqdn: conditions.projectcontour.io
  routes:
  - services:
    - name: echo-header-present
      port: 80
    conditions:
    - header:
        name: Target-Present
        present: true
  - services:
    - name: echo-header-contains
      port: 80
    conditions:
    - header:
        name: Target-Contains
        contains: ContainsValue
  - services:
    - name: echo-header-notcontains
      port: 80
    conditions:
    - header:
        name: Target-NotContains
        notcontains: ContainsValue
  - services:
    - name: echo-header-exact
      port: 80
    conditions:
    - header:
        name: Target-Exact
        exact: ExactValue
  - services:
    - name: echo-header-notexact
      port: 80
    conditions:
    - header:
        name: Target-NotExact
        notexact: ExactValue

---

# Wait for HTTPProxies to sync.

default http_proxy_count = 0
http_proxy_count = n {
  n := count(data.resources.httpproxies[_])
}

error[msg] {
  http_proxy_count < 1
  msg := "No HTTPProxies created"
}

---

# Ensure that the proxy is valid.

error[msg] {
  not data.resources.httpproxies["header-conditions"]
  msg := "Proxy 'header-conditions' not present"
}

error[msg] {
  proxy := data.resources.httpproxies["header-conditions"]
  proxy.spec.virtualhost.fqdn
  proxy.status.currentStatus != "valid"
  msg := sprintf("HTTP proxy for '%s' is not valid\nstatus: %s\ndesc: %s", [
    proxy.spec.virtualhost.fqdn,
    proxy.status.currentStatus,
    proxy.status.description,
  ])
}

---

import data.contour.http.client
import data.contour.http.client.url

random := sprintf("%d", [time.now_ns()])

cases := {
  { "header": "Target-Present", "value": random, "status": 200, "testid": "echo-header-present" },

  { "header": "Target-Contains", "value": random, "status": 404 },
  { "header": "Target-Contains", "value": "ContainsValue", "status": 200, "testid": "echo-header-contains" },
  { "header": "Target-Contains", "value": "xxx ContainsValue xxx", "status": 200, "testid": "echo-header-contains" },

  { "header": "Target-NotContains", "value": "ContainsValue", "status": 404 },
  { "header": "Target-NotContains", "value": "xxx ContainsValue xxx", "status": 404 },
  { "header": "Target-NotContains", "value": random , "status": 200, "testid": "echo-header-notcontains" },

  { "header": "Target-Exact", "value": random , "status": 404 },
  { "header": "Target-Exact", "value": "NotExactValue", "status": 404 },
  { "header": "Target-Exact", "value": "ExactValue", "status": 200, "testid": "echo-header-exact" },

  { "header": "Target-NotExact", "value": random , "status": 200, "testid": "echo-header-notexact" },
  { "header": "Target-NotExact", "value": "NotExactValue" , "status": 200, "testid": "echo-header-notexact" },
  { "header": "Target-NotExact", "value": "ExactValue" , "status": 404 },

}

requests[{ "req": req, "wanted_status": status, "wanted_testid": testid }] {
  case := cases[_]

  req := {
    "method": "GET",
    "url": url.http(sprintf("/header-condition-match/%d", [time.now_ns()])),
    "headers": {
      "Host": "conditions.projectcontour.io",
      "User-Agent": client.ua("header-condition-match"),
      case.header: case.value,
    }
  }

  status := case.status
  testid := case.testid
}

error_if_wrong_status[msg] {
  request := requests[_]
  response := http.send(request.req)

  response.status_code != request.wanted_status
  msg := sprintf("got status %d, wanted %d", [
    response.status_code,
    request.wanted_status,
  ])
}

error_if_missing_testid[msg] {
  request := requests[_]
  response := http.send(request.req)

  response.status_code == 200
  not response.body.TestId

  msg := sprintf("got status %d, but no testid", [
    response.status_code,
  ])
}

error_if_wrong_testid[msg] {
  request := requests[_]
  response := http.send(request.req)

  response.status_code == 200
  response.body.TestId != request.wanted_testid

  msg := sprintf("got testid %s, wanted %s", [
    response.body.TestId,
    request.wanted_testid,
  ])
}

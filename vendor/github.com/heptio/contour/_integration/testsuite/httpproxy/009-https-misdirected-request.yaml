# Copyright 2020 VMware, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

import data.contour.resources

# Ensure that cert-manager is installed.
# Version check the certificates resource.

Group := "cert-manager.io"
Version := "v1alpha2"

have_certmanager_version {
  v := resources.versions["certificates"]
  v[_].Group == Group
  v[_].Version == Version
}

skip[msg] {
  not resources.is_supported("certificates")
  msg := "cert-manager is not installed"
}

skip[msg] {
  not have_certmanager_version

  avail := resources.versions["certificates"]

  msg := concat("\n", [
    sprintf("cert-manager version %s/%s is not installed", [Group, Version]),
    "available versions:",
    yaml.marshal(avail)
  ])
}

---

# Create a self-signed issuer to give us secrets.

apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: selfsigned
spec:
  selfSigned: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo

---

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: echo-cert
spec:
  dnsNames:
  - echo.projectcontour.io
  secretName: echo
  issuerRef:
    name: selfsigned

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo
spec:
  virtualhost:
    fqdn: echo.projectcontour.io
    tls:
      secretName: echo
  routes:
  - services:
    - name: echo
      port: 80

---

import data.contour.resources

Name := "echo"

fatal_proxy_is_not_present[msg] {
  not resources.is_present("httpproxies", Name)
  msg := sprintf("HTTPProxy for %q is not present", [ Name ])
}

---

import data.contour.resources

Name := "echo"

fatal_proxy_is_not_valid[msg] {
  status := resources.status("httpproxies", Name)

  object.get(status, "currentStatus", "") != "valid"

  msg := sprintf("HTTPProxy %q is not valid\n%s", [
    Name, yaml.marshal(status)
  ])
}

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.request
import data.contour.http.response

Response := client.Get({
  "url": url.https(sprintf("/misdirected/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": client.ua("misdirected-request"),
  },
  "tls_insecure_skip_verify": true,
})

error_non_200_response [msg] {
  not response.status_is(Response, 200)
  msg := sprintf("got status %d, wanted %d", [Response.status_code, 200])
}

error_wrong_routing [msg] {
  not response.has_testid(Response)
  msg := "response has missing body or test ID"
}

error_wrong_routing[msg] {
  wanted := "echo"
  testid := response.testid(Response)
  testid != wanted
  msg := sprintf("got test ID %q, wanted %q", [testid, wanted])
}

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response

# Send a request with a Host header that doesn't match the SNI name that
# we have for the proxy document. We expect the mismatch will generate a
# 421 response, not 404.

Response := client.Get({
  "url": url.https(sprintf("/misdirected/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo-two.projectcontour.io",
    "User-Agent": client.ua("misdirected-request"),
  },
  "tls_server_name": "echo.projectcontour.io",
  "tls_insecure_skip_verify": true,
})

error_non_421_response [msg] {
  not response.status_is(Response, 421)
  msg := sprintf("got status %d, wanted %d", [Response.status_code, 421])
}

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response

# The virtual host name is port-insensitive, so verify that we can
# stuff any old port number is and still succeed.

Response := client.Get({
  "url": url.https(sprintf("/misdirected/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo.projectcontour.io:9999",
    "User-Agent": client.ua("misdirected-request"),
  },
  "tls_server_name": "echo.projectcontour.io",
  "tls_insecure_skip_verify": true,
})

error_non_200_response [msg] {
  not response.status_is(Response, 200)
  msg := sprintf("got status %d, wanted %d", [Response.status_code, 200])
}

# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply: fixture

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply: fixture

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo
spec:
  virtualhost:
    fqdn: echo.projectcontour.io
  routes:
    - conditions:
      - prefix: /
      services:
        - name: ingress-conformance-echo
          port: 80

---

import data.contour.resources

fatal_proxy_is_not_valid[msg] {
  name := "echo"
  proxy := resources.get("httpproxies", name)
  status := object.get(proxy, "status", {})

  object.get(status, "currentStatus", "") != "valid"

  msg := sprintf("HTTP proxy for '%s' is not valid\n%s", [
    name, yaml.marshal(status)
  ])
}

---

import data.contour.http.response
import data.contour.http.client
import data.contour.http.client.url

Path := "this//has//lots////of/slashes"

Response := client.Get({
  "url": url.http(sprintf("/anything/%s/%d", [Path, time.now_ns()])),
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": client.ua("merge-slash"),
  },
})

error_non_200_response [msg] {
  Response.status_code != 200
  msg := sprintf("got status %d, wanted %d", [Response.status_code, 200])
}

error_unexpected_path [msg] {
  body := response.body(Response)

  # Split the path by "/", which leaves empty elements.
  parts := split(Path, "/")
  # Collect non-empty elements and join them with "/".
  merged := concat("/", [ p | parts[i] != ""; p := parts[i] ])

  # Get the Path field, or empty string if it's not present.
  path := object.get(body, "Path", "")

  not contains(path, merged)

  msg := sprintf("response body path %q doesn't contain the merged path %q", [
    path, merged
  ])
}

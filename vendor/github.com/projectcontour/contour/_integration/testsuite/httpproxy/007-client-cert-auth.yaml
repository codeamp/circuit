# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

import data.contour.resources

# Ensure that cert-manager is installed.
# Version check the certificates resource.

Group := "cert-manager.io"
Version := "v1alpha2"

have_certmanager_version {
  v := resources.versions["certificates"]
  v[_].Group == Group
  v[_].Version == Version
}

skip[msg] {
  not resources.is_supported("certificates")
  msg := "cert-manager is not installed"
}

skip[msg] {
  not have_certmanager_version

  avail := resources.versions["certificates"]

  msg := concat("\n", [
    sprintf("cert-manager version %s/%s is not installed", [Group, Version]),
    "available versions:",
    yaml.marshal(avail)
  ])
}

---

apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: selfsigned
  namespace: 007-client-cert-auth
spec:
  selfSigned: {}

---

# Using the selfsigned issuer, create a CA signing certificate for the
# test issuer.

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: ca-projectcontour-io
  namespace: 007-client-cert-auth
spec:
  isCA: true
  usages:
  - signing
  - cert sign
  subject:
    organizationalUnits:
    - io
    - projectcontour
    - testsuite
  commonName: issuer
  secretName: ca-projectcontour-io
  issuerRef:
    name: selfsigned

---

# Create a local CA issuer with the CA certificate that the selfsigned
# issuer gave us.

apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: ca-projectcontour-io
  namespace: 007-client-cert-auth
spec:
  ca:
    secretName: ca-projectcontour-io

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: 007-client-cert-auth/echo-no-auth

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: 007-client-cert-auth/echo-no-auth

---

# Get a server certificate for echo-no-auth.

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: echo-no-auth-cert
  namespace: 007-client-cert-auth
spec:
  usages:
  - server auth
  dnsNames:
  - echo-no-auth.projectcontour.io
  secretName: echo-no-auth
  issuerRef:
    name: ca-projectcontour-io

---

import data.contour.resources

Name := "007-client-cert-auth/echo-no-auth"

fatal [msg] {
  not resources.is_present("secrets", Name)
  msg := sprintf("Secret %q is not present", [ Name ])
}

fatal [msg] {
  not resources.is_present("secrets", Name)
  msg := json.marshal(data.resources)
}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: 007-client-cert-auth/echo-with-auth

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: 007-client-cert-auth/echo-with-auth

---

# Get a server certificate for echo-with-auth.

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: echo-with-auth-cert
  namespace: 007-client-cert-auth
spec:
  usages:
  - server auth
  dnsNames:
  - echo-with-auth.projectcontour.io
  secretName: echo-with-auth
  issuerRef:
    name: ca-projectcontour-io

---

import data.contour.resources

Name := "007-client-cert-auth/echo-with-auth"

fatal [msg] {
  not resources.is_present("secrets", Name)
  msg := sprintf("Secret %q is not present", [ Name ])
}

fatal [msg] {
  not resources.is_present("secrets", Name)
  msg := json.marshal(data.resources)
}

---

# Get a client certificate.

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: echo-client-cert
  namespace: 007-client-cert-auth
spec:
  usages:
  - client auth
  emailSANs:
  - client@projectcontour.io
  commonName: client
  secretName: echo-client
  issuerRef:
    name: ca-projectcontour-io

---

import data.contour.resources

Name := "007-client-cert-auth/echo-client"

fatal [msg] {
  not resources.is_present("secrets", Name)
  msg := sprintf("Secret %q is not present", [ Name ])
}

fatal [msg] {
  not resources.is_present("secrets", Name)
  msg := json.marshal(data.resources)
}

---

# Get a self-signed client certificate. We will use this to ensure that
# the server is validating the signing CA correctly.

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: echo-client-cert-selfsigned
  namespace: 007-client-cert-auth
spec:
  usages:
  - client auth
  emailSANs:
  - selfsigned-client@projectcontour.io
  commonName: selfsigned-client
  secretName: echo-client-selfsigned
  issuerRef:
    name: selfsigned

---

import data.contour.resources

Name := "007-client-cert-auth/echo-client-selfsigned"

fatal [msg] {
  not resources.is_present("secrets", Name)
  msg := sprintf("Secret %q is not present", [ Name ])
}

fatal [msg] {
  not resources.is_present("secrets", Name)
  msg := json.marshal(data.resources)
}

---

# This proxy does not require client certificate auth.

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo-no-auth
  namespace: 007-client-cert-auth
spec:
  virtualhost:
    fqdn: echo-no-auth.projectcontour.io
    tls:
      secretName: echo-no-auth
  routes:
  - services:
    - name: echo-no-auth
      port: 80

---

# This proxy requires client certificate auth.

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo-with-auth
  namespace: 007-client-cert-auth
spec:
  virtualhost:
    fqdn: echo-with-auth.projectcontour.io
    tls:
      secretName: echo-with-auth
      clientValidation:
        caSecret: echo-with-auth
  routes:
  - services:
    - name: echo-with-auth
      port: 80

---

import data.contour.resources

Names := [
  "007-client-cert-auth/echo-with-auth",
  "007-client-cert-auth/echo-no-auth",
]

fatal [msg] {
  name := Names[_]
  not resources.is_present("httpproxies", name)
  msg := sprintf("HTTPProxy %q is not present", [ name ])
}

fatal [msg] {
  name := Names[_]
  not resources.is_present("httpproxies", name)
  msg := json.marshal(data.resources)
}

---

import data.contour.resources

Names := [
  "007-client-cert-auth/echo-with-auth",
  "007-client-cert-auth/echo-no-auth",
]

fatal_proxy_is_not_valid[msg] {
  name := Names[_]
  proxy := resources.get("httpproxies", name)
  status := object.get(proxy, "status", {})

  object.get(status, "currentStatus", "") != "valid"

  msg := sprintf("HTTP proxy for '%s' is not valid\n%s", [
    name, yaml.marshal(status)
  ])
}

---

# Verify that we reach the echo-no-auth service without a client
# certificate. This tests that client  certificate auth is specific
# to a particular proxy.

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response
import data.contour.resources

ServerSecret := resources.get("secrets", "007-client-cert-auth/echo-no-auth")

Response := client.Get({
  "url": url.https(sprintf("/echo-no-auth/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo-no-auth.projectcontour.io",
    "User-Agent": client.ua("client-cert-auth"),
  },
  "tls_ca_cert": base64.decode(ServerSecret.data["ca.crt"]),
})

error_non_200_response [msg] {
  not Response
  msg := "no response"
}

error_non_200_response [msg] {
  status := object.get(Response, "status_code", 000)
  status != 200
  msg := sprintf("got status %d, wanted %d", [status, 200])
}

error_wrong_routing [msg] {
  not response.has_testid(Response)
  msg := "response has missing body or test ID"
}

error_wrong_routing[msg] {
  wanted := "echo-no-auth"
  testid := response.testid(Response)
  testid != wanted
  msg := sprintf("got test ID %q, wanted %q", [testid, wanted])
}

---

# Using the client-cert certificate to echo-with-auth should succeed.

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response
import data.contour.resources

ServerSecret := resources.get("secrets", "007-client-cert-auth/echo-with-auth")
ClientSecret := resources.get("secrets", "007-client-cert-auth/echo-client")

Response := client.Get({
  "url": url.https(sprintf("/echo-client/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo-with-auth.projectcontour.io",
    "User-Agent": client.ua("client-cert-auth"),
  },
  "tls_ca_cert": base64.decode(ServerSecret.data["ca.crt"]),
  "tls_client_cert": base64.decode(ClientSecret.data["tls.crt"]),
  "tls_client_key": base64.decode(ClientSecret.data["tls.key"]),
})

error_non_200_response [msg] {
  not Response
  msg := "no response"
}

error_non_200_response [msg] {
  status := object.get(Response, "status_code", 000)
  status != 200
  msg := sprintf("got status %d, wanted %d", [status, 200])
}

error_wrong_routing [msg] {
  not response.has_testid(Response)
  msg := "response has missing body or test ID"
}

error_wrong_routing[msg] {
  wanted := "echo-with-auth"
  testid := response.testid(Response)
  testid != wanted
  msg := sprintf("got test ID %q, wanted %q", [testid, wanted])
}

# TODO(jpeach): Need to test that requests without a client certificate
# are rejected. This requires in-band handling of HTTP errors, see
# https://github.com/open-policy-agent/opa/issues/2187

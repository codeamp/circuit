# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-slash-prefix

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-slash-prefix

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-slash-noprefix

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-slash-noprefix

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-slash-default

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo-slash-default

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: path-conditions
spec:
  virtualhost:
    fqdn: conditions.projectcontour.io
  routes:
  - services:
    - name: echo-slash-prefix
      port: 80
    conditions:
    - prefix: /path/prefix/
  - services:
    - name: echo-slash-noprefix
      port: 80
    conditions:
    - prefix: /path/prefix
  - services:
    - name: echo-slash-default
      port: 80

---

error_proxy_is_not_present {
  not data.resources.httpproxies
}

error_proxy_is_not_present {
  not data.resources.httpproxies["path-conditions"]
}

---

error_proxy_is_not_valid[msg] {
  proxy := data.resources.httpproxies["path-conditions"]

  proxy.spec.virtualhost.fqdn
  proxy.status.currentStatus != "valid"

  msg := sprintf("HTTP proxy for '%s' is not valid\nstatus: %s\ndesc: %s", [
    proxy.spec.virtualhost.fqdn,
    proxy.status.currentStatus,
    proxy.status.description,
  ])
}

---

import data.contour.http.client
import data.contour.http.client.url

cases := [
  [ "/", "echo-slash-default" ],
  [ "/foo", "echo-slash-default" ],
  [ "/path/prefix", "echo-slash-noprefix" ],
  [ "/path/prefixfoo", "echo-slash-noprefix" ],
  [ "/path/prefix/", "echo-slash-prefix" ],
  [ "/path/prefix/foo", "echo-slash-prefix" ],
]

# NOTE(jpeach): the path formatting matters in the request contruction
# below, since we are testing for specific matches.
request_for_path[path] = request {
  path := cases[_][0]
  request := {
    "method": "GET",
    "url": url.http(path),
    "headers": {
      "Host": "conditions.projectcontour.io",
      "User-Agent": client.ua("path-condition-match"),
    }
  }
}

response_for_path[path] = response {
  path := cases[_][0]
  request := request_for_path[path]
  response := http.send(request)
}

# Ensure that we get a response for each test case.
error_missing_responses {
  count(cases) != count(response_for_path)
}

error_non_200_response [msg] {
  path := cases[_][0]
  response := response_for_path[path]

  response.status_code != 200
  msg :=  sprintf("got status %d for path %q, wanted %d", [
    response.status_code, path, 200,
  ])
}

error_path_routing_mismatch[msg] {
  c := cases[_]

  path := c[0]
  testid := c[1]
  response := response_for_path[path]

  response.body.TestId != testid
  msg :=  sprintf("got wrong service %q for path %q, wanted %q", [
    response.body.TestId, path, testid,
  ])
}

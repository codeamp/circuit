// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOrUpdateClusterRequest create or update cluster request
// swagger:model CreateOrUpdateClusterRequest
type CreateOrUpdateClusterRequest struct {

	// auto scaling
	AutoScaling *AutoScaling `json:"autoScaling,omitempty"`

	// backup enabled
	// Required: true
	BackupEnabled bool `json:"backupEnabled"`

	// disk size g b
	// Maximum: 4096
	DiskSizeGB float64 `json:"diskSizeGB,omitempty"`

	// mongo d b major version
	MongoDBMajorVersion string `json:"mongoDBMajorVersion,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// num shards
	// Maximum: 12
	// Minimum: 1
	NumShards int64 `json:"numShards,omitempty"`

	// provider settings
	// Required: true
	ProviderSettings *ProviderSettings `json:"providerSettings"`

	// replication factor
	ReplicationFactor int64 `json:"replicationFactor,omitempty"`

	// replication spec
	ReplicationSpec *ReplicationSpec `json:"replicationSpec,omitempty"`
}

// Validate validates this create or update cluster request
func (m *CreateOrUpdateClusterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoScaling(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBackupEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDiskSizeGB(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMongoDBMajorVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNumShards(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReplicationSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOrUpdateClusterRequest) validateAutoScaling(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoScaling) { // not required
		return nil
	}

	if m.AutoScaling != nil {

		if err := m.AutoScaling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScaling")
			}
			return err
		}
	}

	return nil
}

func (m *CreateOrUpdateClusterRequest) validateBackupEnabled(formats strfmt.Registry) error {

	if err := validate.Required("backupEnabled", "body", bool(m.BackupEnabled)); err != nil {
		return err
	}

	return nil
}

func (m *CreateOrUpdateClusterRequest) validateDiskSizeGB(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskSizeGB) { // not required
		return nil
	}

	if err := validate.Maximum("diskSizeGB", "body", float64(m.DiskSizeGB), 4096, false); err != nil {
		return err
	}

	return nil
}

var createOrUpdateClusterRequestTypeMongoDBMajorVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["3.2","3.4","3.6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOrUpdateClusterRequestTypeMongoDBMajorVersionPropEnum = append(createOrUpdateClusterRequestTypeMongoDBMajorVersionPropEnum, v)
	}
}

const (
	// CreateOrUpdateClusterRequestMongoDBMajorVersionNr32 captures enum value "3.2"
	CreateOrUpdateClusterRequestMongoDBMajorVersionNr32 string = "3.2"
	// CreateOrUpdateClusterRequestMongoDBMajorVersionNr34 captures enum value "3.4"
	CreateOrUpdateClusterRequestMongoDBMajorVersionNr34 string = "3.4"
	// CreateOrUpdateClusterRequestMongoDBMajorVersionNr36 captures enum value "3.6"
	CreateOrUpdateClusterRequestMongoDBMajorVersionNr36 string = "3.6"
)

// prop value enum
func (m *CreateOrUpdateClusterRequest) validateMongoDBMajorVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createOrUpdateClusterRequestTypeMongoDBMajorVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateOrUpdateClusterRequest) validateMongoDBMajorVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.MongoDBMajorVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateMongoDBMajorVersionEnum("mongoDBMajorVersion", "body", m.MongoDBMajorVersion); err != nil {
		return err
	}

	return nil
}

func (m *CreateOrUpdateClusterRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateOrUpdateClusterRequest) validateNumShards(formats strfmt.Registry) error {

	if swag.IsZero(m.NumShards) { // not required
		return nil
	}

	if err := validate.MinimumInt("numShards", "body", int64(m.NumShards), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("numShards", "body", int64(m.NumShards), 12, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateOrUpdateClusterRequest) validateProviderSettings(formats strfmt.Registry) error {

	if err := validate.Required("providerSettings", "body", m.ProviderSettings); err != nil {
		return err
	}

	if m.ProviderSettings != nil {

		if err := m.ProviderSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("providerSettings")
			}
			return err
		}
	}

	return nil
}

func (m *CreateOrUpdateClusterRequest) validateReplicationSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationSpec) { // not required
		return nil
	}

	if m.ReplicationSpec != nil {

		if err := m.ReplicationSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateOrUpdateClusterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOrUpdateClusterRequest) UnmarshalBinary(b []byte) error {
	var res CreateOrUpdateClusterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

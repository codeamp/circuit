// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProviderSettings provider settings
// swagger:model ProviderSettings
type ProviderSettings struct {

	// backing provider name
	BackingProviderName string `json:"backingProviderName,omitempty"`

	// disk i o p s
	DiskIOPS int64 `json:"diskIOPS,omitempty"`

	// encrypt e b s volume
	EncryptEBSVolume bool `json:"encryptEBSVolume,omitempty"`

	// instance size name
	InstanceSizeName string `json:"instanceSizeName,omitempty"`

	// provider name
	ProviderName string `json:"providerName,omitempty"`

	// region name
	RegionName string `json:"regionName,omitempty"`
}

// Validate validates this provider settings
func (m *ProviderSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackingProviderName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceSizeName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegionName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var providerSettingsTypeBackingProviderNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providerSettingsTypeBackingProviderNamePropEnum = append(providerSettingsTypeBackingProviderNamePropEnum, v)
	}
}

const (
	// ProviderSettingsBackingProviderNameAWS captures enum value "AWS"
	ProviderSettingsBackingProviderNameAWS string = "AWS"
)

// prop value enum
func (m *ProviderSettings) validateBackingProviderNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providerSettingsTypeBackingProviderNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProviderSettings) validateBackingProviderName(formats strfmt.Registry) error {

	if swag.IsZero(m.BackingProviderName) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackingProviderNameEnum("backingProviderName", "body", m.BackingProviderName); err != nil {
		return err
	}

	return nil
}

var providerSettingsTypeInstanceSizeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["M2","M5","M10","M20","M30","M40","M50","M60","M100","M200"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providerSettingsTypeInstanceSizeNamePropEnum = append(providerSettingsTypeInstanceSizeNamePropEnum, v)
	}
}

const (
	// ProviderSettingsInstanceSizeNameM2 captures enum value "M2"
	ProviderSettingsInstanceSizeNameM2 string = "M2"
	// ProviderSettingsInstanceSizeNameM5 captures enum value "M5"
	ProviderSettingsInstanceSizeNameM5 string = "M5"
	// ProviderSettingsInstanceSizeNameM10 captures enum value "M10"
	ProviderSettingsInstanceSizeNameM10 string = "M10"
	// ProviderSettingsInstanceSizeNameM20 captures enum value "M20"
	ProviderSettingsInstanceSizeNameM20 string = "M20"
	// ProviderSettingsInstanceSizeNameM30 captures enum value "M30"
	ProviderSettingsInstanceSizeNameM30 string = "M30"
	// ProviderSettingsInstanceSizeNameM40 captures enum value "M40"
	ProviderSettingsInstanceSizeNameM40 string = "M40"
	// ProviderSettingsInstanceSizeNameM50 captures enum value "M50"
	ProviderSettingsInstanceSizeNameM50 string = "M50"
	// ProviderSettingsInstanceSizeNameM60 captures enum value "M60"
	ProviderSettingsInstanceSizeNameM60 string = "M60"
	// ProviderSettingsInstanceSizeNameM100 captures enum value "M100"
	ProviderSettingsInstanceSizeNameM100 string = "M100"
	// ProviderSettingsInstanceSizeNameM200 captures enum value "M200"
	ProviderSettingsInstanceSizeNameM200 string = "M200"
)

// prop value enum
func (m *ProviderSettings) validateInstanceSizeNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providerSettingsTypeInstanceSizeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProviderSettings) validateInstanceSizeName(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceSizeName) { // not required
		return nil
	}

	// value enum
	if err := m.validateInstanceSizeNameEnum("instanceSizeName", "body", m.InstanceSizeName); err != nil {
		return err
	}

	return nil
}

var providerSettingsTypeProviderNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","TENANT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providerSettingsTypeProviderNamePropEnum = append(providerSettingsTypeProviderNamePropEnum, v)
	}
}

const (
	// ProviderSettingsProviderNameAWS captures enum value "AWS"
	ProviderSettingsProviderNameAWS string = "AWS"
	// ProviderSettingsProviderNameTENANT captures enum value "TENANT"
	ProviderSettingsProviderNameTENANT string = "TENANT"
)

// prop value enum
func (m *ProviderSettings) validateProviderNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providerSettingsTypeProviderNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProviderSettings) validateProviderName(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderName) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderNameEnum("providerName", "body", m.ProviderName); err != nil {
		return err
	}

	return nil
}

var providerSettingsTypeRegionNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["US_WEST_1","US_WEST_2","US_EAST_1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providerSettingsTypeRegionNamePropEnum = append(providerSettingsTypeRegionNamePropEnum, v)
	}
}

const (
	// ProviderSettingsRegionNameUSWEST1 captures enum value "US_WEST_1"
	ProviderSettingsRegionNameUSWEST1 string = "US_WEST_1"
	// ProviderSettingsRegionNameUSWEST2 captures enum value "US_WEST_2"
	ProviderSettingsRegionNameUSWEST2 string = "US_WEST_2"
	// ProviderSettingsRegionNameUSEAST1 captures enum value "US_EAST_1"
	ProviderSettingsRegionNameUSEAST1 string = "US_EAST_1"
)

// prop value enum
func (m *ProviderSettings) validateRegionNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providerSettingsTypeRegionNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProviderSettings) validateRegionName(formats strfmt.Registry) error {

	if swag.IsZero(m.RegionName) { // not required
		return nil
	}

	// value enum
	if err := m.validateRegionNameEnum("regionName", "body", m.RegionName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProviderSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProviderSettings) UnmarshalBinary(b []byte) error {
	var res ProviderSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

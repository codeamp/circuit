// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Cluster cluster
// swagger:model Cluster
type Cluster struct {

	// auto scaling
	AutoScaling *AutoScaling `json:"autoScaling,omitempty"`

	// backup enabled
	BackupEnabled bool `json:"backupEnabled,omitempty"`

	// disk size g b
	DiskSizeGB float64 `json:"diskSizeGB,omitempty"`

	// group Id
	GroupID string `json:"groupId,omitempty"`

	// mongo d b version
	MongoDBVersion string `json:"mongoDBVersion,omitempty"`

	// mongo URI
	MongoURI string `json:"mongoURI,omitempty"`

	// mongo URI updated
	MongoURIUpdated string `json:"mongoURIUpdated,omitempty"`

	// mongo URI with options
	MongoURIWithOptions string `json:"mongoURIWithOptions,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// num shards
	NumShards int64 `json:"numShards,omitempty"`

	// paused
	Paused bool `json:"paused,omitempty"`

	// provider settings
	ProviderSettings *ProviderSettings `json:"providerSettings,omitempty"`

	// replication factor
	ReplicationFactor float64 `json:"replicationFactor,omitempty"`

	// replication spec
	ReplicationSpec *ReplicationSpec `json:"replicationSpec,omitempty"`

	// state name
	StateName string `json:"stateName,omitempty"`
}

// Validate validates this cluster
func (m *Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoScaling(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReplicationSpec(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cluster) validateAutoScaling(formats strfmt.Registry) error {

	if swag.IsZero(m.AutoScaling) { // not required
		return nil
	}

	if m.AutoScaling != nil {

		if err := m.AutoScaling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScaling")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateProviderSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderSettings) { // not required
		return nil
	}

	if m.ProviderSettings != nil {

		if err := m.ProviderSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("providerSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateReplicationSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicationSpec) { // not required
		return nil
	}

	if m.ReplicationSpec != nil {

		if err := m.ReplicationSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replicationSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cluster) UnmarshalBinary(b []byte) error {
	var res Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

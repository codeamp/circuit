// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Process process
// swagger:model Process
type Process struct {

	// created
	Created strfmt.DateTime `json:"created,omitempty"`

	// group Id
	GroupID string `json:"groupId,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last ping
	LastPing strfmt.DateTime `json:"lastPing,omitempty"`

	// links
	Links []*Link `json:"links"`

	// port
	Port int64 `json:"port,omitempty"`

	// replica set name
	ReplicaSetName string `json:"replicaSetName,omitempty"`

	// shard name
	ShardName string `json:"shardName,omitempty"`

	// type name
	TypeName ProcessType `json:"typeName,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this process
func (m *Process) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTypeName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Process) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {

		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {

			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Process) validateTypeName(formats strfmt.Registry) error {

	if swag.IsZero(m.TypeName) { // not required
		return nil
	}

	if err := m.TypeName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeName")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Process) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Process) UnmarshalBinary(b []byte) error {
	var res Process
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

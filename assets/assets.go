// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\x36\x10\xbe\xf3\x29\xa0\xc9\x85\x9e\xf1\x13\xf0\x98\x38\x6d\xd3\x36\xad\x6b\x35\x27\x4f\x0e\x08\x05\xcb\x68\x48\x42\x01\x40\xb5\x9e\x4e\xdf\xbd\x03\x60\x01\xee\x2e\x49\xc9\x72\xd2\x99\x5e\x24\x62\x01\x2c\x76\x3f\xec\x2f\x5c\x2b\x3b\x69\xc5\xef\xba\x57\x15\x7c\xff\xb8\xfd\xf5\x97\xaa\x72\xed\xa3\xea\xa5\xf8\xbb\x12\xe2\xcb\xa8\xec\x53\x23\x7e\x0b\x7f\x95\x10\xfd\xe8\xa5\xd7\x66\x68\xc4\x7b\xf8\xaa\xfe\xa9\xaa\x57\x30\xef\x9f\x0e\x2a\x7d\xc6\xbd\xaf\xc4\x07\xa7\x6c\x25\xc4\xe8\x94\xad\xf5\xae\x11\xef\x6e\xae\x9a\x4c\x4c\xb3\x0e\xa6\x5d\x7d\xd5\x88\xfb\x40\xf9\xb8\x89\x93\xb7\xd6\xfc\xa1\x5a\x5f\x09\x71\x48\x5f\xc0\xe0\x5a\xb8\x6e\xdc\x37\x62\xeb\xad\x1e\xf6\xd7\x62\x90\xbd\x9a\x46\x6a\x38\x6a\x6b\x86\x5e\x0d\xfe\xdd\x4d\x26\x5f\x35\x88\x5b\xe1\xec\x26\xd6\xae\xb6\xea\x60\x9c\xf6\x26\xe8\x5a\x36\xdd\xc3\x4a\x90\xe8\x3b\x25\xfd\x68\x55\xd8\xf7\x00\x9f\x51\x68\xa0\xc3\xaa\xad\xb2\x47\xdd\xc6\x55\x0e\x3e\xe3\x2a\xa0\xd3\x55\xc2\x1d\x54\x8b\x96\x6e\xc3\x10\x2f\x0f\x04\xd8\x72\xa7\x3a\x25\x5d\x64\x6c\xe1\x33\xae\x04\x3a\xac\x7a\x3b\x01\x10\x56\x22\x3c\xd2\x6a\x34\x3f\xdf\x21\x8e\xd2\x6a\xf9\xa9\x03\xe9\x5b\xab\x7c\x96\x26\x7c\xd3\x9b\x79\xfb\x97\x57\x83\xd3\x66\x88\x4a\x84\xb3\x32\xc1\xd5\x6b\xd7\x70\x5f\x36\xad\xf0\x42\x97\x32\xd1\x6a\x74\x17\x9c\x01\x68\x8f\x0e\x9f\xf0\x61\x1c\xee\x18\x35\x8b\xa0\x6c\xaf\x5d\x39\x7c\x1a\x85\x4d\xc1\x1f\x36\xc9\xc4\x8b\xc1\x47\x2b\xcf\x23\x30\xf4\x37\x56\x49\xaf\xb2\xe8\x95\x10\x6d\x24\x80\xd0\x35\xd0\x8b\x1d\xbe\x1b\x0e\xa3\x67\x66\xf9\xe1\xb0\xa3\x2c\xc6\x48\xb8\x84\x05\x48\x01\xea\x17\x29\x40\xf1\x1a\xe8\x4d\x06\x2d\xb3\xb8\x2b\xeb\x0b\x0b\xb0\xc7\xc2\x02\xcc\xb1\x06\x7a\x93\x0d\x38\xb3\xd8\x96\xf5\x45\x91\x89\x94\x14\xb9\x84\xc5\x8d\xea\x14\x91\x62\x17\x09\x97\xb0\xa0\x8a\x64\x1b\x25\xda\x04\xe7\xaa\x91\xe7\x15\x06\x61\xc0\x78\x6e\xd3\xfe\xa2\x1d\xe3\x4b\x54\x7c\x11\x5f\xaa\x72\xe6\x4b\xf4\x7e\x11\x5f\xc0\x01\x79\x64\x81\x01\x79\x3e\xf6\xd8\x06\x87\x84\xcc\xf6\x2d\xd9\x5f\x60\xa0\x6c\x13\x0a\x5f\xc3\x16\x50\xa0\x6c\x13\x08\x5f\xc3\x76\x0e\x42\x09\x75\xc8\x28\x42\x8c\xab\x53\xd8\x0b\x38\x86\xff\x09\xd5\x30\x5a\xd1\x1c\xf3\xca\x86\xf0\x3c\x5e\x73\x75\x0b\x2f\x81\x6e\xff\x79\xcc\xb2\x92\x3c\x2e\xc3\x65\x67\x72\x5d\x16\x34\xa2\x10\x0b\x70\x99\x40\x54\xe5\x1c\xe1\x9e\x5f\xc0\x31\x2b\xcc\x39\xc2\x15\xbf\x80\x23\xd7\x9a\xc7\xde\x89\x27\xcf\x2b\xcd\x2c\xfb\xb0\x98\x7a\x1a\x0c\x1e\xa1\xbf\xd9\x41\x08\x23\xa0\x25\x74\xfe\x23\x85\x42\xf5\x85\xd3\x5e\xd1\x2b\x14\x63\x28\x39\xd6\x23\x1d\xa7\x42\x0e\x11\xf2\x61\xf7\x29\xdd\x6f\x20\xbf\xd2\xbc\x46\x2a\x92\x19\x84\xb8\x5a\x39\xcc\x69\x93\x22\x88\x58\x8e\x45\xc4\x7c\xf6\x6b\x63\x3e\xf7\xd2\x7e\x46\x59\xf5\x13\x90\x6e\x49\x55\xb9\xb9\x6a\xc2\xe2\x4e\xc9\x01\xd2\x7d\xac\x52\x63\xaa\x0f\x5f\x31\xcd\xc3\xd2\x50\xea\xf4\x52\x77\xb9\xae\xd9\xd0\xb2\x81\x01\x90\x8c\x71\xd7\xc4\x32\x1b\x78\x43\xc5\x98\xd8\xc3\x80\x9d\xc0\xd3\x7d\xa0\xf5\xca\x39\xb9\x57\xf8\xdc\x70\x27\x78\xfc\x28\xdd\x23\x91\x4b\x5a\x35\xf8\x1f\x18\xd5\xaa\x07\x3c\x5c\x12\x31\xa7\xd2\x28\x62\xae\x56\xcf\x8b\xd8\x9a\xbe\x97\xc3\x0e\x73\xc7\x05\xfa\x86\x96\xba\x24\x5b\xa5\xed\x63\x88\xe8\x48\x7e\x63\xc3\xb5\xdf\x87\x3a\x2c\xc2\xb9\x16\xf9\xc3\x5c\x90\xf5\x9c\x5e\x38\x33\x44\xdd\x70\xf9\x4b\xf5\xe3\x82\x7f\x56\x4f\x78\xa8\xdd\x8d\x7a\x90\x63\xe7\x91\xe5\x04\x0d\x3a\x63\x2f\x10\x62\xca\x1d\x80\x74\x08\xe7\x4c\x10\x76\xf0\x51\x76\x23\x45\xb4\x35\x54\xf1\xa5\x9b\x49\x96\x12\x6c\x79\x09\xaa\xa3\xb2\xc5\x78\xa7\x5a\xff\x14\xd8\x4c\xaf\x80\xc7\x16\x32\x14\x75\x24\xdc\xea\x10\x73\x0a\x97\x7e\x06\xf2\xf6\x30\xde\xa9\x2f\xa3\x72\x9e\x51\x7f\xd6\xbd\x26\xb4\x5e\xf5\xc6\x3e\x2d\x2c\x4e\x13\xb3\xf5\x3e\x38\xec\x10\x4b\xf8\xef\xad\x6c\xd5\xad\xb2\xda\xec\xce\x5d\x5c\xae\x94\xa3\x1a\xb9\xf5\x38\xef\x15\x14\x7b\x69\xbd\x7e\x90\x6d\xb0\xeb\xd4\x5e\x08\xf1\xa8\xe4\x0e\xe2\x40\x93\x03\x42\x94\x52\xea\x6e\x89\xee\xbc\xf4\x8a\x7a\x34\xeb\x78\xd6\xfa\x9d\xb8\xf3\xfd\x3c\x90\x5c\x70\xd5\x11\x89\xdc\x76\x44\x24\x60\x70\xe6\x32\x71\xdf\x9e\x64\xe6\x3d\xf7\xa6\xb4\x9d\x98\xb2\xd7\xfe\x83\xed\x18\xe5\xd6\x1a\x6f\x5a\x43\xc8\xd6\xc9\x5b\xab\x8f\xd2\xab\x9f\xa8\xc7\x84\x89\xf1\x53\xa7\x5b\x46\x2f\x6d\xbc\x7b\x34\x7f\xde\xa8\x43\x67\x9e\x82\x9a\x60\xbf\xbc\xb7\x6f\x47\x1b\x82\xe9\x1d\xeb\xa2\x50\x3f\xce\xba\xf1\xdc\xff\xb3\xee\x1f\x1a\x6b\xe6\x6a\xf8\xe6\x16\x7b\xdd\xbd\xf6\xaf\xad\x1c\x5a\x12\xc9\x5b\x33\x78\x3d\x8c\x66\x74\x49\x7c\x12\x8b\x14\x49\x9d\xf3\xfc\x98\x53\x21\xd2\x79\x35\x62\xd1\x82\x2d\x45\xce\x42\x3b\xe3\xc4\xa6\x3f\x98\x41\xd1\xc0\xce\x03\x10\x8b\x71\x27\xcd\xd1\x0c\x0f\x7a\x3f\x39\xcf\x09\xf3\x9c\x0a\x1e\x6c\xa7\x6b\x82\x2f\xb9\xee\x52\x21\xba\xe2\xc4\x33\xb9\x46\xe7\x4d\xff\x86\x51\x67\xae\xfb\xad\x3c\x72\xf6\x12\x42\xa2\xd4\x9a\xce\xfc\x4d\x80\xe9\xcc\x11\xc3\x66\xbd\xd5\xfb\x01\x42\x13\x77\xdf\x95\x39\xae\x3a\x37\x82\x35\x28\x16\xc0\x7e\xd0\x83\x76\x8f\x38\xff\x9c\x30\x03\xa1\x43\x8d\x58\xc5\x5f\xf2\x7e\x52\xc0\x48\x67\xad\x87\x96\xc5\x18\x44\xdd\x71\xd9\xa1\xe8\x45\x4e\x8f\x61\x27\x9d\x97\x5e\x28\x16\x1e\xbf\xdc\xcc\x85\x47\x69\x84\x9e\x04\x96\x4d\x89\x2b\x72\x91\xa4\x8d\xcf\xc6\x8f\x2d\xf3\xb3\x17\x8f\xb8\xac\x1c\xe4\x7b\x57\x6a\x41\x90\xe3\xd6\xd8\x74\x89\x9b\x8f\x0b\xa6\x74\x4a\xb9\x37\x66\xf0\x52\x0f\xa1\xed\x31\xd6\x2f\xe9\x58\x78\x47\x3d\xc3\x2a\x86\x26\x33\x90\x59\xa1\xb3\xc4\xb4\xbc\xd2\xcc\xc1\xfb\xff\xd4\x3d\xb3\xfa\x14\x2b\xc2\x5f\x5a\xce\x2b\xf2\x92\x9a\x79\xb5\x44\x66\xa0\x96\x67\x90\xb9\x18\xe7\x2a\xe6\x59\xe0\x59\xa9\xa0\x27\xd3\x39\xe5\xc7\x6b\x95\xef\xe2\x43\x39\x05\x94\x34\xea\x17\xc3\xb9\x98\x59\x4f\x85\x1b\x92\x89\x28\x08\xcb\x12\x2f\x04\xce\x93\x32\x5f\x2f\x46\x82\x6b\x9c\x54\x18\xfd\x79\x59\xf3\x94\x3b\xd3\x67\x08\x22\xf2\xd2\x0b\x45\x94\x38\x54\xe4\x2c\x44\x92\x0e\x9e\x6e\x84\x30\x73\xe9\x79\xd3\x71\x33\x03\xdc\x5b\x39\xac\xda\xcb\x8a\xf7\xcd\xa7\xa7\x03\x56\x2f\xfd\x99\x07\x25\x68\x56\x0f\x9a\x90\x5b\x0a\xf3\x14\xba\x15\x31\x13\x7c\xff\x06\x00\x00\xff\xff\xbe\xed\xbd\x07\x73\x1c\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7283, mode: os.FileMode(420), modTime: time.Unix(1522274309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


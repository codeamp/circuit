// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xe4\xa6\x13\xbf\xeb\x29\x70\xed\x65\x5c\xe5\x27\xd0\x71\xd7\xfe\xff\xe3\x24\x9b\x38\x9e\xf8\x94\xda\x03\xd6\xe0\x19\x62\x49\xcc\x02\x9a\x8a\x2b\x95\x77\x4f\x01\x0d\xea\x6e\x49\xf3\xb1\xeb\x43\x2e\xb6\x68\x9a\x5f\x7f\xd0\x5f\x8c\x6b\x64\x2b\xad\xf8\x5d\x77\xaa\x82\xef\x1f\xd7\xbf\xfe\x52\x55\xae\xd9\xa9\x4e\x8a\xbf\x2b\x21\xbe\x0e\xca\xbe\xd5\xe2\xb7\xf0\xaf\x12\xa2\x1b\xbc\xf4\xda\xf4\xb5\xf8\x0c\x5f\xd5\x3f\x55\xf5\x01\xf6\xfd\xdb\x5e\xa5\xcf\x78\xf6\x83\x78\x72\xca\x56\x42\x0c\x4e\xd9\x95\xde\xd4\xe2\xfe\xf6\xba\xce\xc4\xb4\xeb\x60\xdb\xad\xae\x6b\xf1\x47\xa0\x7c\xb9\x8a\x9b\x0f\xd6\xfc\xa9\x1a\x5f\x09\xb1\x4f\x5f\x00\x70\x23\x5c\x3b\x6c\x6b\xb1\xf6\x56\xf7\xdb\x1b\xd1\xcb\x4e\x8d\x2b\xd5\x1f\xb4\x35\x7d\xa7\x7a\x7f\x7f\x9b\xc9\xd7\x35\x42\x2b\xc8\x6e\x84\x4e\xc2\x81\x0e\xf2\xff\xa7\xa4\x1f\xac\x0a\x5c\x2f\xf0\x19\xb9\x80\x0e\x5c\x6b\x65\x0f\xba\x89\x5c\x0e\x3e\x23\x17\xd0\x29\x97\x70\x7b\xd5\x20\xd6\x75\x58\x62\xf6\x40\x80\x23\x8f\xaa\x55\xd2\x45\x60\x0b\x9f\x91\x13\xe8\xc0\x75\x37\x9a\x1b\x38\x91\xf5\x89\x1b\xed\x4f\x4f\x88\x83\xb4\x5a\x3e\xb7\xa0\x7d\x63\x95\xcf\xda\x84\xef\x7c\xe0\x2f\xaf\x7a\xa7\x4d\x1f\xb5\x0f\x42\x32\x61\x54\xff\x0e\x93\xf8\x39\x87\xcf\x30\x7e\x6a\x2c\x62\x1b\xcd\xbe\xa3\x47\x1f\x19\x35\x47\x8b\xb2\x9d\x76\xf9\xe8\x7e\x5c\x85\x43\x21\xa8\xaf\x52\x9c\x96\xa8\x8d\xa1\x9a\x57\x10\xad\x9f\xac\x92\x5e\xe5\xa0\xa8\x84\x68\x22\x01\xe2\x62\x05\xf4\x12\x4c\xf7\xfd\x7e\xf0\x2c\xb6\x9e\xf6\x1b\x0a\x31\x44\xc2\x25\x10\xa0\x05\x98\x5f\xb4\x00\xc3\x57\x40\xaf\xb3\xd3\x32\xc4\x63\xe1\x2f\x10\x10\x66\x05\x02\xa2\x6c\x05\xf4\x3a\xc7\x65\x86\x58\x17\xfe\x62\xc8\x48\x4a\x86\x5c\x02\x71\xab\x5a\x45\xb4\xd8\x44\xc2\x25\x10\xd4\x90\x1c\x81\xc4\x9a\x10\x72\x2b\x94\x50\x05\x20\x2c\x18\xe6\x3a\x9d\x2f\xd6\x31\x5c\x62\xe2\x37\xe1\x52\x93\x33\x2e\xb1\xfb\x9b\x70\xc1\x0f\x28\xbf\x8b\x1b\x50\x42\xaf\xd0\x7e\x8d\x33\x3d\xc3\xde\x91\xf3\xc5\x0d\x14\x36\x79\xe1\x7b\x60\xc1\x0b\x14\x36\x39\xe1\x7b\x60\xa7\x4e\x28\x15\x0c\x05\x45\x28\x5d\xab\x54\xcd\x82\x1f\xc3\xff\xd1\xab\x61\xb5\x60\x39\xc6\xca\x81\x70\x1e\xd6\xd4\xdc\x82\x25\xd0\xed\x9f\x07\x96\x8d\xe4\x55\x17\x2e\x1b\x17\xda\x15\xa9\xc4\xb5\x20\x9b\xc5\x89\x98\x48\x4c\xe7\x12\xe0\xde\xdf\x41\x42\x76\x08\x97\x00\x21\xf0\x0e\x12\xb8\x97\xa6\x0e\x1a\x81\xd1\xf9\x09\xe0\xac\x43\xa6\xbe\xb8\x00\x0c\xd9\x0e\x34\x66\xf5\x99\x58\xb1\x5b\xc5\x49\x29\x76\xaa\xf0\x15\xbb\x54\x1a\x82\x42\xd3\x53\x9d\xd4\x6d\x1e\x71\xae\x68\xd7\x0b\x4d\x3c\xd1\x63\x7f\x4c\xbe\xd9\xd4\x71\xd4\x83\x4e\x08\x73\x4c\x82\x87\x05\x93\xc0\xbb\x55\xa0\x75\xca\x39\xb9\x55\x58\x6e\x18\xdf\xf0\x7a\x27\xdd\x8e\xe8\x25\xad\xea\xfd\x0f\x8c\x6a\xd5\x0b\x5e\xce\xa9\x98\x3b\x41\x54\x31\xcf\x50\xa7\x55\x6c\x4c\xd7\xc9\x7e\x83\xd1\xf1\x90\x78\x45\x07\x30\x52\x6c\xd3\xf1\x21\x14\x24\xa4\xbf\xb1\x3e\x78\x34\x8c\x11\xd1\x9d\x4b\x85\x2b\xec\x05\x5d\x4f\xd9\x85\x0b\x5b\xb4\x0d\x0f\x65\xd4\x3e\xae\x78\x63\x5a\x63\x2f\xc0\x1f\xab\x1a\x38\x31\x14\x1a\x26\xe3\x55\xbd\x61\xc4\x83\x6c\x07\xea\xac\xc6\x50\x9b\xe6\x9c\x9e\x82\x20\x84\xe9\x9c\x17\x0e\xca\x96\xb8\x1c\x87\xcb\x63\x7e\x64\x76\x09\xa1\xdd\x1a\x6a\xe7\x47\x63\x5a\x25\x7b\x1a\x24\xa9\xc6\xe0\x48\x09\xf7\x79\xca\x9b\xfb\xe1\x51\x7d\x1d\x94\xf3\x8c\xfa\xb3\xee\x34\xa1\x75\xaa\x33\xf6\x6d\x86\x39\x6d\x4c\xf8\x7d\xc8\xc5\x3e\x0e\x97\xff\xb7\xb2\x51\x0f\xca\x6a\xb3\x39\x75\x71\x79\x86\x8b\x66\xe4\xa1\xf8\x74\xc0\x53\xdf\x4b\xeb\xf5\x8b\x6c\x42\xc8\xa6\xc1\x57\x88\x9d\x92\x1b\x48\xf1\x3a\xe7\x7a\xd4\x52\xea\x76\x8e\xee\xbc\xf4\x8a\x26\x2b\x9b\xc5\x97\x26\xf1\x78\xf2\xf3\xb4\x46\x5c\x70\xd5\xd1\x13\x79\x20\x8e\x9e\x80\xc5\x89\xcb\xc4\xcf\xc2\xa4\xf3\xde\x38\xed\x8d\x7d\xa3\x99\x0f\x0d\xb8\x50\xb6\xda\x3f\xd9\x96\x51\x1e\xac\xf1\xa6\x31\x84\x6c\x9d\x7c\xb0\xfa\x20\xbd\xfa\x89\x66\x4c\xd8\x18\x9e\x5b\xdd\x30\x7a\x7e\x37\xb2\x57\x63\x33\xd8\x50\x10\x1f\xd9\x20\x8f\x5e\x7a\xec\x9d\x97\x5f\x96\xec\x5d\x09\x4f\x36\x96\x53\xf8\x8a\xe8\xdd\x6c\xb5\xff\x68\x65\xdf\xec\x4e\xd6\x0f\xda\xb8\x53\x89\xc2\x3d\xf8\x64\x91\xea\xf6\xa6\x57\xb4\x8a\xf2\x92\xc0\xaa\xce\xd1\x00\x31\xfd\x8b\xde\x8e\xe1\x7c\x54\x67\xa6\xee\x19\xe9\x73\x6c\x04\x59\x48\x28\xae\xd1\x24\x61\xde\x2b\x0f\x26\x2f\x63\x52\x1b\x96\xac\xe4\x6f\x44\x62\x25\xb2\x10\x07\xd7\x5a\x6f\x7b\xa8\x04\x3c\x5b\x16\xf6\xb8\xcd\xfc\x86\x97\x7c\x30\xe3\xcf\x17\xdd\x6b\xb7\xc3\xe5\xfe\x48\x51\x10\x3a\x4c\x4b\x55\xfc\x4b\x1e\xd2\xc5\x0b\x49\xd6\x72\x26\x4f\x53\xfe\xd9\x98\xd7\x4e\xda\xd7\x20\x11\xfa\x0b\xbd\xad\xf1\xd7\x24\x76\x33\x58\x19\xfc\x24\x9f\x2a\x83\xaa\x30\x46\x2b\x41\x49\x89\xc7\x64\xe7\x9e\x87\x65\xe3\x57\xf4\x54\xf6\xac\x88\xcb\x06\x25\x7e\x76\x61\x4a\x02\x3d\x1e\x8c\x4d\x97\x72\xf5\x65\x26\x34\x8e\x19\xf7\xc9\xf4\x5e\xea\x5e\xd9\x08\x39\x67\x63\xc1\x8e\x76\x06\x2e\xe6\x4d\x76\xe1\x93\x39\x61\x0e\xb4\x3c\x38\xa6\xce\xfb\xef\x8c\x0d\x93\xf1\x0e\x1b\xc2\x9f\xd0\x67\x18\x42\xa7\xc9\xc5\xe1\x91\xf9\xab\x3c\x5d\xa7\x12\x4e\xcd\x92\x93\x1a\xb1\x30\x5b\x8e\x51\xb1\x1c\x2d\xcb\x33\x21\x6d\x60\xd4\x49\x93\x07\xe6\x69\x37\x31\xa3\x66\xdb\xdb\xa2\x8e\xbc\x55\x50\x0f\x30\x75\x67\x35\x9d\xd3\xf2\x66\x36\xa7\x6f\x78\x37\x63\x7b\x5c\x97\x63\x69\x18\xc6\xc9\xf1\x57\x55\xa2\x19\xdd\x72\xa3\x7e\x61\x10\x65\xa5\x8d\xbc\x49\xe9\x41\x28\x0f\x97\xca\x1b\xc5\x4d\xa2\x6b\x6b\x65\x4f\x83\xe1\xdf\x00\x00\x00\xff\xff\x25\xd0\x51\x59\xe3\x18\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6371, mode: os.FileMode(420), modTime: time.Unix(1519855116, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1519789868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


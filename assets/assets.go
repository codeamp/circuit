// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x8e\xdb\x36\x10\xbe\xeb\x29\xc6\xc8\xc5\x01\xfc\x04\x3a\xa6\x49\x5b\xb7\x0d\xe0\xee\x26\xb9\x14\x7b\xa0\xa5\xb1\xcd\xae\x44\x2a\x24\xe5\xd4\x28\xf2\xee\x05\x29\x52\xe2\x9f\x24\x6f\x92\x43\x4f\x36\x87\x9c\x6f\x7e\xc8\xf9\x38\x94\xac\x48\x43\x04\x7c\xa0\x2d\x16\xf6\xff\x6f\x92\xb3\xa2\x90\xd5\x05\x5b\x02\xff\x16\x00\x9f\x7b\x14\xb7\x12\xfe\xd4\x3f\x05\x40\xdb\x2b\xa2\x28\x67\x25\xbc\xb7\xff\x8a\xaf\x45\xf1\x0a\x3e\x5c\x70\x58\x0a\xea\xd6\xe1\x0e\x04\x76\x02\x25\x32\x25\x81\x34\x0d\xf0\x13\xa8\x0b\x02\x32\x25\x6e\xd0\x71\xaa\xe5\x94\x29\x0e\xbc\x17\xc0\x8f\x7f\x63\xa5\xe0\x2c\x48\x77\x29\xb4\xfa\x60\xcd\x98\x7f\x05\x0f\xa8\x04\xc5\x2b\x82\xa4\xec\xdc\x20\xf4\x12\x05\x1c\x6f\xb0\x7f\x5b\x80\x19\x6c\x69\x5d\xc2\xfe\xed\xeb\x12\x3e\x4a\x14\xa1\x8e\xb6\xad\xd7\x48\xbb\x56\x6e\x5f\x97\xf0\x97\x5e\xf7\xb4\xc9\xa2\x77\x82\x1b\x67\x9c\x01\x3b\xb6\x36\x76\x20\x9b\xfe\x5c\xc2\xa3\x12\x94\x9d\x77\xc0\x48\x8b\xd3\x08\xd9\x95\x0a\xce\x5a\x64\x6a\x5f\x3b\xf1\xeb\x12\x0e\x03\x46\xea\x99\x05\x97\x93\x9d\xc1\x3f\xab\x10\xbb\xa8\x55\x4e\x48\x54\x2f\x50\xab\xb8\xbf\x46\xe5\xe7\x61\xf0\xb4\x29\x52\x1d\x89\xe2\x4a\x2b\xa3\xe3\xfe\x1a\x9d\xc7\x61\xb0\xa4\x03\xb2\xc3\xca\x53\x7c\xd4\x43\x5f\x59\x0b\xb2\x00\x02\x1b\x24\xd2\x18\x75\x7f\x8d\xde\xc3\x30\xc8\xea\x78\x09\xd4\x7a\xfe\xd0\xe8\xbe\x9b\x04\x6b\xfa\x70\x25\x82\x92\x63\x83\x11\xd0\x27\x27\x8e\x01\xdd\x44\x1e\xf8\x1f\x85\x4c\x52\xce\xc6\x7c\x8c\x92\x29\x23\xef\x7c\xd1\x32\x4c\x80\x10\x69\x2f\x65\x33\x44\xb0\xc2\x77\x21\xd0\x43\x24\xcd\xe2\xd5\x54\x2a\xca\x2a\x35\x54\x53\x87\xa2\xa5\xd2\xc1\x7a\xa3\x61\xa7\xcd\x39\xde\x3c\x6d\xa6\x4a\x77\x2c\x90\x2f\xf6\xbe\xab\x89\x42\x09\x5f\x10\x2a\xc2\xa0\x25\xcf\x08\xb6\xd4\x6b\xa2\xc8\x50\xe2\x8e\x3e\x4c\x95\x57\x02\x89\x42\x7b\xec\xb7\xb6\x16\xc6\xc2\xd9\xb3\xae\x57\x41\x1d\x0d\x16\xee\x5d\x3f\x1a\xb0\xa9\xd9\xda\xc4\x95\x60\x05\x4e\xc1\x0e\x75\x6a\x79\xd3\x1c\x49\xf5\x1c\x69\xec\x0d\x0b\x6c\xbc\xa5\x23\xb6\xad\x87\xad\x2d\x94\x12\xac\xc0\x61\xdb\xe1\xe8\xfc\xfd\xeb\x6b\x6c\xf0\xfe\xf5\xb1\x43\xfa\x30\x6e\xbd\xea\x1d\x57\xea\x41\xa4\xac\x45\xb1\x83\xdf\xa0\x1f\x38\xfc\x62\xfd\x31\x00\xaf\x38\xb7\x5e\x05\x97\xe0\x4d\x38\x00\x4f\x34\x06\xf0\xed\xfa\x43\x00\xdf\xaa\x9f\x0b\xc0\xb1\xcb\x36\x43\x45\x81\xb6\x13\x66\x80\xdd\x54\x2e\xc0\x1f\x8c\x9f\x24\xe0\x87\xe2\x4f\x09\xf2\x19\x73\x1b\x50\x6a\x09\xc1\xe4\x08\xe7\x0b\xa7\x44\x7c\x37\x8e\x0d\xf8\x3b\x71\xd2\xc0\x26\x10\x6f\x6d\xa2\x9c\x06\x72\xb7\x5e\xe4\xf8\x9d\x7a\xa3\x41\xdd\x09\x1d\x3c\xbe\xef\xc3\xf1\xd0\x52\x79\x02\x07\x15\x5f\x0a\x7a\x99\xed\xe3\x0a\xca\x14\x8a\x13\xa9\x70\x90\x6a\x7e\x1f\xba\x27\xdd\xce\x60\x4b\x68\xe3\x7a\xa3\x4d\x78\xdb\x04\xb0\x2e\x95\x75\x69\xfa\x53\x6b\xc7\xb6\x39\xa9\x29\x37\x11\x5a\x8b\x6f\x06\x2d\x6b\x51\x4a\x72\x46\xdf\x07\x1d\xb5\x3f\xbe\x10\x79\x09\x7c\x24\x02\x99\xfa\x35\x92\x0a\x3c\xf9\xc3\xd4\xdd\xc9\xbb\x9f\x38\x53\x84\x32\x14\x07\x2e\x54\xea\xa3\xe2\x15\x0f\x93\xc2\x85\x9a\xc6\x01\x94\xa5\xca\x95\x40\xb5\x3f\xbc\x6d\x09\xab\x7d\x58\xbf\x5d\xdd\x84\x4d\x5d\xc0\xc1\x26\x1c\xde\x33\x15\xc4\xe7\xc7\xa0\xf7\x2a\x08\xca\xec\xd8\x1c\x4b\xea\x39\x7d\xe9\x2f\xa7\xeb\x95\xaf\x92\xee\xb0\x3f\x19\x06\x1f\x87\x55\xf1\x86\x8b\x17\xd8\x72\xc4\xb4\x68\x73\x5c\x14\xda\x7e\xc6\x9b\x6f\xe9\x4a\x9a\x3e\x4c\x71\xc5\xc3\xb8\x73\x47\x72\x38\x7f\xba\x5a\x72\x99\xba\xa2\x70\xe5\x91\xef\x57\x97\x13\x1f\x05\x0f\x40\xe5\x23\x56\x02\x55\x09\x6f\x38\x6f\x90\xb0\xe8\x84\x65\x8c\x7c\xd2\x61\x45\x91\x27\xa1\x86\x51\xdc\x7b\x51\xcc\xed\x8f\x77\x1c\xd3\x7d\xf1\x27\x57\xce\x42\xd7\x3f\xe0\xe7\x1e\xa5\x8a\xa4\x7f\xd0\x96\x06\xb2\x16\x5b\x2e\x6e\x99\xc5\xc3\x44\xb2\x5e\x69\xe2\x62\xa6\x87\xfd\x45\x90\x0a\x0f\x28\x28\xaf\xd7\x8e\x9d\xed\x1b\xd3\x90\xdc\xc4\x6a\x5d\x4f\x69\x2e\x00\x88\x50\xf4\x44\x2a\x5d\x8f\xfa\xe5\x6e\xc8\x0b\x49\x6d\xd9\xb0\x74\xb4\x68\xfc\x25\xb4\xc9\xc9\xa5\x22\x0a\x43\x5e\x8b\x9e\x15\xf9\x47\x85\xd5\x7c\x9f\xd2\xe9\x0b\x4e\xa3\xc9\x89\x8d\x2d\xcd\x89\x9b\x58\xde\x62\xff\x49\x3e\xf8\xdf\x71\x49\x15\x17\xb7\x90\xeb\x86\x33\x3f\x49\xce\x54\x7d\x14\x4d\x24\x39\x64\xd8\x58\x48\x72\x10\xf4\x4a\x14\xfe\x1e\x56\xbb\x9e\xe8\x8f\x0d\xad\x22\xb9\x7b\x99\x07\xef\x72\x80\xaa\x17\xfa\x1e\x79\x88\x5e\x1f\xde\x0b\x39\x78\x1f\x4f\xaf\xf5\xe0\xad\x9e\x7f\xce\x2e\x91\x83\xbf\x91\xe1\x0e\x9e\xa9\x7a\x23\x08\xab\x2e\xab\x6c\xe9\xf7\x39\x19\x9e\x0c\xa6\xd7\xd8\xb9\xed\x38\xc3\xf0\x72\x89\x39\x2f\xa2\xd5\xc5\x13\xc5\xd9\x89\x9e\xa7\xf3\xbf\xe8\xfe\x82\xeb\x77\xb4\x0e\x4b\x1d\xe1\x26\x5f\x8d\xb1\x77\x49\xb5\xfd\xa8\x22\x8a\x2b\x74\x96\x61\xe6\x02\x8e\x1f\xc5\x41\xc0\x5e\xb0\xfe\xc1\x7c\xa4\x67\x66\x19\x25\xae\xb4\x99\xb9\x38\xfc\x78\xe3\xe7\xd2\x91\x49\xed\x89\x32\x2a\x2f\x2e\x0d\xcb\xdc\x62\xfa\x56\xf7\xa1\x91\xb0\x7a\xf8\x96\x46\xb1\xa9\x25\x30\xc4\x1a\x6b\x38\x71\x31\x20\x50\x76\x06\x86\x5f\x46\xca\xa5\x46\x37\x00\x72\x99\x1b\xfc\x9b\x67\x8e\x2c\xc5\x84\x15\x57\x00\x1c\x39\x7f\x6e\x89\x78\xd6\xae\xdb\x2b\x39\x3c\x00\xfb\x3a\x6a\x06\xb5\x0f\xfe\xb7\x8b\xd4\x21\xef\x16\xd8\xd7\x99\xfe\x23\x14\xae\xd9\xf2\xbf\x35\xa4\xb6\xb2\x90\x2f\x6b\x3f\x63\xdd\x17\xf5\x9e\xc6\xad\xcd\x53\xe6\x34\xad\xc5\x95\xc2\x98\xe8\xc2\xf6\x3b\xd7\xa2\xc7\x99\x19\xdf\x84\x69\x76\xfe\x3f\x1d\xc9\xe8\x74\xfc\x01\xe3\x0e\xa7\xc3\x96\x3a\x87\x14\xbc\xfc\x53\xc4\xb5\x46\x39\x21\x82\x99\xc6\x79\xef\x83\xce\xec\xef\x7c\x8f\x6b\x7c\x4e\x1e\xf2\xeb\xf1\x47\xde\x67\xef\xb0\x59\x67\xe2\x3b\x60\xf1\xb2\x4b\xdd\xcc\xb9\xb8\xcb\x96\xdd\x2e\xbe\xa3\xa2\xb9\xd8\x91\xb5\xf2\xc8\x3d\xfe\x8d\x23\xba\x07\x8d\xb0\x67\xde\xf1\xbb\xe2\x6b\xf1\x5f\x00\x00\x00\xff\xff\x77\x7e\x21\x73\x67\x1a\x00\x00")

func pluginsCodeampSchemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaSchemaGraphql,
		"plugins/codeamp/schema/schema.graphql",
	)
}

func pluginsCodeampSchemaSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema/schema.graphql", size: 6759, mode: os.FileMode(420), modTime: time.Unix(1519754737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema/schema.graphql": pluginsCodeampSchemaSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampSchemaSchemaGraphql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcf\x72\xe3\x36\x0f\xbf\xeb\x29\xe8\xd9\x8b\x77\x26\x4f\xa0\xe3\xee\xe6\xfb\x9a\xb6\xdb\xa6\x71\x73\xda\xc9\x81\x91\x19\x9b\x8d\x24\x7a\x49\xca\xd3\x4c\xa7\xef\xde\x21\x09\x52\x00\x24\xd9\x71\x76\x3b\xd3\x4b\x22\x82\xe0\x0f\x7f\x08\x80\x80\x5d\x23\x5b\x69\xc5\xef\xba\x53\x15\x7c\xff\xb8\xf9\xf5\x97\xaa\x72\xcd\x5e\x75\x52\xfc\x55\x09\xf1\x75\x50\xf6\xa5\x16\xbf\x85\x7f\x95\x10\xdd\xe0\xa5\xd7\xa6\xaf\xc5\x67\xf8\xaa\xfe\xae\xaa\x77\xb0\xef\x5f\x0e\x2a\x7d\xc6\xb3\xef\xc4\xbd\x53\xb6\x12\x62\x70\xca\xae\xf5\xb6\x16\x37\x9f\xde\xd7\x99\x98\x76\x1d\x6c\xbb\xf5\xfb\x5a\x7c\x09\x94\x87\x55\xdc\xbc\xb5\xe6\x0f\xd5\xf8\x4a\x88\x43\xfa\x02\x80\x2b\xe1\xda\x61\x57\x8b\x8d\xb7\xba\xdf\x5d\x89\x5e\x76\x6a\x5c\xa9\xfe\xa8\xad\xe9\x3b\xd5\xfb\x9b\x4f\x99\xfc\xbe\x46\x68\x05\xd9\x8d\xd0\x49\x38\xd0\x41\xfe\xff\x94\xf4\x83\x55\x81\xeb\x09\x3e\x23\x17\xd0\x81\x6b\xa3\xec\x51\x37\x91\xcb\xc1\x67\xe4\x02\x3a\xe5\x12\xee\xa0\x1a\xc4\xba\x09\x4b\xcc\x1e\x08\x70\xe4\x4e\xb5\x4a\xba\x08\x6c\xe1\x33\x72\x02\x1d\xb8\xae\x47\x73\x03\x27\xb2\x3e\x71\xa3\xfd\xe9\x09\x71\x94\x56\xcb\xc7\x16\xb4\x6f\xac\xf2\x59\x9b\xf0\x4d\xef\xe1\xfa\x4f\xaf\x7a\xa7\x4d\x1f\x8d\x08\xb2\x32\x01\x24\xe5\xe5\xc2\x31\xe4\xed\x6b\x7a\x92\x73\x52\x07\x20\x39\xa3\x2b\x18\xc2\x1d\xa3\x66\x15\x94\xed\xb4\x2b\xc2\xc7\x55\x38\x14\x02\x7d\x95\x62\xb7\x44\x72\x0c\xdf\xbc\x82\x08\xfe\x68\x95\xf4\x2a\xab\x5e\x09\xd1\x44\x02\x28\xbd\x06\x7a\x09\xb0\x9b\xfe\x30\x78\x16\x6f\xf7\x87\x2d\x85\x18\x22\xe1\x12\x08\xd0\x02\xcc\x2f\x5a\x80\xe1\x6b\xa0\xd7\xd9\x69\x19\xe2\xae\xf0\x17\x08\x08\xbd\x02\x01\x91\xb7\x06\x7a\x9d\x63\x35\x43\x6c\x0a\x7f\x31\x64\x24\x25\x43\x2e\x81\xf8\xa4\x5a\x45\xb4\xd8\x46\xc2\x25\x10\xd4\x90\x1c\x8e\xc4\x9a\x90\x47\x6b\x94\x64\x05\x20\x2c\x18\xe6\x26\x9d\x2f\xd6\x31\x5c\x62\xe2\x9b\x70\xa9\xc9\x19\x97\xd8\xfd\x26\x5c\xf0\x03\xca\xf9\xe2\x06\x94\xe4\x6b\xb4\x5f\xe3\xec\xcf\xb0\xd7\xe4\x7c\x71\x03\x85\x4d\x5e\xf8\x16\x58\xf0\x02\x85\x4d\x4e\xf8\x16\xd8\xa9\x13\x4a\x55\x43\x41\x11\xca\xd9\x3a\x55\xb8\xe0\xc7\xf0\x7f\xf4\x6a\x58\x2d\x58\x8e\xb1\x72\x20\xbc\x0e\x6b\x6a\x6e\xc1\x12\xe8\xf6\x5f\x07\x96\x8d\xe4\x25\x18\x2e\x3b\x93\xd7\x85\xa1\x16\x85\x58\x1c\x97\x09\xc4\x54\x8e\x08\xf7\xfc\x06\xc4\x6c\x30\x47\x84\x2b\x7e\x03\x22\xb7\x9a\xd7\xde\x11\x93\xbf\x2b\xf5\xe4\xf5\x61\x35\xf5\xb4\x33\x78\x85\xfe\x6e\x82\x90\x8f\x80\x96\xbc\xf3\x2f\x19\x14\xda\x2a\xfc\xec\x15\xbb\x42\x97\x85\x1e\xc7\xf5\x40\xd7\xa9\x43\x43\x84\x2c\xec\x4b\x6a\xa7\x56\x0f\xf0\x70\xc6\x46\x2e\x3e\x9a\xe1\x2b\x3e\x98\xa9\x47\x0b\xef\xaf\xea\xa4\x6e\x73\x07\xb6\xa2\x0f\x30\x81\xca\xd7\xba\xad\x63\x27\x0a\xd8\xd0\x66\x25\x78\x58\x30\x09\xfc\xe1\x0c\xb4\x4e\x39\x27\x77\x0a\xcb\x0d\xd6\xe1\xf5\x5e\xba\x3d\xd1\x4b\x5a\xd5\xfb\x1f\x18\xd5\xaa\x27\xbc\x9c\x53\x31\x3f\x4a\x51\xc5\xdc\xe2\x9d\x57\xb1\x31\x5d\x27\xfb\x2d\x46\xc7\x3d\xec\x8a\xf6\x87\xa4\xee\xa7\xe3\x43\xa8\x8d\x48\x7f\x63\x7d\xf0\x68\xe8\x68\xa2\x3b\x97\x6a\x68\xd8\x0b\xba\x9e\xb3\x0b\xd7\xd8\x68\x1b\xee\x19\xa9\x7d\x5c\xf1\xc6\xb4\xc6\x5e\x80\x3f\x16\x58\x70\x62\xa8\x79\x4c\xc6\xb3\x7a\xc1\x88\x47\xd9\x0e\xd4\x59\x8d\xa1\x36\xcd\x39\x3d\x05\x41\x08\xd3\x39\x2f\x1c\x95\x2d\x71\x39\xf6\xbe\xa7\xfc\xc8\xec\x12\x42\xbb\x0d\x94\xf1\x0f\xc6\xb4\x4a\xf6\x34\x48\x52\x39\xc4\x91\x12\xee\xf3\x9c\x37\x0f\xc3\x9d\xfa\x3a\x28\xe7\x19\xf5\x67\xdd\x69\x42\xeb\x54\x67\xec\xcb\x0c\x73\xda\x98\xf0\xfb\x90\x8b\x7d\xec\x73\xff\x6f\x65\xa3\x6e\x95\xd5\x66\x7b\xee\xe2\x72\x3b\x19\xcd\xc8\xfd\xf9\xf9\x80\xa7\xbe\x97\xd6\xeb\x27\xd9\x84\x90\x4d\x3d\xb8\x10\x7b\x25\xb7\x90\xe2\x75\xce\xf5\xa8\xa5\xd4\xed\x1c\xdd\x79\xe9\x15\x4d\x56\x36\x16\x2c\x0d\x05\xf1\xe4\xe7\x69\x8d\xb8\xe0\xaa\xa3\x27\x72\x6f\x1e\x3d\x01\x8b\x33\x97\x89\xa7\xd6\xa4\xf3\xc1\x38\xed\x8d\x7d\xa1\x99\x0f\xbd\x40\xa1\xec\xb4\xbf\xb7\x2d\xa3\xdc\x5a\xe3\x4d\x63\x08\xd9\x3a\x79\x6b\xf5\x51\x7a\xf5\x13\xcd\x98\xb0\x31\x3c\xb6\xba\x61\xf4\x3c\xd6\xb2\xa1\xb6\x19\x6c\x28\x88\x77\x6c\xa6\x40\x83\x28\x1b\x43\xf3\xe0\xcb\xc6\x5e\x98\x28\x59\x4e\xe1\x2b\x9a\x9d\xfc\x76\xda\x7f\xb0\xb2\x6f\xf6\x67\xcb\x08\x6d\x35\x52\xa5\x2a\xb4\x73\x75\xaa\x3b\x98\x5e\xd1\x42\xca\xab\x02\x2b\x3c\x27\x63\xc4\xf4\x4f\x7a\x37\x46\xf4\x89\x98\x19\x9f\x6a\x1c\x3c\x4b\x8a\xcf\xe5\xd3\x5c\x0b\xb5\x90\x59\x5c\xaf\x49\xe6\x7c\xaf\x84\x98\x4c\xeb\xa4\x48\x2c\x59\xc7\xe7\x56\x66\x1d\xf7\x0d\x0e\xb6\x8d\xde\xf5\x50\x19\x78\xf6\x2c\xec\x71\xd3\xf9\x75\x2f\xb9\x62\xc6\xad\x4f\xba\xd7\x6e\x8f\xcb\xff\x89\x0b\x17\x3a\xb4\x4f\x55\xfc\x4b\x66\xfc\xe2\x8c\x24\x6b\x39\xb3\xa7\x25\xe0\xd1\x98\xe7\x4e\xda\xe7\x20\x11\xde\x1b\x7a\x69\xe3\x8f\x5f\xec\x82\xb0\x32\xf8\xd7\x82\xa9\x32\xa8\x2a\x63\xb4\x12\x93\x94\x78\x4a\x76\x7e\x03\xb1\x6c\x3c\xe0\x4f\x65\xcf\x8a\xb8\xac\x71\xe2\x67\x17\xba\x26\xd0\xe3\xd6\xd8\x74\x29\xab\x87\x99\xd0\x38\x65\xdc\x47\xd3\x7b\xa9\xfb\xd0\x6a\x1b\xeb\xe7\x6c\x2c\xd8\xd1\xce\xc0\xc5\xbc\xc9\x2e\x7c\xd2\x37\xcc\x81\x96\x5f\x06\xa6\xce\xfb\xef\xb4\x11\x93\x76\x0f\x1b\xc2\xa7\xfb\x57\x18\x42\xbb\xcb\xc5\x66\x92\xf9\xab\x4c\xd5\x53\x09\xe7\x7a\xcb\x49\x8d\x58\xe8\x35\xc7\xa8\x58\x8e\x96\xe5\x1e\x71\xf6\x27\x56\xea\x2b\x32\xf7\x9d\xf7\x14\xb3\x6b\xf6\xb9\x5b\x54\x93\x3f\x1a\xd4\x09\xf3\x1a\xcf\xd4\xb8\x93\x3a\x5f\xcd\x26\xf9\x15\xae\xff\x8c\xce\xb5\x3a\x95\x93\x74\x7e\x25\xca\xcd\x8d\xb6\x51\xb7\xd0\xa5\xb2\x3a\x47\x06\x56\x7a\x10\x6a\xc5\xa5\xf2\x46\x71\x93\x50\xdb\x59\xd9\xd3\xc8\xf8\x27\x00\x00\xff\xff\xbe\x71\xca\x44\x9f\x19\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6559, mode: os.FileMode(420), modTime: time.Unix(1519934399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1519789868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


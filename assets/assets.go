// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\xdb\x38\x12\xbe\xf3\x29\xe0\xca\x45\xa9\xf2\x13\xe8\x18\x3b\xbb\xf6\x6e\xb2\xab\xb1\x92\x93\xcb\x07\x98\x6a\x49\x18\x93\x00\x03\x80\x1a\xab\xa6\xf2\xee\x53\xf8\x21\xd0\xf8\xa1\x6c\xd9\x99\xaa\xb9\xd8\x64\x13\xe8\x9f\x0f\xdd\x8d\xee\x96\x6a\x69\x47\x25\xf9\xc6\x7a\x68\xfc\xf3\x7f\xd6\xff\xff\x5f\xd3\xa8\x76\x0f\x3d\x25\x7f\x36\x84\xfc\x18\x41\x1e\x97\xe4\x37\xf3\xaf\x21\xa4\x1f\x35\xd5\x4c\xf0\x25\xf9\xea\x9f\x9a\x9f\x4d\xf3\xc1\x7f\xd7\xc7\x01\xdc\xa3\xdd\xfb\x81\x7c\x57\x20\x1b\x42\x46\x05\x72\xc1\x36\x4b\x72\x7b\xfd\x71\x39\x11\xdd\x57\xe5\x3f\xab\xc5\xc7\x25\xb9\x37\x94\x87\x0b\xfb\x71\x25\xc5\xef\xd0\xea\x86\x90\xc1\x3d\x79\x06\x97\x44\x75\xe3\x6e\x49\xd6\x5a\x32\xbe\xbb\x24\x9c\xf6\x10\xdf\x80\x1f\x98\x14\xbc\x07\xae\x6f\xaf\x27\xf2\xc7\x25\xe2\x16\x38\xab\xc8\x5a\x2d\xfc\xc3\x1a\xa8\x6c\xf7\x61\xb9\x7b\xbd\xe5\xc3\xa8\x2f\xc9\x40\x25\xed\xd5\x92\xac\xe8\x8e\x71\xaa\x85\xb4\xf4\xc8\xfb\x0b\x53\xda\xa9\xfe\x2f\xa0\x7a\x94\x60\x04\x6c\xfd\xe3\x62\x76\xb7\x5f\x1c\x77\xaf\x41\x1e\x58\x6b\x77\x2b\xff\x38\xbf\xdb\x2f\x2e\x76\x13\x35\x40\x8b\x58\xac\xcd\xab\x85\x78\x1d\x09\x1e\xe9\x3b\xe8\x80\x2a\x2b\x50\xfa\xc7\x79\x81\x7e\x71\x14\xf8\x39\x22\x6e\x38\xa0\x03\x88\xa8\xa2\x03\x33\x2a\xa0\x2d\x0f\x05\x13\x72\xa0\x92\xd1\xc7\xce\x03\xd0\x4a\xd0\x27\xed\x37\x0b\xa2\x36\xfe\x2c\x3e\x3f\x6b\xe0\x8a\x09\x6e\x71\x30\x6a\x4d\x04\xb5\x98\x73\x91\xfb\xb0\xe9\xa1\xce\x0b\x39\x4c\xa4\x59\x4c\xf3\x95\x29\xb0\x48\x78\x84\x38\xe3\x70\x97\x51\x27\x15\x40\xf6\x4c\x05\xe1\xf1\xcd\x6c\x32\xb1\x7a\xe1\xc2\x2f\x04\xa3\x8d\xc0\xe9\xcd\x07\xe1\x95\x04\xaa\x61\x52\xbd\x21\xa4\xb5\x04\xaf\xf4\x74\x48\xc1\x8f\x33\xb7\x76\x91\x3a\x6c\x52\x16\xa3\x25\x9c\xc3\xc2\x6b\xe1\xcd\x0f\x5a\x78\xc3\x17\x9e\x1e\x1c\x2c\xf3\x37\xe7\xdb\x5a\x0c\x88\x81\xd2\x62\x98\xb6\xbb\xdc\x70\x91\x6d\xf0\x32\x7d\x0c\x04\x99\x3e\x04\x16\x9e\x1e\xa2\x28\x0b\x2a\x6c\x79\x24\x39\xcb\xcf\x61\x71\x0d\x1d\x24\x5a\x6c\x2c\xe1\x1c\x16\xa9\x21\x93\x53\x27\xd6\x98\x80\x5e\xa0\x68\x0f\x0c\xcc\x4b\xc6\x73\xed\xf6\x07\xeb\x32\xbe\x89\x89\x6f\xe2\x9b\x9a\x3c\xf1\x4d\xec\x7e\x13\x5f\x8f\x03\x0a\xe1\x00\x03\x4a\x21\x38\xc4\x97\x38\xb7\x4c\x6c\x3f\x27\xfb\x03\x0c\x29\x5b\x87\xc2\x7b\xd8\x7a\x14\x52\xb6\x0e\x84\xf7\xb0\x2d\x41\x08\x39\x13\x39\x85\xc9\x8b\x0b\x97\x3f\xa7\x34\x99\x26\xcd\x19\xcb\x31\xaf\xc9\x11\x5e\xc7\xab\x34\x37\xf0\x22\xe8\xf4\x5f\xc7\x6c\x32\x32\x4f\xe4\xfe\xb0\x27\xf2\x22\x2c\x58\x92\x40\x0c\xc0\x4d\x84\xc4\xd4\x9c\xa3\x3f\xe7\x37\x70\x9c\x0c\xce\x39\xfa\x23\x7e\x03\xc7\xdc\xea\x3c\x59\x47\x9e\xf9\x45\xb4\x2c\xae\xab\x2c\x09\x9f\x06\x23\x4f\xe9\xbf\x4c\x10\xc2\xc8\xd3\x1c\x3a\x7f\x93\x41\xa6\x94\xc4\xf7\x64\xb0\xcb\x54\x96\xe8\x36\x5d\x8c\xe9\xbb\xab\x4a\x11\x61\x12\x76\xef\xea\x83\x0b\x7f\x21\xa7\x17\x61\x52\xed\x14\x10\x56\x2a\x21\x4c\x8b\x86\x20\x62\x10\x8b\x88\x93\xec\x4f\x42\x3c\xf5\x54\x3e\xa1\x6b\xf8\xd1\x93\x56\x49\x89\x6c\xae\xc1\x4f\x42\x74\x40\xb9\xaf\x0f\x42\xdd\xd4\x30\xae\x41\x6e\x69\x0b\x91\x66\xcb\x84\x81\xee\x60\x49\x6e\xb9\xad\xa3\x5a\x31\x9a\x5c\xe4\xdf\x38\x3c\xeb\xab\x51\x2a\x21\xa7\x6a\xc9\x73\x45\xb5\xa0\x2b\x3c\x10\x81\xb0\x7e\xe8\xc0\xda\xf4\x7a\x49\xc0\xb5\x64\xa0\x62\x3d\xf4\x70\x52\x7e\x2c\xfe\x9c\xf8\xf8\xfe\x4e\xe9\x8e\xd1\x4b\xc2\x43\xe5\x3d\x49\x0f\x84\x77\x8b\xb7\x9c\x4e\xcb\x47\x7d\x83\x93\x8f\x08\xef\x94\xef\x39\x9d\x96\x8f\xba\x1e\x27\x1f\x11\xde\x29\xdf\x73\x3a\x2d\xdf\x76\x91\x56\xb0\x79\xb2\xcc\xbd\xf7\x1b\x5e\x3d\x65\x5d\xdc\x90\x94\xce\x59\x4c\xbb\xfc\xba\x59\xda\x36\x38\xc5\x36\xc1\x35\x93\x90\x97\xbc\x86\xd6\x83\x52\xd6\xbe\x28\xd7\xa4\x19\xfc\xbe\xa7\x6a\x9f\xe8\x45\x25\x70\x7d\x93\x51\x25\x6c\xf1\x6b\x4d\xc5\xa9\x3a\xc4\xae\xf7\x0a\x15\x5b\xd1\xf7\x94\x6f\x30\x77\xdc\x40\x5f\xa4\x1d\x63\x52\x80\x95\x27\x36\x08\x69\xd2\xd8\xbd\x69\x44\x1e\x2e\xd2\xe6\x2f\x29\x5b\xcc\x37\xa3\xe8\x09\xa3\xcc\xbd\x30\x74\xe2\x68\x96\xaf\xb5\xa4\x1a\x76\x47\xd7\xe2\x34\x84\x74\xec\x00\x1c\x94\x5a\x49\xf1\x08\x81\x2a\x81\x6e\x58\x49\x1e\x24\x98\x46\xe1\x46\x88\xa7\x49\x9e\x83\x0c\xd7\x51\x16\x36\xdc\x75\xa6\xd0\xe5\x98\x3c\xc1\x11\xbf\x32\x75\x0d\x5b\x3a\x76\x1a\xe5\x59\x03\x4e\x27\xe4\x49\x13\xa7\x71\x43\xe2\xe3\xb9\x6e\xb1\x00\x43\x49\x2d\xd3\x2f\xd3\xe7\x40\xbb\x31\x3d\xc3\x56\xa4\x68\xd7\x7c\xc1\xf9\xa6\x89\x9e\xda\xf9\x1c\x40\x86\x70\x89\xe9\xf0\xd4\x09\x17\xe6\x32\xb5\xf6\x65\x5e\x7a\x1b\xe1\x19\x45\xe2\xc0\xc6\xcd\x5e\x38\x89\x76\x18\xef\xe0\xc7\x08\x4a\x67\xd4\x2f\xac\x67\x09\xad\x87\x5e\xc8\x63\x65\xb1\xfb\x50\xac\xd7\x26\x45\x70\xdb\x38\xff\x5b\xd2\x16\x56\x20\x99\xd8\xbc\x14\x87\x53\xbb\x89\xef\xbf\x57\xc4\x61\x8a\x3d\x95\x9a\x6d\xa9\x75\x0c\xd7\xd4\x13\xb2\x07\xba\xf1\x99\x27\xcc\x88\xac\x96\x94\x75\x35\xba\xd2\x54\x43\x9a\x43\xb2\x39\xc3\xdc\x94\xc1\xee\xfc\x5a\xa6\xae\x33\x8f\xfa\x4e\x74\xdd\x23\x6d\x9f\x8a\xd2\xc3\x17\x2b\xf8\x8e\x78\xe1\x8c\xf1\x80\xcf\x99\x32\x08\xc5\xb4\x90\xc7\x34\x4f\xf9\x16\x22\x50\x76\x4c\x7f\x97\x5d\x46\x59\x49\xa1\x45\x2b\x12\xb2\x54\x74\x25\xd9\x81\x6a\xf8\x6f\x1a\x48\xe6\xc3\xf8\xd8\xb1\x36\xa3\x87\x31\x9e\xda\x8b\x3f\xae\x6d\xa2\x32\xd6\x7b\x4b\x4f\xcc\x06\xb3\xe9\x5e\x3b\x4a\x93\xef\xef\xb2\x61\xc7\x5b\x26\x6f\x67\xcf\x06\xcf\x9c\xa5\x01\x76\x9c\xea\x80\x6b\xc7\xf4\x27\x49\x79\x9b\x5c\x5d\xad\xe0\x9a\xf1\x51\x8c\xca\xc1\x94\x64\x48\x48\xca\xdf\xb2\xc6\x9d\xca\x59\x84\xed\x5c\xdc\x65\x13\x3e\x97\xcf\x03\xed\x85\x1c\x22\xfa\x41\x70\xeb\xd7\x28\xfc\xb3\xfc\x97\xa5\xd8\x93\xd1\x20\xf8\x96\xed\x62\xec\xd6\xf4\x2d\x9a\x16\x1c\x0f\x73\x8a\xd7\x32\x47\xad\x99\x9c\xc9\x21\x85\x5e\xa3\xd2\xa2\xbf\xca\xa8\x45\xe6\xf8\x05\x09\x01\xa7\x46\xd4\x64\xe2\x24\x39\x67\x73\x3e\x08\xcc\x6c\xce\x11\xc3\xa1\xb0\x66\x3b\xee\x33\x63\x9e\x26\x66\xbe\xe5\xa6\xe7\x4e\x30\x07\x45\x05\xec\x2d\xe3\x4c\xed\x71\x4e\x3c\xe1\x06\x84\x99\x98\x6b\xec\xdf\x64\x68\x1a\xc0\xf0\x85\xcb\x6c\x0a\xab\xe6\xba\x34\x1c\xeb\x01\x95\x1e\x64\x9c\x80\x9f\x8a\xdd\x44\x77\xf7\xa3\x48\xcd\x02\xf4\x73\x89\xb5\xa3\xcc\xdb\x73\x31\x8e\x9b\x54\xe3\x12\x09\xf3\x24\x4f\x59\xc6\x6d\xd2\x10\xd8\x02\xd1\x5e\xe6\xb7\x5c\xa7\xae\x87\xf9\xe0\xc1\x72\x09\x33\xba\x6f\x23\x26\x28\x06\x53\x62\x15\x41\xeb\x05\x42\xb6\x70\x07\x8f\x23\xeb\x0a\xfb\xa6\xb2\x07\x2b\x85\x67\xbe\xa5\x52\x55\xd9\xe7\x95\xf0\xf9\xde\x5a\xfd\xee\x95\x58\x09\xe9\x9c\xf0\xe2\xa1\x12\x0a\xb3\x26\xd7\xea\xf6\xeb\x82\xe6\x18\x97\xb5\xfc\x0d\xd0\x4e\xef\xed\x8b\x5d\x52\xa9\xeb\x2b\x4b\x66\x6b\xfc\x2b\xc1\x35\x65\x1c\xa4\x35\xae\x06\x75\xb0\xd2\xf5\xa3\x42\x22\x3c\x42\x9c\x59\xc2\xcf\xc6\xef\x9c\xb1\xc6\x32\xc8\x61\xea\xe9\xf3\x7a\x94\xa8\xc9\xed\xe9\xf3\x77\x4e\x0f\x94\x75\xa6\xa6\xcf\x59\xe7\xb6\x15\x3c\x6d\xbd\xaa\xf7\x59\x21\x9a\xba\x00\xb6\xc3\x16\xff\x7b\xe8\x31\x83\x81\x6a\x9c\x14\x18\x67\x9a\xd1\xee\x1a\x3a\x7a\x5c\x43\x2b\xf8\x46\x4d\x5b\x07\x5b\xf3\x66\x44\xcd\x7a\x10\xa3\xce\xa8\x6a\x6c\x5b\x50\xea\xdb\x5e\x82\xda\x0b\xe3\xed\x8e\xbe\xa5\xac\x1b\x25\x14\xf4\xbd\xd6\xc3\x0d\xd0\x0d\x48\xe3\x72\xc8\xee\x9b\xf0\x61\x72\xbe\x1a\x3a\xd9\x2a\x8b\x53\xee\xf6\x59\x1b\x54\xf4\x1a\x35\x77\x08\xbf\x36\x94\xd1\xf7\xcf\x69\x3d\x8a\x16\x11\x1b\x92\xff\x62\xf0\xb2\x21\x6f\xe9\x66\x67\xbb\xd4\x0c\xd4\x30\xce\x2f\xd5\x78\xa9\x69\x2d\x2e\xdf\x99\x26\x36\xb9\xb3\x66\xd3\xd2\x5c\xf3\x59\xfd\x85\x38\x05\x34\x19\x38\x9f\x0d\x67\xb5\xba\x9c\x55\x33\xaf\xd1\x52\x10\xea\x1a\x57\xae\xde\x93\x3a\x5f\x56\xaf\x92\x4b\x5c\x58\x65\xf4\xd7\x55\x8e\x33\x46\x85\xf1\x5c\x1c\xa7\x27\x2a\xd7\x26\xed\x56\x63\xd3\x14\x67\x97\x6f\x32\xb6\x4b\x37\xfa\x6c\x71\xae\xbc\x28\xae\x70\xc0\x9d\xa4\x7c\xd6\x5f\x66\xa2\xaf\xfc\x1c\x05\xcc\x1e\xfa\x2b\x05\x39\x68\x66\x05\x45\xe4\x6a\x75\x42\x0a\xdd\x8c\x9a\x0e\xbe\xbf\x02\x00\x00\xff\xff\xc0\x59\x53\xf7\x08\x24\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9224, mode: os.FileMode(420), modTime: time.Unix(1532976265, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529614596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xc1\x72\xe3\x36\x0f\xbe\xeb\x29\x98\xd9\x8b\x77\x26\x4f\xa0\xe3\xee\xe6\xff\xeb\xb6\xdb\xa6\x76\xb3\x97\x4e\x0e\x8c\xcc\x38\x6c\x24\xd1\x4b\x52\x9e\x66\x3a\x7d\xf7\x0e\x49\x50\x02\x20\xca\x8e\x77\x73\xe8\x25\x11\x41\xf2\x03\xf0\x11\x04\x40\xbb\x46\xb6\xd2\x8a\xdf\x75\xa7\x2a\xf8\xfe\x71\xfb\xeb\x2f\x55\xe5\x9a\x27\xd5\x49\xf1\x77\x25\xc4\xd7\x41\xd9\x97\x5a\xfc\x16\xfe\x55\x42\x74\x83\x97\x5e\x9b\xbe\x16\x9f\xe1\xab\xfa\xa7\xaa\xde\xc1\xbc\x7f\x39\xa8\xf4\x19\xf7\xbe\x13\x77\x4e\xd9\x4a\x88\xc1\x29\xbb\xd2\xbb\x5a\xac\x3f\xbd\xaf\xb3\x30\xcd\x3a\x98\x76\xab\xf7\xb5\xf8\x23\x48\xee\xaf\xe2\xe4\xad\x35\x7f\xaa\xc6\x57\x42\x1c\xd2\x17\x00\x5c\x0b\xd7\x0e\xfb\x5a\x6c\xbd\xd5\xfd\xfe\x5a\xf4\xb2\x53\xd3\x48\xf5\x47\x6d\x4d\xdf\xa9\xde\xaf\x77\x59\xfc\xbe\x46\x68\x23\xb2\x9b\xa0\x93\x72\x90\x83\xfe\xff\x29\xe9\x07\xab\xc2\xaa\x47\xf8\x8c\xab\x40\x0e\xab\xb6\xca\x1e\x75\x13\x57\x39\xf8\x8c\xab\x40\x4e\x57\x09\x77\x50\x0d\x5a\xba\x0d\x43\xbc\x3c\x08\x60\xcb\x46\xb5\x4a\xba\x08\x6c\xe1\x33\xae\x04\x39\xac\xba\x99\xdc\x0d\x2b\x91\xf7\x69\x35\x9a\x9f\xef\x10\x47\x69\xb5\x7c\x68\x15\xdb\xfa\x25\x8b\x39\x44\x9e\xc8\x50\x7f\x79\xd5\x3b\x6d\xfa\xe8\x57\xc0\xc8\x82\xc9\xb1\x1b\x2c\xe2\xfb\x1c\xde\xc3\xd6\x53\x1a\xd0\xb2\x89\x90\x1b\xba\x75\xc3\xa4\xf7\x57\x29\x34\xc7\x40\x8d\xd1\x99\x47\x10\xa0\x1f\xad\x92\x5e\xe5\x38\xa8\x84\x68\xa2\x00\x42\x61\x05\xf2\x31\x7e\xd6\xfd\x61\xf0\x2c\x9c\xee\x0e\x3b\x0a\x31\x44\xc1\x25\x10\x60\x05\xf8\x35\x5a\x01\x1e\xad\x40\x5e\x67\x36\x32\xc4\x66\x5c\xff\x4e\x6c\x4c\xdb\x3e\xc8\xe6\x19\x81\x58\x10\x31\x98\x75\xbc\x46\x57\x6c\x3f\x98\x00\x91\x39\x9a\x00\x81\xb9\x02\x79\x9d\x43\x39\x9b\xb0\x1d\xd7\x8f\x44\x4c\xa2\x44\xc4\x25\x10\x9f\x54\xab\x88\x15\xbb\x28\xb8\x04\x82\x3a\x92\x43\x93\x78\x13\x62\x71\x85\xee\xe0\x08\x10\x06\x0c\x73\x9b\xf6\x8f\xde\x31\x5c\xe2\xe2\x37\xe1\x52\x97\x33\x2e\xf1\xfb\x9b\x70\x81\x07\x74\xaf\x47\x1a\xd0\x95\x5e\xa1\xf9\x1a\x27\x87\x0c\x7b\x43\xf6\x8f\x34\x50\xd8\xc4\xc2\xf7\xc0\x02\x0b\x14\x36\x91\xf0\x3d\xb0\x73\x12\xc6\xa4\x57\x62\x23\x27\xb8\x55\x21\x1b\x12\xf0\x2c\x2c\xe8\xfd\x32\xe1\x97\xd8\xc2\xfa\x67\xb4\xbd\xb9\xfe\x39\xad\xa3\x7e\x51\x22\xf8\xcd\x0d\xc8\x07\xc0\x4b\x05\x50\x8f\xab\xc3\x8a\x94\x8f\x5a\x90\xc9\x51\x0f\x16\x12\x8a\xb9\x06\x20\xf7\x0d\x34\x64\x12\xb9\x06\x60\xef\x0d\x34\x70\x96\xe6\x04\x4d\xc0\x68\xff\x0c\xb0\x48\xc8\x9c\x8b\x0b\xc0\x90\xef\x20\x63\x5e\xbf\x12\x2b\x56\xe2\xd8\xf8\xc5\x2a\x1c\xbe\x62\x05\x4e\x3d\x5d\xa8\xf5\xaa\x93\xba\xcd\x1d\x5b\x10\x1c\x94\xed\xb4\x8b\xf5\x3d\x74\x48\x49\x1e\xdb\x82\xc4\xcd\xae\x8e\x9d\x2b\x54\x79\x68\xcb\x12\x3c\x0c\x98\x06\x5e\x89\x83\xac\x53\xce\xc9\xbd\xc2\x7a\x43\x37\x8a\xc7\x4f\xd2\x3d\x11\xbb\xa4\x55\xbd\xff\x81\x49\xad\x7a\xc4\xc3\x92\x89\xb9\x4a\x45\x13\x73\x4b\x78\xde\xc4\xc6\x74\x9d\xec\x77\x18\x1d\xf7\xbc\x57\xb4\x9f\x24\x85\x20\x6d\x1f\x42\xb2\x44\xf6\x1b\xeb\x03\xa3\xa1\xd5\x8f\x74\x2e\x25\xd5\x30\x17\x6c\x3d\xe7\x17\x4e\xba\xd1\x37\xdc\x63\x52\xff\xb8\xe1\x8d\x69\x8d\xbd\x00\x7f\xca\x9e\x5c\x51\xce\x3a\x4c\xe1\xb3\x7a\xc1\xf0\x47\xd9\x0e\x94\xb9\xc6\x50\x07\x4b\x27\x90\x22\x22\xc4\x6c\x89\x92\xa3\xb2\x39\x48\x97\x7a\xe5\x53\x0c\x33\x8f\x85\xd0\x6e\xab\x1a\xab\x7c\x2d\x3e\x18\xd3\x2a\xd9\xd3\xf0\x49\xd9\x07\xc7\x50\x38\xe9\x73\x3c\x1f\x86\x8d\xfa\x3a\x28\xe7\x99\xf4\x67\xdd\x69\x22\xeb\x54\x67\xec\x4b\x61\x71\x9a\x98\xad\xf7\xe1\x96\xf6\xb1\xa5\xfe\xbf\x95\x8d\xba\x55\x56\x9b\xdd\xb9\x23\xcd\x9d\x67\x74\x23\xf7\xf8\xe7\xaf\x02\x3d\x08\x69\xbd\x7e\x94\x4d\x08\xe6\x10\xcb\xf1\xae\x2a\xb9\x83\xcb\x5f\xe7\x2c\x10\xad\x94\xba\x2d\xc9\x9d\x97\x5e\xd1\x6b\xcc\x9e\x16\xe5\x87\x05\xec\xfc\x3c\xcf\x1e\x17\x1c\x75\x64\x22\x3f\x03\x22\x13\x30\x38\x73\x98\xf8\xfd\x9b\x6c\x3e\x18\xa7\xbd\xb1\x2f\x34\x27\xa4\x20\x9a\x24\x7b\xed\xef\x6c\xcb\x24\xb7\xd6\x78\xd3\x18\x22\xb6\x4e\xde\x5a\x7d\x94\x5e\xfd\x44\xaf\x4f\x98\x18\x1e\x5a\xdd\x30\x79\x7e\x20\xb3\xe7\x71\x33\xd8\x90\x2a\x37\xec\xf9\x82\x9e\xb4\xec\x41\x9b\x9f\xd0\xec\x01\x5d\x7a\x9b\x9e\xba\x6d\xf8\xf0\xe8\xa9\xed\xb5\xff\x60\x65\xdf\x3c\x9d\xcd\x39\xb4\xd8\xa7\x6c\x83\xeb\xf6\xd9\xc4\xd6\x1d\x4c\xaf\x68\xe6\xe5\x99\x83\x25\xa7\x93\xa1\x63\xfa\x47\xbd\x9f\x02\xfd\xa4\xcd\xcc\xdc\x57\x5c\xac\x53\x6d\xcb\xc2\x55\xe3\x16\xcd\xae\xd2\x5b\xdd\x90\xd9\x4f\x00\x24\x6b\x2c\x79\xc9\xdf\xcc\xc4\x4b\xe4\x21\x0e\xbb\xad\xde\xf7\x90\x23\xf8\x3d\x5a\x98\xe3\x3e\xf3\x13\x5e\xe2\xa0\xc0\xe7\xa3\xee\xb5\x7b\xc2\x85\xe0\x44\xba\x10\x3a\x74\x58\x55\xfc\x4b\x7e\x58\x18\x59\x48\xba\x96\xef\xf8\x3c\x19\x3c\x18\xf3\xdc\x49\xfb\x1c\x34\x42\xe5\xa1\xa7\xb5\x46\x69\x9d\x9c\x0c\x36\x06\xff\x44\x31\x37\x06\xe5\xe7\xf5\xae\x50\x76\xa9\xf0\x94\xee\x5c\x0d\xb1\x6e\xfc\xab\xc0\x5c\x77\x51\xc5\x65\xcd\x15\xdf\xbb\xd0\x59\x81\x1d\xb7\xc6\xa6\x43\xb9\xba\x2f\x84\xc6\x29\xe7\x3e\x9a\xde\x4b\xdd\x2b\x1b\x21\x4b\x3e\x8e\xd8\xd1\xcf\xb0\x8a\xb1\xc9\x0e\x7c\xd6\x41\x94\x40\xc7\x47\xca\x9c\xbc\xff\x4e\x43\x31\x6b\x09\xb1\x23\xfc\x27\x81\x57\x38\x42\x3b\xd0\xc5\x86\x73\x49\x0d\x79\x08\xcf\xd5\x9d\xeb\x3f\x67\x09\x63\xa1\x1f\x5d\x63\xd0\x85\xd0\x59\x6e\x1d\x69\x35\xa3\xae\xcc\x5e\xa8\xe7\x39\x63\x4e\x15\x6b\xdd\xa2\x8d\xbc\x6e\x50\x06\x98\xb9\x45\x4b\x4b\x56\x5e\x17\x2f\xf8\x35\x2f\x6d\x6c\x8e\xdb\xb2\x78\x27\xff\x0d\x00\x00\xff\xff\xaf\x02\x80\xec\x2a\x19\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6442, mode: os.FileMode(420), modTime: time.Unix(1519693282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1508435573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


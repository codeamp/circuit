// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\x23\x27\x10\xbe\xcf\x53\xa0\xda\x8b\x5c\xe5\x27\x98\xe3\xae\x37\x89\x93\x6c\xa2\x58\xf1\xc9\xb5\x07\x3c\x42\x12\xf1\xcc\xa0\x05\x46\x89\x2a\x95\x77\x4f\x01\x0d\xd3\xf4\x0c\x92\xe5\xdd\x54\xe5\x22\x0d\x0d\xf4\xcf\x47\xff\x81\x69\x78\xcb\x35\xfb\x5d\x76\xa2\x82\xef\x1f\xd7\xbf\xfe\x52\x55\xa6\xd9\x8b\x8e\xb3\xbf\x2b\xc6\xbe\x0c\x42\x9f\x6a\xf6\x9b\xfb\xab\x18\xeb\x06\xcb\xad\x54\x7d\xcd\x3e\xc1\x57\xf5\x4f\x55\xbd\x83\x79\x7b\x3a\x88\xf0\xe9\xf7\xbe\x63\x8f\x46\xe8\x8a\xb1\xc1\x08\xbd\x94\x9b\x9a\xdd\xdf\xdd\xd4\x91\x18\x66\x0d\x4c\x9b\xe5\x4d\xcd\x9e\x1c\xe5\xf3\xc2\x4f\xae\xb4\xfa\x43\x34\xb6\x62\xec\x10\xbe\x80\xc1\x2d\x33\xed\xb0\xab\xd9\xda\x6a\xd9\xef\x6e\x59\xcf\x3b\x31\x8e\x44\x7f\x94\x5a\xf5\x9d\xe8\xed\xfd\x5d\x24\xdf\xd4\x88\x5b\xe2\x6c\x46\xd6\x41\x38\xd0\x41\xfe\x77\x82\xdb\x41\x0b\xb7\x6a\x0b\x9f\x7e\x15\xd0\x61\xd5\x5a\xe8\xa3\x6c\xfc\x2a\x03\x9f\x7e\x15\xd0\xf3\x55\xcc\x1c\x44\x83\x96\xae\xdd\x10\x2f\x77\x04\xd8\xf2\x20\x5a\xc1\x8d\x67\xac\xe1\xd3\xaf\x04\x3a\xac\xfa\x38\x9a\xeb\x56\x22\xeb\xc3\x6a\x34\x3f\xdd\xc1\x8e\x5c\x4b\xfe\xdc\x82\xf6\x8d\x16\x36\x6a\xe3\xbe\xf3\x73\xf8\xf8\x97\x15\xbd\x91\xaa\xf7\x46\x38\x59\x91\x60\x96\x25\xd0\x9f\xd2\xa6\x02\x2f\x74\x04\x23\x0d\x9f\x05\x65\x00\xd6\x23\xe1\x23\x3e\x84\xc3\x03\xa1\x46\x15\x84\xee\xa4\x49\xc2\xc7\x91\xdb\xe4\xbc\x7f\x11\x1c\x3a\xb9\xb7\xf7\xe9\x38\x02\xb7\xfe\xa0\x05\xb7\x22\xaa\x5e\x31\xd6\x78\x02\x28\xbd\x04\x7a\xf2\xba\xfb\xfe\x30\x58\xe2\x84\x8f\x87\x4d\xce\x62\xf0\x84\x6b\x58\x80\x16\x60\x7e\xd2\x02\x0c\x5f\x02\xbd\x8e\xa0\x45\x16\x0f\x69\x7d\x62\x01\xfe\x98\x58\x80\x3b\x2e\x81\x5e\x47\x07\x8e\x2c\xd6\x69\x7d\x32\x64\x24\x05\x43\xae\x61\x71\x27\x5a\x91\x69\xb1\xf1\x84\x6b\x58\xe4\x86\x44\x1f\xcd\xac\x71\xc1\xb5\x44\x91\x97\x18\xb8\x01\xe1\xb9\x0e\xfb\x93\x75\x84\x6f\x66\xe2\x9b\xf8\xe6\x26\x47\xbe\x99\xdd\x6f\xe2\x0b\x38\xa0\x88\x4c\x30\xa0\xc8\xc7\x11\x5b\xe3\x94\x10\xd9\x7e\xcc\xf6\x27\x18\x72\xb6\x01\x85\xaf\x61\x0b\x28\xe4\x6c\x03\x08\x5f\xc3\x76\x0a\x42\x4a\x75\xc8\x29\x5c\x8e\x5b\x86\xb4\xe7\x70\x74\xff\x23\xaa\x6e\x54\xb0\x1c\xf3\x8a\x8e\xf0\x3a\x5e\x53\x73\x13\x2f\x86\x4e\xff\x75\xcc\xa2\x91\x34\x2f\xc3\x61\x47\xf2\x32\x2d\xa8\x59\x22\x26\xe0\x22\x21\x33\x95\x72\x84\x73\x7e\x03\xc7\x68\x30\xe5\x08\x47\xfc\x06\x8e\xd4\x6a\x9a\x7b\x47\x9e\xb4\xae\xd4\x93\xea\x43\x72\xea\x79\x30\x68\x86\xfe\x66\x82\x10\x46\x40\x0b\xe8\xfc\x47\x06\xb9\x5e\x0b\x97\xbd\x64\x97\x6b\xbd\x50\x71\x5c\x0e\xf9\x38\xb4\x6d\x88\x10\x85\x3d\x85\x72\xbf\x80\xfa\x9a\xd7\xb5\xac\x23\x99\x40\x88\xbb\x95\xc3\x94\x36\x1a\x82\x88\x49\x2c\x22\x46\xd9\xef\x95\x7a\xe9\xb8\x7e\x41\x55\xf5\x19\x48\xab\xac\x87\x5c\xdc\xd4\x6e\x71\x2b\x78\x0f\xe5\xde\xf7\xa4\xbe\xd4\xbb\x2f\x5f\xe6\x61\xa9\x6b\x75\x3a\x2e\xdb\xd8\xd7\x2c\xf2\xb6\x81\x00\x10\x9c\x71\x53\xfb\xa6\x1a\x78\x43\xc7\x18\xd8\xc3\x80\x48\xa0\xe5\xde\xd1\x3a\x61\x0c\xdf\x09\x2c\xd7\x9d\x09\x1e\xef\xb9\xd9\x67\x7a\x71\x2d\x7a\xfb\x03\xa1\x6a\xb1\xc5\xc3\x39\x15\x63\x29\xf5\x2a\xc6\x6e\xf5\xb2\x8a\x8d\xea\x3a\xde\x6f\x30\x77\xdc\x8e\x2f\xf2\x56\x37\xab\x56\x61\xfb\xe0\x32\x3a\xd2\x5f\x69\x77\xec\x4f\xae\x0f\xf3\x70\x96\x32\xbf\x9b\x73\xba\x5e\xb2\x0b\x57\x06\x6f\x1b\x6e\x7f\x73\xfb\xa8\xe2\x2f\xe2\x84\x87\xd2\xdc\x89\x2d\x1f\x5a\x8b\x3c\xc7\x59\xd0\x2a\x7d\x85\x12\x63\xed\x00\xa4\x5d\x3a\x27\x8a\x10\xc1\x47\xde\x0e\x39\xa2\x8d\xca\x0d\x9f\x3b\x99\xe0\x29\xce\x97\xe7\xa0\x3a\x0a\x9d\x9c\x77\xec\xf5\xcf\x81\x4d\xec\x72\x78\xac\xa1\x42\xe5\x81\x84\xaf\x3a\x99\x3b\xb9\x43\xbf\x00\x79\x73\x18\x1e\xc4\x97\x41\x18\x4b\xa8\x3f\xcb\x4e\x66\xb4\x4e\x74\x4a\x9f\x66\x16\x87\x89\xc9\x7a\xeb\x02\xb6\xf7\x2d\xfc\xf7\x9a\x37\x62\x25\xb4\x54\x9b\x4b\x07\x17\x3b\x65\x6f\x46\xbc\x7a\x5c\x8e\x8a\x1c\x7b\xae\xad\xdc\xf2\xc6\xf9\x75\xb8\x5e\x30\xb6\x17\x7c\x03\x79\xa0\x8e\x09\xc1\x6b\xc9\x65\x3b\x47\x37\x96\x5b\x91\x47\x34\xb9\xf1\x94\xee\x3b\x7e\xe7\xa7\x69\x22\xb9\xe2\xa8\x3d\x12\xf1\xda\xe1\x91\x80\xc1\x85\xc3\xc4\xb7\xf4\xa0\xf3\x41\x19\x69\x95\x3e\xe5\xe9\x01\xda\x9c\x44\xd9\x49\xfb\xa8\x5b\x42\x59\x69\x65\x55\xa3\x32\xb2\x36\x7c\xa5\xe5\x91\x5b\xf1\x53\x1e\x31\x6e\x62\x78\x6e\x65\x43\xe8\xe9\x1a\x6f\xf6\xea\xcf\x3b\x71\x68\xd5\xc9\x99\x09\xfe\x4b\xef\xf6\xcd\xa0\x5d\x32\x7d\x20\xb7\x28\x74\x1f\x27\xb7\xf1\x78\xff\x27\xb7\x7f\xb8\x58\x93\x50\xc3\x27\x37\x7b\xd7\xdd\x49\xfb\x5e\xf3\xbe\xd9\x17\x8e\xcd\xcc\x95\xc0\x58\xed\x90\x59\xc5\xa4\x94\xf7\x64\x21\x39\x26\xda\x85\x38\x55\xdd\x41\xf5\x22\xcf\xdd\x34\xc7\x90\x34\x76\xd6\xe3\x54\xbf\x95\xbb\x31\x3e\xce\x78\xe0\xd8\xd3\x60\x57\x2c\x29\x3e\x17\x9d\x73\xbd\x66\x21\x4e\x27\x7a\x0d\xc6\xaa\xee\x03\xa1\x4e\xa2\xf3\x5b\x05\xdd\xe4\xb1\x23\x4b\x44\x25\x9b\xe9\xb5\x9f\xd8\x4c\x11\xc3\x9e\xbb\x96\xbb\x1e\xb2\x0f\x8d\xd0\xc2\x1c\x35\x9d\x3a\x41\x09\x8a\x19\xb0\xb7\xb2\x97\x66\x8f\x4b\xcc\x19\x37\x60\xd2\xb5\x81\x95\xff\xcd\x9e\x48\x12\x18\x41\x56\x39\x7b\xcc\xa6\x99\x3c\xe2\xe6\x03\x2a\x3f\xc8\xf1\xbd\x8b\x1c\x1a\x56\x10\x3f\xc0\x4c\x15\x44\xd5\x00\x73\x4b\xde\x9b\x13\xcf\xc9\x8e\xb5\x17\xcb\xc6\x6f\x26\x53\xd9\xb3\x22\xae\xeb\xea\xe8\xde\x42\x4b\x07\x7a\xac\x94\x0e\x07\xb5\xf8\x3c\xe3\x2e\xe7\x8c\xfb\xa0\x7a\xcb\x65\xef\x6e\x2f\x4a\xdb\x39\x1b\x13\x6f\x6f\xa7\x5b\x45\xd0\x24\x4e\x30\xe9\x57\xe6\x98\xa6\xc7\x96\x29\x78\xff\x9f\xf6\x65\xd2\x66\x62\x43\xe8\x83\xc9\x65\x43\xde\xd2\xfa\x16\x3b\x5d\x02\x6a\x7a\xcd\x98\xaa\x71\xa9\xf1\x9d\x24\x97\x42\x23\x3c\xba\x4e\xd9\xa5\xca\x0d\xec\xec\x7b\x77\x0e\x68\x76\xdf\xbe\x1a\xce\xd9\xea\x59\x54\x93\xd6\xa0\x1c\x84\x79\x8d\x67\x92\xe3\x59\x9d\x6f\x67\x33\xc1\x2d\x2e\x1c\x84\xfe\xba\xca\x78\x2e\x9c\xf3\xd7\x84\x4c\xe5\xb9\x87\x06\xaf\xb1\x6b\xac\x49\x8a\xcc\x2e\xe2\xf9\x46\x48\x33\xd7\xca\x1b\xc5\x4d\x1c\x70\xa7\x79\x5f\xf4\x97\x42\xf4\x4d\xa7\x47\x01\xc5\x43\x7f\xa5\xa0\x00\x4d\x51\xd0\x88\xdc\x5c\x9a\xcf\xa1\x2b\xa8\x19\xe0\xfb\x37\x00\x00\xff\xff\xf8\x32\x68\x38\x28\x1c\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7208, mode: os.FileMode(420), modTime: time.Unix(1522212099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1519789868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


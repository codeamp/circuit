// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x92\xe3\x26\x10\xbe\xeb\x29\x70\xed\xc5\x53\x35\x4f\xa0\xe3\xee\x6c\x92\x49\xb2\x89\x33\xce\x9c\xa6\xf6\xc0\xc8\xd8\x26\x23\x09\x2f\x20\x27\xae\x54\xde\x3d\x05\x34\xa8\x1b\x09\x7b\x3c\xbb\xa9\xca\xc5\x16\x2d\xd4\xf4\xf7\xd1\x7f\x60\x1a\xde\x72\xcd\x7e\x97\x9d\xa8\xe0\xf9\xc7\xf5\xaf\xbf\x54\x95\x69\xf6\xa2\xe3\xec\xef\x8a\xb1\x2f\x83\xd0\xa7\x9a\xfd\xe6\xfe\x2a\xc6\xba\xc1\x72\x2b\x55\x5f\xb3\x4f\xf0\x54\xfd\x53\x55\xef\xe0\xbd\x3d\x1d\x44\x78\xf4\xdf\xbe\x63\x8f\x46\xe8\x8a\xb1\xc1\x08\xbd\x94\x9b\x9a\xdd\xdf\xdd\xd4\x51\x18\xde\x1a\x78\x6d\x96\x37\x35\x7b\x72\x92\xcf\x0b\xff\x72\xa5\xd5\x1f\xa2\xb1\x15\x63\x87\xf0\x04\x0a\x6e\x99\x69\x87\x5d\xcd\xd6\x56\xcb\x7e\x77\xcb\x7a\xde\x89\x71\x24\xfa\xa3\xd4\xaa\xef\x44\x6f\xef\xef\xa2\xf8\xa6\x46\xda\x92\x66\x33\xaa\x36\x4b\x78\x58\x0b\xae\x9b\x7d\x9a\x1e\x86\xf7\xfd\x61\xb0\xce\x3a\x90\x82\x81\xdf\x09\x6e\x07\x2d\x9c\x9a\x2d\x3c\x7a\x0c\x20\x87\x59\x6b\xa1\x8f\xb2\xf1\xb3\x0c\x3c\xfa\x59\x20\xa7\xb3\x98\x39\x88\x06\x4d\x5d\xbb\x21\x9e\xee\x04\xf0\xc9\x83\x68\x05\x37\x5e\xb1\x86\x47\x3f\x13\xe4\x30\xeb\xe3\xc8\x87\x9b\x89\xe8\x09\xb3\xd1\xfb\xe9\x17\xec\xc8\xb5\xe4\xcf\x2d\x58\xdf\x68\x61\xa3\x35\xee\x99\x6e\xd4\xc7\xbf\xac\xe8\x8d\x54\xbd\x07\xe1\xd6\x8a\x02\xb3\x2c\xed\xca\x53\xfa\xa8\xa0\x0b\xed\xd1\x28\x5b\xa2\xbd\xc8\x15\x00\x7a\xb4\xf8\xc8\x4f\xa6\xe1\x21\x93\x46\x13\x84\xee\xa4\x49\x8b\x8f\x23\xf7\x91\x0b\x8f\x45\xf0\xf8\xe4\xff\xde\xe9\xe3\x08\xfc\xfe\x83\x16\xdc\x8a\x68\x7a\xc5\x58\xe3\x05\x60\x74\xf4\xb6\xe4\x67\xd1\xc3\xb0\x97\x3e\x1e\x36\x54\xc5\xe0\x05\xd7\xa8\x00\x2b\x00\x7e\xb2\x02\x80\x2f\x41\x5e\x47\xd2\xa2\x8a\x87\x34\x3f\xa9\x00\x7f\x4c\x2a\xc0\x1d\x97\x20\xaf\xa3\x03\x47\x15\xeb\x34\x3f\x01\x19\x45\x01\xc8\x35\x2a\xee\x44\x2b\x88\x15\x1b\x2f\xb8\x46\x05\x05\x12\x7d\x94\xa0\x71\xc1\xb5\x44\x91\x97\x14\xb8\x41\xa6\x73\x1d\xbe\x4f\xe8\x32\xbd\x04\xe2\x9b\xf4\x52\xc8\x51\x2f\xc1\xfd\x26\xbd\xc0\x03\x8a\xc8\x44\x03\x8a\x7c\x1c\xb1\x35\x4e\x09\x51\xed\x47\xf2\x7d\xa2\x81\xaa\x0d\x2c\x7c\x8d\x5a\x60\x81\xaa\x0d\x24\x7c\x8d\xda\x29\x09\x29\xd5\x21\xa7\x70\x39\x6e\x19\xd2\x9e\xe3\xd1\xfd\x8f\xac\xba\x51\x01\x39\xd6\x15\x1d\xe1\x75\xba\xa6\x70\x93\x2e\x86\x76\xff\x75\xca\x22\xc8\x3c\x2f\xc3\x66\x47\xf1\x32\x4d\xa8\x59\x12\x26\xe2\xa2\x80\x40\xcd\x35\xc2\x3e\xbf\x41\x63\x04\x9c\x6b\x84\x2d\x7e\x83\xc6\x1c\x75\x9e\x7b\x47\x9d\x79\x5d\xa9\x27\xd5\x27\xcb\xa9\xe7\xc9\xc8\x33\xf4\x37\x5b\x08\x71\x04\xb2\xc0\xce\x7f\x04\xc8\x35\x63\xb8\xec\x25\x5c\xae\x37\x43\xc5\x71\x39\xd0\x71\xe8\xeb\x90\x20\xb5\x4d\xa1\xdc\x2f\xa0\xbe\xd2\xba\x46\x3a\x92\x09\x85\xb8\x5b\x39\x4c\x65\x23\x10\x24\x4c\xcb\x22\x61\x5c\xfb\xbd\x52\x2f\x1d\xd7\x2f\xa8\xaa\x3e\x83\x68\x45\x9a\xcc\xc5\x4d\xed\x26\xb7\x82\xf7\x50\xee\x7d\xd3\xea\x4b\xbd\x7b\xf2\x65\x1e\xa6\xba\x56\xa7\xe3\xb2\x8d\x7d\xcd\x82\xb6\x0d\x19\x01\xc1\x19\x37\xb5\xef\xba\x41\x37\x74\x8c\x41\x3d\x0c\xb2\x15\xf2\x72\xef\x64\x9d\x30\x86\xef\x04\x5e\xd7\xed\x09\x1e\xef\xb9\xd9\x13\xbb\xb8\x16\xbd\xfd\x21\x93\x6a\xb1\xc5\xc3\x39\x13\x63\x29\xf5\x26\xc6\x6e\xf5\xb2\x89\x8d\xea\x3a\xde\x6f\xb0\x76\xdc\xaf\x2f\x68\xab\x4b\xaa\x55\xf8\x7c\x70\x19\x1d\xd9\xaf\xb4\xdb\xf6\x27\xd7\x87\x79\x3a\x4b\x99\xdf\xbd\x73\xb6\x5e\xc2\x85\x2b\x83\xc7\x86\xdb\x5f\x8a\x2f\x37\xfc\x45\x9c\xf0\x50\x9a\x3b\xb1\xe5\x43\x6b\x91\xe7\x38\x04\xad\xd2\x57\x18\x31\xd6\x0e\x60\xda\xa5\xf3\xcc\x90\x6c\xe1\x23\x6f\x07\xca\x68\xa3\x28\xf0\xb9\x9d\x09\x9e\xe2\x7c\x79\x8e\xaa\xa3\xd0\xc9\x79\xc7\x5e\xff\x1c\xd9\x19\x2e\xc7\xc7\x1a\x2a\x14\x0d\x24\x7c\xd4\x21\xee\xe4\x36\xfd\x02\xe5\xcd\x61\x78\x10\x5f\x06\x61\x6c\x26\xfd\x59\x76\x92\xc8\x3a\xd1\x29\x7d\x9a\x99\x1c\x5e\x4c\xe6\x5b\x17\xb0\xbd\x6f\xe1\xbf\xd7\xbc\x11\x2b\xa1\xa5\xda\x5c\xda\xb8\xd8\x29\x7b\x18\xf1\xe8\x71\x39\x2a\x28\xf7\x5c\x5b\xb9\xe5\x8d\xf3\xeb\x70\xbc\x60\x6c\x2f\xf8\x06\xf2\x40\x1d\x13\x82\xb7\x92\xcb\x76\x4e\x6e\x2c\xb7\x82\x46\x74\x76\xe2\x29\x9d\x77\xfc\x97\x9f\xa6\x89\xe4\x8a\xad\xf6\x4c\xc4\x63\x87\x67\x02\x06\x17\x36\x13\x1f\xe3\x83\xcd\x07\x65\xa4\x55\xfa\x44\xd3\x03\xb4\x39\x49\xb2\x93\xf6\x51\xb7\x99\x64\xa5\x95\x55\x8d\x22\x62\x6d\xf8\x4a\xcb\x23\xb7\xe2\x27\x1a\x31\xee\xc5\xf0\xdc\xca\x26\x93\xa7\x63\xbc\xd9\xab\x3f\xef\xc4\xa1\x55\x27\x07\x13\xfc\x37\x3f\xdb\x37\x83\x76\xc9\xf4\x21\x3b\x45\xa1\xf3\x78\x76\x1a\x8f\xe7\xff\xec\xf4\x0f\x07\xeb\x2c\xd4\xf0\xce\xcd\x9e\x75\x77\xd2\xbe\xd7\xbc\x6f\x48\x26\x6f\x54\x6f\x65\x3f\xa8\xc1\x04\xf3\x49\x2e\x12\xa4\x74\x4e\xeb\x63\x2c\x85\x08\x73\x31\x63\xd1\x86\x2d\x64\xce\x24\xbb\x10\xc4\xaa\x3b\xa8\x5e\xd0\xc4\x9e\x27\xa0\x2c\xc7\x9d\x75\x47\xd5\x6f\xe5\x6e\x0c\x9e\x33\xee\x39\x36\x3c\xd8\x4f\x4b\x86\xcf\x85\xee\x5c\x23\x5a\x08\xe2\x89\x5d\x83\xb1\xaa\xfb\x90\x49\x27\xa1\xfb\xad\x22\x72\x72\x13\x42\xb2\x54\x09\x73\x7e\x27\x90\x61\xce\x19\xc3\x6e\xbd\x96\xbb\x1e\x52\x53\x1e\xbe\x85\x77\x39\xf4\xdc\x09\x4a\x54\xcc\x90\xbd\x95\xbd\x34\x7b\x5c\x7f\xce\xb8\x01\x93\xae\x47\xac\xfc\x2f\xb9\x3f\x49\x64\x84\xb5\xca\xa9\x65\x36\x07\xd1\x70\x9c\x0f\x28\xba\x91\xe3\x65\xd8\xd9\xe0\x25\xc6\x87\x3b\xc9\x39\x08\xe8\xb6\xd2\x03\x99\x26\xd4\xdb\x52\x94\x13\x8f\xc1\xaa\xf1\xd5\xd0\x94\x1d\x54\xa7\x28\x14\x08\x1d\x2a\x2c\x00\x27\x5d\x01\x5e\x1b\xdf\xe6\x4c\xd7\x9e\x5d\xe2\xba\x7e\x33\xff\xb6\xd0\x6c\x82\x1d\x2b\xa5\x83\x97\x2c\x3e\xcf\xf8\xea\x39\x70\x1f\x54\x6f\xb9\xec\xdd\xb9\x4a\x69\x3b\x87\x31\xe9\xf6\x38\xdd\xac\x8c\xcd\xcc\x03\x27\x9d\xd4\x9c\xd2\x74\x0d\x34\x25\xef\xff\xd3\x58\x4d\x1a\x60\x0c\x24\xbf\xca\xb9\x0c\xe4\x2d\x4d\x79\xb1\x07\xcf\x48\x4d\xf7\x2c\x53\x33\x2e\xb5\xe4\x93\xcc\x56\x68\xd1\x47\xd7\x39\x97\x28\x4a\xad\xf5\xec\x4d\x3c\x25\x94\xdc\x04\x5c\x4d\xe7\x6c\xe9\x3e\x97\xcf\x48\xa9\xa3\x24\xcc\x5b\x3c\x93\xd6\xce\xda\x7c\x3b\x9b\x09\x6e\x71\xd5\xca\xe4\xaf\x2b\xcb\xe7\xc2\x99\xde\x73\x10\x93\xe7\xae\x40\xbc\xc5\xae\xe5\xcf\x52\x24\xb9\x22\xa0\x1f\x42\x9a\xb9\x76\xbd\x71\xb9\x89\x03\xee\x34\xef\x8b\xfe\x52\x88\xbe\xe9\xeb\x71\x81\xe2\xa6\xbf\x72\xa1\x40\x4d\x71\xa1\x91\xb9\xb9\x34\x4f\xa9\x2b\x98\x19\xe8\xfb\x37\x00\x00\xff\xff\xe5\x18\xce\xb6\xe3\x1c\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7395, mode: os.FileMode(420), modTime: time.Unix(1522529240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


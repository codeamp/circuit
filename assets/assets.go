// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x93\xdb\x26\x10\x7f\xd7\xa7\xc0\x93\x17\xdf\xcc\x7d\x02\x3d\x26\x97\xb6\x69\x9b\xf6\x7a\x6e\x9e\x32\x79\xe0\x64\xce\xa6\x91\x84\x03\xc8\xad\xa7\xd3\xef\xde\x01\x16\xb4\x8b\xc0\x3e\x5f\xd2\x99\xbe\xd8\x62\x85\x96\xfd\xfd\xd8\x7f\x60\x3a\xde\x73\xcd\x7e\x97\x83\x68\xe0\xf9\xc7\xcd\xaf\xbf\x34\x8d\xe9\xf6\x62\xe0\xec\xef\x86\xb1\x2f\x93\xd0\xa7\x96\xfd\xe6\xfe\x1a\xc6\x86\xc9\x72\x2b\xd5\xd8\xb2\xf7\xf0\xd4\xfc\xd3\x34\xaf\xe0\xbd\x3d\x1d\x44\x78\xf4\xdf\xbe\x62\x1f\x8c\xd0\x0d\x63\x93\x11\x7a\x2d\xb7\x2d\x7b\x77\x77\xd3\x46\x61\x78\x6b\xe0\xb5\x59\xdf\xb4\xec\xa3\x93\x7c\x5a\xf9\x97\xf7\x5a\xfd\x21\x3a\xdb\x30\x76\x08\x4f\xa0\xe0\x96\x99\x7e\xda\xb5\x6c\x63\xb5\x1c\x77\xb7\x6c\xe4\x83\x98\x47\x62\x3c\x4a\xad\xc6\x41\x8c\xf6\xdd\x5d\x14\xdf\xb4\x48\x5b\xd2\x6c\x66\xd5\x66\x0d\x0f\x1b\xc1\x75\xb7\x4f\xd3\xc3\xf0\xdd\x78\x98\xac\xb3\x0e\xa4\x60\xe0\x77\x82\xdb\x49\x0b\xa7\xe6\x09\x1e\x3d\x06\x90\xc3\xac\x8d\xd0\x47\xd9\xf9\x59\x06\x1e\xfd\x2c\x90\xd3\x59\xcc\x1c\x44\x87\xa6\x6e\xdc\x10\x4f\x77\x02\xf8\xe4\x41\xf4\x82\x1b\xaf\x58\xc3\xa3\x9f\x09\x72\x98\xf5\x76\xe6\xc3\xcd\x44\xf4\x84\xd9\xe8\xfd\xf2\x0b\x76\xe4\x5a\xf2\xc7\x1e\xac\xef\xb4\xb0\xd1\x1a\xf7\x4c\x37\xea\xed\x5f\x56\x8c\x46\xaa\xd1\x83\x70\x6b\x45\x81\x59\xd7\x76\xe5\x63\xfa\xa8\xa2\x0b\xed\xd1\x2c\x5b\xa3\xbd\xc8\x15\x00\x7a\xb4\xf8\xcc\x4f\xa6\xe1\x21\x93\x46\x13\x84\x1e\xa4\x49\x8b\xcf\x23\xf7\x91\x0b\x8f\x55\xf0\xf8\xe4\xff\xde\xe9\xe3\x08\xfc\xfe\x8d\x16\xdc\x8a\x68\x7a\xc3\x58\xe7\x05\x60\x74\xf4\xb6\xe4\x67\xd1\xc3\xb0\x97\x7e\x38\x6c\xa9\x8a\xc9\x0b\xae\x51\x01\x56\x00\xfc\x64\x05\x00\x5f\x83\xbc\x8d\xa4\x45\x15\x0f\x69\x7e\x52\x01\xfe\x98\x54\x80\x3b\xae\x41\xde\x46\x07\x8e\x2a\x36\x69\x7e\x02\x32\x8b\x02\x90\x6b\x54\xdc\x89\x5e\x10\x2b\xb6\x5e\x70\x8d\x0a\x0a\x24\xfa\x28\x41\xe3\x82\x6b\x8d\x22\x2f\x29\x70\x83\x4c\xe7\x26\x7c\x9f\xd0\x65\x7a\x09\xc4\x17\xe9\xa5\x90\xa3\x5e\x82\xfb\x45\x7a\x81\x07\x14\x91\x89\x06\x14\xf9\x38\x62\x5b\x9c\x12\xa2\xda\xb7\xe4\xfb\x44\x03\x55\x1b\x58\xf8\x1a\xb5\xc0\x02\x55\x1b\x48\xf8\x1a\xb5\x4b\x12\x52\xaa\x43\x4e\xe1\x72\xdc\x3a\xa4\x3d\xc7\xa3\xfb\x9f\x59\x75\xa3\x0a\x72\xac\x2b\x3a\xc2\xf3\x74\x2d\xe1\x26\x5d\x0c\xed\xfe\xf3\x94\x45\x90\x79\x5e\x86\xcd\x8e\xe2\x75\x9a\xd0\xb2\x24\x4c\xc4\x45\x01\x81\x9a\x6b\x84\x7d\x7e\x81\xc6\x08\x38\xd7\x08\x5b\xfc\x02\x8d\x39\xea\x3c\xf7\xce\x3a\xf3\xba\xd2\x2e\xaa\x4f\x96\x53\xcf\x93\x91\x67\xe8\x6f\xb6\x10\xe2\x08\x64\x81\x9d\xff\x08\x90\x6b\xc6\x70\xd9\x4b\xb8\x5c\x6f\x86\x8a\xe3\x7a\xa2\xe3\xd0\xd7\x21\x41\x6a\x9b\x42\xb9\x5f\x41\x7d\xa5\x75\x8d\x74\x24\x0b\x0a\x71\xb7\x72\x58\xca\x66\x20\x48\x98\x96\x45\xc2\xb8\xf6\x6b\xa5\x3e\x0f\x5c\x7f\x46\x55\xf5\x11\x44\xf7\xa4\xc9\x5c\xdd\xb4\x6e\x72\x2f\xf8\x08\xe5\xde\x37\xad\xbe\xd4\xbb\x27\x5f\xe6\x61\xaa\x6b\x75\x06\x2e\xfb\xd8\xd7\xac\x68\xdb\x90\x11\x10\x9c\x71\xdb\xfa\xae\x1b\x74\x43\xc7\x18\xd4\xc3\x20\x5b\x21\x2f\xf7\x4e\x36\x08\x63\xf8\x4e\xe0\x75\xdd\x9e\xe0\xf1\x9e\x9b\x3d\xb1\x8b\x6b\x31\xda\x1f\x32\xa9\x16\x4f\x78\x58\x32\x31\x96\x52\x6f\x62\xec\x56\x2f\x9b\xd8\xa9\x61\xe0\xe3\x16\x6b\xc7\xfd\xfa\x8a\xb6\xba\xa4\x5a\x85\xcf\x27\x97\xd1\x91\xfd\x4a\xbb\x6d\xff\xe8\xfa\x30\x4f\x67\x2d\xf3\xbb\x77\xce\xd6\x4b\xb8\x70\x65\xf0\xd8\x70\xfb\x4b\xf1\xe5\x86\x7f\x16\x27\x3c\x94\xe6\x4e\x3c\xf1\xa9\xb7\xc8\x73\x1c\x82\x5e\xe9\x2b\x8c\x98\x6b\x07\x30\xed\xd2\x79\x66\x48\xb6\xf0\x91\xf7\x13\x65\xb4\x53\x14\x78\x69\x67\x82\xa7\x38\x5f\x2e\x51\x75\x14\x3a\x39\xef\xdc\xeb\x9f\x23\x3b\xc3\xe5\xf8\xd8\x40\x85\xa2\x81\x84\x8f\x3a\xc4\x9d\xdc\xa6\x5f\xa0\xbc\x3b\x4c\x0f\xe2\xcb\x24\x8c\xcd\xa4\x3f\xcb\x41\x12\xd9\x20\x06\xa5\x4f\x85\xc9\xe1\xc5\x62\xbe\x75\x01\x3b\xfa\x16\xfe\x7b\xcd\x3b\x71\x2f\xb4\x54\xdb\x4b\x1b\x17\x3b\x65\x0f\x23\x1e\x3d\x2e\x47\x05\xe5\x9e\x6b\x2b\x9f\x78\xe7\xfc\x3a\x1c\x2f\x18\xdb\x0b\xbe\x85\x3c\xd0\xc6\x84\xe0\xad\xe4\xb2\x2f\xc9\x8d\xe5\x56\xd0\x88\xce\x4e\x3c\xb5\xf3\x8e\xff\xf2\xfd\x32\x91\x5c\xb1\xd5\x9e\x89\x78\xec\xf0\x4c\xc0\xe0\xc2\x66\xe2\x63\x7c\xb0\xf9\xa0\x8c\xb4\x4a\x9f\x68\x7a\x80\x36\x27\x49\x76\xd2\x7e\xd0\x7d\x26\xb9\xd7\xca\xaa\x4e\x11\xb1\x36\xfc\x5e\xcb\x23\xb7\xe2\x27\x1a\x31\xee\xc5\xf4\xd8\xcb\x2e\x93\xa7\x63\xbc\xd9\xab\x3f\xef\xc4\xa1\x57\x27\x07\x13\xfc\x37\x3f\xdb\x77\x93\x76\xc9\xf4\x21\x3b\x45\xa1\xf3\x78\x76\x1a\x8f\xe7\xff\xec\xf4\x0f\x07\xeb\x2c\xd4\xf0\xce\x15\xcf\xba\x3b\x69\x5f\x6b\x3e\x76\x24\x93\x77\x6a\xb4\x72\x9c\xd4\x64\x82\xf9\x24\x17\x09\x52\x3a\x97\xf5\x31\x96\x42\x84\xb9\x9a\xb1\x68\xc3\x16\x32\x67\x92\x5d\x08\x62\x35\x1c\xd4\x28\x68\x62\xcf\x13\x50\x96\xe3\xce\xba\xa3\x1a\x9f\xe4\x6e\x0e\x9e\x33\xee\x39\x37\x3c\xd8\x4f\x6b\x86\x97\x42\xb7\xd4\x88\x56\x82\x78\x61\xd7\x64\xac\x1a\xde\x64\xd2\x45\xe8\x7e\xab\x88\x5c\xdc\x84\x90\x2c\x55\xc3\x9c\xdf\x09\x64\x98\x73\xc6\xb0\x5b\x6f\xe4\x6e\x84\xd4\x94\x87\x6f\xe5\x5d\x0e\x3d\x77\x82\x1a\x15\x05\xb2\x9f\xe4\x28\xcd\x1e\xd7\x9f\x33\x6e\xc0\xa4\xeb\x11\x1b\xff\x4b\xee\x4f\x12\x19\x61\xad\x7a\x6a\x29\xe6\x20\x1a\x8e\xe5\x80\xa2\x1b\x39\x5f\x86\x9d\x8b\x5d\x62\x7b\xb8\x92\x2c\x21\x40\x97\x95\x1e\xc7\x32\x9f\xde\xd6\x82\x9c\x38\x0c\x56\x8d\x6f\x86\x96\xe4\xa0\x32\x35\x23\x41\x91\x43\x85\x45\xdc\x7e\xef\x94\xee\xc4\x83\x78\x9c\x64\xbf\x30\x2a\x76\x0b\xd8\x28\x7c\xcb\xb3\x34\xaa\xb8\xf6\x75\x7d\x68\xfe\x6d\xa5\x09\x05\x3b\xee\x95\x0e\xde\xb3\xfa\x54\xf0\xe1\x0a\x6a\x0f\xee\x8d\x1a\x2d\x97\xa3\x3b\x6f\x29\x6d\x4b\x18\x93\x6e\x8f\xd3\xcd\xca\x68\xce\x3c\x73\xd1\x61\x95\x94\xa6\xeb\xa1\x25\x79\xff\x9f\x86\x6b\xd1\x18\x63\x20\xf9\x15\xcf\x65\x20\x2f\x69\xd6\xab\xbd\x79\x46\x6a\xba\x7f\x59\x9a\x71\xa9\x55\x5f\x64\xbc\x4a\xeb\x4e\x12\x45\x35\x90\x6a\x2d\x77\xf1\x86\x9e\x12\x4a\x6e\x08\xae\xa6\xb3\x58\xd2\xab\x66\xe6\x85\x91\x92\x50\xb6\xb8\x90\xef\xce\xda\x7c\x5b\xcc\x04\xb7\xb8\x9a\x65\xf2\xe7\x95\xeb\x73\xe1\x4c\xef\x3f\x88\xc9\xa5\xab\x11\x6f\xb1\x3b\x0a\x64\xb9\x93\x5c\x1d\xd0\x0f\x21\xcd\x5c\xbb\xde\xbc\xdc\xc2\x01\x77\x9a\x8f\x55\x7f\xa9\x44\xdf\xf2\xf5\xbc\x40\x75\xd3\x9f\xb9\x50\xa0\xa6\xba\xd0\xcc\x5c\x29\xcd\x53\xea\x2a\x66\x06\xfa\xfe\x0d\x00\x00\xff\xff\x72\x1d\x61\x00\xfb\x1c\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7419, mode: os.FileMode(420), modTime: time.Unix(1524522460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}
	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1510690037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


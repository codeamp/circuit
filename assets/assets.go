// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x23\xb9\x0d\xbe\xeb\x29\xa8\xda\x8b\xa6\xca\x4f\xa0\x5b\x66\x3c\x19\x3b\x99\x49\x1c\x6b\xe7\x90\xda\xf2\x81\x6e\xc1\x12\xe3\x6e\xb2\x97\x64\x7b\x57\x95\xca\xbb\xa7\xf8\xdb\x00\xc9\x96\x2d\xef\xa4\x2a\x17\x5b\x44\x37\x3f\x12\x1f\x01\x10\x40\x9b\x8e\xf7\x5c\xb3\x9f\xc5\x00\xab\xf8\xfb\x2f\xbb\xbf\xff\x6d\xb5\x32\xdd\x11\x06\xce\xfe\xbd\x62\xec\xd7\x09\xf4\x69\xcb\xfe\xe1\xfe\xad\x18\x1b\x26\xcb\xad\x50\x72\xcb\xbe\xc5\x5f\xab\xff\xac\x56\x3f\xc5\xe7\xf6\x34\x42\xf8\xe9\xe7\xfe\xc4\xbe\x1b\xd0\x2b\xc6\x26\x03\x7a\x23\xf6\x5b\x76\x7b\xfd\x61\x9b\x84\xe1\xa9\x89\x8f\xcd\xe6\xc3\x96\xfd\xe2\x24\x0f\x6b\xff\xf0\x4e\xab\x7f\x41\x67\x57\x8c\x8d\xe1\x57\x04\xb8\x62\xa6\x9f\x0e\x5b\xb6\xb3\x5a\xc8\xc3\x15\x93\x7c\x80\x79\x04\xf2\x45\x68\x25\x07\x90\xf6\xf6\x3a\x89\x3f\x6c\x11\x5a\x46\x36\x33\xb4\xd9\xc4\x1f\x3b\xe0\xba\x3b\xe6\xd7\xc3\xf0\x56\x8e\x93\xbd\x62\x23\xd7\x7c\x30\x5b\x76\xc7\x0f\x42\x72\xab\xb4\x97\xcf\xd8\x5f\x85\xb1\x61\xeb\x7f\x06\x6e\x27\x0d\x6e\x81\xa7\xf8\x73\xb3\x38\x3b\xbe\x3c\xcf\xde\x81\x7e\x11\x9d\x9f\x6d\xe2\xcf\xe5\xd9\xf1\xe5\x6a\x36\x33\x23\x74\x08\x62\xe7\x86\x9e\xe2\xdd\x2c\x88\x4c\xdf\x43\x0f\xdc\xf8\x05\x75\xfc\xb9\xbc\x60\x7c\x79\x5e\xf0\xf3\xcc\xb8\x43\x40\x07\x30\xb3\x8a\x0e\xcc\x6d\x01\x4d\x79\xa8\x40\xd8\x0b\xd7\x82\x3f\xf6\x91\x80\x4e\x83\x3d\xab\xbf\x7b\x01\xa9\x2f\xe4\xa1\x87\x28\xce\x00\xde\x74\xf2\xfa\xf9\x61\x36\x85\xcf\xbf\x5b\x90\x46\x28\xe9\x69\x73\x5a\x24\x81\xd9\x2c\x59\xd4\x2f\x79\x12\x35\xd8\x2c\x46\xf6\x35\xcb\xfc\x11\x94\x6f\xd2\x73\x40\x8b\xcf\x27\x52\x20\xdc\x17\xd2\xb4\x05\xd0\x83\x30\x79\xf1\x79\xe4\x26\x39\xd7\x5e\x07\x6f\xcd\xbe\xeb\x1d\x36\x8d\xa2\xcf\x7e\xd2\xc0\x2d\xa4\xad\xaf\x18\xeb\xbc\x20\x6e\x3a\x9d\x69\x36\xfb\xc2\x0b\x82\x63\x8f\x7b\x0a\x31\x79\xc1\x25\x10\x71\x17\x51\xfd\xbc\x8b\xa8\xf8\x26\xca\xb3\x3d\x16\xe6\x19\x6c\xc1\xaa\x11\x01\x18\xab\xc6\x34\x3d\x84\x92\x75\x31\x21\xae\x19\x5d\x26\xaf\x19\x3d\x66\x13\xe5\xd9\xe9\x0a\x1f\xc4\x9a\xcf\xa2\xa0\xf9\x25\x10\xd7\xd0\x03\xd9\xc5\xde\x0b\x2e\x81\xb8\x1d\x46\xa5\x2d\x1b\xb8\x3c\xe5\x18\xc2\xb8\x65\x4a\xfa\x17\x84\x7f\x9c\xe2\x4c\x42\x34\xdb\x38\x2f\x3d\x48\xc8\x29\x64\xac\xa3\x95\x51\x9a\x92\xcb\x10\xae\x5c\x74\xd9\xa0\xd0\x93\xb7\xe7\x06\xc5\x8e\x77\x61\x7e\xe6\xae\xc0\x25\x04\xbe\x0b\x97\x12\x9a\x70\x09\xab\xef\xc2\x8d\x3c\xa0\x00\x91\x69\x40\xf1\x0c\x07\x90\x2d\x0e\x74\x09\xf6\x33\x99\x9f\x69\xa0\xb0\x81\x85\x3f\x02\x1b\x59\xa0\xb0\x81\x84\x3f\x02\x5b\x93\x90\x03\x38\x32\x0a\x1f\x84\x43\x2c\x4e\xf1\x97\x46\xf0\x05\xcd\x31\x56\x32\x84\xb7\x61\xd5\xea\x66\x2c\x86\x4e\xff\x6d\x60\xd8\x9f\x5a\x88\x2d\xe7\x0a\x17\x57\xbc\xc0\x66\xd7\xf2\x43\xe4\x59\x6e\x5c\x38\x16\x94\xb7\x51\xb4\xa9\x24\xde\xe4\x17\xb6\x2c\x0b\xf3\xf9\x24\x01\x61\xb4\x44\x8c\xe6\xf4\x0e\xc4\xc4\x6b\x89\x18\x2d\xe9\x1d\x88\xa5\xd6\xe5\x8d\x33\x63\x96\xb7\xe9\xb6\xba\x73\x8b\x9b\xe4\x3c\x19\xe5\xbd\xf4\xc3\x16\x42\x1c\x45\x59\x60\xe7\x7f\xa4\x90\x4b\x9f\xf1\x65\x9f\xf5\x72\xd9\x34\x4a\x09\x36\x13\x1d\x87\x4c\x1c\x09\x66\xb3\xf4\x49\x4e\x32\x4b\x7a\x9b\x93\x0c\xaf\xa2\xb0\x91\xfd\x61\xd9\xac\x08\x12\xe6\x65\x91\x30\xad\xfd\x51\xa9\xe7\x81\xeb\x67\x94\x4b\x3c\x46\xd1\x1d\x29\x0b\xdc\x5d\xfe\x51\xa9\x1e\xb8\x0c\x33\xbf\x80\x65\x5f\x84\x65\x9f\xd4\x30\x08\xbf\xd3\x03\xd8\x2f\xc2\xc6\x71\xda\x9d\xcb\xe9\x6e\xaf\xd7\x55\xe5\xe0\x65\x12\x7e\xcb\xa8\x18\xdf\x27\x51\x39\x17\x5d\x09\x69\x41\x3f\xf1\x0e\x66\x99\xcf\xa5\x3a\x35\xb9\x28\x7a\x2b\x6d\x9c\x82\x92\xe7\x90\x7a\x21\x81\x0b\x1c\x3d\x78\x42\xce\xc0\xb8\x04\xdb\x6a\xe1\x2e\xeb\x94\x04\x3e\x44\xf0\x39\x15\x0e\xd8\xf3\xf8\x72\xe8\x30\x77\x46\xce\x45\x46\x82\xce\x82\xf7\x60\xfb\xc9\x09\x1c\xd5\x3f\x01\x1c\x09\x2e\x07\x8f\x93\x13\x38\x2a\xcd\x02\x38\x12\x5c\x0e\x1e\x27\x27\x70\x5f\xc7\x7a\x54\xf7\xcb\xcf\x8c\xb6\xe8\x66\x0d\x5c\xf4\xa9\x5c\x58\xd3\x6c\xbc\xf0\xb0\x10\xed\xf6\x5b\x5f\x88\x53\x56\x08\x23\xc5\x0a\x65\x16\xed\x64\x03\x18\xc3\x0f\x80\xd7\x75\x4e\x8f\xc7\x47\x6e\x8e\x64\x5f\x5c\x83\xb4\x37\x85\x54\xc3\x13\x1e\xb6\xb6\x98\x12\x4e\x6c\x11\x6f\xd8\x62\xa7\x86\x81\xcb\x3d\x46\xc7\x25\xfc\x9a\xd6\xac\x24\xeb\x5a\x57\x67\xe3\xee\x54\x47\xa7\xab\x6d\x1e\xd6\xb4\xfc\x24\xb9\x8a\x7b\xe6\x36\x7a\x46\x29\x17\xa5\xc7\x5e\x9d\xdc\xeb\x3b\xab\xb9\x85\xc3\x29\x54\x4d\x2b\xc6\x7a\xf1\x02\x12\x8c\xb9\xd3\xea\x11\xb2\x54\x03\xdf\x8b\x5a\x3c\x6a\x70\xb5\xc7\x8d\x52\xcf\x69\xbd\x40\x19\x4e\x9e\x3c\x6d\xb8\xee\xa5\xd4\x95\x9c\x3c\xc3\x09\x0f\x85\xb9\x86\x27\x3e\xf5\x96\x44\xbd\x4e\xf5\x4a\x9f\x55\x31\x35\x3c\x6a\x6b\x6e\x95\xe0\x38\x90\x14\xfb\x2b\xf6\xf3\xc2\xfb\x89\x9e\x61\xa7\x28\xdb\x2d\x5b\x08\xb6\xe9\xbc\xa7\x75\x3e\x2f\xa0\xb3\xbb\xa4\x78\x74\xfe\x84\x2b\x75\x85\xd9\xc5\xdc\x8e\xc6\x6e\xdc\x25\x21\x06\xec\xcc\xec\x95\x93\xe8\xc6\xe9\x1e\x7e\x9d\xc0\xd8\x42\xfa\x55\x0c\x82\xc8\x06\x18\x94\x3e\x35\x5e\x0e\x0f\xaa\xf7\xad\x0b\x11\xd2\xd7\xe2\x5f\x34\xef\xe0\x0e\xb4\x50\xfb\x86\x67\x64\xaf\x58\x50\xba\xb6\x0d\x7c\xfd\x90\xab\xe7\x0d\x1e\x4b\x4f\x89\x6b\x2b\x9e\xb8\x37\xa1\xd0\x51\x60\xec\x08\x7c\x1f\x63\x54\xee\x67\x79\x7d\xb8\xe8\x5b\x72\x63\xb9\x05\x1a\x6d\x8a\x26\xc7\x52\x8b\xc3\xcf\xfc\x56\x07\xb9\x8b\x8c\xc2\x58\xae\x89\xe0\x49\x48\x61\x8e\x94\xc2\x7b\xd5\xf7\x8f\xbc\x7b\xae\x6e\xfd\x98\x87\xe0\xdb\xe4\x15\x83\xc1\xfd\xca\xa0\xed\xa8\x8c\xb0\x4a\x9f\xe8\xd1\xc6\x22\x24\x4b\x0e\xc2\x7e\xd7\x7d\x21\xb9\xd3\xca\xaa\x4e\x11\xb1\x36\xfc\x4e\x8b\x17\x6e\xe1\xaf\xd4\x2b\xdd\x83\xe9\xb1\x17\x5d\x21\xcf\x5d\x49\x73\x54\xbf\x5d\xfb\xa8\xe7\xb4\x8f\x9a\x9e\x69\x75\x16\xcd\xca\x6e\xd2\xee\xf2\xb8\x2f\x9a\x31\xef\x69\x24\xbe\xd2\xea\xbc\x62\xc6\xf7\x62\x91\x22\x75\xf7\xf3\x7c\xb7\x70\x09\x02\x37\x10\x01\x5b\x60\xb3\x4d\x77\x10\xf6\xa3\xe6\xb2\x23\xb7\x65\xa7\xa4\x15\x72\x52\x93\x09\x64\x92\xa0\x0c\x24\xff\xad\x93\xdc\x94\xcf\xa2\x13\x58\xba\x72\x8b\x3e\x65\xb8\x42\xb2\xec\x95\xb0\xa5\x86\x51\x49\xef\x20\x28\xe2\x94\x57\x22\xef\x8e\xe0\x22\x3f\xd9\x4a\x11\xeb\xcf\x3a\x9b\x92\x4f\xe2\x30\x87\x86\x96\x16\x55\x2d\x83\x7d\x69\x49\x9d\x56\x60\x6a\xd5\x98\x0b\x21\xaa\xda\xd7\x64\xac\x1a\x3e\x15\xd2\x2a\x30\xfd\x80\x78\x83\x23\x2f\xaa\x3d\x71\x0c\x5e\xd2\xb9\x6c\x72\x16\x3a\x97\x8c\x61\x37\xda\x89\x83\x8c\x81\xb7\x0c\x31\x0b\xcf\x4a\xd5\x4b\xd3\x58\xa2\xa2\x41\x36\x0d\xb0\x8c\x35\x43\xec\x19\xcb\x60\xc2\xf9\xeb\xca\xff\x25\x3d\xe2\xcc\x4f\x4c\xaa\x16\x23\x62\x33\x74\x52\xbf\x6d\x7b\x1e\x3d\xdb\xb9\xe1\x7f\xce\xc9\xc9\xde\xc3\x27\xa3\x96\x06\xe8\x63\x92\xd7\xa3\xbe\x06\x96\x82\x01\x2e\x37\x9d\x95\x10\x70\x12\xe3\x3c\xf0\xe8\x4f\xe8\xd6\x37\xe8\xfa\x90\x63\xb8\x01\x31\x44\x0c\x81\x5b\xe8\x35\xc3\xe8\x72\x9f\xe9\x40\x1e\x49\x85\x4d\xf2\xfc\x95\xa3\x74\x07\xf7\xf0\x38\x89\xbe\x52\x2d\x65\x63\x78\x53\xb8\xbb\x5d\x6f\xaa\xb9\xf6\x1b\x2a\x8b\x76\xf5\x10\xd7\xba\x53\x3a\x98\xd9\xfa\xa1\x61\xff\x8b\x9a\xb5\xaa\x86\xeb\x4a\x16\x80\xeb\x4a\xe2\x06\x78\x6f\x8f\x7e\xe0\x5f\x69\x54\x15\x8d\x57\x16\x2b\x8c\xd4\xbb\x8f\x6d\x48\x42\x69\xa3\xbb\xef\x99\x4d\x31\xe3\x9f\x7f\xfa\xf6\x35\x60\xbd\xf7\x98\xfd\x16\x3e\x29\x69\xb9\x90\xa0\x59\xb5\x83\x92\xe8\x60\xae\x4a\xa3\x23\xc9\xce\x9c\xba\x26\x61\xe6\x02\xa1\x1e\xa0\x3c\xa9\x81\xff\xbe\x9b\x74\xf4\x81\x28\xf8\x2e\xf9\x0b\x17\x7d\xb8\xda\x28\x74\x49\x6f\x85\xe9\x13\x76\x7b\xa4\x99\x78\x61\x6c\x58\x0f\x5f\xfd\x1c\x61\xc0\x00\x23\xb7\x38\xf2\x08\x29\xac\xe0\xfd\x35\xf4\xfc\xb4\x83\x4e\xc9\xbd\x49\x53\x47\x9f\xf4\x17\x42\x2b\x06\x50\x93\x2d\xa4\x66\xea\x3a\x30\xe6\xe7\xa3\x06\x73\x54\xce\xaf\x82\xfc\x89\x8b\x7e\xd2\x50\xc9\x8f\xd6\x8e\x37\xc0\xf7\xa0\x9d\xd5\x23\xbd\x6f\xf2\x83\x64\xff\x2d\x76\x8a\xb7\x3c\x4f\xa5\x83\x15\x75\x60\x55\x6c\xb5\xcc\x21\x7f\x63\xa9\xfd\xfc\xff\xa9\xf6\x5a\x2c\xab\x70\xe5\x8c\xd5\x2b\xbf\x9e\xbc\xae\xde\x7b\x8a\xfc\xc5\xe2\xbd\xa0\x3a\x7f\xda\xa8\xb7\xf1\x5a\x2d\x5f\xa5\x02\x0b\xb5\x3d\xb9\x2e\x17\xe3\xe5\x52\x4d\xde\xd6\x61\x39\x8c\xcd\x5f\x52\x62\x14\xf3\x82\x0b\x82\x98\xab\x6b\xdf\x1e\xd6\x68\xee\x4d\x0f\x9a\x74\xeb\x2f\x3e\xe6\x66\x66\xbe\x48\x5f\x3b\x45\x2f\xf3\x5b\x7a\x64\xcd\xb4\xbb\x95\xa3\x9c\xd5\xe4\xaa\x49\xe4\x15\x4e\x4a\x0b\xf9\xdb\xb2\xee\x73\xac\xd3\x2f\x14\x64\xcb\xad\x8f\x17\x7e\xc7\xf5\xb9\xd2\xde\x2b\x9d\x18\x23\xde\xa5\xeb\xcd\xcb\x55\xee\x72\xd0\x5c\x56\xd6\x5d\x7f\xf7\x68\xf2\xdf\x0a\x19\x8b\xa6\xf0\xc6\x85\x02\x35\x8b\x0b\xcd\xcc\xb5\xbc\x84\x52\xb7\xb0\xcd\x40\xdf\x7f\x03\x00\x00\xff\xff\x86\x37\x0c\x90\x4f\x26\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9807, mode: os.FileMode(420), modTime: time.Unix(1548874860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


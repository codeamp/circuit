// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x73\xdc\x26\x10\x7f\xd7\xa7\xc0\x93\x97\xcb\x8c\x3f\x81\x1e\x63\xa7\xad\xdb\xa4\x75\x7d\xcd\x53\x26\x0f\x58\xe6\xee\x68\x24\x50\x00\xb9\xf1\x74\xfa\xdd\x3b\xc0\x82\x76\x91\xb8\xf3\x39\xe9\x4c\x5f\x7c\x62\x25\x7e\xec\x2e\xfb\xe7\x07\xb6\x1d\xef\xb9\x61\x7f\xc8\x41\x34\xf0\xfc\xf3\xf6\xb7\x5f\x9b\xc6\x76\x07\x31\x70\xf6\x77\xc3\xd8\x97\x49\x98\xa7\x96\xfd\xee\x7f\x1a\xc6\x86\xc9\x71\x27\xb5\x6a\xd9\x7b\x78\x6a\xfe\x69\x9a\x57\xf0\xde\x3d\x8d\x22\x3e\x86\xb9\xaf\xd8\x07\x2b\x4c\xc3\xd8\x64\x85\xd9\xc8\x87\x96\xdd\x5c\xbf\x6e\x93\x30\xbe\xb5\xf0\xda\x6e\x5e\xb7\xec\xa3\x97\x7c\xba\x08\x2f\x6f\x8d\xfe\x53\x74\xae\x61\x6c\x8c\x4f\x00\x70\xc9\x6c\x3f\xed\x5b\xb6\x75\x46\xaa\xfd\x25\x53\x7c\x10\xf3\x48\xa8\x47\x69\xb4\x1a\x84\x72\x37\xd7\x49\xfc\xba\x45\x68\x19\xd9\xce\xd0\x76\x03\x0f\x5b\xc1\x4d\x77\xc8\x9f\xc7\xe1\x8d\x1a\x27\xe7\xb5\x03\x29\x28\xf8\x83\xe0\x6e\x32\xc2\xc3\xec\xe0\x31\xd8\x00\x72\xf8\x6a\x2b\xcc\xa3\xec\xc2\x57\x16\x1e\xc3\x57\x20\xa7\x5f\x31\x3b\x8a\x0e\x7d\xba\xf5\x43\xfc\xb9\x17\xc0\x94\x3b\xd1\x0b\x6e\x03\xb0\x81\xc7\xcd\xc8\x0d\x1f\x6c\xcb\x6e\xf9\x5e\x2a\xee\xb4\x49\xaa\xc3\xc7\xef\xa4\x8d\x2e\x78\x3b\xbb\xc9\x03\x20\xaf\xcd\xae\x40\x5e\xf6\x1a\xa0\x29\xa0\x01\x92\xb0\x47\x6e\x24\xbf\xef\xc1\xce\xce\x08\x97\xf4\xf6\xcf\x74\x4b\xdf\x7e\x75\x42\x59\xa9\x55\x30\xd7\x2f\x9f\x04\x76\x53\xdb\xbf\x8f\x79\x52\x05\x0b\xed\xe6\x2c\xdb\xa0\x5d\x2b\x01\xc0\x25\x68\xf1\xd9\x93\x05\xc2\x5d\x21\x4d\x2a\x08\x33\x48\x9b\x17\x9f\x47\x7e\x92\x4f\xa4\x8b\x98\x1b\x39\x53\x42\x7a\xa4\x11\x64\xc8\x95\x11\xdc\x89\xa4\x7a\xc3\x58\x17\x04\xa0\x74\xda\x8c\x1c\x91\x69\x43\x71\x3c\x7f\x18\x1f\x28\xc4\x14\x04\xe7\x40\x80\x16\x60\x7e\xd6\x02\x0c\xdf\x80\x3c\xc7\x51\x11\x56\x31\x84\x9d\x1e\x11\x80\x75\x7a\x4c\xd3\x63\xe2\x5e\x14\x13\x60\x4d\x08\xf5\xbc\x26\x44\xfa\x06\xe4\x6d\xca\x8d\xb4\xe6\x36\x7f\x9f\x2d\x9f\x45\xd1\xf2\x73\x20\xae\x45\x2f\x88\x16\x0f\x41\x70\x0e\x04\x35\x24\x05\x35\xb1\xc6\xe7\xed\x06\x25\x75\x06\xf0\x83\x02\x73\x1b\xe7\x67\xeb\x0a\x5c\x62\xe2\x8b\x70\xa9\xc9\x09\x97\xd8\xfd\x22\x5c\xf0\x03\x4a\xe1\xec\x06\x54\x2a\x70\x8a\xb7\xb8\x86\x24\xd8\xb7\x64\x7e\x76\x03\x85\x8d\x5e\xf8\x16\x58\xf0\x02\x85\x8d\x4e\xf8\x16\xd8\xa5\x13\x72\x6d\x44\x41\xe1\x8b\xe2\x26\xd6\x49\xef\x47\xff\x3b\x7b\xd5\x8f\x2a\x96\x63\xac\x14\x08\xcf\xc3\x5a\x9a\x9b\xb1\x18\xda\xfd\xe7\x81\x25\x23\xcb\x42\x0e\x9b\x9d\xc4\x9b\xfc\x41\xcb\xb2\x30\x3b\x2e\x09\x88\xa9\x25\x22\xec\xf3\x0b\x10\x93\xc1\x25\x22\x6c\xf1\x0b\x10\x4b\xab\xcb\x62\x3d\x63\x96\x8d\xa8\x5d\xb4\xab\xa2\x08\x1f\x77\x46\x59\xd2\xbf\xdb\x42\xc8\x47\x20\x8b\xde\xf9\x8f\x0c\xf2\x3c\x0f\xf7\xc9\x6c\x97\xa7\x7d\xa8\x9b\x6e\x26\x3a\x8e\x94\x11\x09\x32\x23\x8b\xfc\xe0\x02\x1a\x32\x6d\x84\x84\xd5\x2c\x5c\xb8\xc2\x78\xb0\x6c\x36\x04\x09\xf3\xb2\x48\x98\xd6\x7e\xa3\xf5\xe7\x81\x9b\xcf\xa8\x0d\xdf\x83\xe8\x96\xf0\x57\xdf\x06\xdf\x68\xdd\x0b\xae\x80\x1f\x64\xb6\xd6\x48\xe5\x84\xd9\xf1\x4e\xcc\xb2\x40\x13\x46\xbe\x17\x2d\xbb\x51\xce\xaf\xd5\xe9\xc9\xd7\x22\x18\x29\xf1\xd5\x5d\x4d\xc6\x6a\x93\xd8\x12\xa0\x66\x7e\x18\x58\x07\x22\x80\x4c\x0e\x63\x2f\x82\x41\xcf\x5f\x26\x51\xcc\x99\x0d\x7d\x3a\xba\x7a\xe0\xf8\x61\x65\xff\x14\xd0\xc1\x7c\xcf\xf7\x06\x2e\xfb\x79\x02\xe1\x4e\xc5\xa6\xc6\x04\x7b\x68\xc3\x21\x05\xb0\x81\x60\x47\x78\x18\x14\x2b\x94\x9c\xc7\xcb\x06\x61\x6d\x30\x70\x5e\xd7\xc7\x19\x1e\x1f\xb8\x3d\x10\xbd\xb8\x11\xca\xfd\x54\x48\x8d\xd8\xe1\xe1\x9a\x8a\x89\x1e\x04\x15\x13\xb9\x3f\xad\x62\xa7\x87\x81\xab\x07\x8c\x8e\x8f\x37\x17\xf4\x64\x40\x3a\x30\xda\x32\xa4\xbf\x36\x3e\x94\x3f\x7a\x32\x1a\xdc\x59\xeb\x66\xfe\x9d\xd7\xf5\x94\x5d\xb8\xdb\x05\xdb\xf0\x19\x80\xda\x57\x2a\xfe\x59\x3c\xe1\xa1\xb4\xd7\x62\xc7\xa7\xde\xa1\x6c\xf0\x16\xf4\xda\x1c\x51\x62\x3e\xb1\x91\xe3\x58\xa9\xdb\xdc\x26\x61\x03\x7c\xe7\x2a\xf4\x2b\xf4\x79\xe4\xfd\x44\x1d\xdd\x69\xea\x8f\xb5\x0d\x8b\x01\xe4\x43\x7c\xcd\x83\x8f\xc2\xe4\x98\x9e\xcf\x41\xc7\xf6\x60\x61\xae\xb4\x5b\x68\xc6\xb4\x66\xe0\x03\x23\x89\x32\x1f\x0b\x27\x76\xa2\x1b\xa7\x3b\xf1\x65\x12\xd6\x15\xd2\x77\x72\x90\x44\x36\x88\x41\x9b\xa7\x95\x8f\xe3\x8b\xc5\xf7\xce\xe7\xb1\x0a\xc7\x9b\x1f\x0d\xef\xc4\xad\x30\x52\x3f\x9c\x0a\xaa\x74\x28\xc0\x85\xea\x19\xc9\x42\x7d\xcf\x8d\x93\x3b\x1e\x02\x23\x1e\xbd\x18\x3b\x08\xfe\x00\xe5\xa1\x4d\x75\x22\x68\xc9\x65\xbf\x26\xb7\x8e\x3b\x41\x13\xbd\x38\x0d\xd6\xce\x82\x61\xe6\xfb\x65\x7d\x39\x63\xab\x63\x27\x80\xde\x11\x3c\x01\x83\x13\x9b\x89\x2f\x43\xa2\xce\xa3\xb6\xd2\x69\xf3\x44\xab\x06\x30\xba\x2c\xd9\x4b\xf7\xc1\xf4\x85\xe4\xd6\x68\xa7\x3b\x4d\xc4\xc6\xf2\x5b\x23\x1f\xb9\x13\xbf\xd0\x8c\xf1\x2f\xa6\xfb\x5e\x76\x85\x3c\x5f\x86\xd8\x83\xfe\xeb\x5a\x8c\xbd\x7e\xf2\x66\x42\xfc\x96\x37\x24\xdd\x64\x7c\x8d\xbd\x2b\x4e\x98\xf5\x96\x93\x6e\x51\x8a\x3b\x14\xb8\x74\x28\x52\x0d\xef\xdc\xea\x3d\xc0\x5e\xba\x37\x86\xab\x8e\x14\xf8\x4e\x2b\x27\xd5\xa4\x27\x1b\xd5\x27\x25\x4a\x10\x96\xb0\xa4\x02\xa9\xeb\x23\x9b\xab\xd5\x94\x72\xd3\x58\x50\xb3\xec\x44\x12\xeb\x61\xd4\x4a\xd0\x7a\x5f\x16\xa0\xa2\xc6\x1d\x0d\x47\xad\x76\x72\x3f\x27\xcf\x91\xf0\x9c\xb9\x1d\x8e\xd3\x9a\xe2\x6b\xa9\xbb\xc6\xb9\x2b\x49\xbc\xd0\x6b\xb2\x4e\x0f\x57\x85\x74\x91\xba\xdf\x2b\x23\x17\xb7\x44\xa4\x4a\xd5\x6c\x2e\xef\x4b\x0a\x9b\x4b\x8f\xe1\xb0\xde\xca\xbd\x82\xd2\x54\xa6\x6f\xe5\x5d\x69\x7a\x19\x04\x35\x57\xac\x38\x7b\x27\x95\xb4\x07\xdc\x7f\x8e\x84\x01\x93\x9e\x0e\x37\xe1\x2f\xb9\x5b\xca\xce\x88\x6b\xd5\x4b\xcb\x6a\x0d\xa2\xe9\xb8\x9e\x50\x74\x23\xe7\x8b\xc2\x63\xb9\x4b\x74\x8f\x17\xbb\x6b\x16\xa0\x2b\xdf\x60\xc7\xb2\x9e\xd6\x72\x1c\x73\x79\x1f\x12\x04\x9c\x5c\xc8\x06\xe0\x8e\xd0\xe6\x86\xb1\x3e\x76\xd3\x40\xb8\x49\xec\x61\x20\x7c\x01\xb7\xf4\x33\xea\x78\xb3\x53\x50\x12\x52\xe1\xaa\x0b\x43\x18\x68\xd3\x89\x3b\x71\x3f\xc9\x7e\x61\x60\x22\x1e\x58\x29\x7c\x37\xb6\x54\x6a\x75\xed\xf3\x98\x6e\x39\xb7\x42\x73\x41\x8f\x5b\x6d\x62\x20\x5e\x7c\x5a\x49\x87\x8a\xd5\xc1\xb8\x2b\xad\x1c\x97\xca\x9f\x52\xb5\x71\x6b\x36\x66\xec\x78\x60\xd2\xc6\x15\x6e\x2e\x82\x7c\x41\xd6\xd6\x40\xf3\xa5\xda\xd2\x79\xff\x1f\xee\xb6\xe0\xd8\xd8\x90\xf2\x62\xec\xb4\x21\x2f\x39\x0e\x54\x69\x7e\xe1\xd4\x7c\x6b\xb5\x54\xe3\x14\xeb\x5f\x14\xcf\xca\x29\x80\xd4\x9c\x6a\x22\xd5\xd8\xfb\xea\x3f\x42\xa8\x43\xc9\xbd\xca\xd9\xee\x5c\x65\x07\x55\x35\xcb\x1e\x4b\x9d\xb0\xae\xf1\x4a\xe9\x3c\xaa\xf3\xe5\x6a\x25\xb8\xc4\x8d\xb1\x90\x3f\xaf\xf3\x1f\x4b\x67\x7a\x6b\x44\x54\x5e\xbb\x50\x0a\x1a\xfb\x53\x45\x51\x3b\xc9\xe5\x04\x9d\x08\x65\xe6\xdc\xf5\xe6\xe5\x16\x01\xb8\x37\x5c\x55\xe3\xa5\x92\x7d\xcb\xd7\xf3\x02\xd5\x4d\x7f\xe6\x42\xd1\x35\xd5\x85\x66\xcf\xad\x95\x79\xea\xba\x8a\x9a\xd1\x7d\xff\x06\x00\x00\xff\xff\xfa\x54\xc2\xac\x8c\x1e\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 7820, mode: os.FileMode(420), modTime: time.Unix(1529968809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529952739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


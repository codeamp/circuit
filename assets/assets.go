// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xe3\x36\x0c\xbe\xeb\x29\xe8\xd9\x8b\x77\x26\x4f\xa0\xe3\xee\xa6\x6d\xda\x6e\x9b\xc6\xcd\x69\x27\x07\x46\x66\x6c\x36\x92\xe8\x25\x29\x4f\x33\x9d\xbe\x7b\x87\x24\x48\x01\x90\x64\xc7\xbb\x39\xf4\x12\x8b\x20\xf8\xe1\x87\x00\x08\xc4\x35\xb2\x95\x56\xfc\xa9\x3b\x55\xc1\xf7\xcf\x9b\xdf\x7f\xab\x2a\xd7\xec\x55\x27\xc5\x3f\x95\x10\x5f\x07\x65\x5f\x6a\xf1\x47\xf8\xa9\x84\xe8\x06\x2f\xbd\x36\x7d\x2d\x3e\xc3\x57\xf5\x6f\x55\xbd\x83\x7d\xff\x72\x50\xe9\x33\x9e\x7d\x27\xee\x9d\xb2\x95\x10\x83\x53\x76\xad\xb7\xb5\xb8\xf9\xf4\xbe\xce\xc4\xb4\xeb\x60\xdb\xad\xdf\xd7\xe2\x4b\xa0\x3c\xac\xe2\xe6\xad\x35\x7f\xa9\xc6\x57\x42\x1c\xd2\x17\x00\x5c\x09\xd7\x0e\xbb\x5a\x6c\xbc\xd5\xfd\xee\x4a\xf4\xb2\x53\xe3\x4a\xf5\x47\x6d\x4d\xdf\xa9\xde\xdf\x7c\xca\xe4\xf7\x35\x42\x2b\xc8\x6e\x84\x4e\xc2\x81\x0e\xf2\x7f\x50\xd2\x0f\x56\x05\xae\x27\xf8\x8c\x5c\x40\x07\xae\x8d\xb2\x47\xdd\x44\x2e\x07\x9f\x91\x0b\xe8\x94\x4b\xb8\x83\x6a\x10\xeb\x26\x2c\x31\x7b\x20\xc0\x91\x3b\xd5\x2a\xe9\x22\xb0\x85\xcf\xc8\x09\x74\xe0\xba\x1e\xcd\x0d\x9c\xc8\xfa\xc4\x8d\xf6\xa7\x27\xc4\x51\x5a\x2d\x1f\x5b\xd0\xbe\xb1\xca\x67\x6d\xc2\x77\x3e\xf0\xb7\x57\xbd\xd3\xa6\x8f\xda\x07\x21\x99\x30\xaa\x7f\x8d\x49\xfc\x9c\xc3\x67\x18\x3f\x35\x16\xb1\x8d\x66\x5f\xd3\xa3\x77\x8c\x9a\xa3\x45\xd9\x4e\xbb\x7c\xf4\x30\xae\xc2\xa1\x10\xd4\xab\x14\xa7\x25\x6a\x63\xa8\xe6\x15\x44\xeb\x47\xab\xa4\x57\x39\x28\x2a\x21\x9a\x48\x80\xb8\x58\x03\xbd\x04\xd3\x4d\x7f\x18\x3c\x8b\xad\xfb\xc3\x96\x42\x0c\x91\x70\x09\x04\x68\x01\xe6\x17\x2d\xc0\xf0\x35\xd0\xeb\xec\xb4\x0c\x71\x57\xf8\x0b\x04\x84\x59\x81\x80\x28\x5b\x03\xbd\xce\x71\x99\x21\x36\x85\xbf\x18\x32\x92\x92\x21\x97\x40\x7c\x52\xad\x22\x5a\x6c\x23\xe1\x12\x08\x6a\x48\x8e\x40\x62\x4d\x08\xb9\x35\x4a\xa8\x02\x10\x16\x0c\x73\x93\xce\x17\xeb\x18\x2e\x31\xf1\x9b\x70\xa9\xc9\x19\x97\xd8\xfd\x4d\xb8\xe0\x07\x94\xdf\xc5\x0d\x28\xa1\xd7\x68\xbf\xc6\x99\x9e\x61\xaf\xc9\xf9\xe2\x06\x0a\x9b\xbc\xf0\x3d\xb0\xe0\x05\x0a\x9b\x9c\xf0\x3d\xb0\x53\x27\x94\x0a\x86\x82\x22\x94\xae\x75\xaa\x66\xc1\x8f\xe1\x77\xf4\x6a\x58\x2d\x58\x8e\xb1\x72\x20\xbc\x0e\x6b\x6a\x6e\xc1\x12\xe8\xf6\x5f\x07\x96\x8d\xe4\x55\x17\x2e\x1b\x17\xda\x35\xa9\xc4\xb5\x20\x9b\xc5\x89\x98\x48\x4c\xe7\x12\xe0\xde\xdf\x40\x42\x76\x08\x97\x00\x21\xf0\x06\x12\xb8\x97\xa6\x0e\x1a\x81\xd1\xf9\x09\xe0\xac\x43\xa6\xbe\xb8\x00\x0c\xd9\x0e\x34\x66\xf5\xe5\x8a\x85\xf6\x08\x3f\x69\x45\xbf\xd0\x2d\xa1\x87\x6f\x3d\xd0\x75\xea\xb4\x10\x21\x4b\xf9\x92\xda\xa2\xd5\x03\x3c\x8a\xb1\x21\x8b\x0f\x62\xf8\x8a\x8f\x61\xea\xb5\xc2\xdb\xaa\x3a\xa9\xdb\xdc\x49\xad\xe8\xe3\x4a\xa0\xf2\x15\x6c\xeb\xd8\x51\x02\x36\xb4\x4b\x09\x1e\x16\x4c\x02\x7f\x14\x03\xad\x53\xce\xc9\x9d\xc2\x72\x83\x75\x78\xbd\x97\x6e\x4f\xf4\x92\x56\xf5\xfe\x27\x46\xb5\xea\x09\x2f\xe7\x54\xcc\x0f\x4e\x54\x31\xb7\x6a\xe7\x55\x6c\x4c\xd7\xc9\x7e\x8b\xd1\x71\x2f\xba\xa2\x7d\x1e\xa9\xe9\xe9\xf8\x10\xea\x1e\xd2\xdf\x58\x1f\x3c\x1a\xba\x95\xe8\xce\xa5\xfa\x18\xf6\x82\xae\xe7\xec\xc2\xf5\x33\xda\x86\x7b\x3f\x6a\x1f\x57\xbc\x31\xad\xb1\x17\xe0\x8f\xc5\x13\x9c\x18\xea\x19\x93\xf1\xac\x5e\x30\xe2\x51\xb6\x03\x75\x56\x63\xa8\x4d\x73\x4e\x4f\x41\x10\xc2\x74\xce\x0b\x47\x65\x4b\x5c\x8e\x3d\xec\x29\x3f\x32\xbb\x84\xd0\x6e\x03\x25\xfa\x83\x31\xad\x92\x3d\x0d\x92\x54\xca\x70\xa4\x84\xfb\x3c\xe7\xcd\xc3\x70\xa7\xbe\x0e\xca\x79\x46\xfd\x55\x77\x9a\xd0\x3a\xd5\x19\xfb\x32\xc3\x9c\x36\x26\xfc\x3e\xe4\x62\x1f\x7b\xd8\x1f\xad\x6c\xd4\xad\xb2\xda\x6c\xcf\x5d\x5c\x6e\x15\xa3\x19\xb9\xf7\x3e\x1f\xf0\xd4\xf7\xd2\x7a\xfd\x24\x9b\x10\xb2\xa9\xbf\x16\x62\xaf\xe4\x16\x52\xbc\xce\xb9\x1e\xb5\x94\xba\x9d\xa3\x3b\x2f\xbd\xa2\xc9\xca\x5a\xfe\xa5\x86\x3f\x9e\xfc\x3c\xad\x11\x17\x5c\x75\xf4\x44\xee\xbb\xa3\x27\x60\x71\xe6\x32\xf1\xf4\x99\x74\x3e\x18\xa7\xbd\xb1\x2f\x34\xf3\xe1\x9d\x2f\x94\x9d\xf6\xf7\xb6\x65\x94\x5b\x6b\xbc\x69\x0c\x21\x5b\x27\x6f\xad\x3e\x4a\xaf\x7e\xa1\x19\x13\x36\x86\xc7\x56\x37\x8c\x9e\xc7\x53\x36\x9c\x36\x83\x0d\x05\xf1\x8e\xcd\x0b\x68\xa0\x64\xe3\x64\x1e\x60\xd9\xf8\x0a\x93\x21\xcb\x29\x7c\x45\xf4\x6e\x76\xda\x7f\xb0\xb2\x6f\xf6\x67\xeb\x07\xed\x0f\x52\x89\xc2\x4f\xfd\xd9\x22\xd5\x1d\x4c\xaf\x68\x15\xe5\x25\x81\x55\x9d\x93\x01\x62\xfa\x27\xbd\x1b\xc3\xf9\xa4\xce\x4c\xdd\x57\xa4\xcf\xa9\x4e\x67\x21\xa1\xb8\x46\x93\x84\x79\xab\x3c\x98\x0c\xe0\xa4\x36\x2c\x59\xc9\x47\x51\x62\x25\xb2\x10\x07\xd7\x46\xef\x7a\xa8\x04\x3c\x5b\x16\xf6\xb8\xcd\xfc\x86\x97\x7c\x30\xe3\xcf\x27\xdd\x6b\xb7\xc7\xe5\xfe\x44\x51\x10\x3a\xb4\x4b\x55\xfc\x4b\xe6\xf5\xe2\x85\x24\x6b\x39\x93\xa7\x29\xff\x68\xcc\x73\x27\xed\x73\x90\x08\xef\x0b\xbd\xad\xf1\x9f\x56\xec\x66\xb0\x32\x78\xf2\x9f\x2a\x83\xaa\x30\x46\x2b\x41\x49\x89\xa7\x64\xe7\x37\x0f\xcb\xc6\xc3\xfa\x54\xf6\xac\x88\xcb\x1a\x25\x7e\x76\xa1\x4b\x02\x3d\x6e\x8d\x4d\x97\xb2\x7a\x98\x09\x8d\x53\xc6\x7d\x34\xbd\x97\xba\x0f\xad\xb5\xb1\x7e\xce\xc6\x82\x1d\xed\x0c\x5c\xcc\x9b\xec\xc2\x27\x7d\xc2\x1c\x68\x99\x6b\xa6\xce\xfb\xff\xb4\x0d\x93\xf6\x0e\x1b\xc2\x27\xf5\x57\x18\x42\xbb\xc9\xc5\xe6\x91\xf9\xab\x4c\xc8\x53\x09\xe7\x7a\xc9\x49\x8d\x58\xe8\x2d\xc7\xa8\x58\x8e\x96\xe5\x9e\x90\x3e\x60\xd4\x49\x93\x39\xf6\xbc\x9b\x98\x51\xb3\xcf\xdb\xa2\x8e\xfc\xa9\xa0\x1e\x60\xea\xce\x6a\x3a\xa7\xe5\xd5\x6c\x4e\x5f\xf1\xd7\x8c\xed\x71\x5d\x4e\xa5\x21\x1d\x51\x89\x66\x73\xd3\x6b\xd4\x2f\x34\xa2\xac\xb4\x91\x99\x94\x1e\x84\xf2\x70\xa9\xbc\x51\xdc\x24\xba\x76\x56\xf6\x34\x18\xfe\x0b\x00\x00\xff\xff\x7b\x5a\xce\x55\x4a\x19\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6474, mode: os.FileMode(420), modTime: time.Unix(1519867023, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x23\xb9\x0d\xbe\xeb\x29\xa8\xda\x8b\xa6\xca\x4f\xa0\xe3\x8c\x27\x63\x27\xbb\x89\x63\xed\x9c\x5c\x3e\xd0\x2d\x58\x62\xdc\x4d\xf6\x92\x6c\xef\xba\x52\x79\xf7\x14\x7f\x1b\x20\xd9\xb2\xa5\x9d\x54\xe5\x62\x77\x7f\x4d\x7e\x24\x40\x00\x04\x20\xd3\xf1\x9e\x6b\xf6\xab\x18\x60\x15\x9f\xff\xba\xfb\xc7\xdf\x57\x2b\xd3\x1d\x61\xe0\xec\xdf\x2b\xc6\x7e\x9b\x40\xbf\x6d\xd9\x3f\xdd\xbf\x15\x63\xc3\x64\xb9\x15\x4a\x6e\xd9\x2f\xf1\x69\xf5\x9f\xd5\xea\xa7\xf8\xdd\xbe\x8d\x10\x1e\xfd\xdc\x9f\xd8\x77\x03\x7a\xc5\xd8\x64\x40\x6f\xc4\x7e\xcb\x6e\xaf\x3f\x6d\x13\x18\xbe\x9a\xf8\xd9\x6c\x3e\x6d\xd9\x83\x43\x1e\xd7\xfe\xe3\x9d\x56\xff\x82\xce\xae\x18\x1b\xc3\x53\x24\xb8\x62\xa6\x9f\x0e\x5b\xb6\xb3\x5a\xc8\xc3\x15\x93\x7c\x80\xf9\x0d\xe4\xab\xd0\x4a\x0e\x20\xed\xed\x75\x82\x3f\x6d\x11\x5b\x66\x36\x33\xb5\xd9\xc4\x87\x1d\x70\xdd\x1d\xf3\xf0\xf0\x7a\x2b\xc7\xc9\x5e\xb1\x91\x6b\x3e\x98\x2d\xbb\xe3\x07\x21\xb9\x55\xda\xe3\x33\xf7\xcf\xc2\xd8\xb0\xf5\xbf\x00\xb7\x93\x06\xb7\xc0\x73\x7c\xdc\x2c\xce\x8e\x83\xe7\xd9\x3b\xd0\xaf\xa2\xf3\xb3\x4d\x7c\x5c\x9e\x1d\x07\x57\xb3\x99\x19\xa1\x43\x14\x3b\xf7\xea\x55\xbc\x9b\x81\xa8\xe9\x7b\xe8\x81\x1b\xbf\xa0\x8e\x8f\xcb\x0b\xc6\xc1\xf3\x82\x5f\x67\x8d\x3b\x06\x74\x00\xb3\x56\xd1\x81\xb9\x2d\xa0\x29\x8f\x15\x09\x7b\xe5\x5a\xf0\xa7\x3e\x2a\xa0\xd3\x60\x4f\xca\xef\x06\x20\xf1\x85\x3c\xf4\x10\xe1\x4c\xe0\x4d\x27\xaf\x9f\x3f\x66\x53\xf8\xfa\x87\x05\x69\x84\x92\x5e\x6d\x4e\x8a\x04\x98\xcd\x92\x45\x3d\xe4\x49\xd4\x60\x33\x8c\xec\x6b\xc6\xfc\x11\x94\x23\xe9\x39\xa0\xc5\xe7\x13\x29\x18\xee\x0b\x34\x6d\x01\xf4\x20\x4c\x5e\x7c\x7e\x73\x93\x9c\x6b\xaf\x83\xb7\x66\xdf\xf5\x0e\x9b\xde\xa2\xcf\x7e\xd1\xc0\x2d\xa4\xad\xaf\x18\xeb\x3c\x10\x37\x9d\xce\x34\x9b\x7d\xe1\x05\xc1\xb1\xc7\x3d\xa5\x98\x3c\x70\x0e\x45\xdc\x45\x14\x3f\xef\x22\x0a\xbe\x89\x78\xb6\xc7\xc2\x3c\x83\x2d\x58\x35\x22\x02\x63\xd5\x98\xa6\x87\x50\xb2\x2e\x26\xc4\x35\xa3\xcb\xe4\x35\xa3\xc7\x6c\x22\x9e\x9d\xae\xf0\x41\x2c\xf9\x0c\x05\xc9\xcf\xa1\xb8\x86\x1e\xc8\x2e\xf6\x1e\x38\x87\x82\x0a\x92\x8c\x9a\x48\xe3\xfc\x7f\x83\x82\x43\x26\x70\x2f\x05\xe7\x2e\xcc\xcf\xd2\x15\xbc\x44\xc4\x8b\x78\xa9\xc8\x89\x97\xc8\x7d\x11\x6f\xd4\x03\x72\xe1\xac\x06\x14\x71\xb0\x8b\x6f\x71\x28\x4a\xb4\x5f\xc9\xfc\xac\x06\x4a\x1b\xb4\xf0\x67\x68\xa3\x16\x28\x6d\x50\xc2\x9f\xa1\xad\x95\x90\x43\x2c\x32\x0a\x1f\x26\x43\xb4\x4c\x11\x92\xc6\xd8\x05\xc9\x31\x57\x32\x84\x8f\x71\xd5\xe2\x62\xae\x74\xf8\x1f\xe3\x4a\x32\x96\x71\x3c\x9e\x75\x82\x37\x79\xc0\x96\x65\x30\xeb\x2d\x01\x44\xd2\x92\x31\x1e\xf3\x05\x8c\x49\xde\x92\x31\x9e\xf0\x05\x8c\xa5\xd4\x65\xac\x9e\x39\xcb\x7b\x68\x5b\xdd\x56\x45\x0c\x3e\xad\x8c\x32\xa2\xff\xb0\x85\x90\x8e\x22\x16\xb4\xf3\x3f\x12\xc8\x25\x9e\xf8\x9a\xcc\x72\xb9\x3c\x14\x5d\xa6\x9b\x89\xbe\x87\x1c\x16\x01\x69\xb1\x87\x90\x1e\xac\xe3\x7d\x4c\xef\x41\x92\x1b\x55\x2a\x6c\xe4\x4d\x18\x9b\x05\x41\x60\x5e\x16\x81\x69\xed\xcf\x4a\xbd\x0c\x5c\xbf\xa0\x5b\xf8\x29\x42\x77\x24\xa1\x76\xb7\xe0\x67\xa5\x7a\xe0\x32\xcc\xfc\x06\x96\x7d\x13\x96\x7d\x51\xc3\x20\xfc\x4e\x0f\x60\xbf\x09\x1b\xdf\xd3\xee\x5c\x36\x74\x7b\xbd\xae\x72\x6e\x8f\x49\xf8\x3d\xb3\x62\x7e\x9f\x7e\xe4\x2c\x6e\x25\xa4\x05\xfd\xcc\x3b\x98\x31\x9f\x85\x74\x6a\x72\xd1\xed\x56\xda\x38\x05\xa5\x9d\x21\x69\x41\x00\x13\xc3\xd8\x83\x57\xc8\x09\x1a\x97\x9a\x5a\x2d\xc0\xcc\xe9\xd3\x63\x24\x9f\x93\xc8\xc0\x3d\xbf\x9f\x4f\x1d\xe6\xce\xcc\x39\x3d\x4f\xd4\x19\xb8\x84\xdb\x4f\x4e\xe4\xa8\x72\x08\xe4\x08\x38\x9f\x3c\x4e\x4e\xe4\xa8\xa8\x09\xe4\x08\x38\x9f\x3c\x4e\x4e\xe4\xbe\x02\xf4\xac\xee\xc9\xcf\x8c\xb6\xe8\x66\x0d\x5c\xf4\x29\xd1\x5e\xd3\x3c\xb6\xf0\xb0\x10\xed\xf6\x5b\x5f\xc2\x52\xad\x10\x8d\x14\x2b\x94\xf9\xa7\xc3\x06\x30\x86\x1f\x00\xaf\xeb\x9c\x1e\xbf\x1f\xb9\x39\x92\x7d\x71\x0d\xd2\xde\x14\xa8\x86\x67\xfc\xda\xda\x62\x4a\xd5\xb0\x45\x7c\x60\x8b\x9d\x1a\x06\x2e\xf7\x98\x1d\x17\xbf\x6b\x5a\xed\x91\x6c\xc8\x7f\x9b\x0e\x07\x30\x16\xf6\xbb\x13\x83\xe8\x01\x8e\x4a\xbb\xc8\xf3\xe0\x4a\x87\xc7\x35\xad\xee\x48\xa2\xe1\xbe\x39\x69\x4e\x48\xee\x42\xf9\xd8\xab\x37\x37\x7c\x67\x35\xb7\x70\x78\x0b\x45\xc9\x8a\xb1\x5e\xbc\x82\x04\x63\xee\xb4\x7a\x82\x8c\x6a\xe0\x7b\x51\xc3\xa3\x06\x97\xda\xdf\x28\xf5\x92\xd6\x5b\x31\xc6\x27\xab\x4c\xc7\x7b\xf8\x2a\x5d\x0a\xb1\x2f\x83\x0e\x4e\x8b\xbc\xe2\x71\xcd\x49\x95\x5f\x6a\xf5\x05\xde\xf0\xab\x30\xd7\xf0\xcc\xa7\xde\x92\xb8\xd9\xa9\x5e\xe9\x93\xf2\xa7\x66\x43\xed\x0f\xad\xf2\x17\x87\xa2\x62\x7f\xc5\x7e\x5e\x79\x3f\x51\x2b\xe8\x14\x3d\x8a\x96\x35\x05\xeb\x76\xfe\xd7\x3a\xbc\x57\xd0\xd9\xe1\x52\x44\x3b\x7d\xfc\x95\xb8\xc2\xec\x62\xda\x46\x0f\x02\x77\x28\x88\x0b\x38\x1b\x7c\xe7\x24\xba\x71\xba\x87\xdf\x26\x30\xb6\x40\x7f\x16\x83\x20\xd8\x00\x83\xd2\x6f\x8d\xc1\xe1\x43\x35\xde\xba\x20\x23\x7d\x1d\xfc\x4d\xf3\x0e\xee\x40\x0b\xb5\x6f\xf8\x56\x76\x99\x05\xa1\x6b\xdb\xc0\x17\x18\xb9\xbc\x3e\xe0\xf3\xf4\x94\xb8\xb6\xe2\x99\x7b\x13\x0a\xd5\x3c\x63\x47\xe0\xfb\x18\xe5\x72\x2f\xc9\xcb\xc3\x45\xdf\xc2\x8d\xe5\x16\x68\xbc\x2a\x1a\x0c\x4b\xed\x05\x3f\xf3\x97\x3a\x4c\x9e\x65\x14\xc6\x72\x4d\x80\x67\x21\x85\x39\x52\x15\xde\xab\xbe\x7f\xe2\xdd\x4b\x95\x37\xc4\x4c\x06\xdf\x47\xef\x18\x0c\xee\x15\x06\x69\x47\x65\x84\x55\xfa\x8d\x1e\x6d\xac\x2f\x32\x72\x10\xf6\xbb\xee\x0b\xe4\x4e\x2b\xab\x3a\x45\x60\x6d\xf8\x9d\x16\xaf\xdc\xc2\xdf\xa8\x57\xba\x0f\xd3\x53\x2f\xba\x02\xcf\x1d\x41\x73\x54\xbf\x5f\xfb\x90\x88\x82\xd5\x89\x36\x63\xd1\x28\xec\x26\xed\xae\x9f\xfb\xa2\x11\x72\x49\x13\xef\xec\x36\xe3\x99\x6d\x39\xc0\xb6\xd5\x6c\x7e\x1d\x84\xfd\xac\xb9\xec\xc8\x4d\xda\x29\x69\x85\x9c\xd4\x64\x82\x9a\x48\xb8\x05\x92\x1b\xd7\x09\x70\xca\x75\xc9\x45\xd0\xbe\x8e\x8b\xee\x5f\xb8\x1c\x32\xf6\x4e\x40\x52\xc3\xa8\xa4\x37\x7d\x14\x4b\xca\x9b\x90\x77\x47\x70\x31\x9d\x6c\xa5\x88\xe2\x27\xdd\x48\xc9\x67\x71\x98\x9d\xbe\x25\x45\x55\xe7\x60\x2f\x59\x12\xa7\x15\x72\x5a\xf5\xe7\x42\xf0\xa9\xf6\x35\x19\xab\x86\x2f\x05\x5a\x85\x9c\x1f\x10\x49\x70\x4c\x45\x75\x29\x8e\xae\x4b\x32\x97\xad\xc3\x42\xe6\x52\x63\xd8\x41\x76\xe2\x20\x63\x48\x2d\x83\xc7\xc2\xb7\x52\xf4\xd2\x34\x96\x54\xd1\x50\xf6\x07\x42\xe7\x09\xbb\x60\xc2\xb9\xe6\xca\xff\x25\x7d\xd7\xac\x9d\x9c\x49\x2d\x44\xba\x66\x48\xa4\x5e\xdb\xf6\x3b\x7a\xb2\x73\x13\xfd\x94\x8b\x93\xbd\x87\x9f\x61\x5a\x12\xa0\x1f\x68\xbc\x1c\x75\x78\x5f\x0a\x05\xb8\x10\x75\x36\x42\xc8\x49\x38\xf3\xc4\xa3\x3f\x9f\x5b\xdf\x52\xeb\x43\xee\xe0\x5e\x88\x19\x62\x0a\xdc\x96\xae\x35\x8c\x2e\xed\x59\x1d\xc8\x1f\x29\xd8\x54\x9e\x37\x00\xa5\x3b\xb8\x87\xa7\x49\xf4\x95\x68\x29\xcb\xc2\x9b\xc2\x1d\xe3\x7a\x53\xcd\xb5\x3f\x50\x73\xb4\x4b\x86\xb8\xd6\x9d\xd2\xc1\xcc\xd6\x8f\x0d\xeb\x5f\x94\xac\x55\x2a\x5c\x57\x58\x20\xae\xcb\x87\x1b\xe0\xbd\x3d\xfa\x17\x3f\xa4\x51\x4a\x34\x86\x5c\x56\x56\x7c\x51\xd2\x72\x21\x41\x7b\xc9\x5b\xea\xce\x2a\x08\x86\xa4\x34\x52\x56\x76\xb3\xd4\xe9\x08\x33\x17\x44\xf5\x04\xa5\x0e\x07\xfe\xc7\x6e\xd2\xd1\x3a\x23\xf0\x5d\xf2\x57\x2e\xfa\x70\xe5\x50\xea\x52\xf0\x8a\xd3\xa7\xc8\xf6\x48\x73\xdf\xc2\x0c\xb0\x1c\xbe\xde\x38\xc2\x80\x09\x46\x6e\x71\x4c\x10\x52\x58\xc1\xfb\x6b\xe8\xf9\xdb\x0e\x3a\x25\xf7\x26\x4d\x1d\x7d\x9a\x5d\x80\x56\x0c\xa0\x26\x5b\xa0\x66\xea\x3a\x30\xe6\xd7\xa3\x06\x73\x54\xce\xe2\x03\xfe\xcc\x45\x3f\x69\xa8\xf0\xa3\xb5\xe3\x0d\xf0\x3d\x68\x67\x8f\x48\xee\x9b\xfc\x21\x59\x66\x4b\x3b\xc5\x28\xaf\xa7\xd2\xf4\x8b\xca\xab\x2a\x6f\x5a\xe6\x90\x7f\xaf\xa8\x3d\xf0\xff\xa9\xda\x59\x2c\x64\x70\xad\x8a\xc5\x2b\x7f\x89\x78\x5f\xbc\x4b\xca\xea\xc5\x72\xb9\x50\x75\xfe\x9d\xa0\xde\xc6\x7b\xd5\x73\x75\x45\x2f\x54\xd3\xe4\x22\x5b\x8c\x64\x4b\x55\x30\x4d\x3a\xa9\x26\x49\x0b\xfb\x6c\x3d\x36\x53\xd2\xc5\xfd\xb5\x73\xd3\x32\xb1\xa3\x3a\x69\xe6\x9b\xad\xeb\xf9\xa4\x24\x57\xcd\x3b\xe7\x0a\x67\x63\x05\xfe\xb1\x74\x73\x41\xd4\xdc\x78\x9c\xdb\xf6\x64\xcb\xad\x8e\xbe\xdf\xb1\x2b\xc1\x8b\x5b\x9a\x34\x24\xe9\xc4\x18\x52\xce\x5d\x6f\x5e\xae\xb2\xc7\x83\xe6\xb2\x32\x9f\xfa\xc7\x80\xa6\xfe\x5b\x3e\xb9\x68\x0a\x1f\x5c\x28\xa8\x66\x71\xa1\x59\x73\xad\x84\x82\xaa\x6e\x61\x9b\x41\x7d\xff\x0d\x00\x00\xff\xff\xe1\x33\xd6\x25\x9e\x24\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9374, mode: os.FileMode(420), modTime: time.Unix(1543963811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x1b\xb7\x0f\xbf\xeb\x29\xe8\xc9\x45\x99\xf1\x13\xe8\x18\x3b\xff\xbf\xdd\x26\xad\x6a\x25\x27\x8f\x0f\xf4\x0a\x92\xd8\xec\x92\x1b\x92\xab\x5a\xd3\xc9\xbb\x77\xf8\xb1\x24\xc0\xfd\xb0\x65\xa7\x33\xbd\xd8\xbb\x58\x12\x1f\x3f\x02\x20\x00\x99\x8a\xd7\x5c\xb3\x2f\xa2\x81\x45\x7c\xfe\x65\xf3\xfb\x6f\x8b\x85\xa9\x0e\xd0\x70\xf6\xf7\x82\xb1\xef\x1d\xe8\xd3\x8a\xfd\xe1\xfe\x2d\x18\x6b\x3a\xcb\xad\x50\x72\xc5\x3e\xc7\xa7\xc5\x8f\xc5\xe2\x5d\xfc\x6e\x4f\x2d\x84\x47\xbf\xf7\x1d\xfb\x6a\x40\x2f\x18\xeb\x0c\xe8\xa5\xd8\xae\xd8\xed\xf5\xfb\x55\x4f\x0c\x5f\x4d\xfc\x6c\x96\xef\x57\xec\xde\x51\x1e\x2e\xfc\xc7\xb5\x56\x7f\x42\x65\x17\x8c\xb5\xe1\x29\x32\xb8\x64\xa6\xee\xf6\x2b\xb6\xb1\x5a\xc8\xfd\x25\x93\xbc\x81\xfc\x06\xf2\x28\xb4\x92\x0d\x48\x7b\x7b\xdd\x93\xdf\xaf\x10\xb7\xc4\xd9\x64\xd6\x66\x19\x1f\x36\xc0\x75\x75\x48\xcb\xc3\xeb\xad\x6c\x3b\x7b\xc9\x5a\xae\x79\x63\x56\x6c\xcd\xf7\x42\x72\xab\xb4\xa7\x67\xde\x9f\x84\xb1\x41\xf5\xff\x01\xb7\x9d\x06\x27\x60\x17\x1f\x97\x93\xbb\xe3\xe2\xbc\x7b\x03\xfa\x28\x2a\xbf\xdb\xc4\xc7\xe9\xdd\x71\xf1\x60\x37\x33\x2d\x54\x88\xc5\xc6\xbd\x7a\x88\x37\x99\x10\x91\xbe\x83\x1a\xb8\xf1\x02\x75\x7c\x9c\x16\x18\x17\x67\x81\x1f\x33\xe2\x8e\x03\x3a\x80\x8c\x2a\x3a\x30\xa7\x02\xda\xf2\x30\x60\xc2\x8e\x5c\x0b\xfe\x58\x47\x00\x2a\x0d\x76\xd6\x7e\xb7\x20\x6b\x13\xcf\xe2\xe3\x93\x05\x69\x84\x92\x1e\x07\xa7\x56\x4f\x30\xcb\x29\x17\xb9\x4f\x9b\x1e\xc6\x79\x21\x87\xc9\x34\x8f\x69\xb9\x92\x02\x8b\x84\x67\x88\x0b\x0e\x77\x05\xb5\x57\x01\x74\x23\x4c\x12\x9e\xdf\xdc\x26\x17\xab\x17\x21\xfc\x52\x30\xfa\x08\xec\xdf\x62\x10\x5e\x69\xe0\x16\x7a\xd5\x17\x8c\x55\x9e\x10\x95\xee\x0f\x29\xf9\x71\xe1\xd6\x21\x52\xdb\x2d\x65\xd1\x79\xc2\x39\x2c\xa2\x16\xd1\xfc\xa4\x45\x34\x7c\x19\xe9\xc9\xc1\x0a\x7f\x0b\xbe\x6d\x55\x8b\x18\x18\xab\xda\x7e\x7b\xc8\x0d\x17\xc5\x86\x28\x33\xc6\x40\x92\x19\x43\x60\x19\xe9\x29\x8a\x8a\xa0\xc2\x96\x67\x52\xb0\xfc\x1c\x16\xd7\x50\x03\xd1\x62\xeb\x09\xe7\xb0\xa0\x86\xf4\x4e\x4d\xac\x71\x01\xbd\x44\xd1\x9e\x18\xb8\x97\x82\xe7\x26\xec\x4f\xd6\x15\x7c\x89\x89\xaf\xe2\x4b\x4d\xee\xf9\x12\xbb\x5f\xc5\x37\xe2\x80\x42\x38\xc1\x80\x52\x08\x0e\xf1\x15\xce\x2d\x3d\xdb\x8f\x64\x7f\x82\x81\xb2\x0d\x28\xbc\x85\x6d\x44\x81\xb2\x0d\x20\xbc\x85\xed\x10\x84\x94\x33\x91\x53\xb8\xbc\xb8\x0c\xf9\xb3\x4f\x93\x34\x69\x4e\x58\x8e\x79\xf5\x8e\xf0\x32\x5e\x43\x73\x13\x2f\x86\x4e\xff\x65\xcc\x7a\x23\xcb\x44\x1e\x0f\xbb\x27\x2f\xd3\x82\x15\x4b\xc4\x04\x5c\x4f\x20\xa6\x96\x1c\xe3\x39\xbf\x82\x63\x6f\x70\xc9\x31\x1e\xf1\x2b\x38\x96\x56\x97\xc9\x3a\xf3\x2c\x2f\xa2\xd5\xe0\xba\x2a\x92\xf0\x3c\x18\x65\x4a\xff\x69\x82\x10\x46\x91\x16\xd0\xf9\x97\x0c\x72\xa5\x24\xbe\x27\x93\x5d\xae\xb2\x44\xb7\xe9\xb2\xa3\xef\xa1\x2a\x45\x84\x5e\xd8\x7d\xa8\x0f\x2e\xe2\x85\x4c\x2f\x42\x52\xed\x0c\x20\x1c\xa9\x84\x30\x2d\x1b\x82\x88\x49\x2c\x22\xf6\xb2\x3f\x28\xf5\xad\xe1\xfa\x1b\xba\x86\x1f\x23\x69\x4d\x4a\x64\x77\x0d\x7e\x50\xaa\x06\x2e\x63\x7d\x90\xea\xa6\x85\x90\x16\xf4\x8e\x57\x90\x69\xbe\x4c\x68\xf9\x1e\x56\xec\x56\xfa\x3a\xaa\x52\x9d\xcb\x45\xf1\x4d\xc2\x93\xbd\xea\xb4\x51\xba\xaf\x96\x22\x57\x54\x0b\x86\xc2\x03\x11\x98\x68\xda\x1a\xbc\x4d\x2f\x97\x04\xd2\x6a\x01\x26\xd7\x43\x0f\xb3\xf2\x73\xf1\x17\xc4\xe7\xf7\x37\x4a\x0f\x8c\x9e\x13\x9e\x2a\xef\x5e\x7a\x22\xbc\x59\xbc\xe7\x34\x2f\x1f\xf5\x0d\x41\x3e\x22\xbc\x51\x7e\xe4\x34\x2f\x1f\x75\x3d\x41\x3e\x22\xbc\x51\x7e\xe4\x34\x2f\xdf\x77\x91\x5e\xb0\x7b\xf2\xcc\xa3\xf7\x3b\x5e\x0d\x17\x75\xde\x40\x4a\xe7\x22\xa6\x43\x7e\xdd\xae\x7c\x1b\x4c\xb1\x25\xb8\x16\x12\xca\x92\xd7\xd1\x1a\x30\xc6\xdb\x97\xe5\xba\x34\x83\xdf\x0f\xdc\x1c\x88\x5e\x5c\x83\xb4\x37\x05\x55\xc3\x0e\xbf\x8e\xa9\xd8\x57\x87\xd8\xf5\x5e\xa0\x62\xa5\x9a\x86\xcb\x2d\xe6\x8e\x1b\xe8\x0b\xda\x31\x92\x02\x6c\x78\x62\xad\xd2\x2e\x8d\xdd\xbb\x46\xe4\xe1\x82\x36\x7f\xa4\x6c\x71\xdf\x9c\xa2\x33\x46\xb9\x7b\xa1\xad\xd5\xc9\x2d\xdf\x58\xcd\x2d\xec\x4f\xa1\xc5\x59\x30\x56\x8b\x23\x48\x30\x66\xad\xd5\x23\x24\xaa\x06\xbe\x15\x25\xd9\x83\x83\x2b\x26\x0f\x10\xee\x2f\x29\x48\xa5\xf5\xdf\xe0\x84\x5f\x85\xb9\x86\x1d\xef\x6a\x8b\x32\xaa\x83\xa1\x56\x7a\xd6\x98\x7e\xb0\x40\xbc\xb9\xd4\x2d\x97\x5a\x28\x7d\x15\xfa\x15\xfa\x1c\x79\xdd\xd1\xd3\xaa\x14\xc5\x75\xec\xd4\x83\x17\xba\x38\x19\x3b\x89\x23\xe8\x14\x18\x39\xf1\xcd\x9d\xe5\xc0\x5c\x61\x36\xb1\xa0\xa3\xf7\x0e\x9e\x46\x10\x57\x75\x0e\xf5\xcc\x49\x54\x6d\x77\x07\xdf\x3b\x30\xb6\xa0\x7e\x12\x8d\x20\xb4\x06\x1a\xa5\x4f\x23\x8b\xc3\x87\xc1\x7a\xeb\x92\x81\xf4\x2d\xf2\xff\x35\xaf\x60\x0d\x5a\xa8\xed\x73\x11\xd7\x37\x96\xf8\xa6\x7b\x41\xc4\x51\xec\xb9\xb6\x62\xc7\xbd\x63\x84\xf6\x9d\xb1\x03\xf0\x6d\xcc\x31\x69\x1a\xe4\xb5\xe4\xa2\x1e\xa3\x1b\xcb\x2d\xd0\x6c\x51\x4c\x14\xa6\xe6\x09\x7e\xe7\xe7\x61\x92\x3a\xe3\xa8\x71\xea\x27\x69\xff\x99\xc3\xc4\x33\xbb\xa0\x73\xab\x8c\xb0\x4a\x9f\x68\xea\x89\x5d\x41\xa2\xec\x85\xfd\xaa\xeb\x82\xb2\xd6\xca\xaa\x4a\x11\xb2\x36\x7c\xad\xc5\x91\x5b\xf8\x95\x46\x8c\xfb\xd0\x3d\xd6\xa2\x2a\xe8\x69\x32\x67\x0e\xea\xaf\x6b\x9f\x7b\x9c\x99\xd1\x7f\x67\xc6\x7d\xc5\xc0\xae\xea\xb4\x4b\xe1\x77\xc5\xfc\xe2\x35\xc3\xb4\xb3\xc7\x7d\x67\x8e\xc7\x00\x7b\xc8\xe8\xcc\x6a\x2f\xec\x07\xcd\x65\x45\x6e\xa3\x4a\x49\x2b\x64\xa7\x3a\x13\x60\x22\xa9\x10\x48\x45\x3b\x2c\x5b\xfb\x0a\x15\x61\x3b\xe5\x56\xc5\xd0\x2e\x24\xee\x44\x7b\x26\x59\xa8\xa6\x55\xd2\x3b\x30\x8a\xf3\x22\xd1\x15\xb9\x74\xd6\xed\x95\xdc\x89\x7d\x0e\xd2\x99\x30\xc8\x7d\x08\x8e\x87\x29\xc5\xc7\x52\xc4\x58\x7f\x38\x91\x2c\x06\x7a\x75\xc6\xaa\xe6\xaa\xa0\x0e\x52\xc4\xcf\x8a\xfc\xc1\x44\x93\x64\xc3\x29\x9b\xcb\xd9\x5e\x61\x73\x89\x18\x0e\x85\x8d\xd8\xcb\x98\x02\xcb\x34\x31\xf1\xad\x34\xbd\x74\x82\x29\x28\x46\xc0\xde\x09\x29\xcc\x01\xdf\x73\x33\x6e\xc0\x84\x8b\xb9\x85\xff\x4b\xe6\xa0\x09\x8c\x20\x6b\x3a\x85\x8d\xe6\x3a\x1a\x8e\xe3\x01\x45\x0f\x32\x0f\xb5\xe7\x62\x97\xe8\x1e\x7e\xe7\x18\xb3\x00\xfd\x02\xe2\xed\x18\xe6\xed\xa9\x18\xc7\x7d\xa7\x73\x09\xc2\x9c\xe4\x29\xcf\xb8\x22\x35\xbe\xaf\xf9\xfc\xad\x7d\x2b\x2d\x75\x3d\xcc\x07\xcf\x8a\x87\x30\xa3\x8b\x35\x63\x82\x62\x90\x12\x47\x11\xf4\x5e\xa0\x74\x05\x77\xf0\xd8\x89\x7a\x60\x5f\x5f\xdf\x60\xa5\xf0\x18\x77\xa8\xd4\xa8\xec\xf3\xaa\xf2\x72\xef\x58\x49\x1e\x95\x58\x2b\x1d\x9c\xf0\xe2\x61\x24\x14\x26\x4d\x1e\x2b\xc5\xaf\x07\xb4\xc0\x78\x58\x9e\xdf\x00\xaf\xed\xc1\xbf\xf8\x25\x23\xa5\xfa\x60\x89\x47\xf3\x4a\x49\xcb\x85\x04\xed\xcd\x18\x03\x35\xd9\x13\x9a\x49\xa5\x91\xe5\x29\xa2\x3c\xe1\xc7\x22\xee\x9c\xd0\xdb\x33\x28\x01\x69\xf8\xd3\xa6\xd3\xa8\x43\x6d\xf8\xd3\x57\xc9\x8f\x5c\xd4\xae\x4c\x2f\x59\x97\x56\x0c\x78\xfa\x12\xd4\x1e\x8a\xda\x92\x1e\x36\xb6\xc3\xd7\xf3\x07\x68\x30\x83\x96\x5b\x1c\xfe\x42\x0a\x2b\x78\x7d\x0d\x35\x3f\x6d\xa0\x52\x72\x6b\xfa\xad\xad\x2f\x63\x0b\xa2\x15\x0d\xa8\xce\x16\x54\xd3\x55\x15\x18\xf3\xe5\xa0\xc1\x1c\x94\xf3\xeb\x40\xdf\x71\x51\x77\x1a\x06\xf4\x83\xb5\xed\x0d\xf0\x2d\x68\xe7\x5c\xc8\xee\x9b\xf4\xa1\x77\xb3\x31\x74\x8a\x55\x1e\xa7\xd2\xc1\x8b\xce\x66\xd0\x3e\x8c\xb9\x43\xfa\xa9\x60\x18\x67\xff\x9d\x6e\x62\xd0\xf5\x61\x43\xca\x71\xff\xf3\x86\xbc\xa6\x41\x9d\x6c\x3c\x0b\x50\xd3\x2c\x7e\xa8\xc6\x73\x7d\xe8\xe0\x9a\x9d\xe8\x4b\xc9\xed\x34\x99\x80\xa6\xfa\xc9\xd1\x9f\x77\x29\xa0\x64\x5a\x7c\x36\x9c\xa3\x75\xe4\xa4\x9a\x65\x35\x46\x41\x18\xd7\x78\xe4\x92\x9d\xd5\xf9\x72\xf4\xd2\xb8\xc4\x25\x54\x41\x7f\x59\x8d\x38\x61\x54\x9a\xad\xe5\x59\x38\x51\x79\x6c\x4c\xee\x35\x76\x7d\x6e\x71\xcd\x92\x99\x1b\xdd\x18\xb3\xc5\xb9\xf2\xb2\xb8\x81\x03\xee\x35\x97\x93\xfe\x32\x11\x7d\xc3\xcf\x59\xc0\xe4\xa1\xbf\x50\x50\x80\x66\x52\x50\x46\x6e\xac\x22\xa0\xd0\x4d\xa8\x19\xe0\xfb\x27\x00\x00\xff\xff\x1d\xf6\x00\x4f\xc5\x23\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9157, mode: os.FileMode(420), modTime: time.Unix(1532461156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529614596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xc1\x72\xe3\x36\x0c\xbd\xeb\x2b\xe8\xd9\x8b\x33\x93\x2f\xd0\x71\x37\x69\x9b\xb6\xdb\xa6\x71\x73\xda\xd9\x03\x23\xd3\x36\x1b\x49\xf4\x92\x94\xa7\x9e\x4e\xff\xbd\x43\x12\xa4\x40\x88\xb2\x63\xef\x76\x66\x2f\xb6\x08\x91\x0f\xc0\x23\x08\x02\x32\x0d\x6f\xb9\x66\x7f\xca\x4e\x54\xf0\xfc\xf3\xea\xf7\xdf\xaa\xca\x34\x3b\xd1\x71\xf6\x4f\xc5\xd8\x97\x41\xe8\x63\xcd\xfe\x70\x7f\x15\x63\xdd\x60\xb9\x95\xaa\xaf\xd9\x47\x78\xaa\xfe\xad\xaa\x77\xf0\xde\x1e\xf7\x22\x3c\xfa\xb5\xef\xd8\xb3\x11\xba\x62\x6c\x30\x42\x2f\xe5\xba\x66\x0f\x77\x37\x75\x14\x86\xb7\x06\x5e\x9b\xe5\x4d\xcd\x3e\x39\xc9\xe7\x85\x7f\xf9\xa8\xd5\x5f\xa2\xb1\x15\x63\xfb\xf0\x04\x00\xb7\xcc\xb4\xc3\xb6\x66\x2b\xab\x65\xbf\xbd\x65\x3d\xef\xc4\x38\x12\xfd\x41\x6a\xd5\x77\xa2\xb7\x0f\x77\x51\x7c\x53\x23\xb4\x84\x6c\x46\xe8\xa0\x1c\xe4\xa0\xff\x07\xc1\xed\xa0\x85\x9b\xb5\x81\x47\x3f\x0b\xe4\x30\x6b\x25\xf4\x41\x36\x7e\x96\x81\x47\x3f\x0b\xe4\xf9\x2c\x66\xf6\xa2\x41\x53\x57\x6e\x88\xa7\x3b\x01\x2c\x79\x12\xad\xe0\xc6\x03\x6b\x78\xf4\x33\x41\x0e\xb3\xee\x47\x77\xdd\x4c\xe4\x7d\x98\x8d\xde\x4f\x57\xb0\x03\xd7\x92\xbf\xb4\x60\x7d\xa3\x85\x8d\xd6\xb8\xe7\x7c\x1f\xee\xff\xb6\xa2\x37\x52\xf5\xde\x09\xa7\x2b\x0a\x40\x53\x1c\xce\x2c\x43\x6c\xdf\xe7\x2b\xe9\xcc\x9c\x00\xa4\x67\xa4\x82\x20\x3c\x11\x69\x34\x41\xe8\x4e\x9a\xa4\x7c\x1c\xb9\x45\x2e\xd0\x17\x21\x76\x53\x24\xfb\xf0\x8d\x23\x88\xe0\x0f\x5a\x70\x2b\xa2\xe9\x15\x63\x8d\x17\x80\xd1\x4b\x90\xa7\x00\x7b\xe8\xf7\x83\x25\xf1\xf6\xbc\x5f\xe7\x10\x83\x17\x5c\x02\x01\x56\x80\xfb\xc9\x0a\x70\x7c\x09\xf2\x3a\x92\x16\x21\x9e\xd2\xfc\x04\x01\xa1\x97\x20\x20\xf2\x96\x20\xaf\x63\xac\x46\x88\x55\x9a\x9f\x1c\x19\x45\xc1\x91\x4b\x20\xee\x44\x2b\x32\x2b\xd6\x5e\x70\x09\x44\xee\x48\x0c\xc7\xcc\x1b\x77\x8e\x96\xe8\x90\x25\x00\x37\x20\x98\xab\xb0\x3e\x79\x47\x70\x33\x17\xaf\xc2\xcd\x5d\x8e\xb8\x99\xdf\x57\xe1\x02\x0f\xe8\xcc\x27\x1a\xd0\x21\x5f\xa2\xf7\x35\x3e\xfd\x11\xf6\x3e\x5b\x9f\x68\xc8\x61\x03\x0b\x5f\x03\x0b\x2c\xe4\xb0\x81\x84\xaf\x81\x9d\x92\x90\xb2\x1a\x0a\x0a\x97\xce\x96\x21\xc3\x39\x1e\xdd\xff\xc8\xaa\x1b\xcd\x78\x8e\xb1\x62\x20\xbc\x0d\x6b\xea\x6e\xc2\x62\x68\xf7\xdf\x06\x16\x9d\xa4\x29\x18\x36\x3b\x8a\x97\x69\x42\xcd\x92\x30\x11\x17\x05\x99\xab\x14\x11\xf6\xf9\x0a\xc4\xe8\x30\x45\x84\x2d\xbe\x02\x91\x7a\x4d\x73\xef\x88\x49\xef\x95\x7a\x72\xfb\x90\x9c\x7a\x9a\x0c\x9a\xa1\xbf\x99\x22\xc4\x11\xc8\x02\x3b\xff\x93\x43\xae\xac\xc2\xd7\x5e\xf2\xcb\x55\x59\xe8\x72\x5c\x0e\xf9\x38\x54\x68\x48\x10\x95\x7d\x0a\xe5\xd4\x02\xee\xd7\xfc\x5e\x2b\x6a\x02\xf3\xb0\xb2\xfd\x44\x94\xbc\x38\xad\xd2\xdf\xd5\xbe\x76\xf4\xf7\xb4\x7b\xf2\x77\x74\x28\x0b\x9d\x49\xa2\xe3\xb2\x8d\x45\xdf\x22\xbf\xf3\x89\xf5\x21\x92\xd6\xb5\x2f\x7e\x01\x1b\x2a\xbb\x00\x0f\x03\xa2\x81\xde\xd5\x4e\xd6\x09\x63\xf8\x56\x60\xbd\x8e\x50\x3c\xde\x71\xb3\xcb\xec\xe2\x5a\xf4\xf6\x27\x22\xd5\x62\x83\x87\x25\x13\xe3\x3d\xe8\x4d\x8c\x55\xe5\x79\x13\x1b\xd5\x75\xbc\x5f\x63\x74\x5c\x36\x2f\xf2\x92\x34\xbb\x6a\xc2\xf2\xc1\xa5\x63\x64\xbf\xd2\xd6\x31\xea\x8a\x28\x4f\xe7\x5c\xda\x76\xef\x9c\xad\xe7\xfc\xc2\x69\xdd\xfb\x86\xcb\xd4\xdc\x3f\x6a\xf8\xab\x38\xe2\xa1\x34\x77\x62\xc3\x87\xd6\xd6\xec\xbd\x52\xad\xe0\x7d\xf0\xa0\x55\xfa\x02\x23\xc6\xc4\x0f\x4c\xbb\x5c\x4c\x0c\x21\x8a\x0f\xbc\x1d\x72\x46\x1b\x95\x3b\x5e\xda\x99\x10\x29\x2e\x96\x4b\x54\x1d\x84\x4e\xc1\x3b\xd6\xe4\xa7\xc8\x26\x7e\x39\x3e\x56\x70\xbd\x24\x3a\x70\x24\x85\x34\x8d\xc3\xc9\x6d\xfa\x19\xca\x9b\xfd\xf0\x24\xbe\x0c\xc2\x58\x22\xfd\x55\x76\x32\x93\x75\xa2\x53\xfa\x58\x98\x1c\x5e\x4c\xe6\x5b\x77\x60\x7b\x5f\x7f\xff\xa8\x79\x23\x1e\x85\x96\x6a\x7d\x6e\xe3\x62\x99\xeb\xdd\x88\x7d\xc3\xf9\x53\x91\x73\xcf\xb5\x95\x1b\xde\xb8\xb8\x0e\xbd\x01\x63\x3b\xc1\xd7\x90\x07\xea\x98\x10\xbc\x95\x5c\xb6\x25\xb9\xb1\xdc\x8a\xfc\x44\x93\x76\x65\xae\x59\xf1\x2b\x3f\x4e\x13\xc9\x05\x5b\xed\x99\x88\x3d\x83\x67\x02\x06\x67\x36\x13\x77\xd3\xc1\xe6\xbd\x32\xd2\x2a\x7d\xcc\xd3\x03\xd4\x28\x49\xb2\x95\xf6\x59\xb7\x44\xf2\xa8\x95\x55\x8d\xca\xc4\xda\xf0\x47\x2d\x0f\xdc\x8a\x5f\xf2\x13\xe3\x5e\x0c\x2f\xad\x6c\x88\x3c\xb6\xdb\xa4\xd9\x6e\x06\xed\xb2\xe6\x13\xe9\x75\x50\x83\x4c\xda\xe3\xd8\x90\x93\x76\x1c\x3a\x5d\x72\xa6\xf0\x16\x15\x3b\xd2\xad\xb4\xef\x35\xef\x9b\xdd\xf5\x17\x0c\xe9\xa1\x43\xa2\x4b\xb2\x33\x67\x4e\x75\x7b\xd5\x8b\x3c\x0f\xd3\x7c\x41\x52\xd2\xc9\xe8\x51\xfd\x46\x6e\xc7\x58\x3f\x11\x4d\x63\x71\x81\xc3\x6a\xce\xf0\xd2\x49\x2b\x15\x7d\x33\x67\x8e\xda\x35\x39\x53\xdf\xea\xa8\x4c\xbe\x2f\x64\xe9\x63\xce\x3b\xda\x69\x13\xef\x28\x37\x38\x0c\x57\x72\xdb\x43\xce\xa0\xe7\x6a\xe6\x1d\x75\x9d\x6e\xf7\x1c\x15\x05\x5a\x37\xb2\x97\x66\x87\x2f\x86\x13\x1b\xce\xa4\xab\xbe\x2a\xff\x9b\x7d\x95\x48\x64\x04\x5d\xf3\x67\xbe\x98\x1c\xf2\xe3\x53\x31\xf6\xa2\xd4\x6b\xc7\xf5\xab\xb3\x02\x6e\xa7\x7c\x23\xc7\x4f\x78\x64\xd3\xb0\x81\xf8\x9b\xc7\xd4\x40\x94\xc3\x31\x5a\x8a\xd3\x5c\x78\x4a\x77\xbc\x31\xb1\x6e\xfc\x99\x62\xaa\xbb\xa8\xe2\xb2\x5a\x8c\xae\x9d\x29\xc4\xc0\x8e\x47\xa5\xc3\x46\x2d\x3e\x17\xc2\xe5\x94\x73\x1f\x54\x6f\xb9\xec\x5d\xc3\xa0\xb4\x2d\xf9\x98\xb0\xbd\x9f\x6e\x16\x61\x93\x04\xc1\xa4\xca\x28\x81\xa6\xef\x1b\x53\xf2\xbe\x9f\xa2\x63\x52\x1c\x62\x47\xe8\x37\x8a\xf3\x8e\x5c\x53\xb0\xce\xd6\xa7\x84\xd4\xf4\x01\x61\x6a\xc6\xb9\x72\x75\x92\x5c\x66\xca\xd7\x31\x74\xe6\x43\x6a\xbe\xec\x2c\x7e\x4d\xce\x09\xcd\x5a\xdc\x8b\xe9\x2c\xde\x93\xb3\x66\xd2\xdb\x26\x27\xa1\x6c\x71\x21\x39\x9e\xb4\xf9\xb6\x98\x09\x6e\xf1\xc5\x41\xe4\xd4\xaa\x53\x07\x37\x6f\xd5\x33\xe3\x4a\x5d\xbc\xb7\xcd\x15\xbe\x24\x19\x66\x75\x4c\xbe\x10\x12\xca\xa5\xfa\x46\x75\x93\x50\xdb\x6a\xde\xcf\x45\xc6\x0c\xf6\xe4\xed\x08\x3f\xbb\xb9\x6f\x53\x13\x78\x99\x53\x33\xb2\x56\x4a\xe6\x39\x6d\x65\x1b\x03\x73\xff\x05\x00\x00\xff\xff\xf8\x32\xa5\xa8\x6b\x1b\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7019, mode: os.FileMode(420), modTime: time.Unix(1521485379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x23\xb9\x0d\xbe\xeb\x29\xe8\xda\x8b\xa6\xca\x4f\xa0\x5b\x66\xec\x8c\x9d\xcc\x24\x8e\xb5\x73\x48\x6d\xf9\x40\xb7\x60\x89\x71\x37\xd9\x4b\xb2\x3d\xa3\x4a\xe5\xdd\x53\xfc\x6d\x80\x64\xcb\x96\x77\x52\x95\x8b\x2d\xa2\x9b\x1f\x09\x10\xf8\x08\xa0\x4d\xc7\x7b\xae\xd9\xaf\x62\x80\x55\xfc\xfd\x97\xed\xdf\xff\xb6\x5a\x99\xee\x00\x03\x67\xff\x5e\x31\xf6\xfb\x04\xfa\xb8\x61\xff\x70\xff\x56\x8c\x0d\x93\xe5\x56\x28\xb9\x61\x5f\xe3\xaf\xd5\x7f\x56\xab\x5f\xe2\x73\x7b\x1c\x21\xfc\xf4\x73\x7f\x61\xdf\x0c\xe8\x15\x63\x93\x01\xbd\x16\xbb\x0d\xbb\xbd\xfa\xb0\x49\xc2\xf0\xd4\xc4\xc7\x66\xfd\x61\xc3\x7e\x73\x92\x87\x0b\xff\xf0\x4e\xab\x7f\x41\x67\x57\x8c\x8d\xe1\x57\x04\xb8\x64\xa6\x9f\xf6\x1b\xb6\xb5\x5a\xc8\xfd\x25\x93\x7c\x80\x79\x04\xf2\x45\x68\x25\x07\x90\xf6\xf6\x2a\x89\x3f\x6c\x10\x5a\x46\x36\x33\xb4\x59\xc7\x1f\x5b\xe0\xba\x3b\xe4\xd7\xc3\xf0\x56\x8e\x93\xbd\x64\x23\xd7\x7c\x30\x1b\x76\xc7\xf7\x42\x72\xab\xb4\x97\xcf\xd8\x5f\x84\xb1\x61\xeb\x7f\x06\x6e\x27\x0d\x6e\x81\xa7\xf8\x73\xbd\x38\x3b\xbe\x3c\xcf\xde\x82\x7e\x11\x9d\x9f\x6d\xe2\xcf\xe5\xd9\xf1\xe5\x6a\x36\x33\x23\x74\x08\x62\xeb\x86\xde\xc4\xdb\x59\x10\x2d\x7d\x0f\x3d\x70\xe3\x17\xd4\xf1\xe7\xf2\x82\xf1\xe5\x79\xc1\xeb\xd9\xe2\x0e\x01\x1d\xc0\x6c\x55\x74\x60\x6e\x0b\x68\xca\x43\x05\xc2\x5e\xb8\x16\xfc\xb1\x8f\x06\xe8\x34\xd8\x93\xfa\xbb\x17\x90\xfa\x42\xee\x7b\x88\xe2\x0c\xe0\x5d\x27\xaf\x9f\x1f\x66\x57\xb8\xfe\x61\x41\x1a\xa1\xa4\x37\x9b\xd3\x22\x09\xcc\x7a\xc9\xa3\x7e\xcb\x93\xa8\xc3\x66\x31\xf2\xaf\x59\xe6\x8f\xa0\x7c\x93\x9e\x03\x5a\x7c\x3e\x91\x02\xe1\xbe\x90\xa6\x2d\x80\x1e\x84\xc9\x8b\xcf\x23\x37\xc9\x85\xf6\x45\x88\xd6\x1c\xbb\x3e\x60\xd3\x28\xc6\xec\x27\x0d\xdc\x42\xda\xfa\x8a\xb1\xce\x0b\xe2\xa6\xd3\x99\x66\xb7\x2f\xa2\x20\x04\xf6\xb8\xa3\x10\x93\x17\x9c\x03\x11\x77\x11\xd5\xcf\xbb\x88\x8a\xaf\xa3\x3c\xfb\x63\xe1\x9e\xc1\x17\xac\x1a\x11\x80\xb1\x6a\x4c\xd3\x03\x95\x5c\x14\x13\xe2\x9a\x31\x64\xf2\x9a\x31\x62\xd6\x51\x9e\x83\xae\x88\x41\xac\xf9\x2c\x0a\x9a\x9f\x03\x71\x05\x3d\x90\x5d\xec\xbc\xe0\x1c\x88\xdb\x61\x54\xda\xb2\x81\xcb\x63\xe6\x10\xc6\x2d\x53\xd2\xbf\x20\xfc\xe3\xc4\x33\x09\xd1\x6c\xe2\xbc\xf4\x20\x21\x27\xca\xb8\x88\x5e\x46\xcd\x94\x42\x86\xd8\xca\xb1\xcb\x1a\x51\x4f\xde\x9e\x1b\x14\x3b\xde\x86\xf9\xd9\x76\x05\x2e\x31\xe0\xbb\x70\xa9\x41\x13\x2e\xb1\xea\xbb\x70\xa3\x1d\x10\x41\x64\x33\x20\x3e\xc3\x04\xb2\xc1\x44\x97\x60\xaf\xc9\xfc\x6c\x06\x0a\x1b\xac\xf0\x47\x60\xa3\x15\x28\x6c\x30\xc2\x1f\x81\xad\x8d\x90\x09\x1c\x39\x85\x27\xe1\xc0\xc5\x89\x7f\x29\x83\x2f\x68\x8e\xb1\x92\x23\xbc\x0d\xab\x56\x37\x63\x31\x74\xfa\x6f\x03\xc3\xf1\xd4\x42\x6c\x05\x57\xb8\xb8\xe2\x05\x36\x87\x96\x1f\xa2\xc8\x72\xe3\x14\x58\xd7\x3f\xfc\x32\xbc\xef\x17\x56\xf9\x2e\xec\x41\x48\xb6\x17\x2f\x20\x13\xbb\xde\x5e\x31\x2e\x77\x34\xf1\xf1\x37\x18\xde\x46\xba\x3f\xaf\x7f\x34\x76\x11\xae\x34\x72\x9a\xe5\x7d\x18\xbd\x3a\x89\xd7\xf9\x05\x07\x19\x7f\x66\x0f\x49\x02\x72\xa6\x25\x62\x74\xe8\x77\x20\xa6\x93\x2d\x11\xa3\x2f\xbf\x03\xb1\xd4\xba\xbc\xf3\x66\xcc\xf2\x3e\xdf\x54\xb7\x7e\x71\x97\x9d\x36\x46\x79\x33\xfe\xb4\x85\x90\x8d\xa2\x2c\x58\xe7\x7f\xa4\x90\x4b\xe0\x71\xba\x91\xf5\x72\xf9\x3c\x4a\x4a\xd6\x13\x1d\x87\x5a\x00\x09\xe6\xc0\xf0\x3e\x99\x02\x83\xe6\x13\x24\xc7\xac\x4c\xd8\xc8\x3f\xb1\x6c\x56\x04\x09\xf3\xb2\x48\x98\xd6\xfe\xa8\xd4\xf3\xc0\xf5\x33\xca\x66\x1e\xa3\xe8\x8e\x14\x26\x2e\x9b\xf8\xa8\x54\x0f\x5c\x86\x99\x9f\xc1\xb2\xcf\xc2\xb2\x4f\x6a\x18\x84\xdf\xe9\x1e\xec\x67\x61\xe3\x78\x9d\x03\xd8\xcf\xae\x6a\x17\x2f\x93\xf0\x3d\xa3\x62\x7c\x9f\xc6\xe5\x6c\x78\x25\xa4\x05\xfd\xc4\x3b\x98\x65\x3e\x9b\xeb\xd4\xe4\x78\xfc\x56\xda\x38\x05\xa5\xef\x21\xf9\x43\x02\x47\x5d\x3d\x78\x83\x9c\x80\x71\x29\xbe\xd5\xc2\xa5\x0b\x29\x0d\x7d\x88\xe0\x73\x32\x1e\xb0\xe7\xf1\xf9\xd0\x61\xee\x8c\x9c\xcb\x9c\x04\x9d\x05\xef\xc1\xf6\x93\x13\x38\xaa\xc0\x02\x38\x12\x9c\x0f\x1e\x27\x27\x70\x54\x1c\x06\x70\x24\x38\x1f\x3c\x4e\x4e\xe0\xbe\x92\xf6\xa8\xee\x97\x9f\x19\x7d\xd1\xcd\x1a\xb8\xe8\x13\xbb\x5f\xd0\x7a\xa0\x88\xb0\xc0\x76\xbb\x8d\x6f\x05\x50\xab\x10\x8b\x14\x2b\x94\x79\xbc\x93\x0d\x60\x0c\xdf\x03\x5e\xd7\x05\x3d\x1e\x1f\xb8\x39\x90\x7d\x71\x0d\xd2\xde\x14\x52\x0d\x4f\x78\xd8\xda\x62\x4a\x79\xb1\x47\xbc\x61\x8b\x9d\x1a\x06\x2e\x77\x18\x1d\x37\x11\x2e\x68\xd5\x4c\xf2\xbe\x8b\xea\x6c\xdc\x7d\xea\xcc\xe9\xaa\xab\x87\x0b\x5a\x00\x93\x6c\xc9\x3d\x73\x1b\x3d\xa1\x94\x63\xe9\xb1\x57\x47\xf7\xfa\xd6\x6a\x6e\x61\x7f\x0c\x75\xdb\x8a\xb1\xde\x5d\xfa\x60\xcc\x9d\x56\x8f\x90\xa5\x1a\xf8\x4e\xd4\xe2\x51\x83\xab\x7e\x6e\x94\x7a\xce\xf7\xbb\x37\x19\x4e\xdf\xbc\xd9\x70\xe5\x4d\x4d\x57\xda\xe4\x19\x8e\x78\x28\xcc\x15\x3c\xf1\xa9\xb7\x84\xf5\x3a\xd5\x2b\x7d\x52\xc5\xd4\x72\xa9\xbd\xb9\xd5\x04\xc0\x44\x52\xec\xaf\xd8\xcf\x0b\xef\x27\x7a\x86\x9d\xa2\xd6\x6e\xf9\x42\xf0\x4d\x17\x3d\xad\xf3\x79\x01\x9d\xc3\x25\xf1\xd1\xe9\x13\xae\xd4\x15\x66\x1b\xb3\x4b\xca\xdd\xb8\x4f\x43\x1c\xd8\xb9\xd9\x2b\x27\xd1\x8d\xd3\x3d\xfc\x3e\x81\xb1\x85\xf4\x8b\x18\x04\x91\x0d\x30\x28\x7d\x6c\xbc\x1c\x1e\x54\xef\x5b\x47\x11\xd2\x77\x03\x3e\x6b\xde\xc1\x1d\x68\xa1\x76\x8d\xc8\xc8\x51\xb1\xa0\x74\xed\x1b\xf8\xfa\x21\x57\xcf\x1b\x22\x96\x9e\x12\xd7\x56\x3c\x71\xef\x42\xa1\xa7\xc1\xd8\x01\xf8\x2e\x72\x54\xee\xa8\x79\x7d\xb8\xe8\x5b\x72\x63\xb9\x05\xca\x36\x45\x9b\x65\xa9\xc9\xe2\x67\x7e\xad\x49\xee\x2c\xa7\x30\x96\x6b\x22\x78\x12\x52\x98\x03\x35\xe1\xbd\xea\xfb\x47\xde\x3d\x57\xb7\x7e\xcc\x43\xf0\x6d\xf2\x8a\xc3\xe0\x8e\x69\xd0\x76\x54\x46\x58\xa5\x8f\xf4\x68\x63\x19\x94\x25\x7b\x61\xbf\xe9\xbe\x90\xdc\x69\x65\x55\xa7\x88\x58\x1b\x7e\xa7\xc5\x0b\xb7\xf0\x57\x1a\x95\xee\xc1\xf4\xd8\x8b\xae\x90\xe7\xbe\xa8\x39\xa8\xef\x57\x9e\xf5\x9c\xf6\x51\xd3\x13\xcd\xd6\xa2\x5d\xda\x4d\xda\x5d\x1e\xf7\x45\x3b\xe8\x3d\xad\xcc\x57\x9a\xad\x97\xcc\xf8\x6e\x30\x52\xa4\xee\xbf\x9e\xee\x57\x2e\x41\xe0\x16\x26\x60\x0f\x6c\x36\x0a\xf7\xc2\x7e\xd4\x5c\x76\xe4\xb6\xec\x94\xb4\x42\x4e\x6a\x32\xc1\x98\x84\x94\x81\xe4\xbf\x75\x92\x9b\xf2\x59\x74\x02\x4b\x57\x6e\xd1\x29\x0d\x57\x48\x96\xbd\x42\x5b\x6a\x18\x95\xf4\x01\x82\x18\xa7\xbc\x12\x79\x77\x00\xc7\xfc\x64\x2b\x05\xd7\x9f\x0c\x36\x25\x9f\xc4\x7e\xa6\x86\x96\x16\x55\x2d\x83\x63\x69\x49\x9d\x16\x31\xb5\x6a\xcc\x05\x8a\xaa\xf6\x35\x19\xab\x86\x4f\x85\xb4\x22\xa6\x9f\xc0\x37\x98\x79\x51\xed\x89\x39\x78\x49\xe7\xb2\xcd\x5a\xe8\x5c\x5a\x0c\x87\xd1\x56\xec\x65\x24\xde\x92\x62\x16\x9e\x95\xaa\x97\xae\xb1\x64\x8a\x86\xb1\x29\xc1\x32\xd6\xa4\xd8\x13\x9e\xc1\x84\x8b\xd7\x95\xff\x4b\xba\xd4\xd9\x3e\xb9\x69\xb2\xc0\x88\x4d\xea\xa4\x71\xdb\x8e\x3c\x7a\xb6\xf3\x27\x87\x53\x41\x4e\xf6\x1e\x3e\x5a\xb5\x34\x40\x9f\xb3\xbc\x1e\xf5\x35\xb0\x44\x06\xb8\xdc\x74\x5e\x42\xc0\x09\xc7\x79\xe0\xd1\x9f\xd0\xad\x6f\x11\xf6\x21\xc7\x70\x03\xe2\x88\x18\x02\x37\xf1\x6b\x0b\xa3\xcb\x7d\x36\x07\x8a\x48\x2a\x6c\x1a\xcf\x5f\x39\x4a\x77\x70\x0f\x8f\x93\xe8\x2b\xd5\x52\x36\x86\x37\x85\xfb\xeb\xf5\xa6\x9a\x6b\xbf\xa1\xb2\x68\x57\x0f\x71\xad\x3b\xa5\x83\x9b\x5d\x3c\x34\xfc\x7f\x51\xb3\x56\xd5\x70\x55\xc9\x02\x70\x5d\x49\xdc\x00\xef\xed\xc1\x0f\xfc\x2b\x8d\xaa\xa2\xf1\xca\x62\x85\x91\xbe\x1e\xc4\x46\x28\x31\x69\xe3\xfb\x82\xb7\x6c\xe2\x8c\x7f\xfe\xe9\xeb\x97\x80\xf5\xde\x63\xf6\x5b\xf8\xa4\xa4\xe5\x42\x82\x66\xd5\x0e\x4a\x43\x07\x77\x55\x1a\x1d\x49\x0e\xe6\xd4\x35\x09\x33\x17\x0c\xea\x01\xca\x93\x1a\xf8\x8f\xed\xa4\x63\x0c\x44\xc1\x37\xc9\x5f\xb8\xe8\xc3\xd5\x46\xa1\x4b\xf3\x56\x98\x3e\x61\xb7\x07\x9a\x89\x17\xce\x86\xf5\xf0\xd5\xcf\x01\x06\x0c\x30\x72\x8b\x99\x47\x48\x61\x05\xef\xaf\xa0\xe7\xc7\x2d\x74\x4a\xee\x4c\x9a\x3a\xfa\xa4\xbf\x10\x5a\x31\x80\x9a\x6c\x21\x35\x53\xd7\x81\x31\xbf\x1e\x34\x98\x83\x72\x71\x15\xe4\x4f\x5c\xf4\x93\x86\x4a\x7e\xb0\x76\xbc\x01\xbe\x03\xed\xbc\x1e\xe9\x7d\x93\x1f\x24\xff\x6f\x59\xa7\x78\xcb\xdb\xa9\x0c\xb0\xa2\x0e\xac\x8a\xad\x96\x3b\xe4\xaf\x3c\x75\x9c\xff\x3f\xd5\x5e\x8b\x65\x15\xae\x9c\xb1\x7a\xe5\xf7\x9b\xd7\xd5\x7b\x4f\x91\xbf\x58\xbc\x17\xa6\xce\x1f\x57\xea\x6d\xbc\x56\xcb\x57\xa9\xc0\x42\x6d\x4f\xae\xcb\x45\xbe\x5c\xaa\xc9\xdb\x3a\x2c\xd3\xd8\xfc\x15\x25\xb2\x98\x17\x9c\x41\x62\xae\xae\xc5\x92\xa5\x3d\x84\x8f\x39\xf4\x68\xab\x2f\x39\x81\xca\xce\xe5\x4a\x9a\xd0\x17\x4b\xe0\x4f\x00\x67\xfb\x4e\x33\xdd\x5f\x3c\x93\x76\xde\x5f\x26\xcd\xd4\x0f\x9a\xb9\x7c\x2b\xf1\x39\xa9\xc9\x65\xd3\x6c\x97\x38\xd3\x2d\xe4\x6f\x4b\xe5\x4f\x59\x9d\x7e\xf6\x20\x5b\x6e\x7d\x11\xf1\x3b\x2e\x9d\xa5\x6c\xe8\xd2\x89\x91\x46\xcf\x5d\x6f\x5e\xae\x8a\xc1\xbd\xe6\xb2\x0a\x99\xfa\x63\x4a\xd3\xfe\x2d\x1e\x5a\x74\x85\x37\x2e\x14\x4c\xb3\xb8\xd0\x6c\xb9\x56\x4c\x50\xd3\x2d\x6c\x33\x98\xef\xbf\x01\x00\x00\xff\xff\x4c\x5a\xca\xae\x26\x27\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 10022, mode: os.FileMode(420), modTime: time.Unix(1548883737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x68\xec\xc5\x01\x72\xd8\x24\xfd\x41\x84\xb6\x40\x77\x93\x76\xd3\x76\xdb\x34\x6e\x4e\x8b\x1c\x68\x99\xb6\xd9\x48\xa2\x97\xa2\x8c\x1a\x45\xdf\xbd\x20\x39\xa4\x38\x23\xc9\x8e\x93\x1c\xd6\x87\x44\x1c\x91\x1f\x67\x3e\xce\x0c\x67\xd4\x14\xbc\xe4\x9a\xfd\x25\x2b\x91\xc1\xf3\x2f\xb3\x3f\x7e\xcf\xb2\xa6\x58\x8b\x8a\xb3\x7f\x33\xc6\x3e\xb7\x42\xef\x72\xf6\xa7\xfd\x97\x31\x56\xb5\x86\x1b\xa9\xea\x9c\x7d\x84\xa7\xec\xbf\x2c\x7b\x03\xef\xcd\x6e\x23\xfc\xa3\x5b\xfb\x86\xdd\x37\x42\x67\x8c\xb5\x8d\xd0\x53\xb9\xc8\xd9\xcd\xd5\x49\x1e\x84\xfe\x6d\x03\xaf\x9b\xe9\x49\xce\x3e\x59\xc9\xc3\xc4\xbd\xbc\xd5\xea\x6f\x51\x98\x8c\xb1\x8d\x7f\x02\x80\x53\xd6\x94\xed\x2a\x67\x33\xa3\x65\xbd\x3a\x65\x35\xaf\x44\x37\x12\xf5\x56\x6a\x55\x57\xa2\x36\x37\x57\x41\x7c\x92\x27\x68\x11\xb9\xe9\xa0\xfd\xe6\x20\x87\xfd\x7f\x12\xdc\xb4\x5a\xd8\x59\x4b\x78\x74\xb3\x40\x0e\xb3\x66\x42\x6f\x65\xe1\x66\x35\xf0\xe8\x66\x81\x1c\xcf\x62\xcd\x46\x14\xc9\xd4\x99\x1d\xa6\xd3\xad\x00\x96\xdc\x89\x52\xf0\xc6\x01\x6b\x78\x74\x33\x41\x0e\xb3\xae\x3b\x73\xed\xcc\xc4\x7a\x3f\x3b\x79\xdf\x5f\xc1\xb6\x5c\x4b\x3e\x2f\x41\xfb\x42\x0b\x13\xb4\xb1\xcf\xf8\x1c\xae\xff\x31\xa2\x6e\xa4\xaa\x9d\x11\x76\xaf\x20\x80\x9d\xc2\x70\x64\x59\xc2\xf6\x35\x5e\x49\x67\x62\x02\x92\x7d\x3a\x2a\x08\xc2\x1d\x91\x06\x15\x84\xae\x64\x13\x37\xef\x46\x76\x91\x75\xf4\x89\xf7\xdd\xe8\xc9\xce\x7d\xc3\x08\x3c\xf8\xbd\x16\xdc\x88\xa0\x7a\xc6\x58\xe1\x04\xa0\xf4\x14\xe4\xd1\xc1\x6e\xea\x4d\x6b\x88\xbf\xdd\x6f\x16\x18\xa2\x75\x82\x63\x20\x40\x0b\x30\x3f\x6a\x01\x86\x4f\x41\x9e\x07\xd2\x02\xc4\x5d\x9c\x1f\x21\xc0\xf5\x22\x04\x78\xde\x14\xe4\x79\xf0\xd5\x00\x31\x8b\xf3\xa3\x21\x9d\xc8\x1b\x72\x0c\xc4\x95\x28\x05\xd2\x62\xe1\x04\xc7\x40\x60\x43\x82\x3b\x22\x6b\x6c\x1c\x4d\x93\x20\x8b\x00\x76\x40\x30\x67\x7e\x7d\xb4\x8e\xe0\x22\x13\x9f\x85\x8b\x4d\x0e\xb8\xc8\xee\x67\xe1\x02\x0f\x49\xcc\x47\x1a\x92\x20\x9f\x26\xef\xf3\x34\xfa\x03\xec\x35\x5a\x1f\x69\xc0\xb0\x9e\x85\x97\xc0\x02\x0b\x18\xd6\x93\xf0\x12\xd8\x3e\x09\x31\xab\x25\x4e\x61\xd3\xd9\xd4\x67\x38\xcb\xa3\xfd\xdf\xb1\x6a\x47\x23\x96\xa7\x58\xc1\x11\x9e\x86\xd5\x37\x37\x62\xb1\xe4\xf4\x9f\x06\x16\x8c\xa4\x29\x18\x0e\x3b\x88\xa7\x71\x42\xce\xa2\x30\x12\x17\x04\xc8\x54\x8a\x08\xe7\xfc\x0c\xc4\x60\x30\x45\x84\x23\x7e\x06\x22\xb5\x9a\xe6\xde\x0e\x93\xde\x2b\x79\xef\xf6\x21\x39\x75\x3f\x19\x34\x43\xbf\xda\x46\x09\x47\x4e\xf6\x9d\xff\xb1\x0f\xd7\x3f\x5e\xbd\x88\x2a\xb0\xc0\xd6\x51\xe9\x3d\x17\x0d\xb1\x65\x55\x72\x1b\x4e\x5b\x3c\xf6\x25\x59\x22\x08\xbb\x7c\xf2\xf5\xd3\xe4\x61\x92\x7d\xef\x7f\x51\xcd\xd7\xe4\xe6\x07\xff\x63\x73\x51\x14\xe7\xe7\xcb\x4b\xfe\xad\xf8\x8a\x5f\x9e\xcf\x05\x7f\xcb\xcf\xce\xf8\x25\x9f\xf3\x8b\xb3\x8b\x8b\xb7\x5f\x5f\x16\xc5\xc5\x37\x97\xdc\x5f\xdb\xae\x8c\x74\x57\xb6\x7d\x72\xd7\xb5\xaf\x10\xed\xed\x2f\x2a\x2e\xcb\x50\xff\x4d\xf0\xf5\x8f\xec\x0a\x4e\xb5\xc8\x5d\x1d\x0c\x25\x01\x14\x79\x1e\x1e\x06\x64\x07\x7a\x6d\x5b\x59\x25\x9a\x86\xaf\x44\xba\xaf\xa5\x3a\x1d\xaf\x79\xb3\x46\x7a\x71\x2d\x6a\xf3\x81\x48\xb5\x58\xa6\xc3\x21\x15\xc3\x95\xe8\x54\x0c\x05\xe6\x61\x15\x0b\x55\x55\xbc\x5e\xa4\xe8\x69\x05\x3d\xc1\xd5\x29\xba\x75\xfc\xf2\xd6\x66\xe6\x44\x7f\xa5\x8d\x65\xd4\xd6\x53\x8e\xce\xb1\x0c\x6e\xdf\x59\x5d\x0f\xd9\x95\x66\x78\x67\x5b\x5a\xb1\x62\xfb\xa8\xe2\x85\x2a\x95\x3e\x02\xbf\x4b\xef\x40\xa2\xcd\xb8\x64\x8f\x47\xb1\x4b\x11\xb7\xbc\x6c\x31\x59\x85\xc2\x36\x0d\x91\xee\x9d\xc0\xba\xe9\x10\x0b\x5b\xa1\xa3\x5f\x76\x95\xf7\x3e\x1e\x89\x5d\x8c\xc9\x66\x06\x97\xc8\x3b\xa5\x4a\xc1\x6b\xec\x24\x3e\x19\xa7\x9e\x62\xcf\xf3\x10\x9b\x9b\xf6\x4e\x7c\x6e\x45\x63\x88\xf4\x37\x59\x49\x24\xab\x44\xa5\xf4\x6e\x60\xb2\x7f\xd1\x9b\x6f\x6c\x2c\xd6\xae\xca\xfe\x59\xf3\x42\xdc\x0a\x2d\xd5\xe2\xd0\xc1\x85\x62\xd6\x99\x11\xba\x83\xc3\x0e\x8f\xb9\xe7\xda\xc8\x25\x2f\xac\xcb\xfa\x0e\x80\xb1\xb5\xe0\x0b\x08\xf1\x3c\xc4\xba\xd3\x92\xcb\x72\x48\xde\x18\x6e\x04\x0e\x56\xd2\x94\x8c\xb5\x24\x6e\xe5\xc7\x7e\x8e\x38\xe2\xa8\x1d\x13\xa1\x33\x70\x4c\xc0\xe0\xc0\x61\xa6\x3d\xb3\xd7\x79\xa3\x1a\x69\x94\xde\xe1\xc8\x87\x4a\x24\x4a\x56\xd2\xdc\xeb\x92\x48\x6e\xb5\x32\xaa\x50\x48\xac\x1b\x7e\xab\xe5\x96\x1b\xf1\x2b\x8e\x18\xfb\xa2\x9d\x97\xb2\x20\xf2\xd0\x54\x93\x96\xba\x68\xb5\x4d\x88\x77\xa4\xa3\x49\xda\x60\xd2\x04\x87\xb6\x9b\x34\xdd\xd0\xcf\x92\x98\x4a\x8f\x68\xb0\xef\x5c\x49\xf3\x4e\xf3\xba\x58\x1f\x4c\x23\xb8\xd0\xf1\x99\x2a\xca\x0e\xe5\xa9\x6a\xa3\x6a\x81\x13\x29\xcd\x0a\x24\xf1\xec\xf5\x11\x55\x2f\xe5\xaa\xf3\xe8\x3d\x3e\xd3\x5d\xba\xa9\xf3\x8c\x29\x3e\x14\x4f\x43\x55\xc9\x48\x64\x51\xbd\x7a\x91\xf3\x5a\x01\xd1\xfb\x56\x80\x92\xc4\x98\x75\xb4\x6b\x26\xd6\x51\x6e\x52\x67\x9b\xc9\x55\x0d\x99\x81\x46\xcf\xc8\x3b\x6a\x3a\x3d\xee\x31\x2a\x06\x68\x5d\xca\x5a\x36\xeb\x34\xfd\xef\x39\x70\x26\x6d\xd5\x95\xb9\xbf\xe8\x0b\x43\x24\xc3\xef\x35\x1e\xd9\xfd\x14\x30\x57\xea\xb1\xe2\xfa\xd1\xee\x08\xf7\x0d\x3e\xb4\xee\xd3\x1b\x39\xa0\x54\x99\xf4\x5b\x45\x5f\x99\x24\x2b\xa7\x68\xd1\x27\xb1\x70\xdf\xde\xe1\x0e\x4c\xf7\x4e\x3f\x2f\xf4\xf7\x1e\xdc\xe2\xb8\xc2\x89\xae\x1d\xa9\x9a\x40\x8f\x5b\xa5\xfd\xa1\x4c\x1e\x06\x5c\x63\x9f\x71\xef\x55\x6d\xb8\xac\x6d\xdd\xaf\xb4\x19\xb2\x31\x62\x3b\x3b\xed\x2c\xc2\x26\x39\xf0\x5e\xdd\x30\x04\x1a\xbf\x4b\xf4\xc9\xfb\x72\xca\x88\x5e\xb9\x97\x1a\x42\xbf\x2d\x3c\xc1\x10\x5c\x5d\x8e\x16\x93\x84\xaf\xd8\xd3\xf7\x77\x38\x54\x5b\xf6\x72\xc4\x48\xad\xd9\x79\xc5\xb8\xb7\x8c\xd7\x88\x83\x1f\x78\x31\x57\xa8\x83\x3b\xcc\x14\xb1\x6b\xf0\xba\x1b\x55\x93\x5e\x1a\x98\x84\x61\x8d\x07\x72\xdc\x5e\x9d\x4f\x07\x83\xfc\x34\xcd\xff\x44\x4e\xb5\xda\x17\x93\xb8\x99\x46\xca\x0d\xf5\xd9\x4e\x37\x5b\xa5\x92\x3c\x87\x1a\x56\xbc\x10\x72\xc5\xb1\xfb\x75\xdb\xf5\x5c\x6d\xa5\x79\x8d\x3d\xe3\xff\x00\x00\x00\xff\xff\xd4\x02\xa0\x21\x1d\x1a\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6685, mode: os.FileMode(420), modTime: time.Unix(1519934254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1519789868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


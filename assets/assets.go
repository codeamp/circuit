// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x92\xe3\x26\x10\xbe\xeb\x29\x70\xed\xc5\x53\x35\x4f\xa0\xe3\xee\x6c\x92\x4d\xb2\x89\x63\x67\x4f\x53\x7b\x60\x64\x6c\x93\x91\x84\x17\x90\x13\x57\x2a\xef\x9e\x02\x1a\xd4\x8d\x90\x3d\x9e\xdd\x54\xe5\x62\x8b\x16\x6a\xfa\xfb\xe8\x3f\x30\x0d\x6f\xb9\x66\xbf\xcb\x4e\x54\xf0\xfc\xe3\xe6\xd7\x5f\xaa\xca\x34\x07\xd1\x71\xf6\x77\xc5\xd8\x97\x41\xe8\x73\xcd\x7e\x73\x7f\x15\x63\xdd\x60\xb9\x95\xaa\xaf\xd9\x47\x78\xaa\xfe\xa9\xaa\x37\xf0\xde\x9e\x8f\x22\x3c\xfa\x6f\xdf\xb0\x4f\x46\xe8\x8a\xb1\xc1\x08\xbd\x94\xdb\x9a\x7d\x78\xb8\xab\xa3\x30\xbc\x35\xf0\xda\x2c\xef\x6a\xf6\xe8\x24\x9f\x17\xfe\xe5\x4a\xab\x3f\x44\x63\x2b\xc6\x8e\xe1\x09\x14\xdc\x33\xd3\x0e\xfb\x9a\x6d\xac\x96\xfd\xfe\x9e\xf5\xbc\x13\xe3\x48\xf4\x27\xa9\x55\xdf\x89\xde\x7e\x78\x88\xe2\xbb\x1a\x69\x4b\x9a\xcd\xa8\xda\x2c\xe1\x61\x23\xb8\x6e\x0e\x69\x7a\x18\x7e\xe8\x8f\x83\x75\xd6\x81\x14\x0c\xfc\x4e\x70\x3b\x68\xe1\xd4\xec\xe0\xd1\x63\x00\x39\xcc\xda\x08\x7d\x92\x8d\x9f\x65\xe0\xd1\xcf\x02\x39\x9d\xc5\xcc\x51\x34\x68\xea\xc6\x0d\xf1\x74\x27\x80\x4f\xd6\xa2\x15\xdc\x78\xc5\x1a\x1e\xfd\x4c\x90\xc3\xac\xf7\x23\x1f\x6e\x26\xa2\x27\xcc\x46\xef\xa7\x5f\xb0\x13\xd7\x92\x3f\xb5\x60\x7d\xa3\x85\x8d\xd6\xb8\x67\xba\x51\xef\xff\xb2\xa2\x37\x52\xf5\x1e\x84\x5b\x2b\x0a\xcc\x72\x6e\x57\x1e\xd3\x47\x33\xba\xd0\x1e\x8d\xb2\x25\xda\x8b\x5c\x01\xa0\x47\x8b\x8f\xfc\x64\x1a\xd6\x99\x34\x9a\x20\x74\x27\x4d\x5a\x7c\x1c\xb9\x8f\x5c\x78\x2c\x82\xc7\x27\xff\xf7\x4e\x1f\x47\xe0\xf7\xef\xb4\xe0\x56\x44\xd3\x2b\xc6\x1a\x2f\x00\xa3\xa3\xb7\x25\x3f\x8b\x1e\x86\xbd\xf4\xd3\x71\x4b\x55\x0c\x5e\x70\x8b\x0a\xb0\x02\xe0\x27\x2b\x00\xf8\x12\xe4\x75\x24\x2d\xaa\x58\xa7\xf9\x49\x05\xf8\x63\x52\x01\xee\xb8\x04\x79\x1d\x1d\x38\xaa\xd8\xa4\xf9\x09\xc8\x28\x0a\x40\x6e\x51\xf1\x20\x5a\x41\xac\xd8\x7a\xc1\x2d\x2a\x28\x90\xe8\xa3\x04\x8d\x0b\xae\x25\x8a\xbc\xa4\xc0\x0d\x32\x9d\x9b\xf0\x7d\x42\x97\xe9\x25\x10\x5f\xa5\x97\x42\x8e\x7a\x09\xee\x57\xe9\x05\x1e\x50\x44\x26\x1a\x50\xe4\xe3\x88\xad\x71\x4a\x88\x6a\xdf\x93\xef\x13\x0d\x54\x6d\x60\xe1\x6b\xd4\x02\x0b\x54\x6d\x20\xe1\x6b\xd4\x4e\x49\x48\xa9\x0e\x39\x85\xcb\x71\xcb\x90\xf6\x1c\x8f\xee\x7f\x64\xd5\x8d\x66\x90\x63\x5d\xd1\x11\x5e\xa6\x6b\x0a\x37\xe9\x62\x68\xf7\x5f\xa6\x2c\x82\xcc\xf3\x32\x6c\x76\x14\x2f\xd3\x84\x9a\x25\x61\x22\x2e\x0a\x08\xd4\x5c\x23\xec\xf3\x2b\x34\x46\xc0\xb9\x46\xd8\xe2\x57\x68\xcc\x51\xe7\xb9\x77\xd4\x99\xd7\x95\x7a\x52\x7d\xb2\x9c\x7a\x99\x8c\x3c\x43\x7f\xb3\x85\x10\x47\x20\x0b\xec\xfc\x47\x80\x5c\x33\x86\xcb\x5e\xc2\xe5\x7a\x33\x54\x1c\x97\x03\x1d\x87\xbe\x0e\x09\x52\xdb\x14\xca\xfd\x02\xea\x2b\xad\x6b\xa4\x23\x99\x50\x88\xbb\x95\xe3\x54\x36\x02\x41\xc2\xb4\x2c\x12\xc6\xb5\xdf\x2a\xf5\xdc\x71\xfd\x8c\xaa\xea\x13\x88\x56\xa4\xc9\x5c\xdc\xd5\x6e\x72\x2b\x78\x0f\xe5\xde\x37\xad\xbe\xd4\xbb\x27\x5f\xe6\x61\xaa\x6b\x75\x3a\x2e\xdb\xd8\xd7\x2c\x68\xdb\x90\x11\x10\x9c\x71\x5b\xfb\xae\x1b\x74\x43\xc7\x18\xd4\xc3\x20\x5b\x21\x2f\xf7\x4e\xd6\x09\x63\xf8\x5e\xe0\x75\xdd\x9e\xe0\xf1\x81\x9b\x03\xb1\x8b\x6b\xd1\xdb\x1f\x32\xa9\x16\x3b\x3c\x2c\x99\x18\x4b\xa9\x37\x31\x76\xab\xd7\x4d\x6c\x54\xd7\xf1\x7e\x8b\xb5\xe3\x7e\x7d\x41\x5b\x5d\x52\xad\xc2\xe7\x83\xcb\xe8\xc8\x7e\xa5\xdd\xb6\x3f\xba\x3e\xcc\xd3\x39\x97\xf9\xdd\x3b\x67\xeb\x35\x5c\xb8\x32\x78\x6c\xb8\xfd\xa5\xf8\x72\xc3\x9f\xc5\x19\x0f\xa5\x79\x10\x3b\x3e\xb4\x16\x79\x8e\x43\xd0\x2a\x7d\x83\x11\x63\xed\x00\xa6\x5d\x3a\xcf\x0c\xc9\x16\x3e\xf1\x76\xa0\x8c\x36\x8a\x02\x2f\xed\x4c\xf0\x14\xe7\xcb\x25\xaa\x4e\x42\x27\xe7\x1d\x7b\xfd\x4b\x64\x67\xb8\x1c\x1f\x1b\xa8\x50\x34\x90\xf0\x51\x87\xb8\x93\xdb\xf4\x2b\x94\x37\xc7\x61\x2d\xbe\x0c\xc2\xd8\x4c\xfa\xb3\xec\x24\x91\x75\xa2\x53\xfa\x5c\x98\x1c\x5e\x4c\xe6\x5b\x17\xb0\xbd\x6f\xe1\xbf\xd7\xbc\x11\x2b\xa1\xa5\xda\x5e\xdb\xb8\xd8\x29\x7b\x18\xf1\xe8\x71\x3d\x2a\x28\xf7\x5c\x5b\xb9\xe3\x8d\xf3\xeb\x70\xbc\x60\xec\x20\xf8\x16\xf2\x40\x1d\x13\x82\xb7\x92\xcb\xb6\x24\x37\x96\x5b\x41\x23\x3a\x3b\xf1\xcc\x9d\x77\xfc\x97\x1f\xa7\x89\xe4\x86\xad\xf6\x4c\xc4\x63\x87\x67\x02\x06\x57\x36\x13\x1f\xe3\x83\xcd\x47\x65\xa4\x55\xfa\x4c\xd3\x03\xb4\x39\x49\xb2\x97\xf6\x93\x6e\x33\xc9\x4a\x2b\xab\x1a\x45\xc4\xda\xf0\x95\x96\x27\x6e\xc5\x4f\x34\x62\xdc\x8b\xe1\xa9\x95\x4d\x26\x4f\xc7\x78\x73\x50\x7f\x3e\x88\x63\xab\xce\x0e\x26\xf8\x6f\x7e\xb6\x6f\x06\xed\x92\xe9\x3a\x3b\x45\xa1\xf3\x78\x76\x1a\x8f\xe7\xff\xec\xf4\x0f\x07\xeb\x2c\xd4\xf0\xce\x15\xcf\xba\x7b\x69\xdf\x6a\xde\x37\x24\x93\x37\xaa\xb7\xb2\x1f\xd4\x60\x82\xf9\x24\x17\x09\x52\x3a\xa7\xf5\x31\x96\x42\x84\x79\x36\x63\xd1\x86\x2d\x64\xce\x24\xbb\x12\xc4\xaa\x3b\xaa\x5e\xd0\xc4\x9e\x27\xa0\x2c\xc7\x5d\x74\x47\xd5\xef\xe4\x7e\x0c\x9e\x0b\xee\x39\x36\x3c\xd8\x4f\xe7\x0c\x2f\x85\x6e\xa9\x11\x9d\x09\xe2\x89\x5d\x83\xb1\xaa\x7b\x97\x49\x27\xa1\xfb\xad\x22\x72\x72\x13\x42\xb2\xd4\x1c\xe6\xfc\x4e\x20\xc3\x9c\x33\x86\xdd\x7a\x23\xf7\x3d\xa4\xa6\x3c\x7c\x67\xde\xe5\xd0\x73\x27\x98\xa3\xa2\x40\xf6\x4e\xf6\xd2\x1c\x70\xfd\xb9\xe0\x06\x4c\xba\x1e\xb1\xf2\xbf\xe4\xfe\x24\x91\x11\xd6\x9a\x4f\x2d\xc5\x1c\x44\xc3\xb1\x1c\x50\x74\x23\xc7\xcb\xb0\x8b\xc1\x4b\x8c\x0f\x77\x92\x25\x08\xe8\xb6\xd2\x03\x59\x4f\x12\xea\x7d\xc5\x52\x0f\x4c\xa2\x9c\x78\x0c\x56\x8d\xaf\x86\xa6\xec\xa0\x3a\x45\xa1\x40\xe8\x50\xe1\x0c\x70\xd2\x15\xe0\xb5\xf1\x6d\xce\x74\xed\xe2\x12\xb7\xf5\x9b\xf9\xb7\x33\xcd\x26\xd8\xb1\x52\x3a\x78\xc9\xe2\x73\xc1\x57\x2f\x81\x7b\xa7\x7a\xcb\x65\xef\xce\x55\x4a\xdb\x12\xc6\xa4\xdb\xe3\x74\xb3\x32\x36\x33\x0f\x9c\x74\x52\x25\xa5\xe9\x1a\x68\x4a\xde\xff\xa7\xb1\x9a\x34\xc0\x18\x48\x7e\x95\x73\x1d\xc8\x6b\x9a\xf2\xd9\x1e\x3c\x23\x35\xdd\xb3\x4c\xcd\xb8\xd6\x92\x4f\x32\xdb\x4c\x8b\x3e\xba\xce\xa5\x44\x31\xd7\x5a\x17\x6f\xe2\x29\xa1\xe4\x26\xe0\x66\x3a\x8b\xa5\xfb\x52\x3e\x23\xa5\x8e\x92\x50\xb6\xb8\x90\xd6\x2e\xda\x7c\x5f\xcc\x04\xf7\xb8\x6a\x65\xf2\x97\x95\xe5\x4b\xe1\x4c\xef\x39\x88\xc9\xa5\x2b\x10\x6f\xb1\x6b\xf9\xb3\x14\x49\xae\x08\xe8\x87\x90\x66\x6e\x5d\x6f\x5c\x6e\xe2\x80\x7b\xcd\xfb\x59\x7f\x99\x89\xbe\xe9\xeb\x71\x81\xd9\x4d\x7f\xe1\x42\x81\x9a\xd9\x85\x46\xe6\x4a\x69\x9e\x52\x37\x63\x66\xa0\xef\xdf\x00\x00\x00\xff\xff\x20\x45\x99\xe7\xe3\x1c\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7395, mode: os.FileMode(420), modTime: time.Unix(1522450530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


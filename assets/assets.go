// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcf\x72\xdb\x3c\x0e\xbf\xfb\x29\x98\xe9\xc5\x9d\xc9\x13\xf8\xd8\xa4\xbb\xcd\x6e\xbb\xeb\x8d\xdb\x53\x26\x07\x46\x86\x6d\x6e\x25\xd2\x25\x29\x6f\x3d\x3b\x7d\xf7\x6f\xf8\x47\x24\x40\x51\x4a\x9c\xf4\x9b\xf9\x2e\x89\x08\x89\xf8\xf3\x23\x00\x02\xb0\x69\x78\xcb\x35\xfb\x2a\x3a\x58\xc4\xe7\x7f\x6c\xfe\xfd\xaf\xc5\xc2\x34\x07\xe8\x38\xfb\xff\x82\xb1\x1f\x3d\xe8\xf3\x8a\xfd\xc7\xfd\x5b\x30\xd6\xf5\x96\x5b\xa1\xe4\x8a\x7d\x89\x4f\x8b\x5f\x8b\xc5\xbb\xf8\xde\x9e\x8f\x10\x1e\xfd\xde\x77\xec\x9b\x01\xbd\x60\xac\x37\xa0\x97\x62\xbb\x62\x77\xb7\xef\x57\x03\x31\xbc\x35\xf1\xb5\x59\xbe\x5f\xb1\x07\x47\x79\xbc\xf2\x2f\xd7\x5a\xfd\x17\x1a\xbb\x60\xec\x18\x9e\x22\x83\x6b\x66\xda\x7e\xbf\x62\x1b\xab\x85\xdc\x5f\x33\xc9\x3b\xc8\x2b\x90\x27\xa1\x95\xec\x40\xda\xbb\xdb\x81\xfc\x7e\x85\xb8\x25\xce\x26\xb3\x36\xcb\xf8\xb0\x01\xae\x9b\x43\xfa\x3c\x2c\xef\xe4\xb1\xb7\xd7\xec\xc8\x35\xef\xcc\x8a\xad\xf9\x5e\x48\x6e\x95\xf6\xf4\xcc\xfb\xb3\x30\x36\xa8\xfe\x37\xe0\xb6\xd7\xe0\x04\xec\xe2\xe3\x72\x72\x77\xfc\x38\xef\xde\x80\x3e\x89\xc6\xef\x36\xf1\x71\x7a\x77\xfc\x78\xb4\x9b\x99\x23\x34\x88\xc5\xc6\x2d\x3d\xc4\x9b\x4c\x88\x48\xdf\x43\x0b\xdc\x78\x81\x3a\x3e\x4e\x0b\x8c\x1f\x67\x81\x1f\x33\xe2\x8e\x03\x3a\x80\x8c\x2a\x3a\x30\xa7\x02\xda\xf2\x38\x62\xc2\x4e\x5c\x0b\xfe\xd4\x46\x00\x1a\x0d\x76\xd6\x7e\xf7\x41\xd6\x26\x9e\xc5\xc7\x9f\x16\xa4\x11\x4a\x7a\x1c\x9c\x5a\x03\xc1\x2c\xa7\x5c\xe4\x21\x6d\x7a\xac\xf3\x42\x0e\x93\x69\x1e\xd3\xf2\x4b\x0a\x2c\x12\x9e\x21\x2e\x38\xdc\x17\xd4\x41\x05\xd0\x9d\x30\x49\x78\x5e\xb9\x4d\x2e\x56\xaf\x42\xf8\xa5\x60\xf4\x11\x38\xac\x62\x10\xde\x68\xe0\x16\x06\xd5\x17\x8c\x35\x9e\x10\x95\x1e\x0e\x29\xf9\x71\xe1\xd6\x21\x52\x8f\x5b\xca\xa2\xf7\x84\x4b\x58\x44\x2d\xa2\xf9\x49\x8b\x68\xf8\x32\xd2\x93\x83\x15\xfe\x16\x7c\xdb\xaa\x23\x62\x60\xac\x3a\x0e\xdb\x43\x6e\xb8\x2a\x36\x44\x99\x31\x06\x92\xcc\x18\x02\xcb\x48\x4f\x51\x54\x04\x15\xb6\x3c\x93\x82\xe5\x97\xb0\xb8\x85\x16\x88\x16\x5b\x4f\xb8\x84\x05\x35\x64\x70\x6a\x62\x8d\x0b\xe8\x25\x8a\xf6\xc4\xc0\x2d\x0a\x9e\x9b\xb0\x3f\x59\x57\xf0\x25\x26\xbe\x8a\x2f\x35\x79\xe0\x4b\xec\x7e\x15\xdf\x88\x03\x0a\xe1\x04\x03\x4a\x21\x38\xc4\x57\x38\xb7\x0c\x6c\x3f\x92\xfd\x09\x06\xca\x36\xa0\xf0\x16\xb6\x11\x05\xca\x36\x80\xf0\x16\xb6\x63\x10\x52\xce\x44\x4e\xe1\xf2\xe2\x32\xe4\xcf\x21\x4d\xd2\xa4\x39\x61\x39\xe6\x35\x38\xc2\xcb\x78\x8d\xcd\x4d\xbc\x18\x3a\xfd\x97\x31\x1b\x8c\x2c\x13\x79\x3c\xec\x81\xbc\x4c\x1f\xac\x58\x22\x26\xe0\x06\x02\x31\xb5\xe4\x18\xcf\xf9\x15\x1c\x07\x83\x4b\x8e\xf1\x88\x5f\xc1\xb1\xb4\xba\x4c\xd6\x99\x67\x79\x11\xad\x46\xd7\x55\x91\x84\xe7\xc1\x28\x53\xfa\x6f\x13\x84\x30\x8a\xb4\x80\xce\x9f\x64\x90\x2b\x25\xf1\x3d\x99\xec\x72\x95\x25\xba\x4d\x97\x3d\x5d\x87\xaa\x14\x11\x06\x61\x0f\xa1\x3e\xb8\x8a\x17\x32\xbd\x08\x49\xb5\x33\x82\xb0\x52\x09\x61\x5a\x36\x04\x11\x93\x58\x44\x1c\x64\x7f\x50\xea\x7b\xc7\xf5\x77\x74\x0d\x3f\x45\xd2\x9a\x94\xc8\xee\x1a\xfc\xa0\x54\x0b\x5c\xc6\xfa\x20\xd5\x4d\x0b\x21\x2d\xe8\x1d\x6f\x20\xd3\x7c\x99\x70\xe4\x7b\x58\xb1\x3b\xe9\xeb\xa8\x46\xf5\x2e\x17\xc5\x95\x84\x9f\xf6\xa6\xd7\x46\xe9\xa1\x5a\x8a\x5c\x51\x2d\x18\x0a\x0f\x44\x60\xa2\x3b\xb6\xe0\x6d\x7a\xb9\x24\x90\x56\x0b\x30\xb9\x1e\x7a\x9c\x95\x9f\x8b\xbf\x20\x3e\xaf\xdf\x28\x3d\x30\x7a\x4e\x78\xaa\xbc\x07\xe9\x89\xf0\x66\xf1\x9e\xd3\xbc\x7c\xd4\x37\x04\xf9\x88\xf0\x46\xf9\x91\xd3\xbc\x7c\xd4\xf5\x04\xf9\x88\xf0\x46\xf9\x91\xd3\xbc\x7c\xdf\x45\x7a\xc1\xee\xc9\x33\x8f\xde\xef\x78\x75\x5c\xb4\x79\x03\x29\x9d\x8b\x98\x0e\xf9\x75\xbb\xf2\x6d\x30\xc5\x96\xe0\x5a\x48\x28\x4b\x5e\x47\xeb\xc0\x18\x6f\x5f\x96\xeb\xd2\x0c\x5e\x1f\xb8\x39\x10\xbd\xb8\x06\x69\x3f\x15\x54\x0d\x3b\xbc\xac\xa9\x38\x54\x87\xd8\xf5\x5e\xa0\x62\xa3\xba\x8e\xcb\x2d\xe6\x8e\x1b\xe8\x2b\xda\x31\x92\x02\x0c\x9d\x18\xd2\x5f\x69\x97\xc9\x1e\x5c\x2f\xf2\x78\x45\xfb\x3f\x52\xb9\xb8\x77\x4e\xd7\x19\xbb\xdc\xd5\x70\x6c\xd5\xd9\x7d\xbe\xb1\x9a\x5b\xd8\x9f\x43\x97\xb3\x60\xac\x15\x27\x90\x60\xcc\x5a\xab\x27\x48\x12\x3d\x56\x7c\x2b\x2a\x6f\x3c\x4a\xb8\x74\xf2\x48\xe1\x46\x93\xa2\x55\xc2\xf0\x1d\xce\x78\x29\xcc\x2d\xec\x78\xdf\x5a\x94\x5a\x1d\x1e\xad\xd2\xb3\x26\x0d\x13\x06\xe2\xd6\xa5\x6e\xb9\xe6\x42\x79\xac\xd0\xaf\xd0\xe7\xc4\xdb\x9e\x1e\x5b\xa3\x28\xba\xb5\xe3\x0f\xee\xe8\x02\xa6\x76\x1e\x27\xd0\x29\x42\x72\x06\x9c\x3b\xd1\x91\xb9\xc2\x6c\x62\x65\x47\x2f\x20\x3c\x96\x20\x3e\xeb\x3c\xeb\x99\x93\x68\x8e\xfd\x3d\xfc\xe8\xc1\xd8\x82\xfa\x59\x74\x82\xd0\x3a\xe8\x94\x3e\x57\x3e\x0e\x2f\x46\xdf\x5b\x97\x15\xa4\xef\x95\xff\xae\x79\x03\x6b\xd0\x42\x6d\x9f\x0b\xbd\xa1\xc3\xc4\x57\xde\x0b\x42\x8f\x62\xcf\xb5\x15\x3b\xee\x1d\x23\xf4\xf1\x8c\x1d\x80\x6f\x63\xb2\x49\x63\x21\xaf\x25\x17\x6d\x8d\x6e\x2c\xb7\x40\xd3\x46\x31\x5a\x98\x1a\x2c\xf8\x9d\x5f\xc6\xd9\xea\x82\xa3\xc6\x77\x00\xc9\xff\xcf\x1c\x26\x1e\xde\x05\x9d\x8f\xca\x08\xab\xf4\x99\xe6\xa0\xd8\x1e\x24\xca\x5e\xd8\x6f\xba\x2d\x28\x6b\xad\xac\x6a\x14\x21\x6b\xc3\xd7\x5a\x9c\xb8\x85\x7f\xd2\x88\x71\x2f\xfa\xa7\x56\x34\x05\x3d\x8d\xe8\xcc\x41\xfd\xef\xd6\x67\x20\x67\x66\xf4\xdf\x99\xb9\x5f\x31\xb9\x6b\x7a\xed\x72\xf9\x7d\x31\xc8\x78\xcd\x54\xed\xe2\xb9\xdf\x85\x73\x32\xc0\x1e\x52\x1d\x5e\xed\x85\xfd\xa0\xb9\x6c\xc8\xb5\xd4\x28\x69\x85\xec\x55\x6f\x02\x4c\x24\x15\x02\x29\x6d\xc7\xf5\xeb\x50\xaa\x22\x6c\xa7\xdc\xaa\x98\xde\x85\xc4\x9d\x68\xcf\x24\x0b\xd5\x1d\x95\x04\x7a\x4b\x95\x89\xae\xc8\xa5\xb3\x6e\xaf\xe4\x4e\xec\x73\x90\xce\x84\x41\x6e\x48\x70\x3c\x4c\x29\x5e\x4b\x11\xb5\x46\x71\x22\x59\x8c\xf4\xea\x8d\x55\xdd\x4d\x41\x1d\xa5\x88\xdf\x15\xf9\xa3\xd1\x26\xc9\x86\x53\x36\x97\x43\xbe\xc2\xe6\x12\x31\x1c\x0a\x1b\xb1\x97\x31\x05\x96\x69\x62\xe2\x5d\x69\x7a\xe9\x04\x53\x50\x54\xc0\xde\x09\x29\xcc\x01\xdf\x73\x33\x6e\xc0\x84\x8b\xb9\x85\xff\x4b\x06\xa2\x09\x8c\x20\x6b\x3a\x85\x55\x73\x1d\x0d\xc7\x7a\x40\xd1\x83\xcc\xd3\xed\xb9\xd8\x25\xba\x87\x1f\x3c\x6a\x16\xa0\x9f\x42\xbc\x1d\xe3\xbc\x3d\x15\xe3\xb8\x01\x75\x2e\x41\x98\x93\x3c\xe5\x19\x37\xa4\xd8\xf7\x95\x9f\xbf\xb5\xef\xa4\xa5\xae\x87\xf9\xe0\xa1\xf1\x18\x66\x74\xb1\x66\x4c\x50\x0c\x52\x62\x15\x41\xef\x05\x4a\x37\x70\x0f\x4f\xbd\x68\x47\xf6\x0d\xf5\x0d\x56\x0a\xcf\x73\xc7\x4a\x55\x65\x5f\x56\x9e\x97\x7b\x27\x6a\xf3\xa8\xc7\x5a\xe9\xe0\x87\x57\x8f\x95\x68\x98\xb4\xba\x56\x93\xdf\x8e\x68\x81\x71\xad\x4e\xff\x04\xbc\xb5\x07\xbf\xf4\x1f\xd5\x6b\xf6\xf1\x57\x1e\xd6\x1b\x25\x2d\x17\x12\xb4\x37\xa6\x86\x6e\xb2\x2a\xb4\x97\x4a\xdb\xe2\x80\x8b\xe8\xfa\xb5\x88\xfb\x27\x6c\xf0\x6c\x4a\x70\x3a\xfe\x73\xd3\xeb\x7d\x49\xfb\x26\xf9\x89\x8b\xd6\x15\xee\x15\x01\xa5\x49\x75\xce\x60\x0f\x45\xc5\x49\x5d\xa0\x30\xca\x17\xfa\x07\xc8\x2e\xe1\x7b\x48\x8b\xf3\x82\x90\xc2\x0a\xde\xde\x42\xcb\xcf\x1b\x68\x94\xdc\x9a\x10\x3d\xbe\x0b\x16\x6a\x5b\x10\xad\xe8\x40\xf5\xb6\xa0\x9a\xbe\x69\xc0\x98\xaf\x07\x0d\xe6\xa0\x9c\xc3\x07\xfa\x8e\x8b\xb6\xd7\x50\xd0\x47\x35\x7e\xed\xa8\xd2\x60\x7f\x1c\x0c\x7f\x9d\x92\x7f\xd4\x9a\x61\x43\xca\xe1\xfc\xf3\x86\xbc\xa6\x8b\x9c\xec\x0e\x0b\x50\xd3\xe4\x7c\xac\xc6\x73\xcd\xe2\xe8\x2e\x9c\x68\x1e\xc9\x15\x32\x99\x22\xa6\x9a\xbe\xea\x8f\xb1\x14\x50\x32\xdb\xbd\x18\xce\x6a\xb1\x37\xa9\x66\x59\x32\x51\x10\xea\x1a\x57\x6e\xc2\x59\x9d\xaf\xab\x99\xfd\x1a\xd7\x39\x05\xfd\x65\x85\xdc\x84\x51\x69\x12\x96\x27\xd7\x44\xe5\xda\x50\xdb\x6b\xec\x9a\xd1\xe2\x2e\x24\x13\x32\xba\x31\x5e\x1b\x97\xca\xcb\xe2\x46\x0e\xb8\xd7\x5c\x4e\xfa\xcb\x44\xf4\x8d\x5f\x67\x01\x93\x87\xfe\x42\x41\x01\x9a\x49\x41\x19\xb9\xda\xb5\x4d\xa1\x9b\x50\x33\xc0\xf7\x47\x00\x00\x00\xff\xff\xfd\xc6\x80\xc3\x73\x23\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9075, mode: os.FileMode(420), modTime: time.Unix(1531807078, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529614596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


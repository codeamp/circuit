// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4b\x6f\x23\xb9\x11\xbe\xf7\xaf\xa0\x30\x17\x0d\x62\x64\xee\x42\x12\x60\xc7\x9e\x64\x9d\xec\x26\x8a\x95\x3d\x19\x3e\xd0\xad\x92\xc4\x4c\x37\xd9\x43\xb2\x9d\x35\x16\xf9\xef\x01\x1f\x4d\x56\xb1\x1f\x92\xec\x0d\xb0\x3e\xcc\x88\xd5\xcd\xaf\x1e\xac\x27\xfb\x0f\xe1\x8f\x7d\xff\xe5\xbb\xbb\xea\x8f\xe1\xaf\x32\x35\x6f\xb8\x66\xff\x12\x2d\x0c\xbf\xff\xba\xfb\xc7\xdf\xab\xca\xd4\x27\x68\x39\xfb\xa5\x62\xec\x5b\x0f\xfa\x75\xc3\xfe\xe9\xfe\xab\x18\x6b\x7b\xcb\xad\x50\x72\xc3\x7e\x8c\xbf\xaa\xff\x56\xd5\x87\xf8\xdc\xbe\x76\x10\x7e\xfa\xbd\x1f\xd8\x4f\x06\x74\xc5\x58\x6f\x40\xaf\xc5\x7e\xc3\xee\xef\x3e\x6e\x06\x62\x78\x6a\xe2\x63\xb3\xfe\xb8\x61\x8f\x8e\xf2\xb4\xf2\x0f\xb7\x5a\xfd\x1b\x6a\x5b\x31\xd6\x85\x5f\x11\xe0\x86\x99\xa6\x3f\x6e\xd8\xce\x6a\x21\x8f\x37\x4c\xf2\x16\xf2\x0a\xe4\x8b\xd0\x4a\xb6\x20\xed\xfd\xdd\x40\xfe\xb8\x41\x68\x09\xd9\x64\x68\xb3\x8e\x3f\x76\xc0\x75\x7d\x4a\xaf\x87\xe5\xbd\xec\x7a\x7b\xc3\x3a\xae\x79\x6b\x36\x6c\xcb\x8f\x42\x72\xab\xb4\xa7\x67\xec\x1f\x84\xb1\x41\xf4\x3f\x03\xb7\xbd\x06\xc7\xe0\x10\x7f\xae\x67\x77\xc7\x97\xf3\xee\x1d\xe8\x17\x51\xfb\xdd\x26\xfe\x9c\xdf\x1d\x5f\x1e\xed\x66\xa6\x83\x1a\x41\xec\xdc\xd2\x9b\x78\x97\x09\xd1\xd2\x0f\xd0\x00\x37\x1e\xa3\x62\x4c\x87\xd5\x02\x4f\xfa\xfe\x07\xf6\x25\xdb\xdc\x71\x44\x47\x90\xed\x8a\x8e\xcc\x09\x81\xb6\x44\x21\x10\x85\xbd\x70\x2d\xf8\x73\x13\x4d\x50\x6b\xb0\x8b\x16\x70\x2f\x64\x03\xc4\xd3\xf8\xf2\xb3\x05\x69\x84\x92\xde\x12\x4e\xac\x81\x60\xd6\x73\x4e\xf2\x98\x36\x3d\x4d\x63\x21\x97\xc9\x34\x6f\xd5\xf2\x4d\x6a\x5a\xc4\x3c\x5b\xb8\x40\x78\x28\xa8\x83\x08\xa0\x5b\x61\x12\xf3\xbc\x72\x9b\x5c\xb4\xae\x42\x00\xa6\x70\xf4\x31\x38\xac\x62\x18\xde\x6a\xe0\x16\x06\xd1\x2b\xc6\x6a\x4f\x88\x42\x0f\x87\x94\x3c\xb9\x70\xec\x10\xab\xdd\x9e\x42\xf4\x9e\x70\x0d\x44\x94\x22\xaa\x9f\xa4\x88\x8a\xaf\x23\x3d\xf9\x57\xe1\x6e\xc1\xbb\xad\xea\x10\x80\xb1\xaa\x1b\xb6\x87\xec\xb0\x2a\x36\x44\x9e\x31\x0a\x12\xcf\x18\x04\xeb\x48\x4f\x71\x54\x84\x15\xd6\x3c\x93\x82\xe6\xd7\x40\xdc\x41\x03\x44\x8a\xbd\x27\x5c\x03\x41\x15\x19\x9c\x9a\x68\xe3\x42\x7a\x8d\xe2\x3d\x01\xb8\x45\x81\xb9\x0b\xfb\x93\x76\x05\x2e\x51\xf1\x4d\xb8\x54\xe5\x01\x97\xe8\xfd\x26\xdc\x68\x07\x14\xc2\xc9\x0c\x28\x85\xe0\x10\xdf\xe0\xdc\x32\xc0\x7e\x21\xfb\x93\x19\x28\x6c\xb0\xc2\x7b\x60\xa3\x15\x28\x6c\x30\xc2\x7b\x60\xc7\x46\x48\x39\x13\x39\x85\xcb\x8b\xeb\x90\x3f\x87\x34\x49\x93\xe6\x8c\xe6\x18\x6b\x70\x84\xcb\xb0\xc6\xea\x26\x2c\x86\x4e\xff\x32\xb0\x41\xc9\x32\x91\xc7\xc3\x1e\xc8\xeb\xf4\xc2\x86\x25\x62\x32\xdc\x40\x20\xaa\x96\x88\xf1\x9c\xdf\x80\x38\x28\x5c\x22\xc6\x23\x7e\x03\x62\xa9\x75\x99\xac\x33\x66\x59\x88\x36\xa3\x72\x55\x24\xe1\x65\x63\x94\x29\xfd\x57\x63\x84\x6c\x14\x69\xc1\x3a\xff\x27\x85\x5c\x33\x89\xeb\x64\xd2\xcb\xf5\x96\xa8\x9a\xae\x7b\xba\x0e\x7d\x29\x22\x0c\xcc\x1e\x43\x7f\xb0\x8a\x05\x99\x16\x42\xd2\xed\x8c\x4c\x38\xd1\x09\x61\x5a\x56\x04\x11\x13\x5b\x44\x1c\x78\x7f\x56\xea\x6b\xcb\xf5\x57\x54\x86\x9f\x23\x69\x4b\x9a\x64\x57\x06\x3f\x2b\xd5\x00\x97\xb1\x3f\x48\x7d\x53\x25\xa4\x05\x7d\xe0\x35\x64\x9a\x6f\x13\x3a\x7e\x84\x0d\xbb\x97\xbe\x8f\xaa\x55\xef\x72\x51\x5c\x49\xf8\xd9\xde\xf6\xda\x28\x3d\x74\x4b\x11\x15\xb7\x82\xbe\xf1\x40\x04\x26\xda\xae\x01\xaf\xd3\xe5\x9c\x40\x5a\x2d\xc0\xe4\x7e\xe8\x69\x91\x7f\x6e\xfe\x02\xfb\xbc\x7e\x27\xf7\x00\x74\x8e\x79\xea\xbd\x07\xee\x89\xf0\x6e\xf6\x1e\x69\x99\x3f\x9a\x1c\x02\x7f\x44\x78\x27\xff\x88\xb4\xcc\x1f\xcd\x3d\x81\x3f\x22\xbc\x93\x7f\x44\x5a\xe6\xef\xe7\x48\xcf\xd8\xfd\xf2\xe0\xd1\xfb\x1d\x56\xcb\x45\x93\x37\x90\xd6\xb9\x88\xe9\x90\x5f\xf7\x1b\x3f\x08\x53\xdb\x12\xbb\x16\x1c\xca\x96\xd7\xd1\x5a\x30\xc6\xeb\x97\xf9\xba\x34\x83\xd7\x27\x6e\x4e\x44\x2e\xae\x41\xda\xef\x0b\xaa\x86\x03\x5e\x4e\x89\x38\x74\x87\xd8\xf5\x2e\x10\xb1\x56\x6d\xcb\xe5\x1e\xa3\xe3\x11\x7a\x45\x67\x46\xd2\x80\xa1\x13\x43\xf2\x2b\xed\x32\xd9\xa3\x9b\x45\x9e\x56\x74\xfe\x23\x9d\x8b\x7b\xe6\x64\x3d\xa7\x17\x6e\x76\xbc\x6e\x78\x34\xa4\xfa\x95\x82\x7f\x85\x57\xbc\x14\xe6\x0e\x0e\xbc\x6f\x2c\x4a\x86\x4e\x83\x46\xe9\x05\x21\xf2\xad\x00\x71\xc4\x52\xb6\xdc\x25\xa1\xcc\x53\xc8\x57\xc8\xf3\xc2\x9b\x9e\x1a\xba\x56\xd4\x1e\x53\x07\x16\x1c\xc8\xb9\xf8\x94\x05\x5f\x40\x27\x9f\xce\x39\x6b\xe9\x0c\x46\xea\x0a\xb3\x8b\xbd\x18\x2d\x19\xf8\x2a\x81\x78\x99\xf3\x85\x33\x27\x51\x77\xfd\x03\x7c\xeb\xc1\xd8\x82\xfa\x83\x68\x05\xa1\xb5\xd0\x2a\xfd\x3a\xf1\x72\x78\x30\x7a\xdf\xba\x38\x96\x7e\xba\xfd\x8b\xe6\x35\x6c\x41\x0b\xb5\x3f\xe7\x54\xc3\x4c\x88\x8b\xd4\x05\xc1\x42\x6d\xcf\xb5\x15\x07\xee\x1d\x23\x4c\xde\x8c\x9d\x80\xef\x63\x7a\x48\x57\x39\x5e\x4a\x2e\x9a\x29\xba\xb1\xdc\x02\x0d\xf4\xe2\x32\x60\xee\x2a\xc0\xef\xfc\x71\x9c\x5f\xae\x38\x6a\x9c\xb5\x49\xc6\x3e\x73\x98\xf8\xc2\x2d\xc8\xdc\x29\x23\xac\xd2\xaf\x34\x6b\xc4\x86\x3e\x51\x8e\xc2\xfe\xa4\x9b\x82\xb2\xd5\xca\xaa\x5a\x11\xb2\x36\x7c\xab\xc5\x0b\xb7\xf0\x37\x1a\x31\xee\x41\xff\xdc\x88\xba\xa0\xa7\x6b\x35\x73\x52\xff\xb9\x83\xae\x51\xaf\x4e\xcd\xe8\xbf\x0b\x77\x75\xc5\x6d\x5b\xdd\x6b\x97\x7d\x1f\x8a\xab\x87\x8a\x5c\x97\x5e\x79\x27\xb6\x7a\xcb\xc5\xdd\x55\xd7\x5c\xc3\xfd\x2d\x96\x72\xd3\x35\xfd\x51\x48\xf3\xa9\x56\x7b\xe0\x6d\xf7\xe9\xa8\x79\x77\xfa\xd6\x7c\x0a\x77\xb9\xbf\x8f\x4b\xa4\x4c\xd1\x63\x0d\x22\x17\xdd\x47\x14\x0c\xa7\x97\x81\xfd\x6f\xce\x2e\x7f\x0a\x7f\xec\xbb\xfd\xde\xb5\x19\x31\x4b\xb0\x83\xd2\x4c\xd9\x13\x68\x2f\xef\x0b\x97\x96\x69\x30\xaa\xd7\x4e\xdb\xd2\x6c\x85\xb9\xde\x00\x49\xee\x1a\xe7\xae\x06\x8f\xc2\x7e\xd6\x5c\xd6\xa4\xe8\xd7\x4a\x5a\x21\x7b\xd5\x9b\xe0\xd2\xa4\x6c\x01\x19\x1c\xc6\xd3\xc1\x30\x08\xa0\x38\x98\xad\xb0\x74\x5c\x0d\x45\x36\xd1\xce\x24\x76\xd5\x76\x4a\x02\xed\x01\xca\xa2\x54\xd4\xbd\xc5\x14\xa5\xe4\x41\x1c\x73\x42\x5d\x48\x59\x79\xdc\xc3\xb9\x6b\x4e\xf0\xa9\x74\x3e\x35\x86\xcf\x24\xf6\x91\x5c\xbd\xb1\xaa\xbd\x2d\xa8\xa3\x74\xfe\x6b\x65\xe9\xd1\xc5\x31\xa9\x5c\x73\x3a\x97\x57\xa8\x85\xce\xa5\xc5\x70\x44\xee\xc4\x51\xc6\x72\x55\xa6\xf4\x99\x67\xa5\xea\xa5\x13\xcc\x99\x62\xc2\xd8\x07\x21\x85\x39\xe1\x9e\x64\xc1\x0d\x98\x70\xa1\x5f\xf9\x7f\xc9\x75\x73\x32\x46\xe0\x35\x5f\x6e\x26\xeb\x12\x0d\xc7\xe9\x80\xa2\x07\x99\xbf\x1d\x2c\xc5\x2e\x91\x3d\x7c\x50\x9a\xd2\x00\x7d\x6a\xf2\x7a\x8c\x6b\xec\x5c\x8c\xe3\xf1\xde\xb9\x04\x01\x27\xe9\x92\xfd\x42\x0b\x5b\x51\xe5\x6a\x32\x64\x55\x8c\x35\xa1\xf7\xba\x97\x16\xe5\x7c\x7e\xb0\xa0\x6f\xcb\x57\x85\x85\xd6\x6c\x41\x6f\xf3\x74\xb7\x90\x3a\xa3\x7b\x9a\x77\x56\xb2\x8b\x45\xc9\xd2\x2f\xe9\x98\x04\x7e\x36\x56\xf3\xda\x49\x6b\xd8\xef\xd8\x33\x58\x0b\x9a\x39\x69\xd8\xe6\xe3\xc5\x05\x63\x09\x84\xc6\x38\x3e\x30\xfc\xed\x63\xec\xcf\xa8\xdb\xcc\xce\x87\x92\x1d\x25\x4e\xba\xaa\x0f\x37\xa5\x6b\x78\x80\xe7\x5e\x34\x23\x47\x1a\x9a\x7e\x2c\x14\xfe\x2c\x31\x16\x6a\x92\xf7\x75\x53\x66\xb9\x77\x66\xc4\x8c\x72\x6c\x95\x0e\x01\xbf\x7a\x9a\x48\x3b\x33\x5a\x7b\xe5\x6e\x95\xb4\x5c\x48\xd0\x1e\x72\x4a\xc7\x84\x1d\xee\x2a\x94\xb6\x85\x99\x8b\x64\x32\x1a\x94\xa6\x40\xd3\xf7\x8c\xb1\xf1\x7e\x3b\x73\xd3\x68\xbe\xc5\x8a\x94\xdf\x24\xce\x2b\xf2\x96\x51\x7c\x76\xc4\x2e\x8c\x9a\x3e\x18\x8c\xc5\x38\x37\x71\x8f\x8a\xd4\xcc\x04\x4e\x72\xfb\x6c\x20\xcd\x4d\xce\x93\xdf\xa0\xa9\x41\xc9\x95\xf6\xd5\xe6\x9c\xec\xc2\x66\xc5\x2c\x7b\x19\x6a\x84\x69\x89\x27\x4a\xd4\xa2\xcc\x37\x93\x99\xe0\x06\x37\x20\x05\xfd\xb2\x0e\x6b\x29\x9c\xe9\x85\x3d\x11\x79\xea\x2e\xdf\x4b\xec\x26\xfa\x22\x77\x92\x8b\x41\xba\x31\xa6\x99\x6b\xf9\x65\x76\x23\x07\x3c\x6a\x2e\x67\xfd\x65\x26\xfa\xc6\x8f\x33\x83\xd9\x43\xbf\x90\x51\x30\xcd\x2c\xa3\x6c\xb9\xa9\x34\x4f\x4d\x37\x23\x66\x30\xdf\x50\x17\x41\xd6\xbc\x33\x7d\xc3\x2d\xb0\x83\x68\x2c\x38\x28\xd6\xa8\xa3\x70\x01\x32\x74\xb0\x8d\x30\xb6\xfa\x5f\x00\x00\x00\xff\xff\x3e\x7f\x7c\xb8\xb4\x24\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9396, mode: os.FileMode(420), modTime: time.Unix(1529976351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529973808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


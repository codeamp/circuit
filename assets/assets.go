// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x72\xdb\x3a\x0e\xbe\xf7\x53\xd0\xd3\x1b\x77\x26\x4f\xe0\xcb\xc4\xdd\x24\xbb\xed\xae\x37\x6e\xaf\x32\xb9\x60\x64\xd8\xe6\x46\x22\x55\x92\x72\xeb\xd9\x39\xef\x7e\x86\xbf\x02\x7f\xe4\xc4\x69\xcf\xcc\xb9\x49\xc4\x4f\xe2\x47\x00\x04\x40\x80\x56\x0d\x6d\xa9\x24\x5f\x59\x07\x33\xff\xfc\xcf\xcd\x7f\xfe\x3d\x9b\xa9\xe6\x00\x1d\x25\xff\x9f\x11\xf2\x7d\x00\x79\x5a\x92\xff\x9a\x7f\x33\x42\xba\x41\x53\xcd\x04\x5f\x92\x2f\xfe\x69\xf6\xc7\x6c\xf6\xc1\xbf\xd7\xa7\x1e\xdc\xa3\x9d\xfb\x81\x7c\x53\x20\x67\x84\x0c\x0a\xe4\x82\x6d\x97\xe4\x7e\xf5\x71\x19\x40\xf7\x56\xf9\xd7\x6a\xf1\x71\x49\x1e\x0d\xf2\x34\xb7\x2f\xd7\x52\xfc\x0f\x1a\x3d\x23\xa4\x77\x4f\x9e\xe0\x8a\xa8\x76\xd8\x2f\xc9\x46\x4b\xc6\xf7\x57\x84\xd3\x0e\xc6\x11\xf0\x23\x93\x82\x77\xc0\xf5\xfd\x2a\xc0\x1f\x97\x88\x2d\x32\xab\x91\x5a\x2d\xfc\xc3\x06\xa8\x6c\x0e\xf1\x73\x37\xbc\xe7\xfd\xa0\xaf\x48\x4f\x25\xed\xd4\x92\xac\xe9\x9e\x71\xaa\x85\xb4\xf8\xc8\xfd\x99\x29\xed\x44\xff\x07\x50\x3d\x48\x30\x0b\xec\xfc\xe3\x62\x72\xb6\xff\x78\x9c\xbd\x01\x79\x64\x8d\x9d\xad\xfc\xe3\xf4\x6c\xff\x71\x31\x9b\xa8\x1e\x1a\x44\xb1\x31\x43\x6b\xe2\xcd\x08\x78\x4b\x3f\x40\x0b\x54\xd9\x05\xa5\x7f\x9c\x5e\xd0\x7f\x3c\x2e\xf8\x69\xb4\xb8\x61\x40\x1b\x30\x5a\x15\x6d\x98\x11\x01\x4d\x79\x2a\x48\xc8\x91\x4a\x46\x9f\x5b\x6f\x80\x46\x82\x3e\xab\xbf\xf9\x00\xa9\xcf\xf8\xbe\x05\x0f\x47\x02\xeb\x3a\x71\xfd\xf8\x32\xba\xc2\xa7\x9f\x1a\xb8\x62\x82\x5b\xb3\x19\x2d\x02\xa0\x16\x53\x1e\xf5\x18\x27\xa5\x0e\x1b\x61\xe4\x5f\x23\x66\xb7\x20\xff\x32\xdd\x07\xb4\xf8\xb8\x23\x19\xc3\x43\x86\x06\x11\x40\x76\x4c\xc5\xc5\xc7\x91\x99\x64\x42\x7b\xee\xa2\x35\xc6\xae\x0d\xd8\x30\xf2\x31\x7b\x23\x81\x6a\x08\xa2\xcf\x08\x69\x2c\xe0\x85\x0e\x7b\x1a\xdd\x3e\x8b\x02\x17\xd8\xfd\x36\xa5\x18\x2c\x70\x09\x85\x97\xc2\xab\x1f\xa5\xf0\x8a\x2f\x3c\x1e\xfd\x31\x73\x4f\xe7\x0b\x5a\xf4\x88\x40\x69\xd1\x87\xe9\x2e\x95\xcc\xb3\x09\x7e\x4d\x1f\x32\x71\x4d\x1f\x31\x0b\x8f\xc7\xa0\xcb\x62\x10\x6b\x3e\x42\x4e\xf3\x4b\x28\x56\xd0\x42\x22\xc5\xd6\x02\x97\x50\xa4\x8a\x04\xa7\x4e\xb4\x31\xf1\xbf\x40\xc9\x21\x12\x98\x41\xc6\xb9\x71\xf3\xa3\x76\x19\x6f\xa2\xe2\xbb\x78\x53\x95\x03\x6f\xa2\xf7\xbb\x78\xbd\x1d\x50\x08\x47\x33\xa0\x8c\x83\x43\x7c\x89\x53\x51\xa0\xfd\x94\xcc\x8f\x66\x48\x69\x9d\x15\x7e\x85\xd6\x5b\x21\xa5\x75\x46\xf8\x15\xda\xd2\x08\x31\xc5\x22\xa7\xb0\x69\xd2\x65\xcb\x90\x21\xd3\x1c\x3b\xa1\x39\xe6\x0a\x8e\xf0\x36\xae\x52\xdd\xc8\x45\xd0\xee\xbf\x8d\x2c\x28\x99\x27\x72\xbf\xd9\x01\x5e\xc4\x0f\x96\x24\x82\xd1\x70\x01\x48\x54\xcd\x19\xfd\x3e\xbf\x83\x31\x28\x9c\x33\xfa\x2d\x7e\x07\x63\xae\x75\x9e\xac\x47\xce\xfc\x20\x5a\x16\xc7\x55\x96\x84\xcf\x1b\x23\x4f\xe9\xbf\x6d\x21\x64\x23\x8f\x39\xeb\xfc\x45\x0a\x99\xca\x13\x9f\x93\x51\x2f\x53\x88\xa2\xd3\x74\x31\xa4\x63\x57\xc4\x22\x20\x2c\xf6\xe8\xea\x83\xb9\x3f\x90\xd3\x83\x30\x29\x8e\x0a\x13\x56\x0a\x27\x8c\x8d\x8a\x20\x30\x2e\x8b\xc0\xb0\xf6\xb5\x10\x2f\x1d\x95\x2f\xe8\x18\x7e\xf6\xd0\x3a\xa9\xa8\xcd\x31\x78\x2d\x44\x0b\x94\xbb\x99\x5f\xc5\xde\x14\x51\x41\xea\x56\x34\x2f\x33\x42\xb4\x45\x43\xb1\x2b\x9a\x97\x20\xa5\x79\x1e\xab\x60\xd1\xbc\x64\x96\x77\xa4\xb7\xa0\xc9\x2d\xd3\xe4\x46\x74\x1d\xb3\xea\xef\x41\xdf\x32\xed\xc7\x81\xcc\xd4\x58\xf7\xab\x79\x51\xc9\x5b\x8c\xc3\x8f\x28\x2a\x16\xda\x16\x35\xb1\x36\x9c\x31\xae\x41\xee\x68\x03\x23\x66\x6b\x9b\x46\x0c\x26\x67\xde\x73\xed\xa7\xa0\x62\xd6\x95\x42\x08\x20\xac\xeb\x5b\xb0\x56\x3e\x43\x63\x0a\x5e\x2d\x19\xa8\xb1\x28\x7b\xf2\xe4\x63\x69\xea\xb8\xc7\xf1\xe5\xd4\x6e\xee\xc8\x1c\x8b\xfe\x40\x1d\x81\xf7\x70\xdb\xc9\x81\x1c\xf5\x23\x8e\x1c\x01\x97\x93\xfb\xc9\x81\x1c\xb5\x4a\x8e\x1c\x01\x97\x93\xfb\xc9\x81\xdc\xf6\x95\x96\xd5\x3c\xd9\x99\xde\xc1\xcd\xac\x8e\xb2\x36\x94\xef\xf3\xb4\x3a\xce\xc2\xd6\xa5\xd0\xed\xd2\x36\xc6\xa9\x55\x12\x8b\x64\x2b\xe4\x55\xad\xc1\x3a\x50\x8a\xee\x01\xaf\x6b\x32\x09\x1e\x1f\xa8\x3a\x24\x72\x51\x09\x5c\xdf\x65\xa8\x84\x1d\x1e\xd6\x44\x0c\x05\x20\xf6\x88\x37\x88\xd8\x88\xae\xa3\x7c\x8b\xd9\x71\x4b\x3d\x4f\x7b\xc8\xa4\xc6\x9a\x17\x7b\xd3\x0b\x69\x32\xd5\xa3\xe9\x35\x9e\xe6\x69\x3b\x98\x54\x26\xe6\x9d\x11\xf4\x8c\x52\x26\xf5\xf7\xad\x38\x99\xcf\x37\x5a\x52\x0d\xfb\x93\xeb\x62\x66\x84\xb4\xec\x08\x1c\x94\x5a\x4b\xf1\x0c\x11\x95\x40\xb7\xac\x84\x7b\x09\xa6\x17\xb8\x13\xe2\x25\xac\xe7\x4c\x86\x4b\x25\x6b\x36\xdc\x87\xa6\xa6\xcb\x6d\xf2\x02\x27\x3c\x64\x6a\x05\x3b\x3a\xb4\x3a\x49\xa5\x8d\x68\x85\x3c\xab\x62\xb8\x80\x28\xbd\xb9\xd6\x12\xe3\x44\x92\xc9\x97\xc9\x73\xa4\xed\x90\xee\x61\x23\x52\x6b\xd7\x7c\xc1\xf9\xa6\x89\x9e\xda\xfe\x1c\x41\xc6\x70\x09\xf9\xe8\xfc\x0e\x17\xea\x32\xb5\xf1\x95\x5c\x9a\xbb\xf1\xad\x45\xe2\xc0\xc6\xcd\x5e\xd9\x89\xa6\x1f\x1e\xe0\xfb\x00\x4a\x67\xe8\x67\xd6\xb1\x04\xeb\xa0\x13\xf2\x54\xf9\xd8\xbd\x28\xbe\xd7\x26\x45\x70\xdb\x1b\xdf\x4a\xda\xc0\x1a\x24\x13\xdb\xd7\xe2\x30\x74\x94\xf8\x40\x79\x43\x1c\xa6\xb6\xa7\x52\xb3\x1d\xb5\x8e\xe1\xfa\x76\x42\x0e\x40\xb7\x3e\xf3\xc4\x5b\x23\x2b\x25\x65\x6d\x0d\x57\x9a\x6a\x48\x73\x48\x76\x95\x30\x75\x91\x60\x67\x7e\x29\x53\xd7\x45\x5b\xad\x34\x95\x09\xb0\x63\x9c\xa9\x43\xea\x0d\x0f\xa2\x6d\x9f\xa9\x29\x1f\xb2\xb3\xdc\x97\x2c\xf8\x8c\x78\xc5\x0d\xf0\xad\xa0\xd3\xb6\x17\x8a\x69\x21\x4f\x69\x2a\xf3\x8d\x44\x44\xf6\x4c\x7f\x93\x6d\x86\xac\xa5\xd0\xa2\x11\x09\x2c\x15\x5d\x4b\x76\xa4\x1a\xfe\x95\xc6\x9a\x79\x31\x3c\xb7\xac\xc9\x70\x53\x37\xc1\xf6\xfa\x14\x6f\x3c\xe3\x65\xa0\x3a\x88\x1f\x2b\x9b\xdc\x8c\x39\xbc\xea\x67\x6e\x18\xb3\x3b\xc2\x66\x90\xe6\x8c\x78\xc8\xee\x40\xde\x73\x7f\x77\xf1\x0d\xe3\x85\x37\x72\x80\x9d\xad\x7a\xef\xb5\x67\xfa\x5a\x52\xde\x24\xc7\x5d\x23\xb8\x66\x7c\x10\x83\x72\x66\x4a\xb2\x2a\x24\x55\x71\x59\xfa\x86\x2a\x17\xd9\x76\x2a\x56\xb3\x8b\x3f\x77\x06\x44\xec\x95\xbc\x23\xba\x5e\x70\x1b\x0b\x28\x65\xe4\x67\x1a\x6d\x0e\x60\x52\x77\x22\x4a\x96\xac\xcf\xc6\x95\xe0\x3b\xb6\x1f\xb3\x40\x4d\x8b\xa2\xc3\xc1\x61\x33\xa5\x4e\x2d\x07\xd5\x3a\xcf\x89\x6c\x54\xc8\x35\x28\x2d\xba\x9b\x0c\x2d\x72\xd0\x6f\x48\x2d\x38\xc9\xa2\x8e\x14\xa7\xdb\x29\x9d\xf3\x5b\xc3\x4c\xe7\xdc\x62\x38\x40\x36\x6c\xcf\x7d\x8e\xcd\xb3\xc9\xc4\xbb\x5c\xf5\xdc\x35\xa6\x4c\x51\x31\x76\x9a\x4b\x09\xa9\x66\xd3\x33\x9e\x61\x9a\x32\xc2\x4c\x80\xce\xec\xdf\xa2\x59\xb3\x76\x42\x1d\x58\x5a\xae\x62\x04\xd3\xd6\x28\x47\xba\xf1\xce\x7d\x3a\xa7\x56\x93\x6f\x9a\x0e\xea\x01\x9d\xba\xcc\x28\xe0\xb9\xdc\x91\xc8\xee\x7e\xda\xa9\x69\x80\x7e\xf4\xb1\x7a\x94\x07\xc9\x54\x8e\xc1\x6d\xa8\x71\xbe\x84\x3c\xc9\x93\xce\xde\x76\xe3\xef\xed\x35\x5d\xeb\x6a\x0f\x33\x48\xfc\x1b\x53\xe0\xab\xee\xd2\xc2\xa8\x3c\x48\x77\xb0\xba\xad\x55\xe3\xd9\x53\x5a\xc8\x06\x1e\xe0\x79\x60\x6d\xa1\x5a\xa8\xd2\xb0\x50\xf8\x16\xba\x14\xaa\xba\xf6\x65\x1d\x47\x3e\xb7\xd6\x6e\x78\x21\xd6\x42\x3a\xff\x9b\x3f\x55\xe2\x6d\x52\xe5\x5a\x9b\xb1\x2a\x30\x47\x5c\xb6\x1e\x77\x40\x5b\x7d\xb0\x03\xfb\x49\xa5\x0d\xa9\x7c\x32\xd9\x92\xdc\x08\xae\x29\xe3\x20\xad\x72\x35\x53\x47\x2d\x9d\x13\x09\x89\xec\x11\x43\x2c\xdc\x71\xb8\x99\x13\xda\x58\x82\xdc\x4c\x1d\xfd\xb9\x19\xa4\xf7\x4c\x0f\x7c\xe3\xf4\x48\x59\xeb\xce\xb1\x94\x3a\xd7\xad\xe0\xb4\xe5\xb5\x3e\x64\x75\x73\xea\x02\x58\x0f\xdb\xab\x1c\xa0\xc3\x04\x3d\xd5\x38\x1f\x30\xce\x34\xa3\xed\x0a\x5a\x7a\xda\x40\x23\xf8\x56\x85\xa9\xbd\x2d\xd1\x33\x50\xb3\x0e\xc4\xa0\x33\x54\x0d\x4d\x03\x4a\x7d\x3d\x48\x50\x07\x61\xbc\xdd\xe1\x3b\xca\xda\x41\x42\x81\x1f\xb4\xee\xef\x80\x6e\x41\x1a\x97\x43\x7a\xdf\xc5\x17\xc1\xf9\x6a\xd6\xc9\xbe\xb2\x76\xca\xdd\x3e\xeb\xda\x8a\xd6\xa8\xe6\x0e\xf1\xf7\x8f\x32\xfa\xfe\x3e\x9d\x52\xd1\xd1\x62\x45\xf2\xdf\x30\x5e\x57\xe4\x3d\xcd\xf7\x64\x53\x9d\x19\x35\xfe\xc0\x50\x8a\xf1\x5a\x8f\x5d\x9c\xf0\x13\x3d\x77\x72\x5c\x4d\xa6\xa5\xa9\x5e\x39\xad\x59\x53\x4b\x26\x77\xdf\x17\xdb\xb1\x5a\xd1\x4e\xca\x57\x2f\x6d\xf3\xba\x30\xb5\x49\xb5\x5c\xad\x1d\xc2\x67\x35\xb9\xaa\x9e\x2c\x57\xb8\x98\xcb\xf0\xb7\x55\xab\x13\xaa\xc6\xcb\xc5\xf1\xbe\x3f\x11\xb9\xf6\x53\x80\x95\x38\xaf\x9d\xf2\x4b\xc7\x74\xa2\x4f\x1e\x97\xae\x37\x2e\x57\xf8\xe3\x5e\x52\x5e\xb8\x4f\xf9\x2b\x42\xd5\xfe\xb5\x98\x9c\x74\x85\x37\x2e\xe4\x4c\x33\xb9\xd0\x68\xb9\x5a\xd9\x90\x9a\x6e\x42\x4c\x67\xbe\x3f\x03\x00\x00\xff\xff\xdf\x16\xbe\xa2\xd8\x24\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9432, mode: os.FileMode(420), modTime: time.Unix(1540339670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


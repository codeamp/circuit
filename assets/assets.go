// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4b\x6f\x1b\x39\x12\xbe\xf7\xaf\xa0\x90\x8b\x02\x18\x9b\xbb\xb0\xbb\x40\x62\x7b\x37\x9e\x49\x66\x34\xd6\xe4\x64\xf8\x40\xb7\x28\x89\x93\x6e\xb2\x43\xb2\x3d\x31\x82\xf9\xef\x03\xbe\xab\xd8\x0f\x59\x72\x06\x88\x0f\x49\xb3\xba\x59\x8f\x8f\x55\xc5\xaa\xd2\xbf\xfd\x1f\x79\x7f\xfd\xf6\xaa\xfa\x8f\xff\xab\x74\x4d\x1b\xaa\xc8\xef\xbc\x65\xf1\xf9\xa7\xcd\xaf\xbf\x54\x95\xae\x0f\xac\xa5\xe4\x5b\x45\xc8\x97\x9e\xa9\xa7\x15\xf9\xcd\xfe\x57\x11\xd2\xf6\x86\x1a\x2e\xc5\x8a\x7c\x0c\x4f\xd5\x5f\x55\xf5\x2a\xbc\x37\x4f\x1d\xf3\x8f\x6e\xef\x2b\xf2\x49\x33\x55\x11\xd2\x6b\xa6\x96\x7c\xbb\x22\x37\x57\xaf\x57\x91\xe8\xdf\xea\xf0\x5a\x2f\x5f\xaf\xc8\x9d\xa5\xdc\x2f\xdc\xcb\xb5\x92\x7f\xb0\xda\x54\x84\x74\xfe\x29\x30\xb8\x20\xba\xe9\xf7\x2b\xb2\x31\x8a\x8b\xfd\x05\x11\xb4\x65\x79\xc5\xc4\x23\x57\x52\xb4\x4c\x98\x9b\xab\x48\x7e\xbd\x02\xdc\x12\x67\x9d\x59\xeb\x65\x78\xd8\x30\xaa\xea\x43\xfa\xdc\x2f\x6f\x44\xd7\x9b\x0b\xd2\x51\x45\x5b\xbd\x22\x6b\xba\xe7\x82\x1a\xa9\x1c\x3d\xf3\xfe\xc0\xb5\xf1\xaa\xff\x8f\x51\xd3\x2b\x66\x05\xec\xc2\xe3\x72\x72\x77\xf8\x38\xef\xde\x30\xf5\xc8\x6b\xb7\x5b\x87\xc7\xe9\xdd\xe1\xe3\xc1\x6e\xa2\x3b\x56\x03\x16\x1b\xbb\x74\x10\x6f\x32\x21\x20\x7d\xcb\x1a\x46\xb5\xe3\x51\x11\xa2\xfc\x6a\x46\x26\xfe\xfe\x15\xb9\xce\x98\x5b\x89\xe0\x08\x32\xae\xe0\xc8\xac\x12\x60\x4b\x50\x02\x50\xc8\x23\x55\x9c\x3e\x34\x01\x82\x5a\x31\x33\x8b\x80\xfd\x20\x03\x10\x4e\xe3\xfa\xab\x61\x42\x73\x29\x1c\x12\x56\xad\x48\xd0\xcb\x29\x27\xb9\x4b\x9b\xee\xc7\x79\x01\x97\xc9\x34\x87\x6a\xf9\x25\x86\x16\x08\xcf\x08\x17\x1c\x6e\x0b\x6a\x54\x81\xa9\x96\xeb\x24\x3c\xaf\xec\x26\x1b\xad\x0b\x1f\x80\x29\x1c\x5d\x0c\xc6\x55\x08\xc3\x4b\xc5\xa8\x61\x51\xf5\x8a\x90\xda\x11\x82\xd2\xf1\x90\x92\x27\x17\x8e\xed\x63\xb5\xdb\x62\x16\xbd\x23\x9c\xc2\x22\x68\x11\xcc\x4f\x5a\x04\xc3\x97\x81\x9e\xfc\xab\x70\x37\xef\xdd\x46\x76\x80\x81\x36\xb2\x8b\xdb\x7d\x76\x58\x14\x1b\x82\xcc\x10\x05\x49\x66\x08\x82\x65\xa0\xa7\x38\x2a\xc2\x0a\x5a\x9e\x49\xde\xf2\x53\x58\x5c\xb1\x86\x21\x2d\xb6\x8e\x70\x0a\x0b\x6c\x48\x74\x6a\x64\x8d\x0d\xe9\x25\x88\xf7\xc4\xc0\x2e\x0a\x9e\x1b\xbf\x3f\x59\x57\xf0\x45\x26\x9e\xc5\x17\x9b\x1c\xf9\x22\xbb\xcf\xe2\x1b\x70\x00\x21\x9c\x60\x00\x29\x04\x86\xf8\x0a\xe6\x96\xc8\xf6\x1a\xed\x4f\x30\x60\xb6\x1e\x85\x97\xb0\x0d\x28\x60\xb6\x1e\x84\x97\xb0\x1d\x82\x90\x72\x26\x70\x0a\x9b\x17\x97\x3e\x7f\xc6\x34\x89\x93\xe6\x84\xe5\x90\x57\x74\x84\xe7\xf1\x1a\x9a\x9b\x78\x11\x70\xfa\xcf\x63\x16\x8d\x2c\x13\x79\x38\xec\x48\x5e\xa6\x0f\x56\x24\x11\x13\x70\x91\x80\x4c\x2d\x39\x86\x73\x3e\x83\x63\x34\xb8\xe4\x18\x8e\xf8\x0c\x8e\xa5\xd5\x65\xb2\xce\x3c\xcb\x8b\x68\x35\xb8\xae\x8a\x24\x3c\x0f\x46\x99\xd2\xbf\x9b\x20\x80\x51\xa0\x79\x74\xfe\x21\x83\x6c\x31\x09\xef\xc9\x64\x97\xad\x2d\xc1\x6d\xba\xec\xf1\xda\xd7\xa5\x80\x10\x85\xdd\xf9\xfa\x60\x11\x2e\x64\x7c\x11\xa2\x6a\x67\x00\xe1\x48\x25\x04\x69\xd9\x10\x40\x4c\x62\x01\x31\xca\x7e\x27\xe5\xe7\x96\xaa\xcf\xe0\x1a\x7e\x08\xa4\x35\x2a\x92\xed\x35\xf8\x4e\xca\x86\x51\x11\xea\x83\x54\x37\x55\x5c\x18\xa6\x76\xb4\x66\x99\xe6\xca\x84\x8e\xee\xd9\x8a\xdc\x08\x57\x47\xd5\xb2\xb7\xb9\x28\xac\x04\xfb\x6a\x2e\x7b\xa5\xa5\x8a\xd5\x52\xe0\x0a\x4b\x41\x57\x78\x00\x02\xe1\x6d\xd7\x30\x67\xd3\xf3\x25\x31\x61\x14\x67\x3a\xd7\x43\xf7\xb3\xf2\x73\xf1\xe7\xc5\xe7\xf5\x0b\xa5\x7b\x46\xc7\x84\xa7\xda\x3b\x4a\x4f\x84\x17\x8b\x77\x9c\xe6\xe5\x83\xce\xc1\xcb\x07\x84\x17\xca\x0f\x9c\xe6\xe5\x83\xbe\xc7\xcb\x07\x84\x17\xca\x0f\x9c\xe6\xe5\xbb\x3e\xd2\x09\xb6\x4f\x8e\x79\xf0\x7e\xcb\xab\xa5\xbc\xc9\x1b\x50\xe9\x5c\xc4\xb4\xcf\xaf\xdb\x95\x6b\x84\x31\xb6\x08\xd7\x42\x42\x59\xf2\x5a\x5a\xcb\xb4\x76\xf6\x65\xb9\x36\xcd\xc0\xf5\x81\xea\x03\xd2\x8b\x2a\x26\xcc\xfb\x82\xaa\xd8\x0e\x2e\xc7\x54\x8c\xd5\x21\x74\xbd\x67\xa8\x58\xcb\xb6\xa5\x62\x0b\xb9\xc3\x16\x7a\x81\x7b\x46\x54\x80\x81\x13\x03\xfa\x4b\x65\x33\xd9\x9d\xed\x45\xee\x17\xb8\xff\x43\x95\x8b\x7d\x67\x75\x3d\x66\x17\x2c\x76\x9c\x6d\xb0\x35\xc4\xf6\x95\x8a\x7f\x66\x4f\x70\xc9\xf5\x15\xdb\xd1\xbe\x31\x20\x19\x5a\x0b\x1a\xa9\x66\x94\xc8\x53\x01\xe4\x88\xa5\x6e\xb9\x4a\x02\x99\xa7\xd0\xaf\xd0\xe7\x91\x36\x3d\x06\xba\x96\x18\x8f\xb1\x03\xf3\x0e\x64\x5d\x7c\x0c\xc1\x47\xa6\x92\x4f\xe7\x9c\x35\x77\x06\x03\x73\xb9\xde\x84\x5a\x0c\x5f\x19\x70\x94\x80\xbc\xcc\xfa\xc2\x91\x93\xa8\xbb\xfe\x96\x7d\xe9\x99\x36\x05\xf5\x03\x6f\x39\xa2\xb5\xac\x95\xea\x69\xe4\x63\xff\x62\xf0\xbd\xb1\x71\x2c\x5c\x77\xfb\x7f\x45\x6b\xb6\x66\x8a\xcb\xed\x31\xa7\x8a\x3d\x21\xbc\xa4\x9e\x11\x2c\x18\x7b\xaa\x0c\xdf\x51\xe7\x18\xbe\xf3\x26\xe4\xc0\xe8\x36\xa4\x87\x34\xca\x71\x5a\x52\xde\x8c\xd1\xb5\xa1\x86\xe1\x40\x2f\x86\x01\x53\xa3\x00\xb7\xf3\xe3\x30\xbf\x9c\x70\xd4\x30\x6b\xa3\x8c\x7d\xe4\x30\xe1\xc0\xcd\xeb\xdc\x49\xcd\x8d\x54\x4f\x38\x6b\x84\x82\x3e\x51\xf6\xdc\x7c\x52\x4d\x41\x59\x2b\x69\x64\x2d\x11\x59\x69\xba\x56\xfc\x91\x1a\xf6\x33\x8e\x18\xfb\xa2\x7f\x68\x78\x5d\xd0\xd3\x58\x4d\x1f\xe4\x9f\x57\xac\x6b\xe4\x93\x35\x33\xf8\xef\xcc\xac\xae\x98\xb6\xd5\xbd\xb2\xd9\xf7\xb6\x18\x3d\x54\x68\x5c\x7a\xe2\x4c\x6c\x71\xce\xe0\xee\xa4\x31\x57\x9c\xdf\x42\x2d\x57\x5d\xd3\xef\xb9\xd0\x6f\x6a\xb9\x65\xb4\xed\xde\xec\x15\xed\x0e\x5f\x9a\x37\x7e\x96\xfb\xaf\xb0\x04\xc6\x14\x35\x56\x54\xb9\xa8\x3e\x82\x62\x30\xbd\x44\xf1\x3f\x1c\x2e\xff\xf5\x7f\xe4\xed\x76\x6b\xcb\x8c\x90\x25\xc8\x4e\x2a\x22\xcd\x81\x29\xa7\xef\x23\x15\x86\x28\xa6\x65\xaf\xac\xb5\x25\x6c\x05\x5c\x67\xb0\x44\xb3\xc6\xa9\xd1\xe0\x9e\x9b\x77\x8a\x8a\x1a\x5d\xfa\xb5\x14\x86\x8b\x5e\xf6\xda\xbb\x34\xba\xb6\x18\x6a\x1c\x86\xdd\x41\x6c\x04\x40\x1c\x4c\xde\xb0\xb8\x5d\xf5\x97\x6c\xa2\x1d\x49\xec\xb2\xed\xa4\x60\xb8\x06\x28\x2f\xa5\xe2\xde\x9b\x4d\x51\x52\xec\xf8\x3e\x27\xd4\x99\x94\x95\xdb\x3d\x98\xbb\xa6\x14\x1f\x4b\xe7\x63\x6d\xf8\x44\x62\x1f\xe8\xd5\x6b\x23\xdb\xcb\x82\x3a\x48\xe7\xdf\x2b\x4b\x0f\x06\xc7\xe8\xe6\x9a\xb2\xb9\x1c\xa1\x16\x36\x97\x88\xc1\x88\xdc\xf0\xbd\x08\xd7\x55\x99\xd2\x27\xde\x95\xa6\x97\x4e\x30\x05\xc5\x08\xd8\x3b\x2e\xb8\x3e\xc0\x9a\x64\xc6\x0d\x08\xb7\xa1\x5f\xb9\x7f\xd1\xb8\x39\x81\xe1\x65\x4d\x5f\x37\xa3\xf7\x12\x0e\xc7\xf1\x80\xc2\x07\x99\x7f\x3b\x98\x8b\x5d\xa4\xbb\xff\x41\x69\xcc\x02\xf0\x53\x93\xb3\x63\x78\xc7\x4e\xc5\x38\x6c\xef\xad\x4b\x20\xe6\x28\x5d\x92\x6f\xe5\xc5\x56\xa3\xbe\xaa\x22\xa4\xf1\xe5\xd6\x8d\x30\x20\xcd\xd3\x9d\x61\xea\xb2\xfc\x94\x1b\xd6\xea\x35\x53\xeb\xdc\xd0\xcd\x64\xcb\xe0\x91\x1a\xbb\x37\xd4\x15\x8e\xfd\x87\x47\x09\x0a\xad\x8c\x3b\x88\x73\x4c\x1c\x3d\x25\xe7\x69\x52\xd5\xec\x96\x3d\xf4\xbc\x19\x60\x18\xeb\x5d\xa8\x14\x9c\xc8\x0f\x95\x1a\x95\x7d\x5a\x83\x55\xee\x9d\xe8\xae\x82\x1e\x6b\xa9\xbc\xaf\x2f\xee\x47\x22\x6e\xc2\x6a\x67\xdc\xa5\x14\x86\x72\xc1\x94\x63\x39\x66\x63\xe2\xed\xdb\x74\xa9\x4c\x01\x73\x11\x47\x83\x1e\x61\x8c\x69\x1a\xe5\x0f\xc1\xfb\x71\x5a\x86\x41\x6b\x07\x0d\x29\xc7\xf1\xc7\x0d\x39\xa7\x0b\x9d\xec\x2e\x0b\x50\xd3\xac\x7c\xa8\xc6\xb1\x66\x73\x90\x9f\x27\x9a\x4f\x94\xd6\x26\x03\x69\xaa\x69\x1c\xfd\xf9\x15\x03\x8a\xa6\xb9\x27\xc3\x39\x5a\x80\x4c\xaa\x59\x5e\xe3\x18\x84\x71\x8d\x47\xb2\xf3\xac\xce\x17\xa3\x99\xe0\x02\xde\xbd\x05\xfd\x79\xc5\xc5\x5c\x38\xe3\x59\x35\x52\x79\x6c\x8c\xed\x34\xb6\xcd\x6c\x91\x3b\xd1\x4c\x0c\x6f\x0c\x69\xe6\x54\x79\x59\xdc\xc0\x01\xf7\x8a\x8a\x49\x7f\x99\x88\xbe\xe1\xeb\x2c\x60\xf2\xd0\x9f\x29\xc8\x43\x33\x29\x28\x23\x37\x96\xe6\x31\x74\x13\x6a\x7a\xf8\xe2\xad\xc8\x44\x4d\x3b\xdd\x37\xd4\x30\xb2\xe3\x8d\x61\x96\x15\x69\xe4\x9e\xdb\x00\x89\xc5\x5b\xc3\xb5\xa9\xfe\x0e\x00\x00\xff\xff\xbb\x78\xfc\xb2\xaf\x23\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9135, mode: os.FileMode(420), modTime: time.Unix(1529976218, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529973808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


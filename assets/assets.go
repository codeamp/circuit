// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4f\x73\xdb\xb6\x12\xbf\xf3\x53\xc0\x93\x8b\x32\xe3\x4f\xa0\x63\xec\xbc\xf7\xfc\x9a\xb4\xaa\xd5\x9c\x3c\x3e\xc0\x14\x24\xa1\x21\x01\x06\x00\xdd\x78\x3a\xfd\xee\x1d\xfc\x21\xb0\x0b\x02\x94\x64\xa7\x33\xbd\xd8\xc4\x92\xd8\x7f\xd8\xfd\x61\x77\xa5\x5b\xda\x51\x45\x7e\xe3\x3d\x6b\xc2\xf3\xff\xb7\xbf\xfc\xdc\x34\xba\x3d\xb2\x9e\x92\x3f\x1b\x42\xbe\x8d\x4c\xbd\xac\xc9\xaf\xf6\x5f\x43\x48\x3f\x1a\x6a\xb8\x14\x6b\xf2\x39\x3c\x35\x7f\x35\xcd\xbb\xf0\xde\xbc\x0c\xcc\x3f\xba\xbd\xef\xc8\x17\xcd\x54\x43\xc8\xa8\x99\x5a\xf1\xdd\x9a\xdc\xdd\xbe\x5f\x4f\x44\xff\x56\x87\xd7\x7a\xf5\x7e\x4d\x1e\x2c\xe5\xf1\xca\xbd\xdc\x28\xf9\x3b\x6b\x4d\x43\xc8\xe0\x9f\x02\x83\x6b\xa2\xbb\xf1\xb0\x26\x5b\xa3\xb8\x38\x5c\x13\x41\x7b\x96\x56\x4c\x3c\x73\x25\x45\xcf\x84\xb9\xbb\x9d\xc8\xef\xd7\x80\x5b\xe4\xac\x13\x6b\xbd\x0a\x0f\x5b\x46\x55\x7b\x8c\x9f\xfb\xe5\x9d\x18\x46\x73\x4d\x06\xaa\x68\xaf\xd7\x64\x43\x0f\x5c\x50\x23\x95\xa3\x27\xde\x9f\xb8\x36\x5e\xf5\xff\x30\x6a\x46\xc5\xac\x80\x7d\x78\x5c\x55\x77\x87\x8f\xd3\xee\x2d\x53\xcf\xbc\x75\xbb\x75\x78\xac\xef\x0e\x1f\xcf\x76\x13\x3d\xb0\x16\xb0\xd8\xda\xa5\x73\xf1\x36\x11\x82\xa7\xef\x59\xc7\xa8\x76\x02\x55\x78\xac\x0b\x0c\x1f\x27\x81\x1f\x93\xc7\x2d\x07\x70\x00\xc9\xab\xe0\xc0\xac\x0a\x60\xcb\xe3\x8c\x09\x79\xa6\x8a\xd3\xa7\x2e\x38\xa0\x55\xcc\x2c\xda\x6f\x3f\x48\xda\x84\xb3\xf8\xf8\xdd\x30\xa1\xb9\x14\xce\x0f\x56\xad\x89\xa0\x57\xb5\x10\x79\x88\x9b\x1e\xcb\xbc\x40\xc0\x24\x9a\xf3\x69\xfe\x25\x76\x2c\x10\x9e\x5c\x9c\x71\xb8\xcf\xa8\x93\x0a\x4c\xf5\x5c\x47\xe1\x69\x65\x37\xd9\x5c\xbd\xf2\xe9\x17\x93\xd1\x65\xe0\xb4\x0a\x49\x78\xa3\x18\x35\x6c\x52\xbd\x21\xa4\x75\x84\xa0\xf4\x74\x48\x31\x8e\xb3\xb0\xf6\x99\x3a\xec\x30\x8b\xd1\x11\x2e\x61\x11\xb4\x08\xe6\x47\x2d\x82\xe1\xab\x40\x8f\x01\x96\xc5\x9b\x8f\x6d\x23\x07\xc0\x40\x1b\x39\x4c\xdb\x3d\x36\x5c\x65\x1b\x82\xcc\x90\x03\x51\x66\x48\x81\x55\xa0\xc7\x2c\xca\x92\x0a\x5a\x9e\x48\xde\xf2\x4b\x58\xdc\xb2\x8e\x21\x2d\x76\x8e\x70\x09\x0b\x6c\xc8\x14\xd4\xc8\x1a\x9b\xd0\x2b\x90\xed\x91\x81\x5d\x64\x3c\xb7\x7e\x7f\xb4\x2e\xe3\x8b\x4c\x7c\x15\x5f\x6c\xf2\xc4\x17\xd9\xfd\x2a\xbe\xc1\x0f\x20\x85\xa3\x1b\x00\x84\xc0\x14\x5f\x43\x6c\x99\xd8\x7e\x44\xfb\xa3\x1b\x30\x5b\xef\x85\xb7\xb0\x0d\x5e\xc0\x6c\xbd\x13\xde\xc2\x76\xee\x84\x88\x99\x20\x28\x2c\x2e\xae\x3c\x7e\x4e\x30\x89\x41\xb3\x62\x39\xe4\x35\x05\xc2\x79\xbc\xe6\xe6\x46\x5e\x04\x9c\xfe\x79\xcc\x26\x23\x73\x20\x0f\x87\x3d\x91\x57\xf1\x83\x35\x89\xc4\xe8\xb8\x89\x80\x4c\xcd\x39\x86\x73\x7e\x05\xc7\xc9\xe0\x9c\x63\x38\xe2\x57\x70\xcc\xad\xce\xc1\x3a\xf1\xcc\x2f\xa2\xf5\xec\xba\xca\x40\x78\xd9\x19\x39\xa4\xff\x30\x41\xc0\x47\x81\xe6\xbd\xf3\x0f\x19\x64\x4b\x49\x78\x4f\x46\xbb\x6c\x65\x09\x6e\xd3\xd5\x88\xd7\xbe\x2a\x05\x84\x49\xd8\x83\xaf\x0f\xae\xc2\x85\x8c\x2f\x42\x54\xed\xcc\x5c\x58\xa8\x84\x20\x2d\x19\x02\x88\x51\x2c\x20\x4e\xb2\x3f\x48\xf9\xb5\xa7\xea\x2b\xb8\x86\x9f\x02\x69\x83\x4a\x64\x7b\x0d\x7e\x90\xb2\x63\x54\x84\xfa\x20\xd6\x4d\x0d\x17\x86\xa9\x3d\x6d\x59\xa2\xb9\x32\x61\xa0\x07\xb6\x26\x77\xc2\xd5\x51\xad\x1c\x2d\x16\x85\x95\x60\xdf\xcd\xcd\xa8\xb4\x54\x53\xb5\x14\xb8\x82\x5a\xd0\x17\x1e\x80\x40\x78\x3f\x74\xcc\xd9\x74\xbe\x24\x26\x8c\xe2\x4c\xa7\x7a\xe8\x71\x51\x7e\x2a\xfe\xbc\xf8\xb4\x7e\xa3\x74\xcf\xe8\x94\xf0\x58\x79\x4f\xd2\x23\xe1\xcd\xe2\x1d\xa7\x65\xf9\xa0\x6f\xf0\xf2\x01\xe1\x8d\xf2\x03\xa7\x65\xf9\xa0\xeb\xf1\xf2\x01\xe1\x8d\xf2\x03\xa7\x65\xf9\xae\x8b\x74\x82\xed\x93\x63\x1e\xa2\xdf\xf2\xea\x29\xef\xd2\x06\x54\x3a\x67\x39\xed\xf1\x75\xb7\x76\x6d\x30\xf6\x2d\xf2\x6b\x26\x21\x2f\x79\x2d\xad\x67\x5a\x3b\xfb\x92\x5c\x0b\x33\x70\x7d\xa4\xfa\x88\xf4\xa2\x8a\x09\xf3\xbf\x8c\xaa\xd8\x1e\x2e\x4b\x2a\x4e\xd5\x21\x0c\xbd\x33\x54\x6c\x65\xdf\x53\xb1\x83\xdc\x61\x03\x7d\x85\x3b\x46\x54\x80\x81\x13\x03\xfa\x4b\x65\x91\xec\xc1\xf6\x22\x8f\x57\xb8\xff\x43\x95\x8b\x7d\x67\x75\x3d\x65\x17\x2c\x76\x9c\x6d\xb0\x35\xc4\xf6\xe5\x8a\x7f\x65\x2f\x70\xc9\xf5\x2d\xdb\xd3\xb1\x33\x00\x0c\xad\x05\x9d\x54\x0b\x4a\xa4\x99\x00\x0a\xc4\x5c\xb7\x54\x25\x01\xe4\xc9\xf4\xcb\xf4\x79\xa6\xdd\x88\x1d\xdd\x4a\xec\x8f\xd2\x81\xf9\x00\xb2\x21\x5e\xf2\xe0\x33\x53\x31\xa6\x13\x66\x2d\x9d\xc1\xcc\x5c\xae\xb7\xa1\x16\xc3\x57\x06\x1c\x24\xa0\x28\xb3\xb1\x70\xe2\x24\xda\x61\xbc\x67\xdf\x46\xa6\x4d\x46\xfd\xc4\x7b\x8e\x68\x3d\xeb\xa5\x7a\x29\x7c\xec\x5f\xcc\xbe\x37\x36\x8f\x85\xeb\x6e\xff\xab\x68\xcb\x36\x4c\x71\xb9\x3b\x15\x54\x53\x4f\x08\x2f\xa9\x33\x92\x05\xfb\x9e\x2a\xc3\xf7\xd4\x05\x86\xef\xbc\x09\x39\x32\xba\x0b\xf0\x10\x07\x39\x4e\x4b\xca\xbb\x12\x5d\x1b\x6a\x18\x4e\xf4\x6c\x18\x50\x1b\x05\xb8\x9d\x9f\xe7\xf8\x72\xc1\x51\x43\xd4\x46\x88\x7d\xe2\x30\xe1\xb8\xcd\xeb\x3c\x48\xcd\x8d\x54\x2f\x18\x35\x42\x41\x1f\x29\x07\x6e\xbe\xa8\x2e\xa3\x6c\x94\x34\xb2\x95\x88\xac\x34\xdd\x28\xfe\x4c\x0d\xfb\x09\x67\x8c\x7d\x31\x3e\x75\xbc\xcd\xe8\x71\xa8\xa6\x8f\xf2\x8f\x5b\x36\x74\xf2\xc5\x9a\x19\xe2\x77\x61\x52\x97\xcd\xda\xda\x51\x59\xf4\xbd\xcf\x46\x0f\xaf\x99\x83\x5d\x3c\xa9\xbb\x70\xb2\xc5\x60\x84\x14\xc7\x4d\x07\x6e\x3e\x28\x2a\x5a\x74\x91\xb4\x52\x18\x2e\x46\x39\x6a\xef\x26\x04\x85\x0c\x15\xa3\xf3\x8a\x73\x2a\x2e\x81\x6f\xab\xa8\x8d\x5b\x20\x0f\xdc\x91\x76\x02\x2c\x64\x3f\x48\xc1\xf0\xbd\x92\x03\x5d\x86\xa5\x8b\x61\x2f\xc5\x9e\x1f\x52\x92\x2e\xa4\x41\x6a\x21\x60\x3e\xd4\x14\x2f\x41\x44\xa9\xb5\xab\x80\xc5\x4c\xaf\x51\x1b\xd9\xdf\x64\xd4\x19\x44\xfc\xa8\xcc\x9f\x0d\x23\x11\x1a\xd6\x6c\xce\xc7\x72\x99\xcd\xb9\xc7\x60\x2a\x6c\xf9\x41\x04\x08\xcc\x61\xa2\xf2\x2e\x37\x3d\x0f\x82\x9a\x2b\x0a\xce\xde\x73\xc1\xf5\x11\xde\x73\x0b\x61\x40\xb8\xcd\xb9\xc6\xfd\x45\x23\xcc\xe8\x0c\x2f\xab\x0e\x61\x45\xac\xc3\xe9\x58\x4e\x28\x7c\x90\x69\x1e\xbd\x94\xbb\x48\x77\xff\x13\x45\xc9\x02\xf0\xe3\x85\xb3\x63\x8e\xdb\xb5\x1c\x87\x2d\xa3\x0d\x09\xc4\x1c\xe1\x94\x63\xdc\xa2\xf2\xbc\x21\xa4\xf3\xb7\xf6\x9d\x30\x38\xf4\x20\x1f\x38\xe6\x9d\xbb\x19\x5c\xac\xc9\x27\x20\x07\x31\xb1\xe8\x41\x17\x05\x52\xb5\xec\x9e\x3d\x8d\xbc\x9b\xd9\x37\xd5\x37\x50\x29\x38\x81\x9d\x2b\x55\x94\x7d\x59\x41\x9d\xef\xad\x54\xd3\x41\x8f\x8d\x54\x3e\x0e\xaf\x1e\x0b\xd9\x50\xb5\x3a\xe6\x67\x26\xad\x80\x37\xce\x13\x37\x52\x18\xca\x05\x53\x4e\x7e\xc9\x21\x51\x11\xdf\xc3\x49\x65\xb2\x33\xc9\x12\x62\x56\x40\x96\x98\xc6\x39\xef\xdc\xd3\xff\x9e\x7a\x72\x56\xf7\x43\x43\xf2\x59\xed\x69\x43\x5e\xd3\xa2\x54\x5b\x8f\xcc\xa9\x71\x90\x3a\x57\xe3\x54\x27\x32\x03\xda\x4a\x67\x82\xf0\xa9\x1a\x7f\xb5\x8e\xa2\xf8\xdb\x1c\x76\x28\x1a\xf5\x5d\xec\xce\x62\x25\x51\x55\x33\xbf\x8f\xb1\x13\xca\x1a\x17\x60\x76\x51\xe7\xeb\x22\x6c\x5c\x57\x92\xf4\xfa\xec\x2a\xa1\x62\x54\x1c\x8c\xa4\x41\x26\x52\xb9\x34\xe3\x74\x1a\xdb\x4e\x27\x03\x5a\x34\x30\xc1\x1b\x03\x26\x5d\x2a\x2f\x89\x9b\x05\xe0\x41\x51\x51\x8d\x97\x4a\xf6\xcd\x5f\x27\x01\xd5\x43\x3f\x53\x90\x77\x4d\x55\x50\xf2\x5c\xe9\x4e\xc0\xae\xab\xa8\xe9\xdd\xf7\x77\x00\x00\x00\xff\xff\x78\x07\xd8\x10\x82\x21\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 8578, mode: os.FileMode(420), modTime: time.Unix(1531346658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529614596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


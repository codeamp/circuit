// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\xe3\x38\x0e\xbe\xfb\x29\x98\x9a\x8b\xbb\x2a\x4f\xe0\x63\xc7\xbd\x9d\xec\xce\xec\x7a\xe3\xe9\x53\x57\x0e\x8c\x0c\xdb\xdc\x48\xa4\x86\xa4\x3c\xed\xda\x9a\x77\xdf\xe2\x8f\x28\x80\xa4\x9c\x38\x99\xad\x9a\x4b\x22\x42\xe2\x87\x1f\x02\x20\x00\x9b\x86\xb7\x5c\xb3\x5f\x45\x07\x8b\xf8\xfc\xf7\xed\xbf\xfe\xb9\x58\x98\xe6\x08\x1d\x67\xff\x5d\x30\xf6\xdb\x00\xfa\xbc\x62\xff\x76\xff\x16\x8c\x75\x83\xe5\x56\x28\xb9\x62\xbf\xc4\xa7\xc5\x1f\x8b\xc5\x4f\xf1\xbd\x3d\xf7\x10\x1e\xfd\xde\x9f\xd8\x37\x03\x7a\xc1\xd8\x60\x40\x2f\xc5\x6e\xc5\x1e\xd6\x9f\x56\x23\x31\xbc\x35\xf1\xb5\x59\x7e\x5a\xb1\xef\x8e\xf2\x74\xe3\x5f\x6e\xb4\xfa\x0f\x34\x76\xc1\x58\x1f\x9e\x22\xc0\x2d\x33\xed\x70\x58\xb1\xad\xd5\x42\x1e\x6e\x99\xe4\x1d\x4c\x2b\x90\x27\xa1\x95\xec\x40\xda\x87\xf5\x48\xfe\xb4\x42\x68\x09\xd9\x4c\xd0\x66\x19\x1f\xb6\xc0\x75\x73\x4c\x9f\x87\xe5\x83\xec\x07\x7b\xcb\x7a\xae\x79\x67\x56\x6c\xc3\x0f\x42\x72\xab\xb4\xa7\x4f\xd8\x3f\x0b\x63\x83\xe8\x7f\x03\x6e\x07\x0d\x8e\xc1\x3e\x3e\x2e\x67\x77\xc7\x8f\xa7\xdd\x5b\xd0\x27\xd1\xf8\xdd\x26\x3e\xce\xef\x8e\x1f\x17\xbb\x99\xe9\xa1\x41\x10\x5b\xb7\xf4\x26\xde\x4e\x84\x68\xe9\x47\x68\x81\x1b\xcf\x50\xc7\xc7\x79\x86\xf1\xe3\x89\xe1\x97\xc9\xe2\x0e\x01\x1d\xc0\x64\x55\x74\x60\x4e\x04\xb4\xe5\xa9\x00\x61\x27\xae\x05\x7f\x6e\xa3\x01\x1a\x0d\xf6\xa2\xfe\xee\x83\x49\x9a\x78\x16\x5f\x7e\x58\x90\x46\x28\xe9\xed\xe0\xc4\x1a\x09\x66\x39\xe7\x22\xdf\xd3\xa6\xa7\x3a\x16\x72\x98\x89\xe6\x6d\x9a\x7f\x49\x0d\x8b\x98\x4f\x26\xce\x10\x1e\x33\xea\x28\x02\xe8\x4e\x98\xc4\x7c\x5a\xb9\x4d\x2e\x56\x6f\x42\xf8\xa5\x60\xf4\x11\x38\xae\x62\x10\xde\x69\xe0\x16\x46\xd1\x17\x8c\x35\x9e\x10\x85\x1e\x0f\x29\xf9\x71\xe6\xd6\x21\x52\xfb\x1d\x85\x18\x3c\xe1\x1a\x88\x28\x45\x54\x3f\x49\x11\x15\x5f\x46\x7a\x72\xb0\xcc\xdf\x82\x6f\x5b\xd5\x23\x00\x63\x55\x3f\x6e\x0f\xb9\xe1\x26\xdb\x10\x79\xc6\x18\x48\x3c\x63\x08\x2c\x23\x3d\x45\x51\x16\x54\x58\xf3\x89\x14\x34\xbf\x06\x62\x0d\x2d\x10\x29\x76\x9e\x70\x0d\x04\x55\x64\x74\x6a\xa2\x8d\x0b\xe8\x25\x8a\xf6\x04\xe0\x16\x19\xe6\x36\xec\x4f\xda\x65\xb8\x44\xc5\x77\xe1\x52\x95\x47\x5c\xa2\xf7\xbb\x70\xa3\x1d\x50\x08\x27\x33\xa0\x14\x82\x43\x7c\x85\x73\xcb\x08\xfb\x85\xec\x4f\x66\xa0\xb0\xc1\x0a\x1f\x81\x8d\x56\xa0\xb0\xc1\x08\x1f\x81\x2d\x8d\x90\x72\x26\x72\x0a\x97\x17\x97\x21\x7f\x8e\x69\x92\x26\xcd\x19\xcd\x31\xd6\xe8\x08\x6f\xc3\x2a\xd5\x4d\x58\x0c\x9d\xfe\xdb\xc0\x46\x25\xf3\x44\x1e\x0f\x7b\x24\x2f\xd3\x07\x2b\x96\x88\xc9\x70\x23\x81\xa8\x9a\x23\xc6\x73\x7e\x07\xe2\xa8\x70\x8e\x18\x8f\xf8\x1d\x88\xb9\xd6\x79\xb2\x9e\x30\xf3\x8b\x68\x55\x5c\x57\x59\x12\xbe\x6c\x8c\x3c\xa5\xff\x69\x8c\x90\x8d\x22\x2d\x58\xe7\xff\xa4\x90\x2b\x25\xf1\x3d\x99\xf4\x72\x95\x25\xba\x4d\x97\x03\x5d\x87\xaa\x14\x11\x46\x66\xdf\x43\x7d\x70\x13\x2f\x64\x7a\x11\x92\x6a\xa7\x30\x61\xa5\x12\xc2\xb4\x49\x11\x44\x4c\x6c\x11\x71\xe4\xfd\x59\xa9\x97\x8e\xeb\x17\x74\x0d\x3f\x47\xd2\x86\x94\xc8\xee\x1a\xfc\xac\x54\x0b\x5c\x86\x9d\x5f\xc1\xb2\xaf\xc2\xb2\x3b\xd5\x75\xc2\x4b\x7a\x00\xfb\x55\xd8\xb8\x1e\xa5\x73\xe5\xd0\xc3\xfa\xa6\xa8\xa2\x3d\x4d\xc2\xef\x09\x15\xe3\xfb\xfa\x23\xd5\x65\x0b\x21\x2d\xe8\x3d\x6f\x60\xa2\xf9\x32\xa4\xe7\x07\x58\xb1\x07\xe9\xeb\xb4\x46\x0d\x2e\xd7\xc5\x95\x84\x1f\xf6\x6e\xd0\x46\xe9\xb1\x1a\x8b\xa8\xa8\xd6\x0c\x85\x0d\x22\x30\xd1\xf5\x2d\x78\x9b\xbd\x9d\x13\x48\xab\x05\x98\xa9\xde\x7a\xba\xc8\x7f\x2a\x2e\x03\xfb\x69\xfd\x41\xee\x01\xe8\x35\xe6\xa9\xb2\x1f\xb9\x27\xc2\x87\xd9\x7b\xa4\xcb\xfc\x51\x5f\x12\xf8\x23\xc2\x07\xf9\x47\xa4\xcb\xfc\x51\x57\x15\xf8\x23\xc2\x07\xf9\x47\xa4\xcb\xfc\x7d\x97\xea\x19\xbb\x27\x0f\x1e\xa3\xcb\x61\x75\x5c\xb4\xd3\x06\x52\x9a\x67\x39\x23\xe4\xef\xdd\xca\xb7\xd9\xd4\xb6\xc4\xae\x19\x87\xbc\xa4\x76\xb4\x0e\x8c\xf1\xfa\x4d\x7c\x5d\x1a\xc3\xeb\x23\x37\x47\x22\x17\xd7\x20\xed\x7d\x46\xd5\xb0\xc7\xcb\x9a\x88\x63\xf5\x89\x5d\xef\x0d\x22\x36\xaa\xeb\xb8\xdc\x61\x74\xdc\xa0\xdf\xd0\x8e\x94\x14\x78\xe5\x89\xf5\x4a\xbb\x34\xf9\xdd\x35\x3a\x4f\x37\xb4\xb9\x24\x65\x91\x7b\xe7\x04\xbd\xa0\x94\xbb\x77\xfa\x56\x9d\xdd\xe7\x5b\xab\xb9\x85\xc3\x39\xb4\x50\x0b\xc6\x5a\x71\x02\x09\xc6\x6c\xb4\x7a\x86\x44\xd5\xc0\x77\xa2\x24\xf7\x1a\x5c\x23\x72\xaf\xd4\xcb\xc8\x2f\x98\x0c\xd7\x69\xde\x6c\xb8\xab\xa5\xa6\xcb\x6d\xf2\x02\x67\xbc\x14\x66\x0d\x7b\x3e\xb4\x96\xe4\xf1\x46\xb5\x4a\x5f\x54\x71\x1c\x67\x10\x1f\xcf\x65\x9b\x0a\x3c\x94\xd4\x32\xf9\x32\x79\x4e\xbc\x1d\xe8\x19\x36\x8a\x5a\xbb\xe6\x0b\xc1\x37\x5d\xf4\xd4\xce\xe7\x04\x3a\x85\xcb\x94\x0e\x2f\x9d\x70\xa1\xae\x30\xdb\x58\x46\xd2\xdb\x08\xcf\x40\x88\x03\x3b\x37\x7b\xe5\x24\x9a\x7e\x78\x84\xdf\x06\x30\x36\xa3\xfe\x2c\x3a\x41\x68\x1d\x74\x4a\x9f\x2b\x1f\x87\x17\xc5\xf7\xd6\xa5\x08\xe9\x1b\xf3\xaf\x9a\x37\xb0\x01\x2d\xd4\xee\xb5\x38\x1c\xdb\x59\x7c\xff\xbd\x21\x0e\xa9\xed\xb9\xb6\x62\xcf\xbd\x63\x84\xa1\x01\x63\x47\xe0\xbb\x98\x79\xd2\x0c\xca\x4b\xc9\x45\x5b\xa3\x1b\xcb\x2d\xd0\x1c\x92\xcd\x31\xe6\xa6\x18\x7e\xe7\x2f\x65\xea\xba\xea\xa8\x8d\xe5\x9a\x10\xf6\x42\x0a\x73\xa4\xde\xf0\xa8\xda\xf6\x99\x37\x2f\x45\x75\x12\xeb\x25\x7c\x8d\xbc\xe2\x06\x78\xc6\x18\xb4\xed\x95\x11\x56\xe9\x33\x4d\x65\xb1\x8b\x49\x94\x83\xb0\xdf\x74\x9b\x51\x36\x5a\x59\xd5\x28\x42\xd6\x86\x6f\xb4\x38\x71\x0b\xff\xa0\xb1\xe6\x5e\x0c\xcf\xad\x68\x32\x7a\x9a\x24\x9a\xa3\xfa\x7d\xed\x73\x99\xd3\x3e\x6a\x7a\x61\x3c\x99\x0d\x18\x9b\x41\xbb\x2b\xe1\x31\x9b\xb7\xbc\x67\xf8\x77\xf5\x78\xf2\xca\x71\x1e\x60\xdf\xaa\xce\xd8\x0e\xc2\x7e\xd6\x5c\x36\xe4\x76\x6b\x94\xb4\x42\x0e\x6a\x30\xc1\x4c\x24\x89\x02\xa9\xc0\xcb\x32\x7b\xac\xa8\x91\x6d\xe7\x42\x33\x1b\x32\x86\x94\x9f\x68\xaf\xa4\x19\xd5\xf5\x4a\x7a\xd7\x47\x19\x22\x4b\x91\x59\x16\xbe\x18\x30\x4a\xee\xc5\x61\x0a\xef\x9a\xbc\x45\xdf\x84\xe3\x61\x4e\xf0\x5a\x72\xa9\xf5\xb3\x33\x69\xa6\x90\x6b\x30\x56\x75\x77\x19\xb5\x48\x2e\x7f\x42\xce\xc0\xd9\x13\xf5\xb9\x38\x8f\xce\xe9\x9c\xcf\x22\x33\x9d\x73\x8b\xe1\x50\xd8\x8a\x83\x8c\xc9\x33\x4f\x13\x33\xef\x72\xd5\x73\x27\x98\x33\x45\xc5\xd8\x34\x49\x32\x56\x4d\x93\x17\x3c\x83\x09\x17\x86\x0b\xff\x97\x8c\x72\x93\x7d\x62\xb9\x33\x9b\xd5\xaa\xe9\x8f\x46\x68\x3d\xc6\xe8\xd9\x4e\x73\xf9\x4b\xe1\x4c\x64\x0f\x3f\xd5\xd4\x34\x40\x3f\xe2\x78\x3d\xca\x54\x3e\x17\xf6\xb8\xb5\x75\x5e\x42\xc0\x49\xea\xf2\xc0\x0d\x69\x23\x7c\x59\xe9\x4b\x80\x07\x69\xa9\x37\x62\x1c\x3c\xee\x2e\xcd\x8c\x6e\xe9\xc9\x26\x28\x2c\x29\xb1\x6a\x41\x7f\x77\x28\xdd\xc0\x23\x3c\x0f\xa2\x2d\xf4\x1b\x8b\x25\x2c\x14\x9e\x44\x97\x42\x55\x79\x5f\x57\xf8\xe7\x7b\x6b\x55\x7f\x14\x62\xa3\x74\x70\xc2\x9b\xa7\x4a\x74\xcc\xaa\x5c\xab\xf6\xd7\x05\x2d\x00\x97\x1d\xc0\x3d\xf0\xd6\x1e\xfd\xc2\x7f\x52\xe9\x06\x2a\x9f\xcc\x76\x06\x77\x4a\x5a\x2e\x24\x68\xaf\x5c\xcd\xd4\x49\xcb\xd0\xc5\x2a\x8d\xec\x91\xe2\xcc\x13\xfe\x58\xc4\x9d\x33\xda\x78\x80\xdc\x4c\x1d\xff\xb1\x1d\x34\x6a\x8d\x3b\xfe\xe3\x9b\xe4\x27\x2e\x5a\xd7\x09\xe4\xd0\xb9\x6e\x05\xa6\xaf\x72\xed\x31\x2b\x5f\xa9\x0b\x60\x3d\x7c\xcb\x70\x84\x0e\x03\xf4\xdc\xe2\xa4\x20\xa4\xb0\x82\xb7\x6b\x68\xf9\x79\x0b\x8d\x92\x3b\x33\x6e\xed\x7d\xa5\x9c\x11\xad\xe8\x40\x0d\x36\xa3\x9a\xa1\x69\xc0\x98\x5f\x8f\x1a\xcc\x51\x39\x6f\x0f\xf4\x3d\x17\xed\xa0\xa1\xa0\x1f\xad\xed\xef\x81\xef\x40\x3b\x97\x43\x7a\xdf\xa7\x17\xa3\xf3\xd5\xac\x93\x7d\xe5\xed\x94\xbb\x7d\xd6\x3c\x15\x1d\x4a\xcd\x1d\xd2\x6f\x20\x65\xf4\xfd\x75\x1a\x96\xa2\xb1\xc4\x8a\xe4\xbf\x63\xbc\xae\xc8\x7b\x7a\xe0\xd9\xde\x36\x33\x6a\xfa\x91\xa1\x14\xe3\xb5\x56\xb7\xb8\x8f\x67\x5a\x5f\x72\x67\xcd\xa6\xa5\xb9\x96\xb5\xfa\xbb\x35\x35\x28\x19\x83\x5f\x6d\xce\x6a\xc1\x39\x2b\x66\x5e\xb6\x51\x23\xd4\x25\xae\x5c\xbd\x17\x65\xbe\xad\x5e\x25\xb7\xb8\xd6\xca\xe8\x6f\x2b\x26\x67\x94\x4a\x43\xbd\x69\xc8\x4f\x44\xae\xcd\xff\xbd\xc4\xae\x95\xce\x2e\x5f\x32\xec\xa3\x1b\x63\xb6\xb8\x96\xdf\xc4\xae\x70\xc0\x83\xe6\x72\xd6\x5f\x66\xa2\xaf\x7c\x3d\x31\x98\x3d\xf4\x37\x32\x0a\xa6\x99\x65\x34\x59\xae\x56\x27\x50\xd3\xcd\x88\x19\xcc\xf7\xbf\x00\x00\x00\xff\xff\x58\x96\x46\x66\x9e\x24\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9374, mode: os.FileMode(420), modTime: time.Unix(1533323210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1532982390, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


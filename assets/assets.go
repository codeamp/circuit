// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcf\x72\xe3\x36\x0f\xbf\xeb\x29\xe8\xd9\x8b\x77\x26\x4f\xa0\xe3\x6e\xf2\x7d\x4d\xdb\x6d\xd3\xb8\x39\xed\xe4\xc0\xc8\x8c\xcd\x46\x12\xbd\x24\xe5\x69\xa6\xd3\x77\xef\x90\x04\x29\x00\x92\xec\x75\x76\x3b\xd3\x4b\x22\x82\xe0\x0f\x7f\x08\x80\x80\x5d\x23\x5b\x69\xc5\xef\xba\x53\x15\x7c\xff\xb8\xf9\xf5\x97\xaa\x72\xcd\x5e\x75\x52\xfc\x55\x09\xf1\x65\x50\xf6\xb5\x16\xbf\x85\x7f\x95\x10\xdd\xe0\xa5\xd7\xa6\xaf\xc5\x27\xf8\xaa\xfe\xae\xaa\x77\xb0\xef\x5f\x0f\x2a\x7d\xc6\xb3\xef\xc4\x83\x53\xb6\x12\x62\x70\xca\xae\xf5\xb6\x16\xb7\xd7\xef\xeb\x4c\x4c\xbb\x0e\xb6\xdd\xfa\x7d\x2d\x3e\x07\xca\xe3\x2a\x6e\xde\x59\xf3\x87\x6a\x7c\x25\xc4\x21\x7d\x01\xc0\x95\x70\xed\xb0\xab\xc5\xc6\x5b\xdd\xef\xae\x44\x2f\x3b\x35\xae\x54\x7f\xd4\xd6\xf4\x9d\xea\xfd\xed\x75\x26\xbf\xaf\x11\x5a\x41\x76\x23\x74\x12\x0e\x74\x90\xff\x3f\x25\xfd\x60\x55\xe0\x7a\x86\xcf\xc8\x05\x74\xe0\xda\x28\x7b\xd4\x4d\xe4\x72\xf0\x19\xb9\x80\x4e\xb9\x84\x3b\xa8\x06\xb1\x6e\xc2\x12\xb3\x07\x02\x1c\xb9\x57\xad\x92\x2e\x02\x5b\xf8\x8c\x9c\x40\x07\xae\x9b\xd1\xdc\xc0\x89\xac\x4f\xdc\x68\x7f\x7a\x42\x1c\xa5\xd5\xf2\xa9\x05\xed\x1b\xab\x7c\xd6\x26\x7c\xd3\x7b\xb8\xf9\xd3\xab\xde\x69\xd3\x47\x23\x82\xac\x4c\x00\x49\x79\xb9\x70\x0c\x79\xfb\x86\x9e\xe4\x9c\xd4\x01\x48\xce\xe8\x0a\x86\x70\xcf\xa8\x59\x05\x65\x3b\xed\x8a\xf0\x71\x15\x0e\x85\x40\x5f\xa5\xd8\x2d\x91\x1c\xc3\x37\xaf\x20\x82\x3f\x5a\x25\xbd\xca\xaa\x57\x42\x34\x91\x00\x4a\xaf\x81\x5e\x02\xec\xb6\x3f\x0c\x9e\xc5\xdb\xc3\x61\x4b\x21\x86\x48\xb8\x04\x02\xb4\x00\xf3\x8b\x16\x60\xf8\x1a\xe8\x75\x76\x5a\x86\xb8\x2f\xfc\x05\x02\x42\xaf\x40\x40\xe4\xad\x81\x5e\xe7\x58\xcd\x10\x9b\xc2\x5f\x0c\x19\x49\xc9\x90\x4b\x20\xae\x55\xab\x88\x16\xdb\x48\xb8\x04\x82\x1a\x92\xc3\x91\x58\x13\xf2\x68\x8d\x92\xac\x00\x84\x05\xc3\xdc\xa4\xf3\xc5\x3a\x86\x4b\x4c\x7c\x13\x2e\x35\x39\xe3\x12\xbb\xdf\x84\x0b\x7e\x40\x39\x5f\xdc\x80\x92\x7c\x8d\xf6\x6b\x9c\xfd\x19\xf6\x86\x9c\x2f\x6e\xa0\xb0\xc9\x0b\xdf\x02\x0b\x5e\xa0\xb0\xc9\x09\xdf\x02\x3b\x75\x42\xa9\x6a\x28\x28\x42\x39\x5b\xa7\x0a\x17\xfc\x18\xfe\x8f\x5e\x0d\xab\x05\xcb\x31\x56\x0e\x84\xaf\xc3\x9a\x9a\x5b\xb0\x04\xba\xfd\xaf\x03\xcb\x46\xf2\x12\x0c\x97\x9d\xc9\xeb\xc2\x50\x8b\x42\x2c\x8e\xcb\x04\x62\x2a\x47\x84\x7b\x7e\x03\x62\x36\x98\x23\xc2\x15\xbf\x01\x91\x5b\xcd\x6b\xef\x88\xc9\xdf\x95\x7a\xf2\xfa\xb0\x9a\x7a\xda\x19\xbc\x42\x7f\x37\x41\xc8\x47\x40\x4b\xde\xf9\x97\x0c\x0a\x6d\x15\x7e\xf6\x8a\x5d\xa1\xcb\x42\x8f\xe3\x7a\xa0\xeb\xd4\xa1\x21\x42\x16\xf6\x39\xb5\x53\xab\x47\x78\x38\x63\x23\x17\x1f\xcd\xf0\x15\x1f\xcc\xd4\xa3\x85\xf7\x57\x75\x52\xb7\xb9\x03\x5b\xd1\x07\x98\x40\xe5\x6b\xdd\xd6\xb1\x13\x05\x6c\x68\xb3\x12\x3c\x2c\x98\x04\xfe\x70\x06\x5a\xa7\x9c\x93\x3b\x85\xe5\x06\xeb\xf0\x7a\x2f\xdd\x9e\xe8\x25\xad\xea\xfd\x0f\x8c\x6a\xd5\x33\x5e\xce\xa9\x98\x1f\xa5\xa8\x62\x6e\xf1\xce\xab\xd8\x98\xae\x93\xfd\x16\xa3\xe3\x1e\x76\x45\xfb\x43\x52\xf7\xd3\xf1\x21\xd4\x46\xa4\xbf\xb1\x3e\x78\x34\x74\x34\xd1\x9d\x4b\x35\x34\xec\x05\x5d\xcf\xd9\x85\x6b\x6c\xb4\x0d\xf7\x8c\xd4\x3e\xae\xf8\x8b\x7a\x25\xe8\xa6\x35\xf6\x02\x71\x63\xbd\x05\x9f\x86\x12\xc8\x44\x32\x11\x47\xd9\x0e\xd4\x77\x8d\xa1\x26\xce\xdd\x41\x8a\x89\x10\xb5\x73\x4e\x39\x2a\x5b\xc2\x74\x6c\x85\x4f\xb9\x95\xd9\x25\x84\x76\x1b\xa8\xea\x1f\x8c\x69\x95\xec\x69\xcc\xa4\xea\x88\x03\x27\x5c\xef\x19\xe7\x36\x87\xe1\x5e\x7d\x19\x94\xf3\x8c\xfa\xb3\xee\x34\xa1\x75\xaa\x33\xf6\x75\x86\x39\x6d\x4c\xf8\x7d\x48\xcd\x3e\xb6\xbd\xff\xb7\xb2\x51\x77\xca\x6a\xb3\x3d\x77\x71\xb9\xbb\x8c\x66\xe4\x76\xfd\x7c\xfc\x53\xdf\x4b\xeb\xf5\xb3\x6c\x42\x04\xa7\x96\x5c\x88\xbd\x92\x5b\xc8\xf8\x3a\xa7\x7e\xd4\x52\xea\x76\x8e\xee\xbc\xf4\x8a\xe6\x2e\x9b\x12\x96\x66\x84\x78\xf2\xd3\xb4\x64\x5c\x70\xd5\xd1\x13\xb9\x55\x8f\x9e\x80\xc5\x99\xcb\xc4\x43\x6c\xd2\xf9\x60\x9c\xf6\xc6\xbe\xd2\x42\x00\xad\x41\xa1\xec\xb4\x7f\xb0\x2d\xa3\xdc\x59\xe3\x4d\x63\x08\xd9\x3a\x79\x67\xf5\x51\x7a\xf5\x13\xcd\x98\xb0\x31\x3c\xb5\xba\x61\xf4\x3c\xe5\xb2\x19\xb7\x19\x6c\xa8\x8f\xf7\x6c\xc4\x40\x73\x29\x9b\x4a\xf3\x1c\xcc\xa6\x60\x18\x30\x59\x4e\xe1\x2b\x9a\x1d\x04\x77\xda\x7f\xb0\xb2\x6f\xf6\x67\xcb\x08\xed\x3c\x52\xe1\x2a\xb4\x33\x99\x65\xba\x83\xe9\x15\xad\xab\xbc\x2a\xb0\xc2\x73\x32\x46\x4c\xff\xac\x77\x63\x44\x9f\x88\x99\xf1\xe5\xc6\xc1\xb3\xa4\xf8\x5c\x3e\xcd\x75\x54\x0b\x99\xc5\xf5\x9a\x64\xce\xf7\x4a\x88\xc9\xf0\x4e\x8a\xc4\x92\x75\x7c\x8c\x65\xd6\x71\xdf\xe0\x60\xdb\xe8\x5d\x0f\x95\x81\x67\xcf\xc2\x1e\x37\x9d\x5f\xf7\x92\x2b\x66\xdc\xfa\xac\x7b\xed\xf6\xb8\xfc\x9f\xb8\x70\xa1\x43\x37\x55\xc5\xbf\x64\xe4\x2f\xce\x48\xb2\x96\x33\x7b\xb6\x04\xd0\x24\xa9\x84\x78\x32\xe6\xa5\x93\xf6\x25\x68\x01\x6f\x10\xbd\xc8\xf1\xf7\x31\x76\x69\x58\x41\xfc\x83\xc2\x54\x41\x54\xa9\x31\x5a\x89\x53\x4a\x3c\x25\x3b\xbf\x8b\x58\x36\xfe\x0d\x60\x2a\x7b\x56\xc4\x65\xbd\x15\x3f\xbb\xd0\x58\x81\x1e\x77\xc6\xa6\x8b\x5a\x3d\xce\x84\xcb\x29\xe3\x3e\x9a\xde\x4b\xdd\x87\x6e\xdc\x58\x3f\x67\x63\xc1\x8e\x76\x06\x2e\xe6\x4d\x16\x04\x93\x5e\x62\x0e\xb4\xfc\x78\x30\x75\xde\x7f\xa7\xb5\x98\xb4\x80\xd8\x10\xfe\x03\xc0\x79\x43\x4e\x37\xa0\x8b\xfd\x26\x73\x5f\x99\xc3\xa7\x02\xcf\xb5\x9f\x93\x32\xb2\xd0\x8e\x8e\x41\xb2\x1c\x3c\xcb\x6d\xe4\xec\x8f\xb2\xd4\x75\x64\x52\x7c\x83\xe3\x66\x5e\xc4\x45\x35\xf9\xbb\x42\x9d\x30\xaf\xf1\x4c\x19\x3c\xa9\xf3\xd5\x6c\xce\x5f\xe1\x27\x82\xd1\xb9\x56\xa7\x52\x94\x4e\xbc\x44\xb9\xb9\x61\x38\xea\x16\x1a\x59\x56\xf6\xc8\x88\x4b\x0f\x42\xe9\xb8\x54\xde\x28\x6e\x12\x6a\x3b\x2b\x7b\x1a\x19\xff\x04\x00\x00\xff\xff\xe4\x29\xae\xb3\xd1\x19\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6609, mode: os.FileMode(420), modTime: time.Unix(1520468366, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\x36\x10\xbe\xf3\x29\xa0\xc9\x45\x9e\xf1\x13\xf0\x98\x38\x6d\xd3\x36\xad\x6b\x35\x27\x4f\x0e\x08\x05\x4b\x68\x48\x42\x01\x40\xb5\x9a\x4e\xdf\xbd\x03\x60\x01\xee\x2e\x49\xc9\x72\xd2\x99\x5e\x24\x62\x01\xec\xcf\x87\xfd\x03\x5c\x23\x5b\x69\xc5\xef\xba\x53\x15\x7c\xff\xb8\xf9\xf5\x97\xaa\x72\xcd\x5e\x75\x52\xfc\x5d\x09\xf1\x65\x50\xf6\x54\x8b\xdf\xc2\x5f\x25\x44\x37\x78\xe9\xb5\xe9\x6b\xf1\x1e\xbe\xaa\x7f\xaa\xea\x15\xcc\xfb\xd3\x41\xa5\xcf\xb8\xf7\x95\xf8\xe0\x94\xad\x84\x18\x9c\xb2\x6b\xbd\xad\xc5\xbb\xbb\x9b\x3a\x13\xd3\xac\x83\x69\xb7\xbe\xa9\xc5\x63\xa0\x7c\x5c\xc5\xc9\x7b\x6b\xfe\x50\x8d\xaf\x84\x38\xa4\x2f\x60\x70\x2b\x5c\x3b\xec\x6a\xb1\xf1\x56\xf7\xbb\x5b\xd1\xcb\x4e\x8d\x23\xd5\x1f\xb5\x35\x7d\xa7\x7a\xff\xee\x2e\x93\x6f\x6a\xc4\xad\x70\x76\x23\xeb\x24\x1c\xe8\x20\xff\x3b\x25\xfd\x60\x55\x58\xf5\x04\x9f\x71\x15\xd0\x61\xd5\x46\xd9\xa3\x6e\xe2\x2a\x07\x9f\x71\x15\xd0\xe9\x2a\xe1\x0e\xaa\x41\x4b\x37\x61\x88\x97\x07\x02\x6c\x79\x50\xad\x92\x2e\x32\xb6\xf0\x19\x57\x02\x1d\x56\xbd\x1d\xcd\x0d\x2b\x91\xf5\x69\x35\x9a\x9f\xee\x10\x47\x69\xb5\xfc\xd4\x82\xf6\x8d\x55\x3e\x6b\x13\xbe\xe9\x39\xbc\xfd\xcb\xab\xde\x69\xd3\x47\x23\x82\xac\x4c\x70\xeb\x25\xd0\x1f\xcb\xa6\x05\x5e\xe8\x08\x46\x1a\x3e\x0b\xce\x00\xac\x47\xc2\x47\x7c\x18\x87\x07\x46\xcd\x2a\x28\xdb\x69\x57\x84\x8f\xa3\xb0\x29\x78\xff\x2a\x39\x74\x71\xef\xe8\xd3\x79\x04\x6e\xfd\xc6\x2a\xe9\x55\x56\xbd\x12\xa2\x89\x04\x50\x7a\x0d\xf4\xe2\x75\xef\xfa\xc3\xe0\x99\x13\x7e\x38\x6c\x29\x8b\x21\x12\xae\x61\x01\x5a\x80\xf9\x45\x0b\x30\x7c\x0d\xf4\x3a\x83\x96\x59\x3c\x94\xf5\x85\x05\xf8\x63\x61\x01\xee\xb8\x06\x7a\x9d\x1d\x38\xb3\xd8\x94\xf5\xc5\x90\x91\x94\x0c\xb9\x86\xc5\x9d\x6a\x15\xd1\x62\x1b\x09\xd7\xb0\xa0\x86\x64\x1f\x25\xd6\x84\xe0\x5a\xa3\xc8\x2b\x0c\xc2\x80\xf1\xdc\xa4\xfd\xc5\x3a\xc6\x97\x98\xf8\x22\xbe\xd4\xe4\xcc\x97\xd8\xfd\x22\xbe\x80\x03\x8a\xc8\x02\x03\x8a\x7c\x1c\xb1\x35\x4e\x09\x99\xed\x5b\xb2\xbf\xc0\x40\xd9\x26\x14\xbe\x86\x2d\xa0\x40\xd9\x26\x10\xbe\x86\xed\x14\x84\x92\xea\x90\x53\x84\x1c\xb7\x4e\x69\x2f\xe0\x18\xfe\x47\x54\xc3\x68\xc1\x72\xcc\x2b\x3b\xc2\xf3\x78\x4d\xcd\x2d\xbc\x04\x3a\xfd\xe7\x31\xcb\x46\xf2\xbc\x0c\x87\x9d\xc9\xeb\xb2\xa0\x16\x85\x58\x80\xcb\x04\x62\x2a\xe7\x08\xe7\xfc\x02\x8e\xd9\x60\xce\x11\x8e\xf8\x05\x1c\xb9\xd5\x3c\xf7\x8e\x3c\x79\x5d\xa9\x27\xd5\x87\xe5\xd4\xf3\x60\xf0\x0c\xfd\xcd\x04\x21\x8c\x80\x96\xd0\xf9\x8f\x0c\x0a\xbd\x16\x2e\x7b\xc5\xae\xd0\x7a\xa1\xe2\xb8\x1e\xe8\x38\xb5\x6d\x88\x90\x85\x3d\xa6\x72\xbf\x82\xfa\x4a\xeb\x1a\xe9\x48\x26\x10\xe2\x6e\xe5\x30\xa5\x8d\x86\x20\x62\x11\x8b\x88\x59\xf6\x6b\x63\x3e\x77\xd2\x7e\x46\x55\xf5\x13\x90\xee\x49\x0f\xb9\xba\xa9\xc3\xe2\x56\xc9\x1e\xca\x7d\xec\x49\x63\xa9\x0f\x5f\xb1\xcc\xc3\xd2\xd0\xea\x74\x52\xb7\xb9\xaf\x59\xd1\xb6\x81\x01\x90\x9c\x71\x5b\xc7\xa6\x1a\x78\x43\xc7\x98\xd8\xc3\x80\x49\xe0\xe5\x3e\xd0\x3a\xe5\x9c\xdc\x29\x2c\x37\x9c\x09\x1e\xef\xa5\xdb\x13\xbd\xa4\x55\xbd\xff\x81\x51\xad\x7a\xc2\xc3\x39\x15\x73\x29\x8d\x2a\xe6\x6e\xf5\xb2\x8a\x8d\xe9\x3a\xd9\x6f\x31\x77\xdc\x8e\xaf\x68\xab\x4b\xaa\x55\xda\x3e\x84\x8c\x8e\xf4\x37\x36\x1c\xfb\x63\xe8\xc3\x22\x9c\x4b\x99\x3f\xcc\x05\x5d\x2f\xd9\x85\x2b\x43\xb4\x0d\xb7\xbf\xd4\x3e\xae\xf8\x67\x75\xc2\x43\xed\xee\xd4\x93\x1c\x5a\x8f\x3c\x27\x58\xd0\x1a\x7b\x85\x12\x63\xed\x00\xa4\x43\x3a\x67\x8a\x30\xc1\x47\xd9\x0e\x14\xd1\xc6\x50\xc3\xe7\x4e\x26\x79\x4a\xf0\xe5\x39\xa8\x8e\xca\x16\xe7\x1d\x7b\xfd\x73\x60\x33\xbb\x02\x1e\x1b\xa8\x50\x34\x90\xf0\x55\x87\xb8\x53\x38\xf4\x0b\x90\x37\x87\xe1\x41\x7d\x19\x94\xf3\x8c\xfa\xb3\xee\x34\xa1\x75\xaa\x33\xf6\x34\xb3\x38\x4d\x4c\xd6\xfb\x10\xb0\x7d\x6c\xe1\xbf\xb7\xb2\x51\xf7\xca\x6a\xb3\xbd\x74\x70\xb9\x53\x8e\x66\xe4\xab\xc7\xe5\xa8\xa0\xd8\x4b\xeb\xf5\x93\x6c\x82\x5f\xa7\xeb\x85\x10\x7b\x25\xb7\x90\x07\xea\x9c\x10\xa2\x96\x52\xb7\x73\x74\xe7\xa5\x57\x34\xa2\xd9\x8d\x67\xe9\xbe\x13\x77\xbe\x9f\x26\x92\x2b\x8e\x3a\x22\x91\xaf\x1d\x11\x09\x18\x5c\x38\x4c\x7c\x4b\x4f\x3a\x1f\x8c\xd3\xde\xd8\x13\x4d\x0f\xd0\xe6\x14\xca\x4e\xfb\x0f\xb6\x65\x94\x7b\x6b\xbc\x69\x0c\x21\x5b\x27\xef\xad\x3e\x4a\xaf\x7e\xa2\x11\x13\x26\x86\x4f\xad\x6e\x18\xbd\x5c\xe3\xdd\xde\xfc\x79\xa7\x0e\xad\x39\x05\x33\xc1\x7f\xf9\xdd\xbe\x19\x6c\x48\xa6\x0f\xec\x16\x85\xee\xe3\xec\x36\x9e\xef\xff\xec\xf6\x0f\x17\x6b\x16\x6a\xf8\xe4\x66\xef\xba\x3b\xed\x5f\x5b\xd9\x37\x24\x93\x37\xa6\xf7\xba\x1f\xcc\xe0\x92\xfa\x24\x17\x29\x52\x3a\xa7\xf5\x31\x97\x42\x64\xf3\x62\xc6\xa2\x0d\x5b\xca\x9c\x85\x76\x21\x88\x4d\x77\x30\xbd\xa2\x89\x9d\x27\x20\x96\xe3\xce\xba\xa3\xe9\x9f\xf4\x6e\x0c\x9e\x33\xee\x39\x36\x3c\xd8\x4f\x97\x14\x9f\x0b\xdd\xb9\x46\x74\x21\x88\x27\x7a\x0d\xce\x9b\xee\x0d\xa3\x4e\x42\xf7\x5b\x45\xe4\xe4\x25\x84\x64\xa9\x25\x9b\xf9\x9b\x00\xb3\x99\x23\x86\xdd\x7a\xa3\x77\x3d\xa4\x26\x1e\xbe\x0b\x73\xdc\x74\xee\x04\x4b\x50\xcc\x80\xfd\xa4\x7b\xed\xf6\xb8\xfe\x9c\x71\x03\xa1\x43\x8f\x58\xc5\x5f\xf2\x7e\x52\xc0\x48\xb2\x96\x53\xcb\x6c\x0e\xa2\xe1\x38\x1f\x50\xf4\x20\xc7\xc7\xb0\xb3\xc1\x4b\x0f\x14\x2b\x8f\x5f\x6e\xa6\xca\xa3\x32\x42\x25\x81\x67\x53\xe2\x82\x5e\xa4\x68\x63\xd9\xf8\xb1\x65\x2a\x7b\x56\xc4\x75\xed\x20\xdf\xbb\xd0\x0b\x82\x1e\xf7\xc6\xa6\x43\x5c\x7d\x9c\x71\xa5\x73\xc6\xbd\x31\xbd\x97\xba\x0f\xd7\x1e\x63\xfd\x9c\x8d\x85\x77\xb4\x33\xac\x62\x68\x32\x07\x99\x34\x3a\x73\x4c\xcb\x2b\xcd\x14\xbc\xff\x4f\xdf\x33\xe9\x4f\xb1\x21\xfc\xa5\xe5\xb2\x21\x2f\xe9\x99\x17\x5b\x64\x06\x6a\x79\x06\x99\xaa\x71\xa9\x63\x9e\x24\x9e\x85\x0e\x7a\x74\x9d\x73\x71\xbc\xd4\xf9\xce\x3e\x94\x53\x40\xc9\x45\xfd\x6a\x38\x67\x2b\xeb\xb9\x74\x43\x2a\x11\x05\x61\x5e\xe3\x99\xc4\x79\x56\xe7\xdb\xd9\x4c\x70\x8b\x8b\x0a\xa3\x3f\xaf\x6a\x9e\x0b\x67\xfa\x0c\x41\x54\x9e\x7b\xa1\x88\x1a\x87\x8e\x9c\xa5\x48\x72\x83\xa7\x1b\x21\xcd\x5c\x2b\x6f\x14\x37\x71\xc0\x9d\x95\xfd\xa2\xbf\x2c\x44\xdf\x74\x7a\x14\xb0\x78\xe8\xcf\x14\x94\xa0\x59\x14\x34\x22\x37\x97\xe6\x29\x74\x0b\x6a\x26\xf8\xfe\x0d\x00\x00\xff\xff\xdc\x23\xb6\x9f\x61\x1c\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7265, mode: os.FileMode(420), modTime: time.Unix(1522221462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


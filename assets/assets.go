// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\x23\xb9\x0d\x7f\xf7\xa7\x90\x71\x2f\x5e\x20\x9f\xc0\x68\x0b\xec\xae\xb7\x9b\xb4\xbb\x6d\x1a\xdf\x3e\x14\x87\x3c\x28\x63\xda\x56\x33\x33\x9a\x93\x34\xb9\x35\x8a\x7e\xf7\x42\x7f\x87\x94\x34\x4e\xec\xdb\x02\xf5\x43\x32\xe2\x48\x3f\x91\x14\x49\x91\x1c\xdd\xf0\x96\x2b\xf6\xb3\xe8\x60\x11\x9e\xff\xb2\xfd\xfb\xdf\x16\x0b\xdd\x1c\xa1\xe3\xec\xdf\x0b\xc6\x7e\x1d\x41\x9d\xd6\xec\x1f\xf6\xdf\x82\xb1\x6e\x34\xdc\x08\xd9\xaf\xd9\xd7\xf0\xb4\xf8\xcf\x62\xf1\x53\x78\x6f\x4e\x03\xf8\x47\xb7\xf6\x27\xf6\x4d\x83\x5a\x30\x36\x6a\x50\x2b\xb1\x5b\xb3\xbb\xcd\xbb\x75\x24\xfa\xb7\x3a\xbc\xd6\xab\x77\x6b\xf6\x8b\xa5\x3c\x2e\xdd\xcb\x7b\x25\xff\x05\x8d\x59\x30\x36\xf8\xa7\x00\x70\xc3\x74\x3b\x1e\xd6\x6c\x6b\x94\xe8\x0f\x37\xac\xe7\x1d\x4c\x23\xe8\x5f\x84\x92\x7d\x07\xbd\xb9\xdb\x44\xf2\xbb\x35\x42\x4b\xc8\x7a\x82\xd6\xab\xf0\xb0\x05\xae\x9a\x63\x9a\xee\x87\x77\xfd\x30\x9a\x1b\x36\x70\xc5\x3b\xbd\x66\xf7\xfc\x20\x7a\x6e\xa4\x72\xf4\x09\xfb\x8b\xd0\xc6\xb3\xfe\x67\xe0\x66\x54\x60\x37\xd8\x87\xc7\xd5\xec\xea\x30\x79\x5a\xbd\x05\xf5\x22\x1a\xb7\x5a\x87\xc7\xf9\xd5\x61\x72\xb1\x9a\xe9\x01\x1a\x04\xb1\xb5\x43\xa7\xe2\xed\x44\x08\x9a\x7e\x80\x16\xb8\x76\x1b\xaa\xf0\x38\xbf\x61\x98\x3c\x6d\xf8\x69\xd2\xb8\x45\x40\x07\x30\x69\x15\x1d\x98\x65\x01\x2d\x79\x2c\x40\xd8\x0b\x57\x82\x3f\xb5\x41\x01\x8d\x02\x73\x56\x7e\x3b\x01\x89\x2f\xfa\x43\x0b\x81\x9c\x00\x9c\xe9\xa4\xfd\xd3\xcb\x64\x0a\x9f\xbe\x1b\xe8\xb5\x90\xbd\x53\x9b\x95\x22\x12\xf4\x6a\xce\xa2\x7e\x49\x8b\xa8\xc1\x26\x32\xb2\xaf\x89\xe6\x8e\x20\x9f\x49\xcf\x01\x6d\x3e\x9d\x48\x86\xf0\x90\x51\x23\x0b\xa0\x3a\xa1\xd3\xe6\xd3\xc8\x2e\xb2\xae\xbd\xf4\xde\x9a\x7c\xd7\x39\x6c\x1c\x05\x9f\xfd\xa8\x80\x1b\x88\xac\x2f\x18\x6b\x1c\x21\x30\x1d\xcf\x34\x99\x7d\xe6\x05\xde\xb1\x87\x1d\x85\x18\x1d\xe1\x12\x88\xc0\x45\x10\x3f\x71\x11\x04\x5f\x05\x7a\xb2\xc7\xcc\x3c\xbd\x2d\x18\x39\x20\x00\x6d\xe4\x10\x97\xfb\x50\xb2\xcc\x16\x84\x3d\x83\xcb\xa4\x3d\x83\xc7\xac\x02\x3d\x39\x5d\xe6\x83\x58\xf2\x89\xe4\x25\xbf\x04\x62\x03\x2d\x10\x2e\x76\x8e\x70\x09\xc4\x5d\x37\x48\x65\x58\xc7\xfb\x53\x8a\x21\x8c\x1b\x26\x7b\x37\x41\xb8\xd7\x31\xce\x44\x44\xbd\x0e\xeb\xe2\x8b\x88\x1c\x43\xc6\x32\x58\x19\x55\x53\x74\x19\xa2\x2b\x1b\x5d\x56\x28\xf4\x24\xf6\xec\x20\xe3\x78\xeb\xd7\x27\xdd\x65\xb8\x44\x81\x57\xe1\x52\x85\x46\x5c\xa2\xd5\xab\x70\x83\x1e\x50\x80\x48\x6a\x40\xf1\x0c\x07\x90\x35\x0e\x74\x11\xf6\x13\x59\x9f\xd4\x40\x61\xbd\x16\x7e\x0f\x6c\xd0\x02\x85\xf5\x4a\xf8\x3d\xb0\xa5\x12\x52\x00\x47\x46\xe1\x82\xb0\x8f\xc5\x31\xfe\xd2\x08\x3e\x23\x39\xc6\x8a\x86\xf0\x36\xac\x52\xdc\x84\xc5\xd0\xe9\xbf\x0d\x0c\xfb\x53\x0d\x71\x72\xae\x3f\xf8\x1f\xbb\xfd\xf4\x7e\x43\x07\x93\xdb\xf9\x2b\x2d\x5c\x6d\x93\xd3\xb9\x21\xf2\x39\x3b\xb6\x2e\xf7\x47\xff\xbb\x10\x20\x0c\x17\x7f\xf2\x3f\xf6\x7e\xb7\x8b\xb7\x69\xc0\x01\x75\x25\x34\xe2\x2d\xa2\xef\xc5\x77\x16\x92\x46\xa1\xf5\xe8\xee\xee\xc9\x36\xf2\xdb\x35\xf8\x48\x24\xaf\xd2\x84\x35\x4b\xc4\x64\x6f\x91\x40\x2c\x24\x47\x0c\xee\x71\x05\x62\xb4\x93\x1c\x31\x78\xc6\x15\x88\xb9\xd4\xf9\x0d\x3a\x61\xe6\xd9\xc1\xba\xc8\x21\xb2\x9b\xf1\xbc\x32\xf2\x7b\xf6\x87\x6d\x84\x74\x14\x68\x5e\x3b\xff\x23\x81\x6c\x39\x80\x93\x97\x24\x97\xad\x0e\x50\x8a\xb3\x1a\xe9\xd8\x57\x16\x88\x30\x19\xac\x4b\xda\xe2\xfd\x45\xb3\x13\x92\xb1\x16\x2a\xac\x64\xb3\x98\x36\x09\x82\x88\x69\x5b\x44\x8c\x7b\x7f\x90\xf2\xb9\xe3\xea\x19\xe5\x46\x4f\x81\x74\x4f\xca\x1c\x9b\x9b\x7c\x90\xb2\x05\xde\xfb\x95\x9f\xc1\xb0\xcf\xc2\xb0\x8f\xb2\xeb\x84\xe3\xf4\x00\xe6\xb3\x30\x61\x1c\xb9\xb3\x39\xea\xdd\x66\x59\x54\x42\x8e\xd6\xc3\x6f\x09\x15\xe3\xbb\xa4\x30\xe5\xd6\x0b\xd1\x1b\x50\x7b\xde\xc0\x44\x73\xb9\x61\x23\x47\x7b\x2b\xdc\xf5\x26\x2c\x41\xc5\x80\x4f\x25\x11\xc1\x86\x94\x16\x9c\x42\xce\xc0\xd8\x82\xc1\x28\x61\x93\x8f\x98\xd4\x3e\x06\xf0\x29\xb5\xf7\xd8\xd3\xf8\x72\x68\xbf\x76\x42\x4e\x45\x53\x84\x4e\x84\x6b\xb0\xdd\xe2\x08\x8e\xea\x39\x0f\x8e\x08\x97\x83\x87\xc5\x11\x1c\x95\x9a\x1e\x1c\x11\x2e\x07\x0f\x8b\x23\xb8\xab\xcb\x1d\xaa\x7d\x72\x2b\x83\x2d\xda\x55\x1d\x17\x6d\x2c\x7f\x96\xb4\xba\xc8\x3c\xcc\x47\xbb\xdd\xda\x35\x16\xa8\x56\x88\x46\xb2\x1d\xf2\xaa\xc0\xd2\x3a\xd0\x9a\x1f\x00\xef\x6b\x9d\x1e\x8f\x8f\x5c\x1f\x09\x5f\x5c\x41\x6f\x6e\x33\xaa\x82\x3d\x1e\xd6\x58\x8c\x09\x34\xb6\x88\x37\xb0\xd8\xc8\xae\xe3\xfd\x0e\xa3\xe3\x96\xc4\x92\xd6\xe0\x24\x8b\x5c\x16\x67\x63\x6f\x5b\xab\x4e\x5b\xab\x3d\x2e\x69\x39\x4d\x72\x2f\xfb\xce\x32\x7a\x46\x28\x1b\xa5\x87\x56\x9e\xec\xf4\xad\x51\xdc\xc0\xe1\xe4\xab\xc0\x05\x63\xad\x78\x81\x1e\xb4\xbe\x57\xf2\x09\x12\x55\x01\xdf\x89\x92\x3c\x28\xb0\xb5\xd4\xad\x94\xcf\x71\x3f\xaf\x32\x9c\x0c\x3a\xb5\xe1\x3a\x9e\xaa\x2e\xd7\xc9\x33\x9c\xf0\x50\xe8\x0d\xec\xf9\xd8\x1a\x12\xf5\x1a\xd9\x4a\x75\x56\xc4\xd8\xc0\x29\xad\xb9\xd6\x52\xc0\x81\x24\xe3\x2f\xe3\xe7\x85\xb7\x23\x3d\xc3\x46\x52\x6d\xd7\x6c\xc1\xdb\xa6\xf5\x9e\xda\xf9\xbc\x80\x4a\xee\x12\xe3\xd1\xf9\x13\x2e\xc4\x15\x7a\x1b\x72\x55\x1a\xbb\x71\xd7\x87\x18\xb0\x35\xb3\x57\x4e\xa2\x19\xc6\x07\xf8\x75\x04\x6d\x32\xea\x17\xd1\x09\x42\xeb\xa0\x93\xea\x54\x99\xec\x5f\x14\xf3\x8d\x0d\x11\xbd\xeb\x2d\x7c\x56\xbc\x81\x7b\x50\x42\xee\x2a\x9e\x91\xbc\x62\x46\xe8\xd2\x36\xf0\xf5\x43\xae\x9e\x37\x78\x2c\x3d\x25\xae\x8c\xd8\x73\x67\x42\xbe\x43\xc2\xd8\x11\xf8\x2e\xc4\xa8\xd4\x9f\x73\xf2\x70\xd1\xd6\xe8\xda\x70\x03\x34\xda\x64\x4d\x9b\xb9\x96\x8d\x5b\xf9\xb5\x0c\x72\x17\x19\x85\x36\x5c\x11\xc2\x5e\xf4\x42\x1f\xa9\x0a\x1f\x64\xdb\x3e\xf1\xe6\xb9\xb8\xf5\x43\x1e\x82\x6f\x93\x57\x0c\x06\xf7\x5f\xbd\xb4\x83\xd4\xc2\x48\x75\xa2\x47\x1b\x8a\xaa\x44\x39\x08\xf3\x4d\xb5\x19\xe5\x5e\x49\x23\x1b\x49\xc8\x4a\xf3\x7b\x25\x5e\xb8\x81\xbf\x52\xaf\xb4\x2f\xc6\xa7\x56\x34\x19\x3d\x75\x59\xf5\x51\xfe\xb6\x71\x51\xcf\x4a\x1f\x24\x3d\xd3\xba\xcd\x9a\xaf\xcd\xa8\xec\xe5\xf1\x90\x35\x97\xae\x69\x8c\xbe\xd2\xba\xbd\x61\xda\xf5\x96\x91\x20\x65\x37\xf7\x7c\xf7\x73\x0e\x02\x37\x44\x01\x5b\x60\xb5\xed\x78\x10\xe6\x83\xe2\x7d\x43\x6e\xcb\x46\xf6\x46\xf4\xa3\x1c\xb5\x57\x26\x09\xca\x40\xf2\xdf\x32\xc9\x8d\xf9\x2c\x3a\x81\xb9\x2b\x37\xeb\xbb\xfa\x2b\x24\xd1\x5e\x09\x5b\xb2\x1b\x64\xef\x1c\x04\x45\x9c\xfc\x4a\xe4\xcd\x11\x6c\xe4\x27\xac\x64\xb1\xfe\xac\xb3\xc9\x7e\x2f\x0e\x53\x68\xa8\x49\x51\xd4\x32\xd8\x97\xe6\xc4\xa9\x05\xa6\x5a\x8d\x39\x13\xa2\x0a\xbe\x46\x6d\x64\xf7\x31\xa3\x16\x81\xe9\x07\xc4\x1b\x1c\x79\x51\xed\x89\x63\xf0\x9c\xcc\x79\xd3\x36\x93\x39\xd7\x18\x76\xa3\xad\x38\xf4\x21\xf0\xe6\x21\x66\xe6\x5d\x2e\x7a\x6e\x1a\x73\xaa\xa8\x28\x9b\x06\x58\xc6\xaa\x21\xf6\x8c\x65\x30\x61\xfd\x75\xe1\xfe\x92\x9e\x77\xd2\x4f\x48\xaa\x66\x23\x62\x35\x74\x52\xbf\xad\x7b\x1e\x3d\xdb\xe9\x03\xc6\x39\x27\x27\xbc\xfb\x4f\x60\x35\x09\xd0\xc7\x31\x27\x47\x79\x0d\xcc\x05\x03\x5c\x6e\x5a\x2b\x21\xe0\x24\xc6\x39\xe0\xc1\x9d\xd0\x9d\x6b\x38\xb6\x3e\xc7\xb0\x03\x62\x88\x18\x02\x7f\x12\x28\x35\x8c\x2e\xf7\x49\x1d\xc8\x23\x29\xb1\xaa\x3c\x77\xe5\x48\xd5\xc0\x03\x3c\x8d\xa2\x2d\x44\x8b\xd9\x18\x66\x0a\x77\xeb\x4b\xa6\xaa\x7b\xbf\xa1\xb2\xa8\x57\x0f\x61\xaf\x7b\xa9\xbc\x99\x2d\x1f\x2b\xf6\x3f\x2b\x59\xad\x6a\xd8\x14\x34\x0f\x5c\x56\x12\xb7\xc0\x5b\x73\x74\x03\x37\xa5\x52\x55\x54\xa6\xcc\x56\x18\xf1\x5b\x44\x68\x50\x12\x95\x56\xbe\x56\x38\xcd\xc6\x98\xf1\xcf\xf7\x5f\xbf\x78\xac\x6b\x8f\xd9\xb1\xf0\x51\xf6\x86\x8b\x1e\x14\x2b\x38\xc8\x15\xed\xcd\x55\x2a\x74\x24\xc9\x99\x63\xd7\xc4\xaf\x9c\x51\xa8\x03\xc8\x4f\xaa\xe3\xdf\xb7\xa3\x0a\x3e\x10\x08\xdf\x7a\xfe\xc2\x45\xeb\xaf\x36\x0a\x9d\xab\xb7\xc0\x74\x09\xbb\x39\xd2\x4c\x3c\x33\x36\x2c\x87\xab\x7e\x8e\xd0\x61\x80\x81\x1b\x1c\x79\x44\x2f\x8c\xe0\xed\x06\x5a\x7e\xda\x42\x23\xfb\x9d\x8e\x4b\x07\x97\xf4\x67\x44\x23\x3a\x90\xa3\xc9\xa8\x7a\x6c\x1a\xd0\xfa\xe7\xa3\x02\x7d\x94\xd6\xaf\x3c\x7d\xcf\x45\x3b\x2a\x28\xe8\x47\x63\x86\x5b\xe0\x3b\x50\xd6\xea\x91\xdc\xb7\xe9\x45\xb4\xff\x9a\x76\xb2\x59\x4e\x4f\xb9\x83\x65\x75\x60\x51\x6c\xd5\xcc\x21\x7d\x33\x2a\xfd\xfc\xff\xa9\xf6\x9a\x2d\xab\x70\xe5\x8c\xc5\xcb\xbf\x06\xbd\x2e\xde\x35\x45\xfe\x6c\xf1\x9e\xa9\x3a\x7d\xaa\x29\xd9\x78\xad\x96\x2f\x52\x81\x99\xda\x9e\x5c\x97\xb3\xf1\x72\xae\x26\xaf\xcb\x30\x1f\xc6\xa6\x6f\x2c\x21\x8a\x39\xc2\x05\x41\xcc\xd6\xb5\x6f\x0f\x6b\x34\xf7\xa6\x07\x4d\xba\xf5\x17\x1f\x73\x35\x33\x9f\x55\x5f\x3d\x45\xcf\xf3\x5b\x7a\x64\xd5\xb4\xbb\x96\xa3\x9c\x95\xe4\xa6\xaa\xc8\x1b\x9c\x94\x66\xf4\xb7\x65\xdd\xe7\xb4\x4e\xbf\x50\x10\x96\x6b\x1f\x2f\x1c\xc7\xe5\xb9\xd2\xde\x2b\x5d\x18\x22\xde\xa5\xfb\x4d\xdb\x15\xee\x72\x50\xbc\x2f\xac\xbb\xfc\xee\x51\xd5\x7f\x2d\x64\xcc\x9a\xc2\x1b\x37\xf2\xaa\x99\xdd\x68\xd2\x5c\xcd\x4b\xa8\xea\x66\xd8\xf4\xea\xfb\x6f\x00\x00\x00\xff\xff\xa1\x53\xc1\x9f\x1f\x27\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 10015, mode: os.FileMode(420), modTime: time.Unix(1548883709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcf\x72\x1b\xbd\x0d\xbf\xeb\x29\xa8\xc9\x45\x99\xf1\x13\xe8\xd6\xc4\x69\xec\x36\x69\x5d\xeb\xcb\xa1\x93\xf1\x81\x5e\xc1\x12\xeb\x5d\x72\x3f\x92\xeb\xc4\xd3\xe9\xbb\x77\xf8\x77\x01\x92\x2b\x5b\xfe\xd2\x99\x5e\xec\x25\xb4\x04\x01\x10\xf8\xe1\xcf\x9a\x8e\xf7\x5c\xb3\xdf\xc4\x00\xab\xf8\xfc\x97\xdd\xdf\xff\xb6\x5a\x99\xee\x08\x03\x67\xff\x5e\x31\xf6\xfb\x04\xfa\x79\xcb\xfe\xe1\xfe\xad\x18\x1b\x26\xcb\xad\x50\x72\xcb\xbe\xc6\xa7\xd5\x7f\x56\xab\x77\xf1\x77\xfb\x3c\x42\x78\xf4\x7b\xdf\xb1\x6f\x06\xf4\x8a\xb1\xc9\x80\xde\x88\xfd\x96\x5d\x5f\xbe\xdf\x26\x62\xf8\xd5\xc4\x9f\xcd\xe6\xfd\x96\x7d\x77\x94\xbb\xb5\xff\xf1\x46\xab\x7f\x41\x67\x57\x8c\x8d\xe1\x29\x32\xb8\x60\xa6\x9f\x0e\x5b\xb6\xb3\x5a\xc8\xc3\x05\x93\x7c\x80\x79\x05\xf2\x49\x68\x25\x07\x90\xf6\xfa\x32\x91\xdf\x6f\x11\xb7\x77\xec\xd3\xcf\x51\x69\x3b\x53\x00\xaf\xfd\x29\x61\xdb\x7a\x81\xdd\xfa\x7d\x7a\xc2\x82\x9a\x59\x52\xb3\x89\x0f\x3b\xe0\xba\x3b\xe6\xd3\xc3\xf2\x5a\x8e\x93\xbd\x60\x23\xd7\x7c\x30\x5b\x76\xc3\x0f\x42\x72\xab\xb4\xa7\xcf\xa2\x7e\x11\xc6\x06\x4b\xfc\x19\xb8\x9d\x34\xb8\x03\x1e\xe2\xe3\x66\x71\x77\x7c\x79\xde\xbd\x03\xfd\x24\x3a\xbf\xdb\xc4\xc7\xe5\xdd\xf1\xe5\x79\x77\xb0\x15\xe3\x7d\x9f\x77\xb3\x1f\xc2\x1e\x85\x64\x07\xf1\x04\x32\xa9\x7c\x7d\xc9\xb8\xdc\x53\x7b\x65\xd3\xee\xca\x73\x3f\x11\x72\x3e\x3c\x58\x97\x31\x2c\x37\x33\x23\x74\x48\xf8\x9d\x5b\x7a\x5f\xd9\xcd\x84\xe8\x32\xb7\xd0\x03\x37\x5e\x55\x1d\x1f\x97\x55\x8d\x2f\x23\x55\x67\xd9\x1d\x07\xa4\xca\x7c\x9f\xc8\xf3\x9c\x08\x68\xcb\x5d\xc5\x84\x3d\x71\x2d\xf8\x7d\x1f\x4d\xdf\x69\xb0\x27\x2d\xef\x5e\x68\x1a\x1e\x5a\x3c\xdf\x72\x0b\x54\x84\x4f\x98\xba\x70\x07\x42\x1e\x7a\x88\xb2\x65\x2d\x50\x88\x64\xc1\x71\x24\x7c\xfa\x69\x41\x1a\xa1\xa4\xbf\x3b\x7f\x7e\x24\x98\xcd\x52\x7c\x7e\xcf\x9b\x68\xf8\x67\x32\x0a\xaf\x99\xe6\xfd\xa0\x7c\x93\x3a\x03\x3a\x7c\x76\x8b\x82\xc3\x6d\x41\x4d\x22\x80\x1e\x84\xc9\x87\xcf\x2b\xb7\xc9\x01\xe5\x3a\x60\x5f\x46\x42\x0f\x7f\x69\x15\x11\xf0\xa3\x06\x6e\x21\x89\xbe\x62\xac\xf3\x84\x84\x36\x91\x9e\xa3\xbe\x00\x81\x00\x93\xe3\x9e\xb2\x98\x3c\xe1\x1c\x16\x51\x8a\xa8\x7e\x96\x22\x2a\xbe\x89\xf4\x1c\x14\x45\x8c\x04\x5f\xb0\x6a\x44\x0c\x8c\x55\x63\xda\x1e\x80\x79\x5d\x6c\x88\x67\xc6\xb8\xcd\x67\xc6\xb0\xdd\x44\x7a\xc6\x9c\x02\x82\xb0\xe6\x33\x29\x68\x7e\x0e\x8b\x4b\xe8\x81\x48\xb1\xf7\x84\x73\x58\x5c\x0f\x3e\x14\x07\x2e\x9f\x67\x10\xe4\x96\x29\xe9\x5f\x10\x03\xc1\xb8\xf4\xc6\x36\xee\x2b\x51\x2e\xe1\xd6\x3a\x7a\x19\x35\x53\x0a\x19\x62\x2b\x07\x71\x1b\x84\x7f\x59\x3c\xb7\x28\x24\xde\x85\xfd\xd9\x76\x05\x5f\x62\xc0\x37\xf1\xa5\x06\x4d\x7c\x89\x55\xdf\xc4\x37\xda\x01\x01\x44\x36\x03\x02\x55\x0c\x20\x5b\x8c\xb6\x89\xed\x27\xb2\x3f\x9b\x81\xb2\x0d\x56\xf8\x23\x6c\xa3\x15\x28\xdb\x60\x84\x3f\xc2\xb6\x36\x42\x46\x7c\xe4\x14\x1e\x84\x03\x16\x27\xfc\xa5\x69\x64\x41\x73\xcc\x2b\x39\xc2\xeb\x78\xd5\xea\x66\x5e\x0c\xdd\xfe\xeb\x98\xe1\x78\x6a\xe7\xb6\x3a\xb8\x42\xea\x8a\x59\x74\x0e\x2d\x92\xbb\xbe\x87\x75\x11\x58\x50\x66\xa3\xe8\x53\x89\xbc\xc9\x2f\xb8\x94\x18\x1f\xf3\xfd\x24\x02\xb1\x68\xc9\x31\xba\xd3\x1b\x38\x26\xbb\x96\x1c\xa3\x27\xbd\x81\x63\xa9\x75\x99\x71\x66\x9e\x65\x36\xdd\x56\x39\xb7\xc8\x24\xa7\x8d\x51\xe6\xa5\x5f\x76\x10\xb2\x51\xa4\x05\xeb\xfc\x8f\x14\x72\xcd\x08\x4e\xf6\x59\x2f\xd7\x9b\xa0\x92\x60\x33\xd1\x75\xe8\x6b\x10\x61\x76\xcb\x50\x53\x45\xb7\xa4\xd9\x9c\x94\x99\x95\x09\x1b\x25\x28\xa6\xcd\x8a\x20\x62\x3e\x16\x11\xd3\xd9\x1f\x94\x7a\x1c\xb8\x7e\x44\xb5\xc4\x7d\x24\xdd\x90\x26\xcb\xe5\xf2\x0f\x4a\xf5\xc0\x65\xd8\xf9\x19\x2c\xfb\x2c\x2c\xfb\xa8\x86\x41\x78\x49\x0f\x60\x3f\x0b\x1b\xd7\x9b\x5c\x80\xfa\xdd\x55\xe3\xe4\x69\x12\x7e\x64\xae\x98\xbf\x2f\xa2\x72\x41\xbc\x12\xd2\x82\x7e\xe0\x1d\xcc\x34\x5f\x4b\x75\x6a\x72\x28\x7a\x2d\x6d\xdc\x82\x2a\xf8\x50\x7a\x21\x82\x03\x8e\x1e\xbc\x41\x4e\xb0\x71\x55\xbe\xd5\xc2\x25\xeb\x54\x04\xde\x45\xe6\x73\x3d\x1e\x78\xcf\xeb\xf3\x59\x87\xbd\x33\xe7\xdc\x63\x25\xd6\x99\xf0\x16\xde\x7e\x73\x62\x8e\xda\xbf\xc0\x1c\x11\xce\x67\x1e\x37\x27\xe6\xa8\x33\x0d\xcc\x11\xe1\x7c\xe6\x71\x73\x62\xee\xa7\x02\x9e\xab\x7b\xf2\x3b\xa3\x2f\xba\x5d\x03\x17\x7d\xee\x4e\x68\x35\x5e\x44\x58\x40\xbb\xfd\xd6\x8f\x35\xa8\x55\x88\x45\x8a\x13\xca\x2a\xda\xd1\x06\x30\x86\x1f\x00\x9f\xeb\x82\x1e\xaf\x8f\xdc\x1c\x89\x5c\x5c\x83\xb4\x57\x05\x55\xc3\x03\x5e\xb6\x44\x4c\x05\x27\xf6\x88\x57\x88\xd8\xa9\x61\xe0\x72\x8f\xb9\xe3\x81\xc8\x9a\x36\xce\xa4\xea\x5a\x57\x77\xe3\x72\xaa\x33\xa7\xeb\x6d\xee\xd6\xb4\x07\x26\xb5\x8a\xfb\xcd\x09\x7a\x42\x29\x87\xd2\x63\xaf\x9e\xdd\xeb\x3b\xab\xb9\x85\xc3\x73\xe8\x9a\x56\x8c\xf5\xae\x69\x05\x63\x6e\xb4\xba\x87\x4c\xd5\xc0\xf7\xa2\x26\x8f\x1a\x5c\xef\x71\xa5\xd4\x63\x9e\xbb\x78\x93\xe1\xe2\xc9\x9b\x0d\x37\xdf\xd4\x74\xa5\x4d\x1e\xe1\x19\x2f\x85\xb9\x84\x07\x3e\xf5\x96\xa0\x5e\xa7\x7a\xa5\x4f\xaa\x98\xe6\x3d\xb5\x37\xb7\xe6\x00\x18\x48\x0a\xf9\x0a\x79\x9e\x78\x3f\xd1\x3b\xec\x14\xb5\x76\xcb\x17\x82\x6f\xba\xe8\x69\xdd\xcf\x13\xe8\x1c\x2e\x09\x8f\x4e\xdf\x70\xa5\xae\x30\xbb\x58\xdb\x51\xec\xc6\xa3\x1a\xe2\xc0\xce\xcd\x5e\xb8\x89\x6e\x9c\x6e\xe1\xf7\x09\x8c\x2d\xa8\x5f\xc4\x20\x08\x6d\x80\x41\xe9\xe7\xc6\xcb\xe1\x87\xea\x7d\xeb\x20\x42\xfa\x5e\xfc\xb3\xe6\x1d\xdc\x80\x16\x6a\xdf\x88\x8c\x1c\x15\x0b\x4a\xd7\xbe\x81\xd3\x0f\x49\x3d\xaf\x88\x58\x7a\x4b\x5c\x5b\xf1\xc0\xbd\x0b\x85\x89\x02\x63\x47\xe0\xfb\x88\x51\x79\x9c\xe7\xf5\xe1\xa2\x6f\xd1\x8d\xe5\x16\x28\xda\x14\x43\x8e\xa5\x11\x87\xdf\xf9\xb5\x06\xb9\xb3\x9c\xc2\x58\xae\x09\xe1\x41\x48\x61\x8e\xd4\x84\xb7\xaa\xef\xef\x79\xf7\x58\x65\xfd\x58\x87\xe0\x6c\xf2\x82\xc3\xe0\xe9\x6f\xd0\x76\x54\x46\x58\xa5\x9f\xe9\xd5\xc6\x26\x24\x53\x0e\xc2\x7e\xd3\x7d\x41\xb9\xd1\xca\xaa\x4e\x11\xb2\x36\xfc\x46\x8b\x27\x6e\xe1\xaf\x34\x2a\xdd\x0f\xd3\x7d\x2f\xba\x82\x9e\x87\xb2\xe6\xa8\x7e\x5c\x7a\xd4\x73\xda\x47\x4d\x4f\x4c\x7a\x8b\x59\x6d\x37\x69\x97\x3c\x6e\x8b\x61\xcc\x5b\xa6\x99\x2f\x4c\x7a\x2f\x98\xf1\xa3\x68\xa4\x48\x3d\xfc\x3d\x3d\xb2\x5c\x62\x81\xa7\x98\x80\x3d\xb0\x39\xa6\x3b\x08\xfb\x41\x73\xd9\x91\x6c\xd9\x29\x69\x85\x9c\xd4\x64\x82\x31\x09\x28\x03\xa9\x7f\xeb\x22\x37\xd5\xb3\xe8\x06\x96\x52\x6e\x31\xa7\x0c\x29\x24\xd3\x5e\x80\x2d\x35\x8c\x4a\xfa\x00\x41\x88\x53\xa6\x44\xde\x1d\xc1\x21\x3f\x11\xa5\xc0\xfa\x93\xc1\xa6\xe4\x83\x38\xcc\xd0\xd0\xd2\xa2\xea\x65\x70\x2c\x2d\xa9\xd3\x02\xa6\x56\x8f\xb9\x00\x51\x95\x5c\x93\xb1\x6a\xf8\x58\x50\x2b\x60\xfa\x05\x78\x83\x91\x17\xf5\x9e\x18\x83\x97\x74\x2e\x87\x9c\x85\xce\xa5\xc5\x70\x18\xed\xc4\x41\x46\xe0\x2d\x21\x66\xe1\xb7\x52\xf5\xd2\x35\x96\x4c\xd1\x30\x36\x05\x58\x3f\x99\xaf\x21\xf6\x84\x67\x30\xe1\xe2\x75\xe5\xff\x92\x19\x71\xb6\x4f\xfe\x98\xb5\x80\x88\x4d\xe8\xa4\x71\xdb\x8e\x3c\x7a\xb7\xf3\xc0\xff\x54\x90\x13\xd9\xc3\x17\xb3\x96\x06\xe8\x5b\x9a\xd7\xa3\x4e\x03\x4b\x60\x80\xdb\x4d\xe7\x25\x84\x39\xc1\x38\xcf\x78\xf4\x37\x74\xed\x07\x74\x7d\xa8\x31\xdc\x82\x38\x22\x66\x81\x47\xe8\xb5\x85\x51\x72\x47\x1f\x14\xe7\x88\xa4\xc4\xf6\xe7\x47\xe7\x00\x4a\x77\x70\x0b\xf7\x93\xe8\x2b\xd5\x52\x35\x86\x85\xc2\xd3\xed\x5a\xa8\xe6\xd9\xaf\xe8\x2c\xda\xdd\x43\x3c\xeb\x46\xe9\xe0\x66\xeb\xbb\x86\xff\x2f\x6a\xd6\xea\x1a\x2e\x2b\x5a\x60\x5c\x77\x12\x57\xc0\x7b\x7b\xf4\x0b\xff\x4a\xa3\xab\x68\xbc\xb2\xd8\x61\xa4\xd9\x7d\x1c\x43\x12\x93\x36\xa6\xfb\xde\xb2\x09\x33\xfe\xf9\xa7\xaf\x5f\x02\xaf\xb7\x5e\x33\x15\x21\x7c\xc4\x23\x22\x34\x3e\xa3\x06\x97\x3d\xf7\x90\x8f\x4a\x5a\x2e\x24\x68\x56\x9d\x51\xde\x66\x38\x40\x69\x74\xef\x19\x31\xd2\x68\x26\xec\x5c\xb8\x35\xcf\xa0\x74\x87\x81\xff\xdc\x4d\x3a\x06\x5a\x24\x7c\x93\xfc\x89\x8b\x3e\xe4\x4f\xca\xba\xbc\xc3\x8a\xa7\xef\x0a\xec\x91\x96\xfb\x85\x47\x63\x3d\x7c\x8b\x75\x84\x01\x33\x18\xb9\xc5\xf0\x26\xa4\xb0\x82\xf7\x97\xd0\xf3\xe7\x1d\x74\x4a\xee\x4d\xda\x3a\xfa\xce\xa2\x20\x5a\x31\x80\x9a\x6c\x41\x35\x53\xd7\x81\x31\xbf\x1d\x35\x98\xa3\x72\xc1\x1b\xe8\x0f\x5c\xf4\x93\x86\x8a\x7e\xb4\x76\xbc\x02\xbe\x07\xed\x42\x0b\xe9\x7d\x95\x7f\x48\x41\xd6\xb2\x4e\xf1\x96\xb7\x53\x19\xc5\x45\xb3\x59\x75\x74\x2d\x77\xc8\x1f\x72\x6a\x30\xf9\x7f\x6a\xf0\x16\x7b\x37\xdc\x9e\x93\x88\x2a\x3e\xd1\xbc\xac\xde\x5b\x26\x09\x8b\x13\x82\xc2\xd4\xf9\xfb\x49\x2d\xc6\x4b\x03\x83\xaa\xde\x58\x18\x20\x90\x9c\xbc\x08\xca\x4b\x8d\x7f\x5b\x87\x65\xac\x9c\x3f\xd7\x44\xa8\xf4\x84\x5f\x84\x94\x4d\x61\x4e\xa0\x66\x21\xcc\xf9\xe7\x91\xf6\xa1\x38\x02\x7f\x70\x38\xdb\x89\x9a\xcd\xc5\xe2\xe5\xb4\xbb\x8c\xb2\x44\xa7\x0e\xd1\xec\x1c\x5a\x65\xd6\x49\x4d\x2e\x9a\x66\xbb\xc0\x75\x75\x41\x7f\x5d\xe3\x70\xca\xea\xf4\x23\x0b\x11\xb9\xf5\xfd\xc5\x4b\x3c\x19\xd0\x45\xb5\x45\xc6\xc7\x74\x63\xc4\xd3\x73\xcf\x9b\x8f\xab\x82\xf1\xa0\xb9\xac\x62\xa7\xfe\x74\xd3\xb4\x7f\x0b\x90\x16\x5d\xe1\x95\x07\x05\xd3\x2c\x1e\x34\x5b\xae\x15\x13\xd4\x74\x0b\x62\x06\xf3\xfd\x37\x00\x00\xff\xff\xb2\xa5\xe6\xb6\x60\x28\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 10336, mode: os.FileMode(420), modTime: time.Unix(1551137924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


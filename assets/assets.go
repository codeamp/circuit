// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xcf\x72\xdb\x36\x13\xbf\xf3\x29\xa0\xc9\x45\x9e\xf1\x13\xf0\x98\x38\xdf\xd7\xb4\x4d\xeb\x5a\xc9\x29\x93\x03\x42\xc1\x12\x1a\x92\x50\x00\x50\xad\xa6\xd3\x77\xef\x2c\xb0\x00\x77\x41\x52\xb2\xec\x74\x7a\xb1\x88\x25\xf8\xc3\xee\x0f\xfb\x0f\xb0\x6b\x64\x2b\xad\xf8\xa0\x3b\x55\xe1\xf3\x8f\x9b\x5f\x7f\xa9\x2a\xd7\xec\x55\x27\xc5\x5f\x95\x10\xdf\x06\x65\x4f\xb5\xf8\x0d\x7e\x2a\x21\xba\xc1\x4b\xaf\x4d\x5f\x8b\xf7\xf8\x54\xfd\x5d\x55\xaf\xf0\xbd\x3f\x1d\x54\x7c\x0c\xdf\xbe\x12\x1f\x9d\xb2\x95\x10\x83\x53\x76\xad\xb7\xb5\x78\x77\x77\x53\x27\x61\x7c\xeb\xf0\xb5\x5b\xdf\xd4\xe2\x13\x48\x3e\xaf\xc2\xcb\x7b\x6b\x7e\x57\x8d\xaf\x84\x38\xc4\x27\x04\xb8\x15\xae\x1d\x76\xb5\xd8\x78\xab\xfb\xdd\xad\xe8\x65\xa7\xc6\x91\xea\x8f\xda\x9a\xbe\x53\xbd\x7f\x77\x97\xc4\x37\x35\x41\xcb\xc8\x6e\x84\x76\x6b\x7c\xd8\x28\x69\x9b\x7d\x9e\x1e\x87\xef\xfa\xc3\xe0\x41\x3b\x94\xa2\x82\xff\x53\xd2\x0f\x56\x01\xcc\x23\x3e\x06\x1b\x50\x8e\xb3\x36\xca\x1e\x75\x13\x66\x39\x7c\x0c\xb3\x50\xce\x67\x09\x77\x50\x0d\x99\xba\x81\x21\x9d\x0e\x02\xfc\xe4\x41\xb5\x4a\xba\x00\x6c\xf1\x31\xcc\x44\x39\xce\x7a\x3b\xf2\x01\x33\x09\x3d\x71\x36\x79\x3f\xfd\x42\x1c\xa5\xd5\xf2\x4b\x8b\xda\x37\x56\xf9\xa4\x0d\x3c\xf3\x8d\x7a\xfb\xa7\x57\xbd\xd3\xa6\x0f\x46\xc0\x5a\x49\xe0\xd6\x4b\xbb\xf2\x29\x7f\xb4\x80\x45\xf6\x68\x94\xad\xc9\x5e\x94\x00\x68\x3d\x59\x7c\xe4\xa7\x40\x78\x28\xa4\x49\x05\x65\x3b\xed\xf2\xe2\xe3\x08\x3e\x82\xf0\x60\x9a\x7e\x38\x1d\x14\x51\x32\x0c\xa9\x7e\x20\xf8\xbc\x8a\x31\x92\x23\x26\x84\x49\x1a\x61\xa4\xbc\xb1\x4a\x7a\x95\x70\x2a\x21\x9a\x20\x40\x98\xe4\x9f\xd9\x33\x93\x4f\x52\xbf\xfe\x78\xd8\x72\x88\x21\x08\xae\x81\x40\x2d\x90\xb0\xac\x05\x52\xb5\x46\x79\x9d\x68\x4e\x10\x0f\x79\x7e\x86\x40\x0f\xce\x10\xe8\xc0\x6b\x94\xd7\xc9\xe5\x13\xc4\x26\xcf\xcf\x86\x8c\xa2\x68\xc8\x35\x10\x77\xaa\x55\x4c\x8b\x6d\x10\x5c\x03\xc1\x0d\x49\x5e\xcd\xac\x81\x70\x5c\x93\x58\xcd\x00\x30\x28\x30\x37\xf1\xfb\x6c\x5d\x81\xcb\x4c\x7c\x16\x2e\x37\x39\xe1\x32\xbb\x9f\x85\x8b\x3c\x90\x18\xce\x34\x90\x5c\x41\x63\xbc\xa6\x49\x24\xc1\xbe\x65\xdf\x67\x1a\x38\x6c\x64\xe1\x25\xb0\xc8\x02\x87\x8d\x24\xbc\x04\x76\x4a\x42\x4e\x8e\xc4\x29\x20\x2b\xae\x63\xa2\x04\x1e\xe1\x77\x64\x15\x46\x0b\x96\x53\xac\xe4\x08\x4f\xc3\x9a\x9a\x9b\xb1\x04\xd9\xfd\xa7\x81\x25\x23\xcb\x4c\x8e\x9b\x9d\xc4\xeb\x3c\xa1\x16\x59\x98\x89\x4b\x02\x66\x6a\x89\x88\xfb\xfc\x0c\xc4\x64\x70\x89\x88\x5b\xfc\x0c\xc4\xd2\xea\x32\xf7\x8e\x98\x65\x25\xaa\x27\xf5\xaa\xc8\xa9\xe7\xc9\x28\x33\xf4\x77\x5b\x88\x70\x84\xb2\xc8\xce\xbf\x64\x10\xb4\x6f\xb4\x50\x66\xbb\xa0\x9b\x23\xe5\x74\x3d\xf0\x71\xec\x04\x89\x20\x37\x5a\xb1\x41\x58\x61\x45\xe6\x75\x8d\xf5\x30\x13\x0a\x69\x7f\x73\x98\xca\x46\x43\x88\x30\x2f\x4b\x84\x69\xed\xd7\xc6\x7c\xed\xa4\xfd\x4a\xaa\xea\x17\x14\xdd\xb3\xb6\x74\x75\x53\xc3\xe4\x56\xc9\x1e\xcb\x7d\x68\x73\x43\xa9\x87\xa7\x50\xe6\x71\x2a\x34\x47\x9d\xd4\x6d\xea\x84\x56\xbc\xd1\x28\x08\x88\xce\xb8\xad\x43\x9f\x8e\xd8\xd8\x63\x46\x78\x1c\x14\x2b\x94\xe5\x1e\x64\x9d\x72\x4e\xee\x14\x5d\x17\xf6\x84\x8e\xf7\xd2\xed\x99\x5e\xd2\xaa\xde\xff\x50\x48\xad\x7a\xa4\xc3\x39\x15\x53\x29\x0d\x2a\xa6\xfe\xf6\xb2\x8a\x8d\xe9\x3a\xd9\x6f\x29\x3a\xed\xf0\x57\xbc\x39\x66\xd5\x2a\x7e\x3e\x40\x46\x27\xfa\x1b\x0b\xdb\xfe\x09\x3a\xb7\x40\xe7\x52\xe6\x87\x77\xa0\xeb\x25\xbb\x68\x65\x08\xb6\xd1\x86\x99\xdb\x57\x2a\xfe\x55\x9d\xe8\x50\xbb\x3b\xf5\x28\x87\xd6\x13\xcf\x01\x0b\x5a\x63\xaf\x50\x62\xac\x1d\xc8\x34\xa4\xf3\x42\x91\x62\xe1\xa3\x6c\x07\xce\x68\x63\xb8\xe1\x73\x3b\x13\x3d\x05\x7c\x79\x8e\xaa\xa3\xb2\xd9\x79\xc7\xd3\xc1\x39\xb2\x0b\xbb\x80\x8f\x0d\x56\x28\x1e\x48\xf4\x70\xc4\xdc\x09\x36\xfd\x02\xe5\xcd\x61\x78\x50\xdf\x06\xe5\x7c\x21\xfd\x59\x77\x9a\xc9\x3a\xd5\x19\x7b\x9a\x99\x1c\x5f\x4c\xe6\x7b\x08\xd8\x3e\xb4\xf0\xff\xb7\xb2\x51\xf7\xca\x6a\xb3\xbd\xb4\x71\xa9\x53\x0e\x66\xa4\xc3\xca\xe5\xa8\xe0\xdc\x4b\xeb\xf5\xa3\x6c\xc0\xaf\xd3\x81\x64\xaf\xe4\x16\xf3\x40\x9d\x12\x42\xd0\x52\xea\x76\x4e\xee\xbc\xf4\x8a\x47\x74\x71\x46\x5a\x3a\x21\x85\x2f\xdf\x4f\x13\xc9\x15\x5b\x1d\x98\x48\xc7\x8e\xc0\x04\x0e\x2e\x6c\x26\x3d\xf8\x47\x9d\x0f\xc6\x69\x6f\xec\x89\xa7\x07\x6c\x73\xb2\x64\xa7\xfd\x47\xdb\x16\x92\x7b\x6b\xbc\x69\x0c\x13\x5b\x27\xef\xad\x3e\x4a\xaf\x7e\xe2\x11\x03\x2f\x86\x2f\xad\x6e\x0a\x79\x3e\xf8\xbb\xbd\xf9\xe3\x4e\x1d\x5a\x73\x02\x33\xd1\x7f\xcb\xdb\x80\x66\xb0\x90\x4c\x1f\x8a\x53\x14\x39\xc1\x17\xe7\xf7\x74\x63\x50\xdc\x17\xe0\x51\xbc\x08\x35\xba\x73\xb3\xa7\xe3\x9d\xf6\xaf\xad\xec\x1b\x96\xc9\x1b\xd3\x7b\xdd\x0f\x66\x70\x51\x7d\x96\x8b\x14\x2b\x9d\xd3\xfa\x98\x4a\x21\xb1\xf9\xc2\x76\xc3\x79\x98\x6d\x39\x08\xae\x4b\x9b\xf2\x28\x75\x0b\x09\x8f\xfa\x6a\x8c\x83\x98\x1b\x79\x6b\x18\x73\x74\x96\x5d\x48\x17\xa6\x3b\x98\x5e\xf1\x12\x52\xa6\xba\x42\x9f\xb3\x8e\x6f\xfa\x47\xbd\x1b\xc3\xf4\x0c\x33\x63\x6b\x45\xe9\x59\x52\x7c\x2e\x49\xcc\xb5\xbc\x0b\xe9\x62\xa2\xd7\xe0\xbc\xe9\xde\x14\xd2\x49\x92\xf8\x5e\xb1\x3f\xb9\xa5\x61\xf9\x70\xc9\xe6\xf2\xf6\xa1\xb0\xb9\x64\x8c\x06\xd0\x46\xef\x7a\x4c\x82\x65\xa2\x58\x78\x57\x9a\x5e\x3a\xc1\x12\x15\x33\x64\x3f\xea\x5e\xbb\x3d\xad\x74\x67\xdc\x40\x68\xe8\x46\xab\xf0\x97\xdd\xd4\x64\x32\xe2\x5a\xcb\x49\x6c\x36\xdb\xf1\xc0\x9f\x0f\x5d\xbe\x91\xe3\x45\xdd\xd9\x34\x31\x89\xee\x39\x03\x40\xbe\x60\xc4\x0b\x83\x9d\x5d\xd4\xce\x2d\x4d\xae\x70\xc3\xe2\xd3\x9a\x71\xbb\x94\xc8\x98\xab\x52\x68\x7a\xfb\x35\xb5\x88\x94\x62\xce\x21\xc6\x2c\x17\x2e\x30\xce\x1a\x1f\xba\x36\xbd\xb0\x9a\xae\x3d\xbb\xc4\x75\x2d\x75\xf9\xed\x42\x3f\x8d\x7a\xdc\x1b\x1b\xdd\x73\xf5\x79\x26\x48\xce\x19\xf7\xc6\xf4\x5e\xea\x1e\x8e\x8e\xc6\xfa\x39\x1b\x33\x76\xb0\x13\x66\x15\x6c\x16\xae\x3f\x69\x16\xe7\x40\xf3\x4d\xd7\x65\x57\xfc\xef\x7a\xc7\x49\x8f\x4f\x0d\x29\x6f\xab\xae\x8e\xa9\x27\x9d\x3b\x16\x8f\x19\x05\xa9\xf9\x2a\x69\xaa\xc6\xa5\x53\xc7\x24\xa5\x2e\x9c\x42\x46\xd7\x39\x97\xa1\x96\x4e\x0f\xb3\xff\x9e\xe0\x84\xb2\xcb\x8e\xab\xe9\x9c\xed\x19\xce\x25\x52\x56\x63\x39\x09\xf3\x1a\xcf\xa4\xb5\xb3\x3a\xdf\xce\x66\x82\x5b\x5a\x2e\x0b\xf9\xd3\xfa\x81\x73\xe1\xcc\xaf\x72\x98\xca\x73\xb7\x3c\x41\x63\x38\xd5\x14\x29\x92\xdd\x82\xf0\x0f\x31\xcd\x5c\xbb\xde\xb8\xdc\xc4\x01\x77\x56\xf6\x8b\xfe\xb2\x10\x7d\xd3\xd7\xe3\x02\x8b\x9b\xfe\xc4\x85\x22\x35\x8b\x0b\x8d\xcc\xcd\xa5\x79\x4e\xdd\x82\x9a\x91\xbe\x7f\x02\x00\x00\xff\xff\x2c\xec\x7e\x9a\xf8\x1d\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7672, mode: os.FileMode(420), modTime: time.Unix(1522964079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


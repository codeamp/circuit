// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x73\x1b\x27\x10\x7f\xd7\xa7\x40\x93\x17\x65\xc6\x9f\xe0\x1e\x13\xa7\x6d\xda\xa6\x75\xad\xe6\x29\x93\x07\x7c\xc2\x12\xf5\xdd\xa1\x00\xe7\xd6\xd3\xe9\x77\xef\x00\x0b\xb7\xbb\x77\x48\x96\x93\xce\xf4\x45\x3a\x16\x58\xf6\xb7\xec\x3f\xd6\xb5\xb2\x93\x56\xfc\xae\x7b\xb5\x82\xef\x1f\xb7\xbf\xfe\xb2\x5a\xb9\xf6\xa0\x7a\x29\xfe\x5e\x09\xf1\x65\x54\xf6\xa9\x11\xbf\x85\xbf\x95\x10\xfd\xe8\xa5\xd7\x66\x68\xc4\x07\xf8\x5a\xfd\xb3\x5a\xbd\x82\x79\xff\x74\x54\xe9\x33\xee\x7d\x25\x3e\x3a\x65\x57\x42\x8c\x4e\xd9\x8d\xde\x35\xe2\xfd\xf5\xeb\x26\x13\xd3\xac\x83\x69\xb7\x79\xdd\x88\x4f\x81\xf2\x79\x1d\x27\x6f\xac\xf9\x43\xb5\x7e\x25\xc4\x31\x7d\x01\x83\x2b\xe1\xba\x71\xdf\x88\xad\xb7\x7a\xd8\x5f\x89\x41\xf6\x6a\x1a\xa9\xe1\x51\x5b\x33\xf4\x6a\xf0\xef\xaf\x33\xf9\x75\x83\xb8\x15\xce\x6e\x62\xed\x36\xf0\xb1\x55\xd2\xb6\x87\xb2\x3c\x0d\xdf\x0f\xc7\xd1\x07\xe9\x80\x0a\x02\x7e\xa7\xa4\x1f\xad\x0a\x6c\xee\xe1\x33\x62\x00\x3a\xac\xda\x2a\xfb\xa8\xdb\xb8\xca\xc1\x67\x5c\x05\x74\xba\x4a\xb8\xa3\x6a\xd1\xd2\x6d\x18\xe2\xe5\x81\x00\x5b\x6e\x55\xa7\xa4\x8b\x8c\x2d\x7c\xc6\x95\x40\x87\x55\xef\x26\x7d\x84\x95\x48\x3d\x69\x35\x9a\x9f\xef\x10\x8f\xd2\x6a\x79\xd7\x81\xf4\xad\x55\x3e\x4b\x13\xbe\xe9\x45\xbd\xfb\xcb\xab\xc1\x69\x33\x44\x10\xe1\xac\x4c\x70\x9b\xda\xad\x7c\x2a\x9b\x2a\xbc\xd0\x1d\x4d\xb4\x0d\xba\x0b\xce\x00\xd0\xa3\xc3\x27\xfd\x30\x0e\xb7\x8c\x9a\x45\x50\xb6\xd7\xae\x1c\x3e\x8d\xc2\xa6\xe0\x1e\xeb\x64\xf1\xc5\xfe\xa3\xd1\xe7\x11\xd8\xfd\x5b\xab\xa4\x57\x59\xf4\x95\x10\x6d\x24\x80\xd0\xd9\xda\x8a\x9d\x65\x0b\xc3\x56\xfa\xf1\xb8\xa3\x2c\xc6\x48\xb8\x84\x05\x48\x01\xf0\x8b\x14\x00\x7c\x03\xf4\x26\x2b\x2d\xb3\xb8\x2d\xeb\x5f\x89\xad\x37\x47\xc4\xc0\x79\x73\xcc\xdb\x93\x3b\xae\xd9\x06\x38\x13\x0c\xb8\x9c\x09\xf6\xbb\x01\x7a\x93\x2d\x3e\x9f\xb9\x2d\xeb\x0b\xf2\x89\x94\x90\x5f\xc2\xe2\x5a\x75\x8a\x48\xb1\x8b\x84\x4b\x58\x50\x20\xd9\xa8\x09\x9a\xe0\x8d\x1b\xe4\xaa\x85\x41\x18\x30\x9e\xdb\xb4\xbf\xa0\x63\x7c\x09\xc4\x17\xf1\xa5\x90\x33\x5f\x82\xfb\x45\x7c\x41\x0f\xc8\x85\x8b\x1a\x50\xa8\xc0\x2e\xde\xe0\x18\x92\xd9\xbe\x23\xfb\x8b\x1a\x28\xdb\xa4\x85\xaf\x61\x0b\x5a\xa0\x6c\x93\x12\xbe\x86\xed\x5c\x09\x25\x36\x22\xa3\x08\x41\x71\x93\xe2\x64\xd0\x63\xf8\x9f\xb4\x1a\x46\x15\xe4\x98\x57\x36\x84\xe7\xf1\x9a\xc3\x2d\xbc\x04\xba\xfd\xe7\x31\xcb\x20\x79\x20\x87\xcb\xce\xe4\x4d\x59\xd0\x88\x42\x2c\x8a\xcb\x04\x02\x95\x73\x84\x7b\x7e\x01\xc7\x0c\x98\x73\x84\x2b\x7e\x01\x47\x8e\x9a\x07\xeb\x89\x27\x4f\x44\xcd\x2c\x5d\xb1\x20\x7c\x5a\x19\x3c\xa4\x7f\xb3\x83\x90\x8e\x80\x96\xb4\xf3\x1f\x01\x0a\xd5\x1b\xce\x93\x05\x57\x28\xe6\x50\x36\xdd\x8c\x74\x9c\x0a\x41\x44\x28\x75\x56\xaa\x0f\xd6\x90\x90\x69\x22\x24\x25\xcc\x4c\x85\xb8\xbc\x39\xce\x69\x13\x10\x44\x2c\xc7\x22\x62\x3e\xfb\x8d\x31\x0f\xbd\xb4\x0f\x28\x0d\xdf\x01\xe9\x86\x54\xa5\x21\x0d\xbe\x31\xa6\x53\x72\x80\xfa\x20\x56\xb9\xb1\x36\x08\x5f\xb1\x2e\x80\xa5\xa1\x36\xea\xa5\xee\x72\x21\xb4\xa6\x75\x06\x53\x40\x32\xc6\x5d\x13\xcb\x74\xe0\x0d\x25\x66\x62\x0f\x03\x76\x02\xaf\x0f\x02\xad\x57\xce\xc9\xbd\xc2\xe7\x86\x3b\xc1\xe3\x83\x74\x07\x22\x97\xb4\x6a\xf0\x3f\x30\xaa\x55\xf7\x78\xb8\x24\x62\x4e\xa5\x51\xc4\x5c\xde\x9e\x17\xb1\x35\x7d\x2f\x87\x1d\xe6\x8e\x0b\xfc\x35\xad\x8d\x49\xb6\x4a\xdb\xc7\x10\xd1\x91\xfc\xc6\x86\x6b\xff\x14\x0a\xb7\xa8\xce\x5a\xe4\x0f\x73\x41\xd6\x73\xb8\x70\x66\x88\xd8\x70\xbd\x4c\xf1\x71\xc1\x1f\xd4\x13\x1e\x6a\x77\xad\xee\xe5\xd8\x79\x64\x39\x01\x41\x67\xec\x09\x21\x8a\xda\x72\xfd\x3f\x55\xb2\xc1\x5e\xb8\x8c\x53\x6a\x81\x8b\x08\xd1\x9e\xc9\xc9\xe4\x7a\x94\xdd\x48\x15\xde\x1a\xaa\x97\xa5\x8b\x4b\x86\x14\x4c\x7d\x49\x93\x8f\xca\x16\xdb\x9e\xde\x0e\xa7\xee\x62\x06\x5b\xbb\x2d\x24\x30\xea\x67\xf8\xe9\x44\xac\x2d\xd8\xc4\x99\x1b\x69\x8f\xe3\xad\xfa\x32\x2a\xe7\x19\xf5\x67\xdd\x6b\x42\xeb\x55\x6f\xec\xd3\xc2\xe2\x34\x31\x5b\xef\x83\x3f\x0f\xf1\x49\xf0\xbd\x95\xad\xba\x51\x56\x9b\xdd\x39\xe3\xca\x85\x74\x84\x91\x9f\x32\xe7\x9d\x86\xea\x5e\x5a\xaf\xef\x65\x1b\xcc\x3e\x3d\x57\x84\x38\x28\xb9\x83\x30\xd1\xe4\x78\x11\xa5\x94\xba\x5b\xa2\x3b\x2f\xbd\xa2\x0e\xcf\x5e\x50\xb5\xf7\x53\xdc\xf9\x61\x1e\x67\x2e\xb8\xea\xa8\x89\xfc\x8c\x89\x9a\x80\xc1\x99\xcb\xc4\x6d\x81\x24\xf3\xd1\x38\xed\x8d\x7d\xa2\xd1\x03\xaa\xa0\x42\xd9\x6b\xff\xd1\x76\x8c\x72\x63\x8d\x37\xad\x21\x64\xeb\xe4\x8d\xd5\x8f\xd2\xab\x9f\xa8\xc7\x84\x89\xf1\xae\xd3\x2d\xa3\x97\xb6\x80\x3b\x98\x3f\xaf\xd5\xb1\x33\x4f\x01\x26\xd8\x2f\xef\x15\xb4\xa3\x0d\xb1\xf6\x96\xbd\xca\xd0\xfb\x9e\xbd\xee\x73\x3f\x81\x75\x13\xe0\xa1\xce\x5c\x0d\xdf\xdc\xe2\xdb\x79\xaf\xfd\x1b\x2b\x87\x96\x04\xfa\xd6\x0c\x5e\x0f\xa3\x19\x5d\x12\x9f\x84\x2a\x45\x32\xeb\x3c\x7d\xe6\x4c\x89\x30\x57\xa3\x2a\xad\xe7\x52\x60\x2d\xb4\x33\x4e\x6c\xfa\xa3\x19\x14\x8d\xfb\x3c\x00\xb1\x18\x77\xd2\x1c\xcd\x70\xaf\xf7\x93\xf3\x9c\x30\xcf\xa9\x1e\xc2\x76\x5a\x13\x7c\xc9\x75\x97\xea\xd4\x8a\x13\xcf\xe4\x1a\x9d\x37\xfd\x5b\x46\x9d\xb9\xee\xb7\xf2\xc8\x59\x67\x85\x44\xa9\x1a\x66\xde\x63\x60\x98\xb9\xc6\xb0\x59\x6f\xf5\x7e\x80\xd0\xc4\xdd\xb7\x32\xc7\xa1\x73\x23\xa8\xa9\x62\x41\xd9\xf7\x7a\xd0\xee\x80\xf3\xcf\x09\x33\x10\x3a\x94\x90\xab\xf8\x4b\xfa\x31\x45\x19\xe9\xac\x7a\x68\x59\x8c\x41\xd4\x1d\x97\x1d\x8a\x5e\xe4\xd4\x5c\x3b\xe5\xbb\x44\xf6\xd4\xe2\x5c\x42\x80\x9a\x9f\x11\xc7\x3c\x9e\xd6\x7c\x9c\xd8\x0b\xe6\x8c\x1b\x4d\x73\xdd\xa0\x2c\x35\x01\x41\x8e\x43\x89\x8b\xb0\xe3\xd5\x19\xdb\xaa\x5b\x75\x37\xea\x6e\x26\x54\x2e\x16\xb0\x50\xb8\x07\x34\x17\x6a\xf1\xec\xcb\xaa\x54\xbe\xb7\x52\xa2\x82\x1c\x37\xc6\x26\xe3\x59\x7f\x5e\x30\xe1\x0a\xea\x08\xee\xad\x19\xbc\xd4\x43\x78\x8d\x19\xeb\x97\x30\x16\xde\x11\x67\x58\xc5\xd4\xcc\x0c\x73\x56\x60\x2d\x31\x2d\xcd\xa3\xb9\xf2\xfe\x3f\xf5\xd6\xac\x2e\xc6\x40\x78\x03\xe8\x3c\x90\x97\x94\xf2\xd5\xd2\x9c\x29\xb5\x74\x67\xe6\x62\x9c\xab\xd4\x67\x01\xaf\x52\xb9\x93\x38\x51\x75\xa4\x5a\xc5\xbd\xd8\xf0\xa7\x0a\x25\xfd\x83\x8b\xd5\xb9\x98\xd1\xab\x62\xf2\xbc\x48\x95\xb0\x2c\xf1\x42\xb8\x3b\x29\xf3\xd5\x62\x24\xb8\xc2\xc9\x8c\xd1\x9f\x97\xad\x4f\xb9\x33\xed\x8e\x10\x91\x97\x1a\x27\x51\xe2\xf0\x12\x60\xb1\x93\x34\x16\xe8\x46\x08\x33\x97\x9e\x37\x1d\x37\x33\xc0\xbd\x95\x43\xd5\x5e\x2a\xde\x37\x9f\x9e\x0e\xa8\x5e\xfa\x33\x0f\x4a\xaa\xa9\x1e\x34\x69\x6e\x29\xcc\x53\xd5\x55\xc4\x4c\xea\xfb\x37\x00\x00\xff\xff\x1d\x21\x4a\xcd\x4a\x1d\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7498, mode: os.FileMode(436), modTime: time.Unix(1525379796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(436), modTime: time.Unix(1524543030, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


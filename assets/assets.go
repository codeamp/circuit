// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\xb6\x13\xbf\xf3\x29\xa0\xc9\x45\x99\xf1\x13\xf0\x98\xd8\xff\x7f\xd3\x36\xad\x6b\x35\xa7\x4c\x0e\x30\x05\x49\xa8\x49\x42\x01\x41\x4d\x3d\x9d\xbe\x7b\x07\xc0\x02\xdc\x5d\x12\x92\xe5\xa4\x33\xbd\x48\xc4\x12\xd8\x8f\x1f\xf6\x93\x43\x23\x5b\x69\xc5\xef\xba\x53\x15\x3c\xff\xb8\xf9\xf5\x97\xaa\x1a\x9a\x83\xea\xa4\xf8\xab\x12\xe2\xeb\xa8\xec\x73\x2d\x7e\xf3\x7f\x95\x10\xdd\xe8\xa4\xd3\xa6\xaf\xc5\x47\x78\xaa\xfe\xae\xaa\x37\xf0\xde\x3d\x1f\x55\x7c\x0c\x67\xdf\x88\x4f\x83\xb2\x95\x10\xe3\xa0\xec\x5a\x6f\x6b\xf1\xe1\xf6\x6d\x9d\x88\xf1\xed\x00\xaf\x87\xf5\xdb\x5a\x7c\xf6\x94\x2f\xab\xf0\xf2\xde\x9a\x3f\x54\xe3\x2a\x21\x8e\xf1\x09\x18\xdc\x88\xa1\x1d\xf7\xb5\xd8\x38\xab\xfb\xfd\x8d\xe8\x65\xa7\xa6\x95\xea\x4f\xda\x9a\xbe\x53\xbd\xfb\x70\x9b\xc8\x6f\x6b\xc4\x2d\x73\x1e\x26\xd6\x51\x38\xd0\x41\xfe\xff\x94\x74\xa3\x55\x7e\xd7\x0e\x1e\xc3\x2e\xa0\xc3\xae\x8d\xb2\x27\xdd\x84\x5d\x03\x3c\x86\x5d\x40\xa7\xbb\xc4\x70\x54\x0d\xda\xba\xf1\x4b\xbc\xdd\x13\xe0\xc8\x83\x6a\x95\x1c\x02\x63\x0b\x8f\x61\x27\xd0\x61\xd7\xdd\x64\xae\xdf\x89\xac\x8f\xbb\xd1\xfb\xf9\x09\x71\x92\x56\xcb\xc7\x16\xb4\x6f\xac\x72\x49\x1b\xff\x4c\xef\xe1\xee\x4f\xa7\xfa\x41\x9b\x3e\x18\xe1\x65\x25\x02\x48\x4a\xcb\xc2\x31\x84\xf6\x1d\x3d\xc9\x77\x52\x00\x90\x9c\x09\x0a\xc6\xe1\x81\x51\x93\x0a\xca\x76\x7a\xc8\xc2\xa7\x95\x3f\xe4\x1d\x7d\x15\x7d\x37\x7b\x72\x70\xdf\xb4\x02\x0f\x7e\x6f\x95\x74\x2a\xa9\x5e\x09\xd1\x04\x02\x28\xbd\x06\x7a\x76\xb0\x0f\xfd\x71\x74\xcc\xdf\x3e\x1d\xb7\x94\xc5\x18\x08\xd7\xb0\x00\x2d\xc0\xfc\xac\x05\x18\xbe\x06\x7a\x9d\x40\x4b\x2c\x1e\xf2\xfe\xcc\x02\x5c\x2f\xb3\x00\xcf\x5b\x03\xbd\x4e\xbe\x9a\x58\x6c\xf2\xfe\x6c\xc8\x44\x8a\x86\x5c\xc3\xe2\x56\xb5\x8a\x68\xb1\x0d\x84\x6b\x58\x50\x43\x92\x3b\x12\x6b\x7c\x1c\xad\x51\x90\x65\x06\x7e\xc1\x78\x6e\xe2\xf9\x6c\x1d\xe3\x4b\x4c\x7c\x15\x5f\x6a\x72\xe2\x4b\xec\x7e\x15\x5f\xc0\x01\xc5\x7c\x86\x01\x05\xf9\x1a\xbd\xaf\x71\xf4\x27\xb6\x77\xe4\x7c\x86\x81\xb2\x8d\x28\x7c\x0b\x5b\x40\x81\xb2\x8d\x20\x7c\x0b\xdb\x39\x08\x39\xab\x21\xa7\xf0\xe9\x6c\x1d\x33\x9c\xc7\xd1\xff\x4f\xa8\xfa\x55\xc1\x72\xcc\x2b\x39\xc2\xcb\x78\xcd\xcd\xcd\xbc\x04\xba\xfd\x97\x31\x4b\x46\xf2\x14\x0c\x97\x9d\xc8\xeb\xbc\xa1\x16\x99\x98\x81\x4b\x04\x62\x2a\xe7\x08\xf7\xfc\x0a\x8e\xc9\x60\xce\x11\xae\xf8\x15\x1c\xb9\xd5\x3c\xf7\x4e\x3c\x79\x5d\xa9\x67\xd5\x87\xe5\xd4\xf3\x60\xf0\x0c\xfd\xdd\x04\x21\x8c\x80\x16\xd1\xf9\x97\x0c\xf2\x6d\x15\x2e\x7b\xd9\x2e\xdf\x65\xa1\xe2\xb8\x1e\xe9\x3a\x76\x68\x88\x90\x84\x7d\x8e\xed\xd4\x0a\xea\x2b\xad\x6b\xa4\xf9\x98\x41\x88\x1b\x93\xe3\x9c\x36\x19\x82\x88\x59\x2c\x22\x7a\xd9\xa1\x68\x87\x26\x32\x14\x6c\xff\x14\x8a\x75\xec\x0f\xbd\x6e\xaa\x93\xba\x4d\xdd\xdf\x8a\x16\x7f\x66\x46\x74\xa9\x6d\x1d\xba\x60\xe0\x0d\x2d\x5e\x64\x0f\x0b\x26\x81\x17\x6d\x4f\xeb\xd4\x30\xc8\xbd\xc2\x72\x3d\xb2\x78\x7d\x90\xc3\x81\xe8\x25\xad\xea\xdd\x0f\x8c\x6a\xd5\x0e\x2f\x97\x54\x4c\x05\x31\xa8\x98\xda\xcb\xcb\x2a\x36\xa6\xeb\x64\xbf\xc5\xdc\x71\xff\xbc\xa2\xbd\x29\xa9\x39\xf1\xf8\xe8\xf3\x32\xd2\xdf\x58\x7f\x79\x9f\x7d\x37\x15\xe0\x2c\xe5\x6f\xff\xce\xeb\x7a\xc9\x2e\x9c\xdf\x83\x6d\xb8\x5f\xa5\xf6\x71\xc5\x9f\xd4\x33\x5e\xea\xe1\x56\xed\xe4\xd8\xba\x5a\xbc\x33\xa6\x55\xb2\x8f\x16\xb4\xc6\x5e\xa1\xc4\x54\x01\x00\x69\x9f\x94\x99\x22\x4c\xf0\x49\xb6\x23\x45\xb4\x31\xd4\xf0\xa5\x9b\x89\x9e\xe2\x7d\x79\x09\xaa\x93\xb2\xd9\x79\xa7\xe6\xfc\x1c\xd8\xcc\x2e\x8f\xc7\x06\xea\x4c\x86\x03\x7b\x52\xcc\xd7\xd8\x9d\xfc\xa5\x5f\x80\xbc\x39\x8e\x0f\xea\xeb\xa8\x06\xc7\xa8\x3f\xeb\x4e\x13\x5a\xa7\x3a\x63\x9f\x17\x36\xc7\x17\xb3\xfd\xce\x07\x6c\x1f\x1a\xf1\xff\x5b\xd9\xa8\x7b\x65\xb5\xd9\x5e\xba\xb8\xd4\xef\x06\x33\xd2\x00\x71\x39\x2a\x28\xf6\xd2\x3a\xbd\x93\x8d\xf7\xeb\x38\x24\x08\x71\x50\x72\x0b\x79\xa0\x4e\x09\x21\x68\x29\x75\xbb\x44\x1f\x9c\x74\x8a\x46\x34\x9b\x5b\x4a\x53\x4b\x38\xf9\x71\x9e\x48\xae\xb8\xea\x80\x44\x1a\x1e\x02\x12\xb0\xb8\x70\x99\x78\xac\x8e\x3a\x1f\xcd\xa0\x9d\xb1\xcf\x34\x3d\x40\xb3\x92\x29\x7b\xed\x3e\xd9\x96\x51\xee\xad\x71\xa6\x31\x84\x6c\x07\x79\x6f\xf5\x49\x3a\xf5\x13\x8d\x18\xff\x62\x7c\x6c\x75\xc3\xe8\x69\xee\x66\x53\x77\x33\x5a\x9f\x35\x1f\xd8\xd0\x83\x26\x65\x36\x27\xa7\xc9\x9c\xcd\xe5\x30\xf2\xb2\x98\xc2\x57\xb4\x38\x9a\xee\xb5\x7b\x67\x65\xdf\x1c\x0a\xf7\x33\xcc\x2b\x56\x21\xcd\xd0\x5e\x29\xa6\xbb\x4c\xbb\x10\x79\xa6\x3b\x9a\x5e\xd1\x6c\xcc\xb3\x06\x4b\x4c\x67\x7d\xc8\xf4\x3b\xbd\x9f\x3c\xfe\x8c\x4f\x4d\xbd\x06\x76\xae\x92\xe2\x4b\xf1\xb6\xd4\x03\x16\x22\x8f\xeb\x35\x8b\xac\xef\x15\x30\xb3\xcf\x0d\x24\x89\x94\xac\xe3\x83\x37\xb3\x8e\x63\x83\x9d\x71\xa3\xf7\x3d\x64\x0e\x1e\x5d\x85\x77\xdc\x74\x7e\xdd\x25\x28\x16\x60\xdd\xe9\x5e\x0f\x07\x5c\x1e\xce\x5c\xb8\xd0\xbe\x11\xab\xc2\x2f\xf9\x48\x91\xc1\x88\xb2\xca\x91\xbf\x98\x22\x68\x10\x55\x42\x3c\x1a\xf3\xd4\x49\xfb\xe4\xb5\x80\x1a\x45\x2f\x72\xfa\xa2\xc7\x2e\x0d\x2b\x88\x3f\x81\xcc\x15\x44\x99\x1c\x73\xcb\x7e\x4a\x89\xe7\x64\xa7\xba\x89\x65\xe3\xaf\x16\x73\xd9\x8b\x22\xae\xeb\xc8\xf8\xd9\x42\x3b\x06\x7a\xdc\x1b\x1b\x2f\x6a\xf5\x65\xc1\x5d\xce\x19\xf7\xde\xf4\x4e\xea\xde\xcf\x0f\xc6\xba\x25\x1b\x33\xef\x60\xa7\xdf\xc5\xd0\x64\x4e\x30\xeb\x35\x96\x98\xe6\xcf\x1d\x73\xf0\xfe\x3b\xad\xc7\xac\x45\xc4\x86\xf0\x4f\x16\x97\x0d\x79\x4d\xdb\x5a\xec\x52\x19\xa8\xf9\x7b\xc2\x5c\x8d\x4b\x4d\xeb\x2c\xb9\x14\x9a\xd8\xc9\x75\xca\x2e\x55\x6e\x3e\x17\x3f\x2e\x53\x40\xc9\xc4\x7b\x35\x9c\x8b\x75\xb2\xa8\x26\xaf\x36\x14\x84\x65\x8d\x17\x92\xe3\x59\x9d\x6f\x16\x33\xc1\x0d\x2e\x1c\x8c\xce\xb5\x3a\x17\xb8\x74\x72\x27\xca\x2d\x0d\xf5\x41\x37\xdf\xfe\xb2\x64\x48\xc6\x65\x7a\x10\x12\xca\xb5\xf2\x26\x71\x33\x57\xdb\x5b\xd9\x17\x3d\xa3\x10\x67\xf3\xd7\x93\x80\xe2\xf5\xbe\x50\x50\x84\xa6\x28\x68\x42\x6e\x29\xa1\x53\xe8\x0a\x6a\x46\xf8\xfe\x09\x00\x00\xff\xff\x5a\xfa\x78\xb7\x7f\x1b\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7039, mode: os.FileMode(420), modTime: time.Unix(1521665276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1519789868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


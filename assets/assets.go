// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x92\x1b\xa7\x13\xbf\xcf\x53\xa0\xf2\x45\x5b\xb5\x4f\x30\x47\x7b\xf7\xff\x8f\x93\x38\x51\x56\xf1\xc9\xe5\x03\x1e\x21\x89\x78\x3e\x64\x60\x54\xd9\x4a\xe5\xdd\x53\x40\xc3\x74\xf7\x30\x92\xb5\x76\xaa\x72\x91\x86\x06\xfa\xe3\x47\x7f\x81\x6d\x64\x2b\x8d\xf8\x5d\x77\xaa\x82\xef\x1f\xb7\xbf\xfe\x52\x55\xb6\x39\xaa\x4e\x8a\xbf\x2a\x21\xbe\x8c\xca\x3c\xd7\xe2\x37\xff\x57\x09\xd1\x8d\x4e\x3a\x3d\xf4\xb5\x78\x07\x5f\xd5\xdf\x55\xf5\x0a\xe6\xdd\xf3\x49\xc5\xcf\xb0\xf7\x95\x78\x6f\x95\xa9\x84\x18\xad\x32\x6b\xbd\xab\xc5\xdb\x87\xbb\x3a\x11\xe3\xac\x85\x69\xbb\xbe\xab\xc5\x07\x4f\xf9\xb8\x0a\x93\x1b\x33\xfc\xa1\x1a\x57\x09\x71\x8a\x5f\xc0\xe0\x5e\xd8\x76\x3c\xd4\x62\xeb\x8c\xee\x0f\xf7\xa2\x97\x9d\x9a\x46\xaa\x3f\x6b\x33\xf4\x9d\xea\xdd\xdb\x87\x44\xbe\xab\x11\xb7\xcc\xd9\x4e\xac\xa3\x70\xa0\x83\xfc\xff\x29\xe9\x46\xa3\xfc\xaa\x3d\x7c\x86\x55\x40\x87\x55\x5b\x65\xce\xba\x09\xab\x2c\x7c\x86\x55\x40\xa7\xab\x84\x3d\xa9\x06\x2d\xdd\xfa\x21\x5e\xee\x09\xb0\xe5\x49\xb5\x4a\xda\xc0\xd8\xc0\x67\x58\x09\x74\x58\xf5\x38\x99\xeb\x57\x22\xeb\xe3\x6a\x34\x3f\xdf\x21\xce\xd2\x68\xf9\xa9\x05\xed\x1b\xa3\x5c\xd2\xc6\x7f\xd3\x73\x78\xfc\xd3\xa9\xde\xea\xa1\x0f\x46\x78\x59\x89\x00\x92\xd2\x70\x61\x1b\x42\xfb\x91\xee\xe4\x2b\x29\x00\x48\xce\x04\x05\xe3\xf0\xc4\xa8\x49\x05\x65\x3a\x6d\xb3\xf0\x69\xe4\x37\x79\x47\x5f\x45\xdf\xcd\x9e\x1c\xdc\x37\x8d\xc0\x83\xdf\x18\x25\x9d\x4a\xaa\x57\x42\x34\x81\x00\x4a\xaf\x81\x9e\x1d\xec\x6d\x7f\x1a\x1d\xf3\xb7\xf7\xa7\x1d\x65\x31\x06\xc2\x2d\x2c\x40\x0b\x30\x3f\x6b\x01\x86\xaf\x81\x5e\x27\xd0\x12\x8b\xa7\xbc\x3e\xb3\x00\xd7\xcb\x2c\xc0\xf3\xd6\x40\xaf\x93\xaf\x26\x16\xdb\xbc\x3e\x1b\x32\x91\xa2\x21\xb7\xb0\x78\x50\xad\x22\x5a\xec\x02\xe1\x16\x16\xd4\x90\xe4\x8e\xc4\x1a\x1f\x47\x6b\x14\x64\x99\x81\x1f\x30\x9e\xdb\xb8\x3f\x5b\xc7\xf8\x12\x13\x5f\xc4\x97\x9a\x9c\xf8\x12\xbb\x5f\xc4\x17\x70\x40\x31\x9f\x61\x40\x41\xbe\x46\xf3\x35\x8e\xfe\xc4\xf6\x91\xec\xcf\x30\x50\xb6\x11\x85\x6f\x61\x0b\x28\x50\xb6\x11\x84\x6f\x61\x3b\x07\x21\x67\x35\xe4\x14\x3e\x9d\xad\x63\x86\xf3\x38\xfa\xff\x09\x55\x3f\x5a\xb0\x1c\xf3\x4a\x8e\xf0\x75\xbc\xe6\xe6\x66\x5e\x02\x9d\xfe\xd7\x31\x4b\x46\xf2\x14\x0c\x87\x9d\xc8\xeb\xbc\xa0\x16\x99\x98\x81\x4b\x04\x62\x2a\xe7\x08\xe7\xfc\x02\x8e\xc9\x60\xce\x11\x8e\xf8\x05\x1c\xb9\xd5\x3c\xf7\x4e\x3c\x79\x5d\xa9\x67\xd5\x87\xe5\xd4\xcb\x60\xf0\x0c\xfd\xdd\x04\x21\x8c\x80\x16\xd1\xf9\x97\x0c\xf2\x6d\x15\x2e\x7b\xd9\x2e\xdf\x65\xa1\xe2\xb8\x1e\xe9\x38\x76\x68\x88\x90\x84\x7d\x88\xed\xd4\x0a\xea\x2b\xad\x6b\xa4\xf9\x98\x41\x88\x1b\x93\xd3\x9c\x36\x19\x82\x88\x59\x2c\x22\x26\xd9\xaf\x87\xe1\x73\x27\xcd\x67\x54\x55\x3f\x01\x69\x43\xda\xc5\xd5\x5d\xed\x17\xb7\x4a\xf6\x50\xee\x43\xfb\x19\x4a\xbd\xff\x0a\x65\x1e\x96\xfa\xae\xa6\x93\xba\x4d\x7d\xe3\x8a\xb6\x0d\x0c\x80\xe8\x8c\xbb\x3a\xf4\xcf\xc0\x1b\x9a\xc3\xc8\x1e\x06\x4c\x02\x2f\xf7\x9e\xd6\x29\x6b\xe5\x41\x61\xb9\xfe\x4c\xf0\xf8\x28\xed\x91\xe8\x25\x8d\xea\xdd\x0f\x8c\x6a\xd4\x1e\x0f\x4b\x2a\xa6\x52\x1a\x54\x4c\x8d\xe9\x75\x15\x9b\xa1\xeb\x64\xbf\xc3\xdc\x71\xe7\xbd\xa2\x5d\x2d\xa9\x56\x71\xfb\xe8\x33\x3a\xd2\x7f\x30\xfe\xd8\x3f\xf8\x3e\x2c\xc0\xb9\x94\xf9\xfd\x9c\xd7\xf5\x9a\x5d\xb8\x32\x04\xdb\x70\xa7\x4b\xed\xe3\x8a\x7f\x56\xcf\x78\xa8\xed\x83\xda\xcb\xb1\x75\xc8\x73\xbc\x05\xed\x60\x6e\x50\x62\xaa\x1d\x80\xb4\x4f\xe7\x4c\x11\x26\xf8\x2c\xdb\x91\x22\xda\x0c\xd4\xf0\xd2\xc9\x44\x4f\xf1\xbe\x5c\x82\xea\xac\x4c\x76\xde\xa9\xad\xbf\x04\x36\xb3\xcb\xe3\xb1\x85\x0a\x45\x03\x09\xdf\x6a\x88\x3b\xf9\x43\xbf\x02\x79\x73\x1a\x9f\xd4\x97\x51\x59\xc7\xa8\x3f\xeb\x4e\x13\x5a\xa7\xba\xc1\x3c\x17\x16\xc7\x89\xd9\x7a\xe7\x03\xb6\x0f\x2d\xfc\xff\x8d\x6c\xd4\x46\x19\x3d\xec\xae\x1d\x5c\xea\x94\x83\x19\xe9\xea\x71\x3d\x2a\x28\xf6\xd2\x38\xbd\x97\x8d\xf7\xeb\x78\xbd\x10\xe2\xa8\xe4\x0e\xf2\x40\x9d\x12\x42\xd0\x52\xea\xb6\x44\xb7\x4e\x3a\x45\x23\x9a\xdd\x78\x96\xee\x3b\x61\xe7\xbb\x79\x22\xb9\xe1\xa8\x03\x12\xe9\xda\x11\x90\x80\xc1\x95\xc3\xc4\x17\xf2\xa8\xf3\x69\xb0\xda\x0d\xe6\x99\xa6\x07\x68\x73\x32\xe5\xa0\xdd\x7b\xd3\x32\xca\xc6\x0c\x6e\x68\x06\x42\x36\x56\x6e\x8c\x3e\x4b\xa7\x7e\xa2\x11\xe3\x27\xc6\x4f\xad\x6e\x18\x3d\xdd\xd8\xd9\x7d\xbd\x19\x8d\xcf\x9a\x4f\xec\xba\x84\xee\xd8\xec\x86\x9d\xee\xf4\xec\x46\x0f\x97\x65\x16\x53\xf8\x88\x8a\x97\xda\x83\x76\xaf\x8d\xec\x9b\xe3\xc2\xf9\xd8\x52\xad\x4b\x65\xcd\x1f\x13\x4e\x47\xa5\xec\x43\x9b\xaf\x98\x05\x33\xed\x4a\x40\x0e\xdd\x69\xe8\x15\x4d\xd2\x3c\x99\xb0\x7c\x75\xd1\xb5\x86\x7e\xaf\x0f\x53\x20\x5c\x70\xb5\xa9\x79\xc1\x3e\xb7\xa4\x78\x29\x0c\x4b\x4d\xe5\x42\x40\x72\xbd\x66\x01\xf7\xbd\xe2\x68\xf6\x7e\x41\x72\xcb\x92\x75\xfc\x26\xcf\xac\xe3\xd8\x60\x1f\xdd\xea\x43\x0f\x09\x85\x07\xdd\xc2\x1c\x37\x9d\x1f\xf7\x12\x14\x05\x58\xf7\xba\xd7\xf6\x88\xab\xc6\x85\x03\x17\xda\x77\x76\x55\xf8\x25\xaf\x1e\x19\x8c\x28\x6b\x39\x21\x14\x33\x07\x8d\xad\x72\xe8\xd0\x83\x9c\x9e\x08\xd9\xa1\x61\x05\xf1\x9b\xca\x5c\x41\x94\xe0\x31\xb7\xec\xa7\x94\x78\x49\x76\x2a\xa7\x58\x36\x7e\x06\x99\xcb\x2e\x8a\xb8\xad\x51\xe3\x7b\x17\xba\x34\xd0\x63\x33\x98\x78\x50\xab\x8f\x05\x77\xb9\x64\xdc\x9b\xa1\x77\x52\xf7\xfe\x42\x32\x18\x57\xb2\x31\xf3\x0e\x76\xfa\x55\x0c\x4d\xe6\x04\xb3\x16\xa4\xc4\x34\xbf\x9f\xcc\xc1\xfb\xef\x74\x24\xb3\xce\x11\x1b\xc2\xdf\x40\xae\x1b\xf2\x92\x6e\x76\xb1\x79\x65\xa0\xe6\x07\x8a\xb9\x1a\xd7\x7a\xd9\x59\x72\x59\xe8\x6d\x27\xd7\x59\x76\xa9\xe5\x9e\xb4\xf8\x5a\x4d\x01\x25\x57\xe8\x9b\xe1\x2c\xd6\xc9\x45\x35\x79\xb5\xa1\x20\x94\x35\x2e\x24\xc7\x8b\x3a\xdf\x17\x33\xc1\x3d\x2e\x1c\x8c\xce\xb5\xba\x14\xb8\xf4\x29\x80\x28\x57\x7a\x25\x08\xba\xf9\xae\x98\x25\x43\x72\x8b\xa6\x1b\x21\xa1\xdc\x2a\x6f\x12\x37\x73\xb5\x83\x91\xfd\xa2\x67\x2c\xc4\xd9\x7c\x7a\x12\xb0\x78\xbc\x5f\x29\x28\x42\xb3\x28\x68\x42\xae\x94\xd0\x29\x74\x0b\x6a\x46\xf8\xfe\x09\x00\x00\xff\xff\xc2\x21\x29\x65\xd0\x1b\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7120, mode: os.FileMode(420), modTime: time.Unix(1521733769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1519789868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\x36\x10\xbe\xf3\x29\xa0\xc9\x45\x9e\xf1\x13\xf0\x98\xd8\x6d\xd3\x36\xad\x6b\x35\xa7\x4c\x0e\x08\x05\x4b\x68\x48\x42\x01\x40\xb5\x9a\x4e\xdf\xbd\x03\x60\x01\xee\x2e\x49\xc9\x72\xd2\x99\x5e\x24\x62\x01\xec\xcf\x87\xfd\x03\x5c\x23\x5b\x69\xc5\xef\xba\x53\x15\x7c\xff\xb8\xf9\xf5\x97\xaa\x72\xcd\x5e\x75\x52\xfc\x5d\x09\xf1\x65\x50\xf6\x54\x8b\xdf\xc2\x5f\x25\x44\x37\x78\xe9\xb5\xe9\x6b\xf1\x0e\xbe\xaa\x7f\xaa\xea\x15\xcc\xfb\xd3\x41\xa5\xcf\xb8\xf7\x95\x78\xef\x94\xad\x84\x18\x9c\xb2\x6b\xbd\xad\xc5\xdb\xbb\x9b\x3a\x13\xd3\xac\x83\x69\xb7\xbe\xa9\xc5\x87\x40\xf9\xb8\x8a\x93\x0f\xd6\xfc\xa1\x1a\x5f\x09\x71\x48\x5f\xc0\xe0\x56\xb8\x76\xd8\xd5\x62\xe3\xad\xee\x77\xb7\xa2\x97\x9d\x1a\x47\xaa\x3f\x6a\x6b\xfa\x4e\xf5\xfe\xed\x5d\x26\xdf\xd4\x88\x5b\xe1\xec\x46\xd6\x49\x38\xd0\x41\xfe\x77\x4a\xfa\xc1\xaa\xb0\xea\x09\x3e\xe3\x2a\xa0\xc3\xaa\x8d\xb2\x47\xdd\xc4\x55\x0e\x3e\xe3\x2a\xa0\xd3\x55\xc2\x1d\x54\x83\x96\x6e\xc2\x10\x2f\x0f\x04\xd8\xf2\xa8\x5a\x25\x5d\x64\x6c\xe1\x33\xae\x04\x3a\xac\xba\x1f\xcd\x0d\x2b\x91\xf5\x69\x35\x9a\x9f\xee\x10\x47\x69\xb5\xfc\xd4\x82\xf6\x8d\x55\x3e\x6b\x13\xbe\xe9\x39\xdc\xff\xe5\x55\xef\xb4\xe9\xa3\x11\x41\x56\x26\x80\xa4\x3c\x5c\xd8\x86\xd0\xbe\xa7\x3b\xf9\x4a\x0a\x00\x92\x33\x42\xc1\x38\x3c\x32\x6a\x56\x41\xd9\x4e\xbb\x22\x7c\x1c\x85\x4d\xc1\xd1\x57\xc9\x77\x8b\x27\x47\xf7\xcd\x23\xf0\xe0\x37\x56\x49\xaf\xb2\xea\x95\x10\x4d\x24\x80\xd2\x6b\xa0\x17\x07\x7b\xdb\x1f\x06\xcf\xfc\xed\xfd\x61\x4b\x59\x0c\x91\x70\x0d\x0b\xd0\x02\xcc\x2f\x5a\x80\xe1\x6b\xa0\xd7\x19\xb4\xcc\xe2\xb1\xac\x2f\x2c\xc0\xf5\x0a\x0b\xf0\xbc\x35\xd0\xeb\xec\xab\x99\xc5\xa6\xac\x2f\x86\x8c\xa4\x64\xc8\x35\x2c\xee\x54\xab\x88\x16\xdb\x48\xb8\x86\x05\x35\x24\xbb\x23\xb1\x26\xc4\xd1\x1a\x05\x59\x61\x10\x06\x8c\xe7\x26\xed\x2f\xd6\x31\xbe\xc4\xc4\x17\xf1\xa5\x26\x67\xbe\xc4\xee\x17\xf1\x05\x1c\x50\xcc\x17\x18\x50\x90\xaf\xd1\x7c\x8d\xa3\x3f\xb3\xbd\x27\xfb\x0b\x0c\x94\x6d\x42\xe1\x6b\xd8\x02\x0a\x94\x6d\x02\xe1\x6b\xd8\x4e\x41\x28\x59\x0d\x39\x45\x48\x67\xeb\x94\xe1\x02\x8e\xe1\x7f\x44\x35\x8c\x16\x2c\xc7\xbc\xb2\x23\x3c\x8f\xd7\xd4\xdc\xc2\x4b\xa0\xd3\x7f\x1e\xb3\x6c\x24\x4f\xc1\x70\xd8\x99\xbc\x2e\x0b\x6a\x51\x88\x05\xb8\x4c\x20\xa6\x72\x8e\x70\xce\x2f\xe0\x98\x0d\xe6\x1c\xe1\x88\x5f\xc0\x91\x5b\xcd\x73\xef\xc8\x93\xd7\x95\x7a\x52\x7d\x58\x4e\x3d\x0f\x06\xcf\xd0\xdf\x4c\x10\xc2\x08\x68\x09\x9d\xff\xc8\xa0\xd0\x56\xe1\xb2\x57\xec\x0a\x5d\x16\x2a\x8e\xeb\x81\x8e\x53\x87\x86\x08\x59\xd8\x87\xd4\x4e\xad\xa0\xbe\xd2\xba\x46\x9a\x8f\x09\x84\xb8\x31\x39\x4c\x69\xa3\x21\x88\x58\xc4\x22\x62\x96\xfd\xda\x98\xcf\x9d\xb4\x9f\x51\x55\xfd\x04\xa4\x07\xd2\x2e\xae\x6e\xea\xb0\xb8\x55\xb2\x87\x72\x1f\xdb\xcf\x58\xea\xc3\x57\x2c\xf3\xb0\x34\x74\x35\x9d\xd4\x6d\xee\x1b\x57\xb4\x6d\x60\x00\x24\x67\xdc\xd6\xb1\x7f\x06\xde\xd0\x1c\x26\xf6\x30\x60\x12\x78\xb9\x0f\xb4\x4e\x39\x27\x77\x0a\xcb\x0d\x67\x82\xc7\x7b\xe9\xf6\x44\x2f\x69\x55\xef\x7f\x60\x54\xab\x9e\xf0\x70\x4e\xc5\x5c\x4a\xa3\x8a\xb9\x31\xbd\xac\x62\x63\xba\x4e\xf6\x5b\xcc\x1d\x77\xde\x2b\xda\xd5\x92\x6a\x95\xb6\x0f\x21\xa3\x23\xfd\x8d\x0d\xc7\xfe\x21\xf4\x61\x11\xce\xa5\xcc\x1f\xe6\x82\xae\x97\xec\xc2\x95\x21\xda\x86\x3b\x5d\x6a\x1f\x57\xfc\xb3\x3a\xe1\xa1\x76\x77\xea\x49\x0e\xad\x47\x9e\x13\x2c\x68\x8d\xbd\x42\x89\xb1\x76\x00\xd2\x21\x9d\x33\x45\x98\xe0\xa3\x6c\x07\x8a\x68\x63\xa8\xe1\x73\x27\x93\x3c\x25\xf8\xf2\x1c\x54\x47\x65\x8b\xf3\x8e\x6d\xfd\x39\xb0\x99\x5d\x01\x8f\x0d\x54\x28\x1a\x48\xf8\x56\x43\xdc\x29\x1c\xfa\x05\xc8\x9b\xc3\xf0\xa8\xbe\x0c\xca\x79\x46\xfd\x59\x77\x9a\xd0\x3a\xd5\x19\x7b\x9a\x59\x9c\x26\x26\xeb\x7d\x08\xd8\x3e\xb6\xf0\xdf\x5b\xd9\xa8\x07\x65\xb5\xd9\x5e\x3a\xb8\xdc\x29\x47\x33\xf2\xd5\xe3\x72\x54\x50\xec\xa5\xf5\xfa\x49\x36\xc1\xaf\xd3\xf5\x42\x88\xbd\x92\x5b\xc8\x03\x75\x4e\x08\x51\x4b\xa9\xdb\x39\xba\xf3\xd2\x2b\x1a\xd1\xec\xc6\xb3\x74\xdf\x89\x3b\xdf\x4d\x13\xc9\x15\x47\x1d\x91\xc8\xd7\x8e\x88\x04\x0c\x2e\x1c\x26\xbe\x90\x27\x9d\x0f\xc6\x69\x6f\xec\x89\xa6\x07\x68\x73\x0a\x65\xa7\xfd\x7b\xdb\x32\xca\x83\x35\xde\x34\x86\x90\xad\x93\x0f\x56\x1f\xa5\x57\x3f\xd1\x88\x09\x13\xc3\xa7\x56\x37\x8c\x5e\x6e\xec\x6e\x6f\xfe\xbc\x53\x87\xd6\x9c\x82\x99\xe0\xbf\xfc\x1a\xdf\x0c\x36\x24\xd3\x47\x76\x8b\x42\x57\x6f\x76\xf1\xce\x57\x7d\x76\xd1\x87\x3b\x34\x0b\x35\x7c\x72\xb3\x77\xdd\x9d\xf6\xaf\xad\xec\x9b\xfd\xc2\xb1\xb9\xb9\x12\x98\xab\x1d\x32\x6b\x31\x29\xd1\x9e\x2c\x25\xc7\x42\xbb\x10\xa7\xa6\x3b\x98\x5e\xd1\xdc\xcd\x73\x0c\x4b\x63\x67\x3d\xce\xf4\x4f\x7a\x37\xc6\xc7\x19\x0f\x1c\x7b\x1a\xec\x8a\x4b\x8a\xcf\x45\xe7\x5c\xaf\xb9\x10\xa7\x5c\xaf\x49\x1c\x7e\xab\xf0\x9a\x3c\x6b\x90\x94\xb3\x64\x1d\xbf\xe0\x33\xeb\x38\x36\xd8\x47\x37\x7a\xd7\x43\x9e\xe1\xb1\xb8\x30\xc7\x4d\xe7\xc7\xbd\x04\xc5\x0c\xac\x4f\xba\xd7\x6e\x8f\x8b\xc9\x99\x03\x17\x3a\x34\x7c\x55\xfc\x25\x8f\x21\x05\x8c\x24\x6b\x39\x4f\xcc\x26\x14\x1a\x5b\xf3\xa1\x43\x0f\x72\x7c\x39\x64\x87\x86\x15\xc4\x4f\x2d\x53\x05\x51\xde\xc7\xdc\x8a\x9f\x52\xe2\x39\xd9\xb9\xca\x62\xd9\xf8\x75\x64\x2a\x7b\x56\xc4\x75\xfd\x1b\xdf\xbb\xd0\xbc\x81\x1e\x0f\xc6\xa6\x83\x5a\x7d\x9c\x71\x97\x73\xc6\xbd\x31\xbd\x97\xba\x0f\xf7\x14\x63\xfd\x9c\x8d\x85\x77\xb4\x33\xac\x62\x68\x32\x27\x98\x74\x26\x73\x4c\xcb\xb3\xca\x14\xbc\xff\x4f\xa3\x32\x69\x28\xb1\x21\xfc\x69\xe4\xb2\x21\x2f\x69\x72\x17\x7b\x5a\x06\x6a\x79\xb7\x98\xaa\x71\xa9\xc5\x9d\x24\x97\x85\x96\x77\x74\x9d\x65\x97\x5a\x6e\x55\x67\x1f\xb1\x29\xa0\xe4\x66\x7d\x35\x9c\xb3\x75\x72\x51\x4d\x5e\x6d\x28\x08\xf3\x1a\xcf\x24\xc7\xb3\x3a\xdf\xce\x66\x82\x5b\x5c\x38\x18\x9d\x6b\x75\x2e\x70\xe9\x0b\x01\x51\x6e\xee\xf1\x20\xea\x16\x9a\x65\x96\x0c\xc9\xe5\x9a\x6e\x84\x84\x72\xad\xbc\x51\xdc\xc4\xd5\x76\x56\xf6\x8b\x9e\xb1\x10\x67\xd3\xe9\x51\xc0\xe2\xf1\x3e\x53\x50\x82\x66\x51\xd0\x88\xdc\x5c\x42\xa7\xd0\x2d\xa8\x99\xe0\xfb\x37\x00\x00\xff\xff\xf4\x95\x4c\x4b\xe7\x1b\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7143, mode: os.FileMode(420), modTime: time.Unix(1521830870, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1519789868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


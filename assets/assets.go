// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\x36\x10\xbe\xf3\x29\xa0\xc9\x45\x9e\xf1\x13\xf0\x98\x38\x6d\xdd\x36\xad\x6a\xd5\x27\x4f\x0e\x30\x05\x49\xa8\x49\x42\x01\x40\xb5\x9a\x4e\xdf\xbd\x03\x60\x01\x2e\x96\x84\x64\x39\xe9\x4c\x2f\x12\xb1\x04\xf7\xe7\xdb\x5f\xc0\x34\xbc\xe5\x9a\xfd\x2e\x3b\x51\xc1\xf3\x8f\xeb\x5f\x7f\xa9\x2a\xd3\xec\x45\xc7\xd9\xdf\x15\x63\x5f\x06\xa1\x4f\x35\xfb\xcd\xfd\x55\x8c\x75\x83\xe5\x56\xaa\xbe\x66\x9f\xe0\xa9\xfa\xa7\xaa\xde\xc1\x7b\x7b\x3a\x88\xf0\xe8\xbf\x7d\xc7\x1e\x8d\xd0\x15\x63\x83\x11\x7a\x29\x37\x35\xbb\xbf\xbb\xa9\x23\x31\xbc\x35\xf0\xda\x2c\x6f\x6a\xf6\xe4\x28\x9f\x17\xfe\xe5\x4a\xab\x3f\x44\x63\x2b\xc6\x0e\xe1\x09\x18\xdc\x32\xd3\x0e\xbb\x9a\xad\xad\x96\xfd\xee\x96\xf5\xbc\x13\xe3\x4a\xf4\x47\xa9\x55\xdf\x89\xde\xde\xdf\x45\xf2\x4d\x8d\xb8\x25\xce\x66\x64\x1d\x84\x03\x1d\xe4\x7f\x27\xb8\x1d\xb4\x70\xbb\xb6\xf0\xe8\x77\x01\x1d\x76\xad\x85\x3e\xca\xc6\xef\x32\xf0\xe8\x77\x01\x3d\xdf\xc5\xcc\x41\x34\x68\xeb\xda\x2d\xf1\x76\x47\x80\x4f\x1e\x44\x2b\xb8\xf1\x8c\x35\x3c\xfa\x9d\x40\x87\x5d\x1f\x47\x73\xdd\x4e\x64\x7d\xd8\x8d\xde\x4f\xbf\x60\x47\xae\x25\x7f\x6e\x41\xfb\x46\x0b\x1b\xb5\x71\xcf\xb9\x1f\x3e\xfe\x65\x45\x6f\xa4\xea\xbd\x11\x4e\x56\x24\x98\x65\x09\xf4\xa7\xf4\x51\x81\x17\x72\xc1\x48\xc3\xbe\xa0\x0c\xc0\x7a\x24\x7c\xc4\x87\x70\x78\x20\xd4\xa8\x82\xd0\x9d\x34\x49\xf8\xb8\x72\x1f\xb9\xe8\x5f\x84\x80\x4e\xe1\xed\x63\x3a\xae\x20\xac\x3f\x68\xc1\xad\x88\xaa\x57\x8c\x35\x9e\x00\x4a\x2f\x81\x9e\xa2\xee\xbe\x3f\x0c\x96\x04\xe1\xe3\x61\x93\xb3\x18\x3c\xe1\x1a\x16\xa0\x05\x98\x9f\xb4\x00\xc3\x97\x40\xaf\x23\x68\x91\xc5\x43\xda\x9f\x58\x40\x3c\x26\x16\x10\x8e\x4b\xa0\xd7\x31\x80\x23\x8b\x75\xda\x9f\x0c\x19\x49\xc1\x90\x6b\x58\xdc\x89\x56\x64\x5a\x6c\x3c\xe1\x1a\x16\xb9\x21\x31\x46\x33\x6b\x5c\x72\x2d\x51\xe6\x25\x06\x6e\x41\x78\xae\xc3\xf7\xc9\x3a\xc2\x37\x33\xf1\x4d\x7c\x73\x93\x23\xdf\xcc\xee\x37\xf1\x05\x1c\x50\x46\x26\x18\x50\xe6\xe3\x8c\xad\x71\x49\x88\x6c\x3f\x66\xdf\x27\x18\x72\xb6\x01\x85\xaf\x61\x0b\x28\xe4\x6c\x03\x08\x5f\xc3\x76\x0a\x42\x2a\x75\x28\x28\x5c\x8d\x5b\x86\xb2\xe7\x70\x74\xff\x23\xaa\x6e\x55\xb0\x1c\xf3\x8a\x81\xf0\x3a\x5e\x53\x73\x13\x2f\x86\xbc\xff\x3a\x66\xd1\x48\x5a\x97\xc1\xd9\x91\xbc\x4c\x1b\x6a\x96\x88\x09\xb8\x48\xc8\x4c\xa5\x1c\xc1\xcf\x6f\xe0\x18\x0d\xa6\x1c\xc1\xc5\x6f\xe0\x48\xad\xa6\xb5\x77\xe4\x49\xfb\x4a\x3d\xe9\x3e\xa4\xa6\x9e\x07\x83\x56\xe8\x6f\x26\x08\x61\x04\xb4\x80\xce\x7f\x64\x90\x9b\xb5\x70\xdb\x4b\x76\xb9\xd1\x0b\x35\xc7\xe5\x90\xaf\xc3\xd8\x86\x08\x51\xd8\x53\x68\xf7\x0b\xe8\xaf\x79\x5f\xcb\x26\x92\x09\x84\x78\x5a\x39\x4c\x69\xa3\x21\x88\x98\xc4\x22\x62\x94\xfd\x5e\xa9\x97\x8e\xeb\x17\xd4\x55\x9f\x81\xb4\xca\x66\xc8\xc5\x4d\xed\x36\xb7\x82\xf7\xd0\xee\xfd\x4c\xea\x5b\xbd\x7b\xf2\x6d\x1e\xb6\xba\x51\xa7\xe3\xb2\x8d\x73\xcd\x22\x1f\x1b\x08\x00\x21\x18\x37\xb5\x1f\xaa\x81\x37\x4c\x8c\x81\x3d\x2c\x88\x04\xda\xee\x1d\xad\x13\xc6\xf0\x9d\xc0\x72\x9d\x4f\xf0\x7a\xcf\xcd\x3e\xd3\x8b\x6b\xd1\xdb\x1f\x08\x55\x8b\x2d\x5e\xce\xa9\x18\x5b\xa9\x57\x31\x4e\xab\x97\x55\x6c\x54\xd7\xf1\x7e\x83\xb9\xe3\x71\x7c\x91\x8f\xba\x59\xb7\x0a\x9f\x0f\xae\xa2\x23\xfd\x95\x76\x6e\x7f\x72\x73\x98\x87\xb3\x54\xf9\xdd\x3b\xa7\xeb\x25\xbb\x70\x67\xf0\xb6\xe1\xf1\x37\xb7\x8f\x2a\xfe\x22\x4e\x78\x29\xcd\x9d\xd8\xf2\xa1\xb5\x28\x72\x9c\x05\xad\xd2\x57\x28\x31\xf6\x0e\x40\xda\x95\x73\xa2\x08\x11\x7c\xe4\xed\x90\x23\xda\xa8\xdc\xf0\x39\xcf\x84\x48\x71\xb1\x3c\x07\xd5\x51\xe8\x14\xbc\xe3\xac\x7f\x0e\x6c\x62\x97\xc3\x63\x0d\x1d\x2a\x4f\x24\x7c\xd4\xc9\xc2\xc9\x39\xfd\x02\xe4\xcd\x61\x78\x10\x5f\x06\x61\x2c\xa1\xfe\x2c\x3b\x99\xd1\x3a\xd1\x29\x7d\x9a\xd9\x1c\x5e\x4c\xf6\x5b\x97\xb0\xbd\x1f\xe1\xbf\xd7\xbc\x11\x2b\xa1\xa5\xda\x5c\x72\x5c\x9c\x94\xbd\x19\xf1\xe8\x71\x39\x2b\x72\xec\xb9\xb6\x72\xcb\x1b\x17\xd7\xe1\x78\xc1\xd8\x5e\xf0\x0d\xd4\x81\x3a\x16\x04\xaf\x25\x97\xed\x1c\xdd\x58\x6e\x45\x9e\xd1\xe4\xc4\x53\x3a\xef\xf8\x2f\x3f\x4d\x0b\xc9\x15\xae\xf6\x48\xc4\x63\x87\x47\x02\x16\x17\x9c\x89\x4f\xe9\x41\xe7\x83\x32\xd2\x2a\x7d\xca\xcb\x03\x8c\x39\x89\xb2\x93\xf6\x51\xb7\x84\xb2\xd2\xca\xaa\x46\x65\x64\x6d\xf8\x4a\xcb\x23\xb7\xe2\xa7\x3c\x63\xdc\x8b\xe1\xb9\x95\x0d\xa1\xa7\x63\xbc\xd9\xab\x3f\xef\xc4\xa1\x55\x27\x67\x26\xc4\x2f\x3d\xdb\x37\x83\x76\xc5\xf4\x81\x9c\xa2\xd0\x79\x9c\x9c\xc6\xe3\xf9\x9f\x9c\xfe\xe1\x60\x4d\x52\x0d\x7b\x6e\xf6\xac\xbb\x93\xf6\xbd\xe6\x7d\xb3\x2f\xb8\xcd\xcc\xb5\xc0\xd8\xed\x90\x59\xc5\xa2\x94\xcf\x64\xa1\x38\x26\xda\x85\x3c\x55\xdd\x41\xf5\x22\xaf\xdd\xb4\xc6\x90\x32\x76\x36\xe2\x54\xbf\x95\xbb\x31\x3f\xce\x44\xe0\x38\xd3\xe0\x50\x2c\x29\x3e\x97\x9d\x73\xb3\x66\x21\x4f\xa9\x5e\x93\x3c\xfc\x56\xe9\x35\xb9\xd6\xc8\x4a\x4e\xc9\x3a\x7a\xc0\x27\xd6\x51\x6c\x70\x8c\xae\xe5\xae\x87\x3a\x43\x73\xb1\xf0\x8e\x9a\x4e\xdd\x5d\x82\x62\x06\xd6\xad\xec\xa5\xd9\xe3\x66\x72\xc6\xe1\x4c\xba\x81\xaf\xf2\xbf\xd9\x65\x48\x02\x23\xc8\x2a\xd7\x89\xd9\x82\x92\xe7\xd6\x7c\xea\xe4\x8e\x1c\x6f\xb6\x88\xd3\xb0\x82\xf8\xaa\x65\xaa\x20\xaa\xfb\x98\x5b\x8a\xd3\x9c\x78\x4e\x76\xec\xb2\x58\x36\xbe\x1d\x99\xca\x9e\x15\x71\xdd\xfc\x46\xbf\x2d\x0c\x6f\xa0\xc7\x4a\xe9\xe0\xa8\xc5\xe7\x99\x70\x39\x67\xdc\x07\xd5\x5b\x2e\x7b\x77\x4e\x51\xda\xce\xd9\x98\x78\x7b\x3b\xdd\x2e\x82\x26\x09\x82\xc9\x64\x32\xc7\x34\x5d\xab\x4c\xc1\xfb\xff\x0c\x2a\x93\x81\x12\x1b\x42\xaf\x46\x2e\x1b\xf2\x96\x21\xb7\x38\xd3\x12\x50\xd3\xbd\xc5\x54\x8d\x4b\x23\xee\xa4\xb8\x14\x46\xde\x31\x74\xca\x21\x55\x1e\x55\x67\x6f\xb6\x73\x40\xb3\x93\xf5\xd5\x70\xce\xf6\xc9\xa2\x9a\xb4\xdb\xe4\x20\xcc\x6b\x3c\x53\x1c\xcf\xea\x7c\x3b\x5b\x09\x6e\x71\xe3\x20\x74\xaa\xd5\xb9\xc4\xcd\x6f\x08\x32\xe5\xe6\x2e\x0f\xbc\x6e\x6e\x58\x26\xc5\x30\x3b\x5c\xe7\x1f\x42\x41\xb9\x56\xde\x28\x6e\x12\x6a\x3b\xcd\xfb\x62\x64\x14\xf2\x6c\xfa\x7a\x14\x50\x74\xef\x2b\x05\x05\x68\x8a\x82\x46\xe4\xe6\x0a\x7a\x0e\x5d\x41\xcd\x00\xdf\xbf\x01\x00\x00\xff\xff\x08\x45\x9f\xb9\xfc\x1b\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7164, mode: os.FileMode(420), modTime: time.Unix(1522193706, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


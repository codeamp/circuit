// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x1b\xb9\x11\xbe\xf3\x29\xc0\xda\x0b\x5d\xa5\x27\xe0\x2d\xb6\x1c\x5b\x89\x9d\x28\xe2\xfa\x90\x72\xe9\x00\x0d\x5b\x24\xa2\x19\x60\x16\xc0\xc8\x66\xa5\xf2\xee\x29\xfc\x4e\x37\x80\xa1\x44\xed\xa6\x2a\x17\x89\xf8\x66\xf0\x01\xdd\xe8\x5f\x8c\xe9\x78\xcf\x35\xfb\x55\x0c\xb0\x8a\xbf\xff\xb2\xfb\xfb\xdf\x56\x2b\xd3\x1d\x61\xe0\xec\xdf\x2b\xc6\x7e\x9b\x40\x9f\xb6\xec\x1f\xee\xdf\x8a\xb1\x61\xb2\xdc\x0a\x25\xb7\xec\x6b\xfc\xb5\xfa\xcf\x6a\xf5\x4b\x7c\x6e\x4f\x23\x84\x9f\x7e\xee\x2f\xec\x9b\x01\xbd\x62\x6c\x32\xa0\x37\x62\xbf\x65\x37\xd7\xef\xb6\x09\x0c\x4f\x4d\x7c\x6c\x36\xef\xb6\xec\xbb\x43\xee\xd7\xfe\xe1\xad\x56\xff\x82\xce\xae\x18\x1b\xc3\xaf\x48\x70\xc5\x4c\x3f\x1d\xb6\x6c\x67\xb5\x90\x87\x2b\x26\xf9\x00\xf3\x08\xe4\xb3\xd0\x4a\x0e\x20\xed\xcd\x75\x82\xdf\x6d\x11\x5b\x66\x36\x33\xb5\xd9\xc4\x1f\x3b\xe0\xba\x3b\xe6\xd7\xc3\xf0\x46\x8e\x93\xbd\x62\x23\xd7\x7c\x30\x5b\x76\xcb\x0f\x42\x72\xab\xb4\xc7\x67\xee\x2f\xc2\xd8\xb0\xf5\x3f\x03\xb7\x93\x06\xb7\xc0\x63\xfc\xb9\x59\x9c\x1d\x5f\x9e\x67\xef\x40\x3f\x8b\xce\xcf\x36\xf1\xe7\xf2\xec\xf8\x72\x35\x9b\x99\x11\x3a\x44\xb1\x73\x43\xaf\xe2\xdd\x0c\x44\x4d\xdf\x41\x0f\xdc\xf8\x05\x75\xfc\xb9\xbc\x60\x7c\x79\x5e\xf0\xe3\xac\x71\xc7\x80\x0e\x60\xd6\x2a\x3a\x30\xb7\x05\x34\xe5\xbe\x22\x61\xcf\x5c\x0b\xfe\xd0\x47\x05\x74\x1a\xec\x59\xf9\xdd\x0b\x48\x7c\x21\x0f\x3d\x44\x38\x13\x78\xd3\xc9\xeb\xe7\x87\xd9\x14\x3e\xfe\xb4\x20\x8d\x50\xd2\xab\xcd\x49\x91\x00\xb3\x59\xb2\xa8\xef\x79\x12\x35\xd8\x0c\x23\xfb\x9a\x31\x7f\x04\xe5\x9b\xf4\x1c\xd0\xe2\xf3\x89\x14\x0c\x77\x05\x9a\xb6\x00\x7a\x10\x26\x2f\x3e\x8f\xdc\x24\xe7\xda\xeb\xe0\xad\xd9\x77\xbd\xc3\xa6\x51\xf4\xd9\x0f\x1a\xb8\x85\xb4\xf5\x15\x63\x9d\x07\xe2\xa6\xd3\x99\x66\xb3\x2f\xbc\x20\x38\xf6\xb8\xa7\x14\x93\x07\x2e\xa1\x88\xbb\x88\xe2\xe7\x5d\x44\xc1\x37\x11\xcf\xf6\x58\x98\x67\xb0\x05\xab\x46\x44\x60\xac\x1a\xd3\xf4\x10\x4a\xd6\xc5\x84\xb8\x66\x74\x99\xbc\x66\xf4\x98\x4d\xc4\xb3\xd3\x15\x3e\x88\x25\x9f\xa1\x20\xf9\x25\x14\xd7\xd0\x03\xd9\xc5\xde\x03\x97\x50\x50\x41\x92\x51\x13\x69\x9c\xff\x6f\x50\x70\xc8\x04\x6e\x50\x70\xee\xc2\xfc\x2c\x5d\xc1\x4b\x44\x7c\x13\x2f\x15\x39\xf1\x12\xb9\xdf\xc4\x1b\xf5\x80\x5c\x38\xab\x01\x45\x1c\xec\xe2\x5b\x1c\x8a\x12\xed\x47\x32\x3f\xab\x81\xd2\x06\x2d\xfc\x1e\xda\xa8\x05\x4a\x1b\x94\xf0\x7b\x68\x6b\x25\xe4\x10\x8b\x8c\xc2\x87\xc9\x10\x2d\x53\x84\xa4\x31\x76\x41\x72\xcc\x95\x0c\xe1\x75\x5c\xb5\xb8\x99\x8b\xa1\xd3\x7f\x1d\xd9\xcd\x30\x2a\x6d\xd9\xc0\xe5\xa9\xc9\x68\x18\xb7\x4c\x49\xef\x1f\xc2\xbf\xbb\x8b\xa9\x25\xa6\x98\x6d\xa4\x88\x70\x5a\xe2\x7b\x18\xaf\x53\x9e\xfa\xe9\x97\xe1\x7d\xbf\xb0\xca\x0f\x61\x8f\x42\xb2\x83\x78\x06\x99\xe2\xdf\xcd\x35\xe3\x72\x4f\x4b\x13\x9f\x63\xf0\x36\x52\x86\xfb\xf8\xb3\xb1\x8b\x90\x74\xd6\xe4\x38\xcb\x94\x15\xcd\x3a\xc1\x9b\xfc\x82\xe3\x8c\x3f\xb3\x89\x24\x80\x1c\x6a\xc9\x18\x2d\xfa\x0d\x8c\xe9\x68\x4b\xc6\x68\xcc\x6f\x60\x2c\xa5\x2e\xd3\xd2\xcc\x59\xa6\xdc\x6d\x95\x98\x8b\x74\x73\x5e\x19\x65\xf2\xfa\xc3\x16\x42\x3a\x8a\x58\xd0\xce\xff\x48\x20\x57\x63\xe3\x8a\x20\xcb\xe5\x4a\x6e\x54\x37\x6c\x26\x3a\x0e\xe5\x3a\x02\x66\xcf\x08\x46\x19\x3d\x83\xa6\x7c\x52\x06\x56\x2a\x6c\x94\x88\x18\x9b\x05\x41\x60\x5e\x16\x81\x69\xed\xf7\x4a\x3d\x0d\x5c\x3f\xa1\x82\xe3\x21\x42\xb7\xa4\x77\x70\x09\xff\xbd\x52\x3d\x70\x19\x66\x7e\x02\xcb\x3e\x09\xcb\x3e\xa8\x61\x10\x7e\xa7\x07\xb0\x9f\x84\x8d\xe3\x4d\xf6\x60\x3f\xbb\x6a\x2f\x3c\x26\xe1\x47\x66\xc5\xfc\xbe\xd2\xca\x05\xeb\x4a\x48\x0b\xfa\x91\x77\x30\x63\xbe\xe0\xea\xd4\xe4\x02\xf9\x8d\xb4\x71\x0a\xaa\xb0\x43\x7d\x86\x00\x17\xbb\x7a\xf0\x0a\x39\x43\xe3\xaa\x70\xab\x05\x98\xb9\x52\xbc\x8f\xe4\x73\xbd\x1c\xb8\xe7\xf1\xe5\xd4\x61\xee\xcc\x9c\x3b\x91\x44\x9d\x81\xb7\x70\xfb\xc9\x89\x1c\x35\x49\x81\x1c\x01\x97\x93\xc7\xc9\x89\x1c\xf5\x6f\x81\x1c\x01\x97\x93\xc7\xc9\x89\xdc\x37\xbb\x9e\xd5\xfd\xf2\x33\xa3\x2d\xba\x59\x03\x17\x3d\x0e\xef\x23\x76\x3c\xe2\x61\x21\xda\xed\xb7\xbe\x5b\xa7\x5a\x21\x1a\x29\x56\x28\x4b\x6d\x87\x0d\x60\x0c\x3f\x00\x5e\xd7\x39\x3d\x1e\x1f\xb9\x39\x92\x7d\x71\x0d\xd2\x7e\x2e\x50\x0d\x8f\x78\xd8\xda\x62\xaa\x4a\xb1\x45\xbc\x62\x8b\x9d\x1a\x06\x2e\xf7\x98\x1d\xf7\xf9\x6b\xda\xd8\x92\xc2\x6f\x5d\x9d\x8d\x4b\xa8\x4e\x9d\xae\x01\xba\x5f\xd3\x1e\x95\x94\x4b\xee\x99\xdb\xe8\x19\xa1\x5c\x94\x1e\x7b\x75\x72\xaf\xef\xac\xe6\x16\x0e\xa7\xd0\x5a\xad\x18\xeb\x5d\xd6\x07\x63\x6e\xb5\x7a\x80\x8c\x6a\xe0\x7b\x51\xc3\xa3\x06\xd7\xa0\x7c\x56\xea\x29\xad\x17\x54\x86\xeb\x37\xaf\x36\xdc\x1c\x53\xd5\x95\x3a\x79\x82\x13\x1e\x0a\x73\x0d\x8f\x7c\xea\x2d\x89\x7a\x9d\xea\x95\x3e\x2b\x62\xba\x15\xa9\xad\xb9\xd5\xa7\xe3\x40\x52\xec\xaf\xd8\xcf\x33\xef\x27\x7a\x86\x9d\xa2\xda\x6e\xd9\x42\xb0\x4d\xe7\x3d\xad\xf3\x79\x06\x9d\xdd\x25\xc5\xa3\xf3\x27\x5c\x89\x2b\xcc\x2e\x96\x97\x34\x76\xe3\xab\x14\x62\xc0\xce\xcc\x5e\x38\x89\x6e\x9c\xee\xe0\xb7\x09\x8c\x2d\xd0\x2f\x62\x10\x04\x1b\x60\x50\xfa\xd4\x78\x39\x3c\xa8\xde\xb7\x2e\x44\x48\xdf\xb0\x7f\xd2\xbc\x83\x5b\xd0\x42\xed\x1b\x9e\x91\xbd\x62\x41\xe8\xda\x36\x70\xfa\x21\xa9\xe7\x15\x1e\x4b\x4f\x89\x6b\x2b\x1e\xb9\x37\xa1\x70\xed\xc0\xd8\x11\xf8\x3e\xc6\xa8\x7c\xe9\xe5\xe5\xe1\xa2\x6f\xe1\xc6\x72\x0b\x34\xda\x14\x37\x21\x4b\xf7\x20\x7e\xe6\xd7\x3a\xc8\x5d\x64\x14\xc6\x72\x4d\x80\x47\x21\x85\x39\x52\x15\xde\xa9\xbe\x7f\xe0\xdd\x53\x95\xf5\x63\x1d\x82\xb3\xc9\x0b\x06\x83\x2f\x35\x83\xb4\xa3\x32\xc2\x2a\x7d\xa2\x47\x1b\xfb\xa0\x8c\x1c\x84\xfd\xa6\xfb\x02\xb9\xd5\xca\xaa\x4e\x11\x58\x1b\x7e\xab\xc5\x33\xb7\xf0\x57\xea\x95\xee\xc1\xf4\xd0\x8b\xae\xc0\xf3\xd5\xa5\x39\xaa\x1f\xd7\x3e\xea\x39\xe9\xa3\xa4\x67\xee\x43\x8b\x1b\xcd\x6e\xd2\x2e\x79\xdc\x15\x37\x36\x6f\xb9\x6d\x7c\xe1\x3e\xf4\x8a\x19\x7f\x61\x8b\x04\xa9\xaf\x48\xcf\x5f\x29\x2e\x51\xe0\x5b\x46\xc0\x16\xd8\xbc\xcb\x3b\x08\xfb\x5e\x73\xd9\x91\x6c\xd9\x29\x69\x85\x9c\xd4\x64\x82\x32\x49\x50\x06\x52\xff\xd6\x45\x6e\xaa\x67\xd1\x09\x2c\xa5\xdc\xe2\x32\x33\xa4\x90\x8c\xbd\x10\xb6\xd4\x30\x2a\xe9\x1d\x04\x45\x9c\x32\x25\xf2\xee\x08\x2e\xf2\x93\xad\x14\xb1\xfe\xac\xb3\x29\xf9\x28\x0e\x73\x68\x68\x49\x51\xf5\x32\xd8\x97\x96\xc4\x69\x05\xa6\x56\x8f\xb9\x10\xa2\xaa\x7d\x4d\xc6\xaa\xe1\x43\x81\x56\x81\xe9\x0f\x88\x37\x38\xf2\xa2\xde\x13\xc7\xe0\x25\x99\xcb\x9b\xd0\x42\xe6\x52\x63\xd8\x8d\x76\xe2\x20\x63\xe0\x2d\x43\xcc\xc2\xb3\x52\xf4\xd2\x34\x96\x54\xd1\x50\x36\x0d\xb0\x8c\x35\x43\xec\x19\xcb\x60\xc2\xf9\xeb\xca\xff\x25\x17\xc9\x59\x3f\xb1\xa8\x5a\x8c\x88\xcd\xd0\x49\xfd\xb6\xed\x79\xf4\x6c\xe7\xaf\x02\xe7\x9c\x9c\xec\x3d\x7c\x57\x6a\x49\x80\xbe\x38\x79\x39\xea\x34\xb0\x14\x0c\x70\xbb\xe9\xac\x84\x90\x93\x18\xe7\x89\x47\x7f\x42\x37\xfe\x8e\xb0\x0f\x35\x86\x1b\x10\x43\xc4\x14\xf8\x9e\xbd\xd6\x30\x4a\xee\xb3\x3a\x90\x47\x52\xb0\xa9\x3c\x9f\x72\x94\xee\xe0\x0e\x1e\x26\xd1\x57\xa2\xa5\x6a\x0c\x6f\x0a\x5f\x81\xd7\x9b\x6a\xae\xfd\x8a\xce\xa2\xdd\x3d\xc4\xb5\x6e\x95\x0e\x66\xb6\xbe\x6f\xd8\xff\xa2\x64\xad\xae\xe1\xba\xc2\x02\x71\xdd\x49\x7c\x06\xde\xdb\xa3\x1f\xf8\x57\x1a\x5d\x45\xe3\x95\xc5\x0e\xe3\x83\x92\x96\x0b\x09\xda\x0b\xd7\xd2\x68\x96\x32\xd8\x8a\xd2\x48\x1f\xd9\x93\xd2\x95\x45\x98\xb9\x20\x8d\x27\x28\xd5\x34\xf0\x9f\xbb\x49\x47\x03\x8c\xc0\x37\xc9\x9f\xb9\xe8\x43\x5e\xa1\xd4\xa5\x6c\x15\xa7\xaf\x96\xed\x91\x96\xc1\xc5\x49\x63\x39\x7c\xeb\x71\x84\x01\x13\x8c\xdc\x62\xb7\x17\x52\x58\xc1\xfb\x6b\xe8\xf9\x69\x07\x9d\x92\x7b\x93\xa6\x8e\xbe\xe2\x2e\x40\x2b\x06\x50\x93\x2d\x50\x33\x75\x1d\x18\xf3\xeb\x51\x83\x39\x2a\x67\xd4\x01\x7f\xe4\xa2\x9f\x34\x54\xf8\xd1\xda\xf1\x33\xf0\x3d\x68\x67\x72\x48\xee\xcf\xf9\x41\x32\xbe\x96\x76\x8a\xb7\xbc\x9e\x4a\xeb\x2e\x9a\xb0\xaa\xd3\x69\x99\x43\xfe\xc6\x52\x3b\xd9\xff\x53\xe3\xb3\xd8\xd3\xe0\xb6\x15\x8b\x57\x7e\x3d\x79\x59\xbc\xb7\x74\xd8\x8b\x9d\x73\xa1\xea\xfc\x69\xa3\xde\xc6\x4b\x8d\x74\x95\x87\x17\x1a\x6b\x92\xab\x16\x83\xd5\x52\x43\xdc\x96\x61\xa8\x82\x48\xfd\x25\xc5\x4b\x14\x2b\x8b\x7f\xfe\xe9\xeb\x97\xb0\xd6\x8b\x89\xc2\x35\x95\x18\x59\xde\x45\xf8\x98\x42\x0f\xb7\xfa\x92\x12\x82\xd9\x05\x19\xa9\x51\x4f\x17\x4b\xe0\x1b\xf8\x8b\xad\xa7\x59\x6d\x2f\x9e\x4a\xbb\xec\x2e\x6b\x56\x6a\x09\xcd\x52\xba\x55\x77\x9c\x95\xe4\xaa\xa9\xb6\x2b\x5c\x68\x16\xf8\xeb\x2a\xe9\x73\x5a\xa7\x5f\x1d\xc8\x96\x5b\x1f\x24\xfc\x8e\x4b\x73\x29\xef\x53\xe9\xc4\x18\x48\x2f\x5d\x6f\x5e\xae\xf2\xc2\x83\xe6\xb2\x72\x9a\xfa\x5b\x46\x53\xff\xad\x48\xb4\x68\x0a\xaf\x5c\x28\xa8\x66\x71\xa1\x59\x73\x2d\x9f\xa0\xaa\x5b\xd8\x66\x50\xdf\x7f\x03\x00\x00\xff\xff\xec\x5a\xee\x35\x48\x26\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}


	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9800, mode: os.FileMode(420), modTime: time.Unix(1548804711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


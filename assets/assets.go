// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\x23\xb9\x0d\x7f\xf7\xa7\x90\x71\x2f\x5e\x20\x9f\xc0\x68\x0b\xec\xc6\x69\x92\x76\xb7\x75\xe3\xdb\x87\xe2\x90\x07\x65\x4c\xdb\x6a\x66\xa4\x39\x49\xe3\x8b\x51\xf4\xbb\x17\xfa\x3b\xd4\x9f\x71\x62\xdf\x16\x68\x1e\x76\x2d\x8e\xf4\x13\x49\x91\x14\x49\xa9\x86\xb6\x54\x92\x9f\x59\x07\x33\xff\xfb\x2f\x9b\xbf\xff\x6d\x36\x53\xcd\x01\x3a\x4a\xfe\x3d\x23\xe4\xd7\x01\xe4\x69\x49\xfe\x61\xfe\x9b\x11\xd2\x0d\x9a\x6a\x26\xf8\x92\x7c\xf3\xbf\x66\xff\x99\xcd\x7e\xf2\xdf\xf5\xa9\x07\xf7\xd3\xae\xfd\x89\x7c\x57\x20\x67\x84\x0c\x0a\xe4\x82\x6d\x97\xe4\x71\xf5\x69\x19\x88\xee\xab\xf2\x9f\xd5\xe2\xd3\x92\xfc\x62\x28\xcf\x73\xfb\x71\x2d\xc5\xbf\xa0\xd1\x33\x42\x7a\xf7\xcb\x03\xdc\x10\xd5\x0e\xfb\x25\xd9\x68\xc9\xf8\xfe\x86\x70\xda\xc1\x38\x02\x7e\x64\x52\xf0\x0e\xb8\x7e\x5c\x05\xf2\xa7\x25\x42\x8b\xc8\x6a\x84\x56\x0b\xff\x63\x03\x54\x36\x87\x38\xdd\x0d\x1f\x79\x3f\xe8\x1b\xd2\x53\x49\x3b\xb5\x24\x6b\xba\x67\x9c\x6a\x21\x2d\x7d\xc4\xfe\xca\x94\x76\xac\xff\x19\xa8\x1e\x24\x98\x0d\x76\xfe\xe7\x62\x72\xb5\x9f\x3c\xae\xde\x80\x3c\xb2\xc6\xae\x56\xfe\xe7\xf4\x6a\x3f\xb9\x58\x4d\x54\x0f\x0d\x82\xd8\x98\xa1\x55\xf1\x66\x24\x78\x4d\x3f\x41\x0b\x54\xd9\x0d\xa5\xff\x39\xbd\xa1\x9f\x3c\x6e\x78\x37\x6a\xdc\x20\xa0\x03\x18\xb5\x8a\x0e\xcc\xb0\x80\x96\x3c\x17\x20\xe4\x48\x25\xa3\x2f\xad\x57\x40\x23\x41\x9f\x95\xdf\x4c\x40\xe2\x33\xbe\x6f\xc1\x93\x23\x80\x35\x9d\xb8\x7f\xfc\x18\x4d\xe1\xee\x4d\x03\x57\x4c\x70\xab\x36\x23\x45\x20\xa8\xc5\x94\x45\xfd\x12\x17\xa5\x06\x1b\xc9\xc8\xbe\x46\x9a\x3d\x82\x7c\x66\x7a\x0e\x68\xf3\xf1\x44\x32\x84\xa7\x8c\x1a\x58\x00\xd9\x31\x15\x37\x1f\x47\x66\x91\x71\xed\xb9\xf3\xd6\xe8\xbb\xd6\x61\xc3\xc8\xfb\xec\xad\x04\xaa\x21\xb0\x3e\x23\xa4\xb1\x04\xcf\x74\x38\xd3\x68\xf6\x99\x17\x38\xc7\xee\xb7\x29\xc4\x60\x09\x97\x40\x78\x2e\xbc\xf8\x91\x0b\x2f\xf8\xc2\xd3\xa3\x3d\x66\xe6\xe9\x6c\x41\x8b\x1e\x01\x28\x2d\xfa\xb0\xdc\x85\x92\x79\xb6\xc0\xef\xe9\x5d\x26\xee\xe9\x3d\x66\xe1\xe9\xd1\xe9\x32\x1f\xc4\x92\x8f\x24\x27\xf9\x25\x10\x2b\x68\x21\xe1\x62\x6b\x09\x97\x40\x3c\x76\xbd\x90\x9a\x74\x94\x9f\x62\x0c\x21\x54\x13\xc1\xed\x04\x66\x3f\x87\x38\x13\x10\xd5\xd2\xaf\x0b\x1f\x02\x72\x08\x19\x73\x6f\x65\xa9\x9a\x82\xcb\x24\xba\x32\xd1\x65\x81\x42\x4f\x64\xcf\x0c\x32\x8e\x37\x6e\x7d\xd4\x5d\x86\x9b\x28\xf0\x2a\xdc\x54\xa1\x01\x37\xd1\xea\x55\xb8\x5e\x0f\x28\x40\x44\x35\xa0\x78\x86\x03\xc8\x12\x07\xba\x00\x7b\x97\xac\x8f\x6a\x48\x61\x9d\x16\x7e\x0f\xac\xd7\x42\x0a\xeb\x94\xf0\x7b\x60\x4b\x25\xc4\x00\x8e\x8c\xc2\x06\x61\x17\x8b\x43\xfc\x4d\x23\xf8\x84\xe4\x18\x2b\x18\xc2\xc7\xb0\x4a\x71\x23\x16\x41\xa7\xff\x31\x30\xec\x4f\x35\xc4\xd1\xb9\xfe\xe0\xfe\xc8\xc3\xdd\xe7\x55\x3a\x18\xdd\xce\x5d\x69\xfe\x6a\x1b\x9d\xce\x0e\x91\xcf\x99\xb1\x71\xb9\x3f\xba\xbf\x0b\x01\xfc\x70\xf6\x27\xf7\x47\x3e\x6f\xb7\xe1\x36\xf5\x38\x20\xaf\x84\x46\xbc\x05\xf4\x1d\x7b\x23\x3e\x69\x64\x4a\x0d\xf6\xee\x1e\x6d\x23\xbf\x5d\xbd\x8f\x04\xf2\x22\x4e\x58\x92\x48\x8c\xf6\x16\x08\x89\x85\xe4\x88\xde\x3d\xae\x40\x0c\x76\x92\x23\x7a\xcf\xb8\x02\x31\x97\x3a\xbf\x41\x47\xcc\x3c\x3b\x58\x16\x39\x44\x76\x33\x9e\x57\x46\x7e\xcf\xfe\xb0\x8d\x90\x8e\x3c\xcd\x69\xe7\x7f\x24\x90\x29\x07\x70\xf2\x12\xe5\x32\xd5\x01\x4a\x71\x16\x43\x3a\x76\x95\x05\x22\x8c\x06\x6b\x93\xb6\x70\x7f\xa5\xd9\x49\x92\xb1\x16\x2a\xac\x64\xb3\x98\x36\x0a\x82\x88\x71\x5b\x44\x0c\x7b\x7f\x11\xe2\xb5\xa3\xf2\x15\xe5\x46\x2f\x9e\xb4\x4e\xca\x1c\x93\x9b\x7c\x11\xa2\x05\xca\xdd\xca\x7b\xd0\xe4\x9e\x69\x72\x2b\xba\x8e\x59\x4e\xf7\xa0\xef\x99\xf6\xe3\xc0\x9d\xc9\x51\x1f\x57\xf3\xa2\x12\xb2\x34\x0e\xbf\x45\x54\x8c\x6f\x93\xc2\x98\x5b\xcf\x18\xd7\x20\x77\xb4\x81\x91\x66\x73\xc3\x46\x0c\xe6\x56\x78\xe4\xda\x2f\x41\xc5\x80\x4b\x25\x11\xc1\x84\x94\x16\xac\x42\xce\xc0\x98\x82\x41\x4b\x66\x92\x8f\x90\xd4\x3e\x7b\xf0\x31\xb5\x77\xd8\xe3\xf8\x72\x68\xb7\x76\x44\x8e\x45\x53\x80\x8e\x84\x6b\xb0\xed\xe2\x00\x8e\xea\x39\x07\x8e\x08\x97\x83\xfb\xc5\x01\x1c\x95\x9a\x0e\x1c\x11\x2e\x07\xf7\x8b\x03\xb8\xad\xcb\x2d\xaa\xf9\x65\x57\x7a\x5b\x34\xab\x3a\xca\xda\x50\xfe\xcc\xd3\xea\x22\xf3\x30\x17\xed\xb6\x4b\xdb\x58\x48\xb5\x92\x68\x24\xdb\x21\xaf\x0a\x0c\xad\x03\xa5\xe8\x1e\xf0\xbe\xc6\xe9\xf1\xf8\x40\xd5\x21\xe1\x8b\x4a\xe0\xfa\x21\xa3\x4a\xd8\xe1\x61\x8d\xc5\x90\x40\x63\x8b\xf8\x00\x8b\x8d\xe8\x3a\xca\xb7\x18\x1d\xb7\x24\xe6\x69\x0d\x9e\x64\x91\xf3\xe2\x6c\xcc\x6d\x6b\xd4\x69\x6a\xb5\xe7\x79\x5a\x4e\x27\xb9\x97\xf9\x66\x18\x3d\x23\x94\x89\xd2\x7d\x2b\x4e\x66\xfa\x46\x4b\xaa\x61\x7f\x72\x55\xe0\x8c\x90\x96\x1d\x81\x83\x52\x6b\x29\x5e\x20\x52\x25\xd0\x2d\x2b\xc9\xbd\x04\x53\x4b\x3d\x08\xf1\x1a\xf6\x73\x2a\xc3\xc9\xa0\x55\x1b\xae\xe3\x53\xd5\xe5\x3a\x79\x85\x13\x1e\x32\xb5\x82\x1d\x1d\x5a\x9d\x44\xbd\x46\xb4\x42\x9e\x15\x31\x34\x70\x4a\x6b\xae\xb5\x14\x70\x20\xc9\xf8\xcb\xf8\x39\xd2\x76\x48\xcf\xb0\x11\xa9\xb6\x6b\xb6\xe0\x6c\xd3\x78\x4f\xed\x7c\x8e\x20\xa3\xbb\x84\x78\x74\xfe\x84\x0b\x71\x99\xda\xf8\x5c\x35\x8d\xdd\xb8\xeb\x93\x18\xb0\x31\xb3\x77\x4e\xa2\xe9\x87\x27\xf8\x75\x00\xa5\x33\xea\x57\xd6\xb1\x84\xd6\x41\x27\xe4\xa9\x32\xd9\x7d\x28\xe6\x6b\x13\x22\xb8\xed\x2d\xdc\x4b\xda\xc0\x1a\x24\x13\xdb\x8a\x67\x44\xaf\x98\x10\xba\xb4\x0d\x7c\xfd\x24\x57\xcf\x07\x3c\x36\x3d\x25\x2a\x35\xdb\x51\x6b\x42\xae\x43\x42\xc8\x01\xe8\xd6\xc7\xa8\xd8\x9f\xb3\xf2\x50\xd6\xd6\xe8\x4a\x53\x0d\x69\xb4\xc9\x9a\x36\x53\x2d\x1b\xbb\xf2\x5b\x19\xe4\x2e\x32\x0a\xa5\xa9\x4c\x08\x3b\xc6\x99\x3a\xa4\x2a\x7c\x12\x6d\xfb\x42\x9b\xd7\xe2\xd6\xf7\x79\x08\xbe\x4d\xde\x31\x18\xdc\x7f\x75\xd2\xf6\x42\x31\x2d\xe4\x29\x3d\x5a\x5f\x54\x45\xca\x9e\xe9\xef\xb2\xcd\x28\x6b\x29\xb4\x68\x44\x42\x96\x8a\xae\x25\x3b\x52\x0d\x7f\x4d\xbd\xd2\x7c\x18\x5e\x5a\xd6\x64\xf4\xd8\x65\x55\x07\xf1\xdb\xca\x46\x3d\x23\xbd\x97\xf4\x4c\xeb\x36\x6b\xbe\x36\x83\x34\x97\xc7\x53\xd6\x5c\xba\xa6\x31\xfa\x4e\xeb\xf6\x86\x28\xdb\x5b\x46\x82\x94\xdd\xdc\xf3\xdd\xcf\x29\x08\xdc\x10\x05\x6c\x81\xd5\xb6\xe3\x9e\xe9\x2f\x92\xf2\x26\xb9\x2d\x1b\xc1\x35\xe3\x83\x18\x94\x53\x66\x12\x94\x21\xc9\x7f\xcb\x24\x37\xe4\xb3\xe8\x04\xa6\xae\xdc\xac\xef\xea\xae\x90\x48\x7b\x27\x6c\x89\xae\x17\xdc\x3a\x08\x8a\x38\xf9\x95\x48\x9b\x03\x98\xc8\x9f\xb0\x92\xc5\xfa\xb3\xce\x26\xf8\x8e\xed\xc7\xd0\x50\x93\xa2\xa8\x65\xb0\x2f\x4d\x89\x53\x0b\x4c\xb5\x1a\x73\x22\x44\x15\x7c\x0d\x4a\x8b\xee\x36\xa3\x16\x81\xe9\x07\xc4\x1b\x1c\x79\x51\xed\x89\x63\xf0\x94\xcc\x79\xd3\x36\x93\x39\xd7\x18\x76\xa3\x0d\xdb\x73\x1f\x78\xf3\x10\x33\xf1\x2d\x17\x3d\x37\x8d\x29\x55\x54\x94\x9d\x06\x58\x42\xaa\x21\xf6\x8c\x65\x10\x66\xfc\x75\x66\xff\x4d\x7a\xde\x51\x3f\x3e\xa9\x9a\x8c\x88\xd5\xd0\x99\xfa\x6d\xdd\xf3\xd2\xb3\x1d\x1f\x30\xce\x39\x79\xc2\xbb\x7b\x02\xab\x49\x80\x1e\xc7\xac\x1c\xe5\x35\x30\x15\x0c\x70\xb9\x69\xac\x24\x01\x4f\x62\x9c\x05\xee\xed\x09\x3d\xda\x86\x63\xeb\x72\x0c\x33\x48\x0c\x11\x43\xe0\x27\x81\x52\xc3\xe8\x72\x1f\xd5\x81\x3c\x32\x25\x56\x95\x67\xaf\x1c\x21\x1b\x78\x82\x97\x81\xb5\x85\x68\x21\x1b\xc3\x4c\xe1\x6e\x7d\xc9\x54\x75\xef\x0f\x54\x16\xf5\xea\xc1\xef\xb5\x16\xd2\x99\xd9\xfc\xb9\x62\xff\x93\x92\xd5\xaa\x86\x55\x41\x73\xc0\x65\x25\xf1\x00\xb4\xd5\x07\x3b\xb0\x53\x2a\x55\x45\x65\xca\x64\x85\x11\xde\x22\x7c\x83\x32\x51\x69\xe5\xb5\xc2\x6a\x36\xc4\x8c\x7f\x7e\xfe\xf6\xd5\x61\x5d\x7b\xcc\x96\x85\x5b\xc1\x35\x65\x1c\x24\x29\x38\xc8\x15\xed\xcc\x55\x48\x74\x24\xd1\x99\x43\xd7\xc4\xad\x9c\x50\xa8\x05\xc8\x4f\xaa\xa3\x6f\x9b\x41\x7a\x1f\xf0\x84\xef\x9c\x1e\x29\x6b\xdd\xd5\x96\x42\xe7\xea\x2d\x30\x6d\xc2\xae\x0f\x69\x26\x9e\x19\x1b\x96\xc3\x56\x3f\x07\xe8\x30\x40\x4f\x35\x8e\x3c\x8c\x33\xcd\x68\xbb\x82\x96\x9e\x36\xd0\x08\xbe\x55\x61\x69\x6f\x93\xfe\x8c\xa8\x59\x07\x62\xd0\x19\x55\x0d\x4d\x03\x4a\xfd\x7c\x90\xa0\x0e\xc2\xf8\x95\xa3\xef\x28\x6b\x07\x09\x05\xfd\xa0\x75\xff\x00\x74\x0b\xd2\x58\x3d\x92\xfb\x21\x7e\x08\xf6\x5f\xd3\x4e\x36\xcb\xea\x29\x77\xb0\xac\x0e\x2c\x8a\xad\x9a\x39\xc4\x37\xa3\xd2\xcf\xff\x9f\x6a\xaf\xc9\xb2\x0a\x57\xce\x58\xbc\xfc\x35\xe8\x7d\xf1\xae\x29\xf2\x27\x8b\xf7\x4c\xd5\xf1\xa9\xa6\x64\xe3\xbd\x5a\xbe\x48\x05\x26\x6a\xfb\xe4\xba\x9c\x8c\x97\x53\x35\x79\x5d\x86\xe9\x30\x36\xbe\xb1\xf8\x28\x66\x09\x17\x04\x31\x53\xd7\x62\xca\x14\x0f\xf0\x56\xf0\x70\xf7\x56\xe5\xe1\xe2\x58\x99\x26\xf4\xd9\x16\xf8\x09\xe0\x62\xdb\xa9\xa6\xfb\x93\x67\x52\xcf\xfb\xf3\xa4\x39\xb5\x83\x6a\x2e\x5f\x4b\x7c\xce\x4a\x72\x53\x55\xdb\x0d\xce\x74\x33\xfa\xc7\x52\xf9\x73\x5a\x4f\x9f\x3d\x12\x96\x6b\x2f\x22\x96\xe3\xdc\x58\xf2\x86\x6e\xba\xd0\x87\xd1\x4b\xf7\x1b\xb7\x2b\x7c\x70\x2f\x29\x2f\x5c\xa6\x7c\x4c\xa9\xea\xbf\x16\x87\x26\x4d\xe1\x83\x1b\x39\xd5\x4c\x6e\x34\x6a\xae\xe6\x13\xa9\xea\x26\xd8\x74\xea\xfb\x6f\x00\x00\x00\xff\xff\x27\x79\xa9\xe8\x74\x27\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 10100, mode: os.FileMode(420), modTime: time.Unix(1548883720, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\xdb\xb6\x16\xde\xeb\x29\xa0\xc9\x46\x99\xf1\x13\x68\x77\x63\xe5\xda\xbe\x37\x69\x55\x2b\x59\x74\x32\x5e\xc0\xd4\x91\x84\x9a\x04\x18\x00\x54\xa2\xe9\xf4\xdd\x3b\xf8\xe5\xc1\x0f\x65\xcb\x49\x67\xba\xb1\x85\x8f\xc4\x07\x9c\x83\xf3\x0b\xaa\x86\xb6\x54\x92\x4f\xac\x83\x99\xff\xfd\xbf\xcd\xaf\xbf\xcc\x66\xaa\x39\x40\x47\xc9\x9f\x33\x42\xbe\x0e\x20\x4f\x4b\xf2\x9b\xf9\x37\x23\xa4\x1b\x34\xd5\x4c\xf0\x25\xf9\xe8\x7f\xcd\xfe\x9a\xcd\xde\xf8\xe7\xfa\xd4\x83\xfb\x69\xe7\xbe\x21\x9f\x15\xc8\x19\x21\x83\x02\xb9\x60\xdb\x25\xb9\x5b\xbd\x5d\x06\xd0\x3d\x55\xfe\xb1\x5a\xbc\x5d\x92\x2f\x06\x79\x98\xdb\x87\x6b\x29\xfe\x80\x46\xcf\x08\xe9\xdd\x2f\x4f\x70\x45\x54\x3b\xec\x97\x64\xa3\x25\xe3\xfb\x2b\xc2\x69\x07\xe3\x08\xf8\x91\x49\xc1\x3b\xe0\xfa\x6e\x15\xe0\xb7\x4b\xc4\x16\x99\xd5\x48\xad\x16\xfe\xc7\x06\xa8\x6c\x0e\xf1\x75\x37\xbc\xe3\xfd\xa0\xaf\x48\x4f\x25\xed\xd4\x92\xac\xe9\x9e\x71\xaa\x85\xb4\xf8\xc8\xfd\x81\x29\xed\xb6\xfe\x5f\xa0\x7a\x90\x60\x16\xd8\xf9\x9f\x8b\xc9\xd9\xfe\xe5\x71\xf6\x06\xe4\x91\x35\x76\xb6\xf2\x3f\xa7\x67\xfb\x97\x8b\xd9\x44\xf5\xd0\x20\x8a\x8d\x19\x5a\x15\x6f\x46\xc0\x6b\xfa\x1e\x5a\xa0\xca\x2e\x28\xfd\xcf\xe9\x05\xfd\xcb\xe3\x82\xef\x47\x8d\x1b\x06\x74\x00\xa3\x56\xd1\x81\x99\x2d\xa0\x29\x0f\x05\x09\x39\x52\xc9\xe8\x63\xeb\x15\xd0\x48\xd0\x67\xe5\x37\x2f\x20\xf1\x19\xdf\xb7\xe0\xe1\x48\x60\x4d\x27\xae\x1f\x1f\x46\x53\x78\xff\x5d\x03\x57\x4c\x70\xab\x36\x23\x45\x00\xd4\x62\xca\xa2\xbe\xc4\x49\xa9\xc1\x46\x18\xd9\xd7\x88\xd9\x23\xc8\xdf\x4c\xcf\x01\x2d\x3e\x9e\x48\xc6\x70\x9f\xa1\x61\x0b\x20\x3b\xa6\xe2\xe2\xe3\xc8\x4c\x32\xae\x3d\x77\xde\x1a\x7d\xd7\x3a\x6c\x18\x79\x9f\xbd\x96\x40\x35\x84\xad\xcf\x08\x69\x2c\xe0\x37\x1d\xce\x34\x9a\x7d\xe6\x05\xce\xb1\xfb\x6d\x4a\x31\x58\xe0\x12\x0a\xbf\x0b\x2f\x7e\xdc\x85\x17\x7c\xe1\xf1\x68\x8f\x99\x79\x3a\x5b\xd0\xa2\x47\x04\x4a\x8b\x3e\x4c\x77\xa1\x64\x9e\x4d\xf0\x6b\x7a\x97\x89\x6b\x7a\x8f\x59\x78\x3c\x3a\x5d\xe6\x83\x58\xf2\x11\x72\x92\x5f\x42\xb1\x82\x16\x92\x5d\x6c\x2d\x70\x09\x45\x2a\x48\x30\xea\x44\x1a\xe3\xff\x0b\x14\x1c\x22\x81\x19\x64\x9c\x1b\x37\x3f\x4a\x97\xf1\x26\x22\xbe\x8a\x37\x15\x39\xf0\x26\x72\xbf\x8a\xd7\xeb\x01\xb9\x70\x54\x03\x8a\x38\xd8\xc5\x97\x38\x14\x05\xda\xf7\xc9\xfc\xa8\x86\x94\xd6\x69\xe1\x47\x68\xbd\x16\x52\x5a\xa7\x84\x1f\xa1\x2d\x95\x10\x43\x2c\x32\x0a\x1b\x26\x5d\xb4\x0c\x11\x32\x8d\xb1\x13\x92\x63\xae\x60\x08\x2f\xe3\x2a\xc5\x8d\x5c\x04\x9d\xfe\xcb\xc8\xee\xba\x5e\x48\x4d\x3a\xca\x4f\x55\x46\x45\xa8\x26\x82\x5b\xff\x60\xf6\xdd\x8d\x4f\x2d\x3e\xc5\x2c\x3d\x85\x87\xc3\x12\x5f\xdc\x78\xee\x03\x6c\xd0\x65\x9e\x2f\xbc\x4d\x05\x78\x11\x5f\x58\x92\x08\xc6\xf3\x09\x40\xa2\xd1\x9c\xd1\x9b\xd3\x2b\x18\x83\x5e\x73\x46\x6f\x49\xaf\x60\xcc\xa5\xce\x73\xc2\xc8\x99\xe7\xbb\x65\x91\x15\xb3\x58\x7f\x5e\x19\x79\xe6\xf8\x69\x0b\x21\x1d\x79\xcc\x69\xe7\x1f\x12\xc8\x14\xb8\x38\x1d\x47\xb9\x4c\xbd\x8b\x92\xf6\x62\x48\xc7\xae\x56\x46\xc0\x68\x96\xb6\x0c\x09\x66\x99\xe6\xdb\xa4\x06\x2b\x54\x58\xa9\xcf\x30\x36\x0a\x82\xc0\xb8\x2c\x02\xc3\xda\xef\x84\x78\xea\xa8\x7c\x42\xd9\xfe\xd1\x43\xeb\xa4\x70\x37\xd9\xf6\x9d\x10\x2d\x50\xee\x66\xde\x80\x26\x37\x4c\x93\x6b\xd1\x75\xcc\xee\x74\x0f\xfa\x86\x69\x3f\x0e\xbb\x33\x55\xd7\xdd\x6a\x5e\xd4\xf6\x16\xe3\xf0\x2d\xb2\x62\x7e\x5b\xe6\xc4\x6a\x71\xc6\xb8\x06\xb9\xa3\x0d\x8c\x98\xad\x76\x1a\x31\x98\x28\x7a\xc7\xb5\x9f\x82\xca\x5b\x57\x1c\x21\xc0\x04\x8e\x16\xac\x42\xce\xd0\x98\x12\x58\x4b\x06\x6a\x2c\xd3\x1e\x3c\xf9\x58\xac\x3a\xee\x71\x7c\x39\xb5\x9b\x3b\x32\xc7\x36\x20\x50\x47\xe0\x35\xdc\x76\x72\x20\x47\x1d\x8a\x23\x47\xc0\xe5\xe4\x7e\x72\x20\x47\xcd\x93\x23\x47\xc0\xe5\xe4\x7e\x72\x20\xb7\x9d\xa6\x65\x35\xbf\xec\x4c\x6f\x8b\x66\x56\x47\x59\x1b\x0a\xfa\x79\x5a\x2f\x67\x1e\xe6\xa2\xdd\x76\x69\x5b\xe5\x54\x2b\x89\x46\xb2\x15\xf2\x3a\xd7\x60\x1d\x28\x45\xf7\x80\xd7\x35\x4e\x8f\xc7\x07\xaa\x0e\xc9\xbe\xa8\x04\xae\x6f\x33\x54\xc2\x0e\x0f\x6b\x5b\x0c\x25\x21\xb6\x88\x17\x6c\xb1\x11\x5d\x47\xf9\x16\xb3\xe3\x26\x7b\x9e\x76\x95\x49\xd5\x35\x2f\xce\xc6\xe4\x54\xa3\x4e\xd3\x7d\x3c\xcc\xd3\x06\x31\xa9\x55\xcc\x33\xb3\xd1\x33\x42\x99\x28\xdd\xb7\xe2\x64\x5e\xdf\x68\x49\x35\xec\x4f\xae\xaf\x99\x11\xd2\xb2\x23\x70\x50\x6a\x2d\xc5\x23\x44\x54\x02\xdd\xb2\x12\xee\x25\x98\xee\xe0\x56\x88\xa7\xb0\x9e\x53\x19\x2e\x9e\xac\xda\x70\x67\x9a\xaa\x2e\xd7\xc9\x13\x9c\xf0\x90\xa9\x15\xec\xe8\xd0\xea\x24\xea\x35\xa2\x15\xf2\xac\x88\xe1\x4a\xa2\xb4\xe6\x5a\x93\x8c\x03\x49\xb6\xbf\x6c\x3f\x47\xda\x0e\xe9\x19\x36\x22\xd5\x76\xcd\x16\x9c\x6d\x1a\xef\xa9\x9d\xcf\x11\x64\x74\x97\x10\x8f\xce\x9f\x70\x21\x2e\x53\x1b\x5f\xdb\xa5\xb1\x1b\xdf\x63\x24\x06\x6c\xcc\xec\x99\x93\x68\xfa\xe1\x1e\xbe\x0e\xa0\x74\x86\x7e\x60\x1d\x4b\xb0\x0e\x3a\x21\x4f\x95\x97\xdd\x83\xe2\x7d\x6d\x42\x04\xb7\xdd\xf2\x8d\xa4\x0d\xac\x41\x32\xb1\xad\x78\x46\xf4\x8a\x09\xa1\x4b\xdb\xc0\xe9\x27\x49\x3d\x2f\xf0\xd8\xf4\x94\xa8\xd4\x6c\x47\xad\x09\xb9\x9e\x9f\x90\x03\xd0\xad\x8f\x51\xf1\xc6\xc9\xca\x43\x59\x5b\xc3\x95\xa6\x1a\xd2\x68\x93\x5d\x43\x4c\x5d\x42\xd8\x99\x1f\xcb\x20\x77\x91\x51\x28\x4d\x65\x02\xec\x18\x67\xea\x90\xaa\xf0\x5e\xb4\xed\x23\x6d\x9e\x8a\xac\xef\xeb\x10\x9c\x4d\x9e\x31\x18\x7c\xa3\xe8\xa4\xed\x85\x62\x5a\xc8\x53\x7a\xb4\xbe\x09\x89\xc8\x9e\xe9\xcf\xb2\xcd\x90\xb5\x14\x5a\x34\x22\x81\xa5\xa2\x6b\xc9\x8e\x54\xc3\xff\x53\xaf\x34\x0f\x86\xc7\x96\x35\x19\x1e\xef\x0d\xd5\x41\x7c\x5b\xd9\xa8\x67\xa4\xf7\x92\x9e\xb9\x8c\xcc\xae\x13\x9b\x41\x9a\xe4\x71\x9f\x5d\x97\xbc\xe6\xaa\xef\x99\xcb\xc8\x2b\xa2\xec\x6d\x29\x12\xa4\xbc\x9f\x3c\x7f\x9f\x37\x45\x81\xaf\xf8\x00\x5b\x60\xf5\x22\x6d\xcf\xf4\x3b\x49\x79\x93\x64\xcb\x46\x70\xcd\xf8\x20\x06\xe5\x94\x99\x04\x65\x48\xea\xdf\xb2\xc8\x0d\xf5\x2c\x3a\x81\xa9\x94\x9b\xdd\x24\xba\x14\x12\xb1\x67\xc2\x96\xe8\x7a\xc1\xad\x83\xa0\x88\x93\xa7\x44\xda\x1c\xc0\x44\xfe\x64\x2b\x59\xac\x3f\xeb\x6c\x82\xef\xd8\x7e\x0c\x0d\x35\x29\x8a\x5e\x06\xfb\xd2\x94\x38\xb5\xc0\x54\xeb\x31\x27\x42\x54\xb1\xaf\x41\x69\xd1\x5d\x67\x68\x11\x98\x7e\x42\xbc\xc1\x91\x17\xf5\x9e\x38\x06\x4f\xc9\x9c\x5f\x43\x66\x32\xe7\x1a\xc3\x6e\xb4\x61\x7b\xee\x03\x6f\x1e\x62\x26\x9e\xe5\xa2\xe7\xa6\x31\xa5\x8a\x8a\xb2\xd3\x00\x4b\x48\x35\xc4\x9e\xb1\x0c\xc2\x8c\xbf\xce\xec\xdf\xe4\x16\x37\xea\xc7\x17\x55\x93\x11\xb1\x1a\x3a\x53\xbf\xad\x7b\x5e\x7a\xb6\xe3\x95\xfc\x39\x27\x4f\xf6\xee\x3e\xea\xd4\x24\x40\x9f\x7b\xac\x1c\x65\x1a\x98\x0a\x06\xb8\xdd\x34\x56\x92\x90\x27\x31\xce\x12\xf7\xf6\x84\xee\xec\x05\x5d\xeb\x6a\x0c\x33\x48\x0c\x11\x53\xe0\x4b\xee\x52\xc3\x28\xb9\x8f\xea\x40\x1e\x99\x82\x55\xe5\xd9\x94\x23\x64\x03\xf7\xf0\x38\xb0\xb6\x10\x2d\x54\x63\x78\x53\xf8\xfe\xb9\xdc\x54\x75\xed\x17\x74\x16\xf5\xee\xc1\xaf\xb5\x16\xd2\x99\xd9\xfc\xa1\x62\xff\x93\x92\xd5\xba\x86\x55\x81\x39\xe2\xb2\x93\xb8\x05\xda\xea\x83\x1d\xd8\x57\x2a\x5d\x45\xe5\x95\xc9\x0e\xe3\x5a\x70\x4d\x19\x07\x69\x85\xab\x69\x34\x4a\xe9\x6c\x45\x48\xa4\x8f\xe8\x49\xe1\xca\xc2\xcd\x9c\x90\xc6\x12\xe4\x6a\xea\xe8\xf7\xcd\x20\xbd\x01\x7a\xe0\x33\xa7\x47\xca\x5a\x97\x57\x52\xea\x5c\xb6\x82\xd3\x56\xcb\xfa\x90\x96\xc1\xd9\x49\x63\x39\x6c\xeb\x71\x80\x0e\x13\xf4\x54\x63\xb7\x67\x9c\x69\x46\xdb\x15\xb4\xf4\xb4\x81\x46\xf0\xad\x0a\x53\x7b\x5b\x71\x67\xa0\x66\x1d\x88\x41\x67\xa8\x1a\x9a\x06\x94\xfa\x74\x90\xa0\x0e\xc2\x18\xb5\xc3\x77\x94\xb5\x83\x84\x02\x3f\x68\xdd\xdf\x02\xdd\x82\x34\x26\x87\xe4\xbe\x8d\x0f\x82\xf1\xd5\xb4\x93\xbd\x65\xf5\x94\x5b\x77\xd6\x84\x15\x9d\x4e\xcd\x1c\xe2\x07\x8e\xd2\xc9\xfe\x4d\x8d\xcf\x64\x4f\x83\xdb\x56\x2c\x5e\xfe\xe9\xe2\x79\xf1\x5e\xd3\x61\x4f\x76\xce\x99\xaa\xe3\x77\x85\x72\x1b\xcf\x35\xd2\x45\x1e\x9e\x68\xac\x93\x5c\x35\x19\xac\xa6\x1a\xe2\xba\x0c\x5d\x11\x44\xca\xcf\x18\x56\x22\x5f\x59\xfc\xfe\x9f\x8f\x1f\xdc\x5a\xcf\x26\x0a\xd3\x54\x62\xa4\x52\xdf\xa6\xe7\x99\xdc\x88\x5f\x7c\x9a\xd5\xea\x77\x52\x4b\xf5\x32\x38\xaf\x21\xd3\x93\xa9\x96\xb6\xb5\x3a\xe0\xac\x24\x57\x55\x7d\x5d\xe1\xc2\x2f\xc3\x5f\x56\xd9\x4e\x88\x1a\xef\x31\xc7\xaf\x00\xc9\x96\x6b\x1f\x08\xec\x8e\xf3\xe3\xcb\xef\x37\xd3\x89\x3e\xb0\x5d\xba\xde\xb8\x5c\xe1\x15\x7b\x49\x79\x61\xc4\xe5\xb7\x85\xaa\xfe\x6b\x91\x61\xd2\x14\x5e\xb8\x90\x53\xcd\xe4\x42\xa3\xe6\x6a\xce\x90\xaa\x6e\x62\x9b\x4e\x7d\x7f\x07\x00\x00\xff\xff\xad\x1c\x9d\xb0\x55\x25\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9557, mode: os.FileMode(420), modTime: time.Unix(1548814571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\xdb\x38\x12\xbe\xf3\x29\xe0\xca\x45\xa9\xf2\x13\xe8\x18\x3b\xbb\xeb\xdd\x64\xc7\x63\x4d\x4e\x2e\x1f\x60\x1a\x92\x30\x21\x01\x06\x00\x35\x51\x4d\xe5\xdd\xa7\xf0\x43\xa0\x1b\x04\x28\xc9\xce\x54\xcd\xc5\x26\x9a\x44\xff\xa1\xfb\x43\x77\x4b\xb7\xb4\xa3\x8a\xfc\xc6\x7b\xd6\x84\xe7\xff\x6e\x7e\xf9\x7f\xd3\xe8\x76\xcf\x7a\x4a\xfe\x6c\x08\xf9\x36\x32\x75\x5c\x93\x5f\xed\xbf\x86\x90\x7e\x34\xd4\x70\x29\xd6\xe4\x73\x78\x6a\x7e\x34\xcd\xbb\xf0\xde\x1c\x07\xe6\x1f\xdd\xde\x77\xe4\x8b\x66\xaa\x21\x64\xd4\x4c\xad\xf8\xcb\x9a\xdc\xdd\xbe\x5f\x4f\x44\xff\x56\x87\xd7\x7a\xf5\x7e\x4d\x1e\x2d\xe5\xe9\xca\xbd\xbc\x57\xf2\x77\xd6\x9a\x86\x90\xc1\x3f\x05\x06\xd7\x44\x77\xe3\x6e\x4d\x36\x46\x71\xb1\xbb\x26\x82\xf6\x2c\xad\x98\x38\x70\x25\x45\xcf\x84\xb9\xbb\x9d\xc8\xef\xd7\x80\x5b\xe4\xac\x13\x6b\xbd\x0a\x0f\x1b\x46\x55\xbb\x8f\x9f\xfb\xe5\x9d\x18\x46\x73\x4d\x06\xaa\x68\xaf\xd7\xe4\x9e\xee\xb8\xa0\x46\x2a\x47\x4f\xbc\x3f\x71\x6d\xbc\xea\xff\x62\xd4\x8c\x8a\x59\x01\xdb\xf0\xb8\xaa\xee\x0e\x1f\xa7\xdd\x1b\xa6\x0e\xbc\x75\xbb\x75\x78\xac\xef\x0e\x1f\xcf\x76\x13\x3d\xb0\x16\xb0\xd8\xd8\xa5\x73\xf1\x26\x11\x82\xa7\x1f\x58\xc7\xa8\x76\x02\x55\x78\xac\x0b\x0c\x1f\x27\x81\x1f\x93\xc7\x2d\x07\x70\x00\xc9\xab\xe0\xc0\xac\x0a\x60\xcb\xd3\x8c\x09\x39\x50\xc5\xe9\x73\x17\x1c\xd0\x2a\x66\x16\xed\xb7\x1f\x24\x6d\xc2\x59\x7c\xfc\x6e\x98\xd0\x5c\x0a\xe7\x07\xab\xd6\x44\xd0\xab\x5a\x88\x3c\xc6\x4d\x4f\x65\x5e\x20\x60\x12\xcd\xf9\x34\xff\x12\x3b\x16\x08\x4f\x2e\xce\x38\x3c\x64\xd4\x49\x05\xa6\x7a\xae\xa3\xf0\xb4\xb2\x9b\x6c\xae\x5e\xf9\xf4\x8b\xc9\xe8\x32\x70\x5a\x85\x24\xbc\x51\x8c\x1a\x36\xa9\xde\x10\xd2\x3a\x42\x50\x7a\x3a\xa4\x18\xc7\x59\x58\xfb\x4c\x1d\x5e\x30\x8b\xd1\x11\x2e\x61\x11\xb4\x08\xe6\x47\x2d\x82\xe1\xab\x40\x8f\x01\x96\xc5\x9b\x8f\x6d\x23\x07\xc0\x40\x1b\x39\x4c\xdb\x3d\x36\x5c\x65\x1b\x82\xcc\x90\x03\x51\x66\x48\x81\x55\xa0\xc7\x2c\xca\x92\x0a\x5a\x9e\x48\xde\xf2\x4b\x58\xdc\xb2\x8e\x21\x2d\x5e\x1c\xe1\x12\x16\xd8\x90\x29\xa8\x91\x35\x36\xa1\x57\x20\xdb\x23\x03\xbb\xc8\x78\x6e\xfc\xfe\x68\x5d\xc6\x17\x99\xf8\x2a\xbe\xd8\xe4\x89\x2f\xb2\xfb\x55\x7c\x83\x1f\x40\x0a\x47\x37\x00\x08\x81\x29\xbe\x86\xd8\x32\xb1\xfd\x88\xf6\x47\x37\x60\xb6\xde\x0b\x6f\x61\x1b\xbc\x80\xd9\x7a\x27\xbc\x85\xed\xdc\x09\x11\x33\x41\x50\x58\x5c\x5c\x79\xfc\x9c\x60\x12\x83\x66\xc5\x72\xc8\x6b\x0a\x84\xf3\x78\xcd\xcd\x8d\xbc\x08\x38\xfd\xf3\x98\x4d\x46\xe6\x40\x1e\x0e\x7b\x22\xaf\xe2\x07\x6b\x12\x89\xd1\x71\x13\x01\x99\x9a\x73\x0c\xe7\xfc\x0a\x8e\x93\xc1\x39\xc7\x70\xc4\xaf\xe0\x98\x5b\x9d\x83\x75\xe2\x99\x5f\x44\xeb\xd9\x75\x95\x81\xf0\xb2\x33\x72\x48\xff\x69\x82\x80\x8f\x02\xcd\x7b\xe7\x6f\x32\xc8\x96\x92\xf0\x9e\x8c\x76\xd9\xca\x12\xdc\xa6\xab\x11\xaf\x7d\x55\x0a\x08\x93\xb0\x47\x5f\x1f\x5c\x85\x0b\x19\x5f\x84\xa8\xda\x99\xb9\xb0\x50\x09\x41\x5a\x32\x04\x10\xa3\x58\x40\x9c\x64\x7f\x90\xf2\x6b\x4f\xd5\x57\x70\x0d\x3f\x07\xd2\x3d\x2a\x91\xed\x35\xf8\x41\xca\x8e\x51\x11\xea\x83\x58\x37\x35\x5c\x18\xa6\xb6\xb4\x65\x89\xe6\xca\x84\x81\xee\xd8\x9a\xdc\x09\x57\x47\xb5\x72\xb4\x58\x14\x56\x82\x7d\x37\x37\xa3\xd2\x52\x4d\xd5\x52\xe0\x0a\x6a\x41\x5f\x78\x00\x02\xe1\xfd\xd0\x31\x67\xd3\xf9\x92\x98\x30\x8a\x33\x9d\xea\xa1\xa7\x45\xf9\xa9\xf8\xf3\xe2\xd3\xfa\x8d\xd2\x3d\xa3\x53\xc2\x63\xe5\x3d\x49\x8f\x84\x37\x8b\x77\x9c\x96\xe5\x83\xbe\xc1\xcb\x07\x84\x37\xca\x0f\x9c\x96\xe5\x83\xae\xc7\xcb\x07\x84\x37\xca\x0f\x9c\x96\xe5\xbb\x2e\xd2\x09\xb6\x4f\x8e\x79\x88\x7e\xcb\xab\xa7\xbc\x4b\x1b\x50\xe9\x9c\xe5\xb4\xc7\xd7\x97\xb5\x6b\x83\xb1\x6f\x91\x5f\x33\x09\x79\xc9\x6b\x69\x3d\xd3\xda\xd9\x97\xe4\x5a\x98\x81\xeb\x3d\xd5\x7b\xa4\x17\x55\x4c\x98\xff\x64\x54\xc5\xb6\x70\x59\x52\x71\xaa\x0e\x61\xe8\x9d\xa1\x62\x2b\xfb\x9e\x8a\x17\xc8\x1d\x36\xd0\x57\xb8\x63\x44\x05\x18\x38\x31\xa0\xbf\x54\x16\xc9\x1e\x6d\x2f\xf2\x74\x85\xfb\x3f\x54\xb9\xd8\x77\x56\xd7\x05\xbb\xec\xd5\x30\x74\xf2\x68\x3f\xdf\x18\x45\x0d\xdb\x1d\x7d\x97\xe3\x4d\x86\x75\x90\x33\x1b\x76\x8d\xd8\xf4\xdc\xa6\xaf\xec\x08\x97\x5c\xdf\xb2\x2d\x1d\x3b\x03\x70\xd2\x1a\xd7\x49\xb5\xa8\xdf\x34\x2e\x40\x31\x9a\xeb\x96\x0a\x28\x00\x4a\x99\x7e\x99\x3e\x07\xda\x8d\xf8\x0c\x5a\x89\x5d\x55\x3a\x4b\x1f\x5b\x36\xfa\x4b\xce\x3d\x30\x15\xc3\x3d\xc1\xd9\xd2\xf1\xcc\xcc\xe5\x7a\x13\xca\x34\x7c\x9b\xc0\x19\x03\x0a\x40\x1b\x26\x27\x4e\xa2\x1d\xc6\x07\xf6\x6d\x64\xda\x64\xd4\x4f\xbc\xe7\x88\xd6\xb3\x5e\xaa\x63\xe1\x63\xff\x62\xf6\xbd\xb1\x29\x2e\x5c\xe3\xfb\x6f\x45\x5b\x76\xcf\x14\x97\x2f\xa7\xf2\x68\x6a\x17\xe1\xfd\x75\x46\x1e\x61\xdf\x53\x65\xf8\x96\xba\xc0\xf0\x4d\x39\x21\x7b\x46\x5f\x02\x72\xc4\x19\x8f\xd3\x92\xf2\xae\x44\xd7\x86\x1a\x86\x31\x20\x9b\x13\xd4\xa6\x04\x6e\xe7\xe7\x39\xf4\x5c\x70\xd4\x10\xd0\x11\x98\x9f\x38\x4c\x38\x89\xf3\x3a\x0f\x52\x73\x23\xd5\x11\x03\x4a\xa8\xf5\x23\x65\xc7\xcd\x17\xd5\x65\x94\x7b\x25\x8d\x6c\x25\x22\x2b\x4d\xef\x15\x3f\x50\xc3\xfe\x87\x33\xc6\xbe\x18\x9f\x3b\xde\x66\xf4\x38\x6f\xd3\x7b\xf9\xc7\xad\x83\x13\x6b\x66\x88\xdf\x85\x21\x5e\x36\x86\x6b\x47\x65\x81\xf9\x21\x9b\x4a\xbc\x66\x44\x76\xf1\x10\xef\xc2\xa1\x17\x83\x11\x52\x9c\x44\xed\xb8\xf9\xa0\xa8\x68\xd1\x1d\xd3\x4a\x61\xb8\x18\xe5\xa8\xbd\x9b\x10\x14\x32\x54\xa7\xce\x8b\xd1\xa9\xee\x04\xbe\xad\x85\x55\x36\x8a\xf3\xc0\x1d\x69\x27\xc0\x42\xf6\x83\x14\x0c\x5f\x39\x39\xd0\x65\x58\xba\x18\xf6\x52\x6c\xf9\x2e\x25\xe9\x42\x1a\xa4\xee\x02\xe6\x43\x4d\xf1\x12\x44\x94\xba\xbe\x0a\x58\xcc\xf4\x1a\xb5\x91\xfd\x4d\x46\x9d\x41\xc4\xcf\xca\xfc\xd9\x9c\x12\xa1\x61\xcd\xe6\x7c\x62\x97\xd9\x9c\x7b\x0c\xa6\xc2\x86\xef\x44\x80\xc0\x1c\x26\x2a\xef\x72\xd3\xf3\x20\xa8\xb9\xa2\xe0\xec\x2d\x17\x5c\xef\xe1\x3d\xb7\x10\x06\x84\xdb\x9c\x6b\xdc\x5f\x34\xdd\x8c\xce\xf0\xb2\xea\x10\x56\xc4\x3a\x9c\x8e\xe5\x84\xc2\x07\x99\x46\xd5\x4b\xb9\x8b\x74\xf7\xbf\x5e\x94\x2c\x00\xbf\x6b\x38\x3b\xe6\xb8\x5d\xcb\x71\xd8\x4d\xda\x90\x40\xcc\x11\x4e\x39\xc6\x2d\xaa\xdc\x1b\x42\x3a\x7f\x6b\xdf\x09\x83\x43\x0f\xf2\x81\x13\xe0\xb9\x9b\xc1\xc5\x9a\x7c\x02\x72\x10\x13\x8b\x1e\x74\x51\x20\x55\xcb\x1e\xd8\xf3\xc8\xbb\x99\x7d\x53\x7d\x03\x95\x82\xc3\xd9\xb9\x52\x45\xd9\x97\xd5\xda\xf9\xde\x4a\xa1\x1d\xf4\xb8\x97\xca\xc7\xe1\xd5\x53\x21\x1b\xaa\x56\x97\x0a\xec\xdb\x19\xcd\x33\xf6\xbe\xb8\x91\xc2\x50\x2e\x98\x72\x1a\x94\x5c\x12\x55\xf1\x0d\x9e\x54\x26\x3b\x95\x2c\x25\x7e\x34\x61\x7f\x45\xb0\x63\x93\x5b\xd4\xd3\xef\x9b\x51\xed\x72\xda\x17\x41\x0f\x94\x77\xb6\xda\x2e\xb7\xe7\xee\xd2\x29\x69\x1d\xa7\xcc\xf3\xc3\xfc\xe7\x94\xac\xb3\xd6\x02\x1a\x92\x4f\x8a\x4f\x1b\xf2\x9a\x2e\xa8\xda\xdd\x64\x4e\x8d\x63\xdc\xb9\x1a\xa7\x9a\x9d\x19\x96\x57\x9a\x1f\x04\x81\xd5\x10\xaf\x35\x2d\xc5\x5f\x06\xb1\x43\xd1\xa0\xf1\x62\x77\x16\x8b\x95\xaa\x9a\xf9\x95\x8f\x9d\x50\xd6\xb8\x80\xe4\x8b\x3a\x5f\x17\x91\xe9\x1a\xde\xd3\x19\xfd\xbc\x42\xa4\x62\x54\x1c\xcb\xa4\x31\x2a\x52\xb9\x34\x61\x75\x1a\xdb\x66\x2a\xc3\x72\x34\xae\xc1\x1b\x03\xec\x5d\x2a\x2f\x89\x9b\x05\xe0\x4e\x51\x51\x8d\x97\x4a\xf6\xcd\x5f\x27\x01\xd5\x43\x3f\x53\x90\x77\x4d\x55\x50\xf2\x5c\xe9\xda\xc1\xae\xab\xa8\xe9\xdd\xf7\x57\x00\x00\x00\xff\xff\x72\x55\xe5\xe7\x00\x22\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 8704, mode: os.FileMode(420), modTime: time.Unix(1531513875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529614596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


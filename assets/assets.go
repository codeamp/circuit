// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x23\xb9\x0d\xbe\xeb\x29\xe8\xda\x8b\xb6\xca\x4f\xa0\x5b\x66\xec\x8c\x9d\xcc\x24\x8e\xb5\x73\x48\x4d\xf9\x40\xb7\x60\x89\x71\x37\xd9\x4b\xb2\x3d\xe3\x4a\xe5\xdd\x53\xfc\x6d\x80\x64\xcb\x96\x76\x52\x95\x8b\xad\x46\x37\x41\x00\x04\x3e\xfc\xd0\x74\xbc\xe7\x9a\xfd\x26\x06\x58\xc5\xdf\x7f\xd9\xfe\xfd\x6f\xab\x95\xe9\x0e\x30\x70\xf6\xef\x15\x63\xbf\x4f\xa0\x5f\x37\xec\x1f\xee\xdf\x8a\xb1\x61\xb2\xdc\x0a\x25\x37\xec\x4b\xfc\xb5\xfa\xcf\x6a\xf5\x4b\x7c\x6f\x5f\x47\x08\x3f\xfd\xda\x5f\xd8\x57\x03\x7a\xc5\xd8\x64\x40\xaf\xc5\x6e\xc3\x6e\xaf\x7e\xdd\x24\x62\x78\x6b\xe2\x6b\xb3\xfe\x75\xc3\xbe\x39\xca\xc3\x85\x7f\x79\xa7\xd5\xbf\xa0\xb3\x2b\xc6\xc6\xf0\x2b\x32\xb8\x64\xa6\x9f\xf6\x1b\xb6\xb5\x5a\xc8\xfd\x25\x93\x7c\x80\xf9\x09\xe4\x8b\xd0\x4a\x0e\x20\xed\xed\x55\x22\xff\xba\x41\xdc\x32\x67\x33\xb3\x36\xeb\xf8\x63\x0b\x5c\x77\x87\xfc\x79\x78\xbc\x95\xe3\x64\x2f\xd9\xc8\x35\x1f\xcc\x86\xdd\xf1\xbd\x90\xdc\x2a\xed\xe9\x33\xef\xcf\xc2\xd8\x20\xfa\x9f\x81\xdb\x49\x83\xdb\xe0\x29\xfe\x5c\x2f\xae\x8e\x1f\xcf\xab\xb7\xa0\x5f\x44\xe7\x57\x9b\xf8\x73\x79\x75\xfc\x78\x5e\x7d\xfd\x63\x54\xda\x32\xde\xf7\x79\x35\xfb\x2e\xec\x41\x48\xb6\x17\x2f\x20\x93\xca\xb7\x57\x8c\xcb\x1d\xb5\xd7\x8a\x31\xf0\xcb\xb7\xe5\xbe\xd7\x84\x9c\x37\xf7\xd6\xbd\x60\x0c\xcb\xcd\xcc\x08\x1d\x12\x7e\xeb\x1e\xfd\xe1\x6e\x67\x42\x3c\xe3\x7b\xe8\x81\x1b\xaf\xaa\x8e\x3f\x97\x55\x8d\x1f\x23\x55\x67\xd9\x1d\x07\xa4\xca\x7c\x9e\xc8\x55\x9c\x08\x68\xc9\x43\xc5\x84\xbd\x70\x2d\xf8\x63\x1f\x4d\xdf\x69\xb0\x47\x2d\xef\x3e\x68\x1a\x1e\x5a\x3c\xcf\x39\x05\x2a\xc2\x35\xa6\x2e\x9c\x81\x90\xfb\x1e\xa2\x6c\x59\x0b\x1f\x39\xd9\x08\xf9\x65\x8e\x84\xeb\x1f\x16\xa4\x11\x4a\xfa\xb3\xf3\xfb\x47\x82\x59\x2f\x05\xd4\xb7\xbc\x88\xc6\x6b\x26\xa3\xf0\x9a\x69\xde\x0f\xca\x2f\xa9\x33\xa0\xcd\x67\xb7\x28\x38\xdc\x17\xd4\x24\x02\xe8\x41\x98\xbc\xf9\xfc\xe4\x16\x39\x64\xbb\x08\x60\x95\xa1\xcb\xe3\x55\x7a\x8a\x90\xf5\x51\x03\xb7\x90\x44\x5f\x31\xd6\x79\x42\x14\x3a\x39\x56\x8e\xfa\x02\x04\x02\xae\x8d\x3b\xca\x62\xf2\x84\x53\x58\x44\x29\xa2\xfa\x59\x8a\xa8\xf8\x3a\xd2\x73\x50\x14\x31\x12\x7c\xc1\xaa\x11\x31\x30\x56\x8d\x69\x79\x40\xd2\x8b\x62\x41\xdc\x33\xc6\x6d\xde\x33\x86\xed\x3a\xd2\x33\xe6\x14\x10\x84\x35\x9f\x49\x41\xf3\x53\x58\x5c\x41\x0f\x44\x8a\x9d\x27\x9c\xc2\xe2\x76\xf0\xa1\x38\x70\xf9\x3a\x83\x20\xb7\x4c\x49\xff\x81\x18\x08\xc6\xa5\x2f\x36\x71\x5d\x89\x72\x09\xb7\x2e\xa2\x97\x51\x33\xa5\x90\x21\xb6\x72\x10\xb7\x46\xf8\x97\xc5\x73\x0f\x85\xc4\xdb\xb0\x3e\xdb\xae\xe0\x4b\x0c\x78\x16\x5f\x6a\xd0\xc4\x97\x58\xf5\x2c\xbe\xd1\x0e\x08\x20\xb2\x19\x10\xa8\x62\x00\xd9\x60\xb4\x4d\x6c\xaf\xc9\xfa\x6c\x06\xca\x36\x58\xe1\x8f\xb0\x8d\x56\xa0\x6c\x83\x11\xfe\x08\xdb\xda\x08\x19\xf1\x91\x53\x78\x10\x0e\x58\x9c\xf0\x97\xa6\x91\x05\xcd\x31\xaf\xe4\x08\xef\xe3\x55\xab\x9b\x79\x31\x74\xfa\xef\x63\x86\xe3\xa9\x9d\xdb\xea\xe0\x0a\xa9\x2b\x66\xd1\x39\xb4\x48\xee\xfa\x16\x9e\x8b\xc0\x82\x32\x1b\x45\x9f\x4a\xe4\x75\xfe\xc0\xa5\xc4\xf8\x33\x9f\x4f\x22\x10\x8b\x96\x1c\xa3\x3b\x9d\xc1\x31\xd9\xb5\xe4\x18\x3d\xe9\x0c\x8e\xa5\xd6\x65\xc6\x99\x79\x96\xd9\x74\x53\xe5\xdc\x22\x93\x1c\x37\x46\x99\x97\x7e\xda\x46\xc8\x46\x91\x16\xac\xf3\x3f\x52\xc8\x75\x0f\x38\xd9\x67\xbd\x5c\x33\x81\x4a\x82\xf5\x44\x9f\x43\x23\x82\x08\xb3\x5b\x86\x9a\x2a\xba\x25\xcd\xe6\xa4\xcc\xac\x4c\xd8\x28\x41\x31\x6d\x56\x04\x11\xf3\xb6\x88\x98\xf6\xfe\xa0\xd4\xf3\xc0\xf5\x33\xaa\x25\x1e\x23\xe9\x8e\x74\x45\x2e\x97\x7f\x50\xaa\x07\x2e\xc3\xca\x4f\x60\xd9\x27\x61\xd9\x47\x35\x0c\xc2\x4b\xba\x07\xfb\x49\xd8\xf8\xbc\xce\x05\xa8\x5f\x5d\x35\x4e\x9e\x26\xe1\x7b\xe6\x8a\xf9\xfb\x22\x2a\x17\xc4\x2b\x21\x2d\xe8\x27\xde\xc1\x4c\xf3\xb5\x54\xa7\x26\x87\xa2\xb7\xd2\xc6\x25\xa8\x82\x0f\xa5\x17\x22\x38\xe0\xe8\xc1\x1b\xe4\x08\x1b\x57\xe5\x5b\x2d\x5c\xb2\x4e\x45\xe0\x43\x64\x3e\xd7\xe3\x81\xf7\xfc\x7c\x3a\xeb\xb0\x76\xe6\x9c\x7b\xac\xc4\x3a\x13\xce\xe1\xed\x17\x27\xe6\xa8\xfd\x0b\xcc\x11\xe1\x74\xe6\x71\x71\x62\x8e\x3a\xd3\xc0\x1c\x11\x4e\x67\x1e\x17\x27\xe6\xbe\x8d\xf7\x5c\xdd\x2f\xbf\x32\xfa\xa2\x5b\x35\x70\xd1\xe7\xee\x84\x56\xe3\x45\x84\x05\xb4\xdb\x6d\xfc\x1c\x82\x5a\x85\x58\xa4\xd8\xa1\xac\xa2\x1d\x6d\x00\x63\xf8\x1e\xf0\xbe\x2e\xe8\xf1\xf3\x81\x9b\x03\x91\x8b\x6b\x90\xf6\xa6\xa0\x6a\x78\xc2\x8f\x2d\x11\x53\xc1\x89\x3d\xe2\x1d\x22\x76\x6a\x18\xb8\xdc\x61\xee\x78\x82\x71\x41\x1b\x67\x52\x75\x5d\x54\x67\xe3\x72\xaa\x33\xa7\xeb\x6d\x1e\x2e\x68\x0f\x4c\x6a\x15\xf7\xce\x09\x7a\x44\x29\x87\xd2\x63\xaf\x5e\xdd\xe7\x5b\xab\xb9\x85\xfd\x6b\xe8\x9a\x56\x8c\xf5\xae\x69\x05\x63\xee\xb4\x7a\x84\x4c\xd5\xc0\x77\xa2\x26\x8f\x1a\x5c\xef\x71\xa3\xd4\x73\xda\x2f\x98\x0c\x17\x4f\xde\x6c\xb8\xf9\xa6\xa6\x2b\x6d\xf2\x0c\xaf\xf8\x51\x98\x2b\x78\xe2\x53\x6f\x09\xea\x75\xaa\x57\xfa\xa8\x8a\x69\xde\x53\x7b\x73\x6b\x0e\x80\x81\xa4\x90\xaf\x90\xe7\x85\xf7\x13\x3d\xc3\x4e\x51\x6b\xb7\x7c\x21\xf8\xa6\x8b\x9e\xd6\xf9\xbc\x80\xce\xe1\x92\xf0\xe8\xf8\x09\x57\xea\x0a\xb3\x8d\xb5\x1d\xc5\x6e\x3c\xaa\x21\x0e\xec\xdc\xec\x8d\x93\xe8\xc6\xe9\x1e\x7e\x9f\xc0\xd8\x82\xfa\x59\x0c\x82\xd0\x06\x18\x94\x7e\x6d\x7c\x1c\x5e\x54\xdf\x5b\x07\x11\xd2\xf7\xe2\x9f\x34\xef\xe0\x0e\xb4\x50\xbb\x46\x64\xe4\xa8\x58\x50\xba\xf6\x0d\x9c\x7e\x48\xea\x79\x47\xc4\xd2\x53\xe2\xda\x8a\x27\xee\x5d\x28\x4c\x14\x18\x3b\x00\xdf\x45\x8c\xca\xe3\x3c\xaf\x0f\x17\x7d\x8b\x6e\x2c\xb7\x40\xd1\xa6\x18\x72\x2c\x8d\x38\xfc\xca\x2f\x35\xc8\x9d\xe4\x14\xc6\x72\x4d\x08\x4f\x42\x0a\x73\xa0\x26\xbc\x57\x7d\xff\xc8\xbb\xe7\x2a\xeb\xc7\x3a\x04\x67\x93\x37\x1c\x06\x8f\x6b\x83\xb6\xa3\x32\xc2\x2a\xfd\x4a\x8f\x36\x36\x21\x99\xb2\x17\xf6\xab\xee\x0b\xca\x9d\x56\x56\x75\x8a\x90\xb5\xe1\x77\x5a\xbc\x70\x0b\x7f\xa5\x51\xe9\x5e\x4c\x8f\xbd\xe8\x0a\x7a\x1e\xca\x9a\x83\xfa\x7e\xe5\x51\xcf\x69\x1f\x35\x3d\x32\xe9\x2d\x66\xb5\x20\x5f\x4c\x5a\x7e\x2b\xd7\x7b\x41\xf3\xc8\x25\xdb\x81\x11\x1a\x76\x5b\x77\x6c\x24\xed\xb5\x66\x91\xdd\xa4\x5d\x2a\xba\x2f\x46\x3b\xe7\xcc\x46\xdf\x98\x1b\x5f\x32\xe3\x07\xdb\xc8\x2c\xf5\x28\xf9\xf8\x00\x74\x89\x05\x9e\x89\x02\xf6\xe7\xe6\xd0\x6f\x2f\xec\x07\xcd\x65\x47\x72\x6f\xa7\xa4\x15\x72\x52\x53\xb4\x2d\x81\x78\x20\xd5\x74\x5d\x32\xa7\xea\x18\x9d\xe7\x52\x02\x2f\xa6\x9e\x21\x21\x65\xda\x1b\x20\xa8\x86\x51\x49\x1f\x6e\x08\xbf\xca\x04\xcb\xbb\x03\xb8\x3c\x42\x44\x29\x32\xc7\xd1\xd0\x55\xf2\x49\xec\x67\xa0\x69\x69\x51\x75\x46\x38\x32\x97\xd4\x69\xc1\x5c\xab\x63\x5d\x00\xbc\x4a\xae\xc9\x58\x35\x7c\x2c\xa8\x15\xcc\xfd\x04\xf4\xc2\x38\x8e\x3a\x59\x8c\xe8\x4b\x3a\x97\x23\xd3\x42\xe7\xd2\x62\x38\x8c\xb6\x62\x2f\x23\x8c\x97\x80\xb5\xf0\xae\x54\xbd\x74\x8d\x25\x53\x34\x8c\x4d\xe1\xda\xcf\xf9\x6b\xc0\x3e\xe2\x19\x4c\xb8\x78\x5d\xf9\xbf\x64\xe2\x9c\xed\x13\x4b\xb4\x45\x7c\x6d\x02\x31\x8d\xdb\x76\xe4\xd1\xb3\x9d\xaf\x0f\x8e\x05\x39\x91\x3d\xdc\xbf\xb5\x34\x40\x37\x73\x5e\x8f\x3a\xa9\x2c\x81\x01\x6e\x5e\x9d\x97\x10\xe6\x04\xe3\x3c\xe3\xd1\x9f\xd0\xad\x1f\xf7\xf5\xa1\x62\x71\x0f\xc4\x11\x31\x0b\x3c\x90\xaf\x2d\x8c\x4a\x85\xd9\x1c\x28\x22\x29\xb1\x69\x3c\x9f\xc0\x94\xee\xe0\x1e\x1e\x27\xd1\x57\xaa\xa5\xda\x0e\x0b\x85\x67\xe5\xb5\x50\xcd\xbd\xdf\xd1\xa7\xb4\x7b\x91\xb8\xd7\x9d\xd2\xc1\xcd\x2e\x1e\x1a\xfe\xbf\xa8\x59\xab\x07\xb9\xaa\x68\x81\x71\xdd\x97\xdc\x00\xef\xed\xc1\x3f\xf8\x4f\x1a\x3d\x4a\xe3\x93\xc5\x7e\x25\xdd\x04\xc4\xa1\x26\x31\x69\xe3\xae\xc0\x5b\x36\x61\xc6\x3f\xff\xf4\xe5\x73\xe0\x75\xee\x31\x53\x11\xc2\x95\x20\x11\xa1\x71\x29\x1b\x5c\xf6\xd4\x4d\x3e\x2a\x69\xb9\x90\xa0\x59\xb5\x47\x79\x9a\x61\x03\xa5\xd1\xb9\x67\xc4\x48\x83\x9e\xb0\x72\xe1\xd4\x3c\x83\xd2\x1d\x06\xfe\x63\x3b\xe9\x18\x68\x91\xf0\x55\xf2\x17\x2e\xfa\x90\x3f\x29\xeb\xf2\x0c\x2b\x9e\xbe\xc7\xb0\x07\xda\x3c\x14\x1e\x8d\xf5\xf0\x0d\xdb\x01\x06\xcc\x60\xe4\x16\xc3\x9b\x90\xc2\x0a\xde\x5f\x41\xcf\x5f\xb7\xd0\x29\xb9\x33\x69\xe9\xe8\xfb\x94\x82\x68\xc5\x00\x6a\xb2\x05\xd5\x4c\x5d\x07\xc6\xfc\x76\xd0\x60\x0e\xca\x05\x6f\xa0\x3f\x71\xd1\x4f\x1a\x2a\xfa\xc1\xda\xf1\x06\xf8\x0e\xb4\x0b\x2d\xa4\xf7\x4d\x7e\x91\x82\xac\x65\x9d\xe2\x2b\x6f\xa7\x32\x8a\x8b\xd6\xb5\xea\x0f\x5b\xee\x90\xaf\x85\x6a\x30\xf9\x7f\x6a\x17\x17\x3b\x41\xdc\xec\x93\x88\x2a\x2e\x7c\xde\x56\xef\x9c\xb9\xc4\xe2\xbc\xa1\x30\x75\xbe\x8d\xa9\xc5\x78\x6b\xfc\x50\xd5\x1b\x0b\xe3\x08\x92\x93\x17\x41\x79\x69\x8c\xd0\xd6\x61\x19\x2b\xe7\xcb\x9f\x08\x95\x9e\xf0\x93\x90\xb2\x29\xcc\x11\xd4\x2c\x84\x39\x7d\x3f\xd2\x3e\x14\x5b\xe0\xeb\x8b\x93\x9d\xa8\xd9\x5c\x2c\x1e\x4e\xbb\xcb\x28\x4b\x74\xea\x10\xcd\xce\xa1\x55\x66\x1d\xd5\xe4\xb2\x69\xb6\x4b\x5c\x57\x17\xf4\xf7\x35\x0e\xc7\xac\x4e\xaf\x6c\x88\xc8\xad\xdb\x1c\x2f\xf1\x64\x40\x17\xd5\x16\x19\x46\xd3\x85\x11\x4f\x4f\xdd\x6f\xde\xae\x0a\xc6\xbd\xe6\xb2\x8a\x9d\xfa\x22\xa8\x69\xff\x16\x20\x2d\xba\xc2\x3b\x37\x0a\xa6\x59\xdc\x68\xb6\x5c\x2b\x26\xa8\xe9\x16\xc4\x0c\xe6\xfb\x6f\x00\x00\x00\xff\xff\x10\xc8\xfe\xd0\x5f\x28\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 10335, mode: os.FileMode(420), modTime: time.Unix(1569002999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


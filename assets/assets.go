// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x1b\xb9\x11\xbe\xf3\x29\xc0\xda\x0b\x5d\xa5\x27\xe0\x2d\xb6\x1c\x5b\x89\x9d\x28\xe2\xfa\x90\x72\xe9\x00\x0d\x5b\x24\xa2\x19\x60\x16\xc0\xc8\x66\xa5\xf2\xee\x29\xfc\x4e\x37\x80\xa1\x44\xed\xa6\x2a\x17\x89\xe8\x19\x7c\xe8\x6e\xf4\xff\x98\x8e\xf7\x5c\xb3\x5f\xc5\x00\xab\xf8\xfb\x2f\xbb\xbf\xff\x6d\xb5\x32\xdd\x11\x06\xce\xfe\xbd\x62\xec\xb7\x09\xf4\x69\xcb\xfe\xe1\xfe\xad\x18\x1b\x26\xcb\xad\x50\x72\xcb\xbe\xc6\x5f\xab\xff\xac\x56\xbf\xc4\xe7\xf6\x34\x42\xf8\xe9\xf7\xfe\xc2\xbe\x19\xd0\x2b\xc6\x26\x03\x7a\x23\xf6\x5b\x76\x73\xfd\x6e\x9b\x88\xe1\xa9\x89\x8f\xcd\xe6\xdd\x96\x7d\x77\x94\xfb\xb5\x7f\x78\xab\xd5\xbf\xa0\xb3\x2b\xc6\xc6\xf0\x2b\x02\x5c\x31\xd3\x4f\x87\x2d\xdb\x59\x2d\xe4\xe1\x8a\x49\x3e\xc0\xbc\x02\xf9\x2c\xb4\x92\x03\x48\x7b\x73\x9d\xc8\xef\xb6\x08\x2d\x23\x9b\x19\xda\x6c\xe2\x8f\x1d\x70\xdd\x1d\xf3\xeb\x61\x79\x23\xc7\xc9\x5e\xb1\x91\x6b\x3e\x98\x2d\xbb\xe5\x07\x21\xb9\x55\xda\xd3\x67\xec\x2f\xc2\xd8\xc0\xfa\x9f\x81\xdb\x49\x83\x3b\xe0\x31\xfe\xdc\x2c\xee\x8e\x2f\xcf\xbb\x77\xa0\x9f\x45\xe7\x77\x9b\xf8\x73\x79\x77\x7c\xb9\xda\xcd\xcc\x08\x1d\x82\xd8\xb9\xa5\x57\xf1\x6e\x26\x44\x4d\xdf\x41\x0f\xdc\xf8\x03\x75\xfc\xb9\x7c\x60\x7c\x79\x3e\xf0\xe3\xac\x71\x87\x80\x2e\x60\xd6\x2a\xba\x30\xc7\x02\xda\x72\x5f\x81\xb0\x67\xae\x05\x7f\xe8\xa3\x02\x3a\x0d\xf6\xac\xfc\xee\x05\x24\xbe\x90\x87\x1e\x22\x39\x03\x78\xd3\xc9\xe7\xe7\x87\xd9\x14\x3e\xfe\xb4\x20\x8d\x50\xd2\xab\xcd\x49\x91\x08\x66\xb3\x64\x51\xdf\xf3\x26\x6a\xb0\x99\x8c\xec\x6b\xa6\xf9\x2b\x28\xdf\xa4\xf7\x80\x0e\x9f\x6f\xa4\x40\xb8\x2b\xa8\x89\x05\xd0\x83\x30\xf9\xf0\x79\xe5\x36\x39\xd7\x5e\x07\x6f\xcd\xbe\xeb\x1d\x36\xad\xa2\xcf\x7e\xd0\xc0\x2d\x24\xd6\x57\x8c\x75\x9e\x10\x99\x4e\x77\x9a\xcd\xbe\xf0\x82\xe0\xd8\xe3\x9e\x42\x4c\x9e\x70\x09\x44\xe4\x22\x8a\x9f\xb9\x88\x82\x6f\x22\x3d\xdb\x63\x61\x9e\xc1\x16\xac\x1a\x11\x80\xb1\x6a\x4c\xdb\x43\x28\x59\x17\x1b\xe2\x99\xd1\x65\xf2\x99\xd1\x63\x36\x91\x9e\x9d\xae\xf0\x41\x2c\xf9\x4c\x0a\x92\x5f\x02\x71\x0d\x3d\x10\x2e\xf6\x9e\x70\x09\x04\x15\x24\x19\x35\x91\xc6\xf9\xff\x06\x05\x87\x0c\xe0\x16\x05\xe6\x2e\xec\xcf\xd2\x15\xb8\x44\xc4\x37\xe1\x52\x91\x13\x2e\x91\xfb\x4d\xb8\x51\x0f\xc8\x85\xb3\x1a\x50\xc4\xc1\x2e\xbe\xc5\xa1\x28\xc1\x7e\x24\xfb\xb3\x1a\x28\x6c\xd0\xc2\xef\x81\x8d\x5a\xa0\xb0\x41\x09\xbf\x07\xb6\x56\x42\x0e\xb1\xc8\x28\x7c\x98\x0c\xd1\x32\x45\x48\x1a\x63\x17\x24\xc7\x58\xc9\x10\x5e\x87\x55\x8b\x9b\xb1\x18\xba\xfd\xd7\x81\xdd\x0c\xa3\xd2\x96\x0d\x5c\x9e\x9a\x88\x86\x71\xcb\x94\xf4\xfe\x21\xfc\xbb\xbb\x98\x5a\x62\x8a\xd9\x46\x88\x48\x4e\x47\x7c\x0f\xeb\x75\xca\x53\x3f\xfd\x31\xbc\xef\x17\x4e\xf9\x21\xec\x51\x48\x76\x10\xcf\x20\x53\xfc\xbb\xb9\x66\x5c\xee\x69\x69\xe2\x73\x0c\x66\x23\x65\xb8\x8f\x3f\x1b\x5c\x84\xa4\x43\x6e\xb3\xcc\x58\xd1\xaa\x13\x79\x93\x5f\x70\x90\xf1\x67\xb6\x90\x44\x20\x77\x5a\x22\x46\x83\x7e\x03\x62\xba\xd9\x12\x31\xda\xf2\x1b\x10\x4b\xa9\xcb\xac\x34\x63\x96\x19\x77\x5b\xe5\xe5\x22\xdb\x9c\x57\x46\x99\xbb\xfe\xb0\x83\x90\x8e\x22\x2d\x68\xe7\x7f\x24\x90\x2b\xb1\x71\x41\x90\xe5\x72\x15\x37\x2a\x1b\x36\x13\x5d\x87\x6a\x1d\x11\x66\xc7\xf0\x36\x99\x1c\x83\x66\x7c\x52\x05\x56\x2a\x6c\x54\x88\x98\x36\x0b\x82\x88\xf9\x58\x44\x4c\x67\xbf\x57\xea\x69\xe0\xfa\x09\xd5\x1b\x0f\x91\x74\x4b\x5a\x07\x97\xef\xdf\x2b\xd5\x03\x97\x61\xe7\x27\xb0\xec\x93\xb0\xec\x83\x1a\x06\xe1\x39\x3d\x80\xfd\x24\x6c\x5c\x6f\xb2\x03\xfb\xdd\x55\x77\xe1\x69\x12\x7e\x64\x54\x8c\xef\x0b\xad\x5c\xaf\xae\x84\xb4\xa0\x1f\x79\x07\x33\xcd\xd7\x5b\x9d\x9a\x5c\x1c\xbf\x91\x36\x6e\x41\x05\x76\x28\xcf\x10\xc1\x85\xae\x1e\xbc\x42\xce\xc0\xb8\x22\xdc\x6a\x01\x66\x2e\x14\xef\x23\xf8\x5c\x2e\x07\xec\x79\x7d\x39\x74\xd8\x3b\x23\xe7\x46\x24\x41\x67\xc2\x5b\xb0\xfd\xe6\x04\x8e\x7a\xa4\x00\x8e\x08\x97\x83\xc7\xcd\x09\x1c\xb5\x6f\x01\x1c\x11\x2e\x07\x8f\x9b\x13\xb8\xef\x75\x3d\xaa\xfb\xe5\x77\x46\x5b\x74\xbb\x06\x2e\xfa\x14\xdd\xd7\xb4\x62\x2f\x3c\x2c\x44\xbb\xfd\xd6\x37\xeb\x54\x2b\x44\x23\xc5\x09\x65\xa5\xed\x68\x03\x18\xc3\x0f\x80\xcf\x75\x4e\x8f\xd7\x47\x6e\x8e\x84\x2f\xae\x41\xda\xcf\x05\x55\xc3\x23\x5e\xb6\x58\x4c\x45\x29\xb6\x88\x57\xb0\xd8\xa9\x61\xe0\x72\x8f\xd1\x71\x9b\xbf\xa6\x7d\x2d\xa9\xfb\xd6\xd5\xdd\xb8\x7c\xea\xd4\xe9\xfa\x9f\xfb\x35\x6d\x51\x49\xb5\xe4\x9e\x39\x46\xcf\x08\xe5\xa2\xf4\xd8\xab\x93\x7b\x7d\x67\x35\xb7\x70\x38\x85\xce\x6a\xc5\x58\xef\x92\x3e\x18\x73\xab\xd5\x03\x64\xaa\x06\xbe\x17\x35\x79\xd4\xe0\xfa\x93\xcf\x4a\x3d\xe5\xfc\xee\x55\x86\xcb\x37\xaf\x36\xdc\x1b\x53\xd5\x95\x3a\x79\x82\x13\x5e\x0a\x73\x0d\x8f\x7c\xea\x2d\x89\x7a\x9d\xea\x95\x3e\x2b\x62\x1a\x8a\xd4\xd6\xdc\x6a\xd3\x71\x20\x29\xf8\x2b\xf8\x79\xe6\xfd\x44\xef\xb0\x53\x54\xdb\x2d\x5b\x08\xb6\xe9\xbc\xa7\x75\x3f\xcf\xa0\xb3\xbb\xa4\x78\x74\xfe\x86\x2b\x71\x85\xd9\xc5\xea\x92\xc6\x6e\x3c\x49\x21\x06\xec\xcc\xec\x85\x9b\xe8\xc6\xe9\x0e\x7e\x9b\xc0\xd8\x82\xfa\x45\x0c\x82\xd0\x06\x18\x94\x3e\x35\x5e\x0e\x0f\xaa\xf7\xad\x0b\x11\xd2\xf7\xeb\x9f\x34\xef\xe0\x16\xb4\x50\xfb\x86\x67\x64\xaf\x58\x10\xba\xb6\x0d\x9c\x7e\x48\xea\x79\x85\xc7\xd2\x5b\xe2\xda\x8a\x47\xee\x4d\x28\x4c\x1d\x18\x3b\x02\xdf\xc7\x18\x95\x67\x5e\x5e\x1e\x2e\xfa\x16\xdd\x58\x6e\x81\x46\x9b\x62\x10\xb2\x34\x06\xf1\x3b\xbf\xd6\x41\xee\x22\xa3\x30\x96\x6b\x42\x78\x14\x52\x98\x23\x55\xe1\x9d\xea\xfb\x07\xde\x3d\x55\x59\x3f\xd6\x21\x38\x9b\xbc\x60\x30\x78\xa6\x19\xa4\x1d\x95\x11\x56\xe9\x13\xbd\xda\xd8\x06\x65\xca\x41\xd8\x6f\xba\x2f\x28\xb7\x5a\x59\xd5\x29\x42\xd6\x86\xdf\x6a\xf1\xcc\x2d\xfc\x95\x7a\xa5\x7b\x30\x3d\xf4\xa2\x2b\xe8\x79\x72\x69\x8e\xea\xc7\xb5\x8f\x7a\x4e\xfa\x28\xe9\x99\x71\x68\x31\xd0\xec\x26\xed\x92\xc7\x5d\x31\xb0\x79\xcb\xb0\xf1\x85\x71\xe8\x15\x33\x7e\x5e\x8b\x04\xa9\x27\xa4\xe7\x27\x8a\x4b\x10\x78\xc8\x08\xd8\x02\x9b\xa3\xbc\x83\xb0\xef\x35\x97\x1d\xc9\x96\x9d\x92\x56\xc8\x49\x4d\x26\x28\x93\x04\x65\x20\xf5\x6f\x5d\xe4\xa6\x7a\x16\xdd\xc0\x52\xca\x2d\x66\x99\x21\x85\x64\xda\x0b\x61\x4b\x0d\xa3\x92\xde\x41\x50\xc4\x29\x53\x22\xef\x8e\xe0\x22\x3f\x61\xa5\x88\xf5\x67\x9d\x4d\xc9\x47\x71\x98\x43\x43\x4b\x8a\xaa\x97\xc1\xbe\xb4\x24\x4e\x2b\x30\xb5\x7a\xcc\x85\x10\x55\xf1\x35\x19\xab\x86\x0f\x05\xb5\x0a\x4c\x7f\x40\xbc\xc1\x91\x17\xf5\x9e\x38\x06\x2f\xc9\x5c\x0e\x42\x0b\x99\x4b\x8d\x61\x37\xda\x89\x83\x8c\x81\xb7\x0c\x31\x0b\xcf\x4a\xd1\x4b\xd3\x58\x52\x45\x43\xd9\x34\xc0\x32\xd6\x0c\xb1\x67\x2c\x83\x09\xe7\xaf\x2b\xff\x97\xcc\x91\xb3\x7e\xf2\xd0\x64\x21\x22\x36\x43\x27\xf5\xdb\xb6\xe7\xd1\xbb\x9d\x3f\x0a\x9c\x73\x72\xc2\x7b\xf8\xac\xd4\x92\x00\x7d\x70\xf2\x72\xd4\x69\x60\x29\x18\xe0\x76\xd3\x59\x09\x01\x27\x31\xce\x03\x8f\xfe\x86\x6e\xfc\x88\xb0\x0f\x35\x86\x5b\x10\x43\xc4\x10\x78\xcc\x5e\x6b\x18\x25\xf7\x59\x1d\xc8\x23\x29\xb1\xa9\x3c\x9f\x72\x94\xee\xe0\x0e\x1e\x26\xd1\x57\xa2\xa5\x6a\x0c\x33\x85\x27\xe0\x35\x53\xcd\xb3\x5f\xd1\x59\xb4\xbb\x87\x78\xd6\xad\xd2\xc1\xcc\xd6\xf7\x0d\xfb\x5f\x94\xac\xd5\x35\x5c\x57\xb4\x00\x5c\x77\x12\x9f\x81\xf7\xf6\xe8\x17\xfe\x95\x46\x57\xd1\x78\x65\xb1\xc3\xf8\xa0\xa4\xe5\x42\x82\xf6\xc2\xb5\x34\x9a\xa5\x0c\xb6\xa2\x34\xd2\x47\xf6\xa4\x34\xb2\x08\x3b\x17\xa4\xf1\x00\xa5\x9a\x06\xfe\x73\x37\xe9\x68\x80\x91\xf0\x4d\xf2\x67\x2e\xfa\x90\x57\x28\x74\x29\x5b\x85\xe9\xab\x65\x7b\xa4\x65\x70\x71\xd3\x58\x0e\xdf\x7a\x1c\x61\xc0\x00\x23\xb7\xd8\xed\x85\x14\x56\xf0\xfe\x1a\x7a\x7e\xda\x41\xa7\xe4\xde\xa4\xad\xa3\xaf\xb8\x0b\xa2\x15\x03\xa8\xc9\x16\x54\x33\x75\x1d\x18\xf3\xeb\x51\x83\x39\x2a\x67\xd4\x81\xfe\xc8\x45\x3f\x69\xa8\xe8\x47\x6b\xc7\xcf\xc0\xf7\xa0\x9d\xc9\x21\xb9\x3f\xe7\x07\xc9\xf8\x5a\xda\x29\xde\xf2\x7a\x2a\xad\xbb\x68\xc2\xaa\x4e\xa7\x65\x0e\xf9\x13\x4b\xed\x64\xff\x4f\x8d\xcf\x62\x4f\x83\xdb\x56\x2c\x5e\xf9\xf1\xe4\x65\xf1\xde\xd2\x61\x2f\x76\xce\x85\xaa\xf3\x97\x8d\x9a\x8d\x97\x1a\xe9\x2a\x0f\x2f\x34\xd6\x24\x57\x2d\x06\xab\xa5\x86\xb8\x2d\xc3\x50\x05\x91\xfa\x43\x8a\x97\x28\x56\x16\xff\xfc\xd3\xd7\x2f\xe1\xac\x17\x13\x85\x6b\x2a\x31\x65\x89\x87\xf0\x25\x85\x5e\x6d\xf5\x19\x25\x84\xb2\x0b\xf2\x51\xa3\x9a\x2e\x8e\xc0\xf3\xf7\x8b\x6d\xa7\x59\x6b\x2f\xde\x49\xbb\xe8\x2e\x2b\x56\x6a\x07\xcd\x42\xba\x55\x75\x9c\x95\xe4\xaa\xa9\xb6\x2b\x5c\x66\x16\xf4\xd7\xd5\xd1\xe7\xb4\x4e\xbf\x39\x10\x96\x5b\x9f\x23\x3c\xc7\xa5\xb1\x94\xd3\x54\xba\x31\x86\xd1\x4b\xcf\x9b\x8f\xab\x7c\xf0\xa0\xb9\xac\x5c\xa6\xfe\x92\xd1\xd4\x7f\x2b\x0e\x2d\x9a\xc2\x2b\x0f\x0a\xaa\x59\x3c\x68\xd6\x5c\xcb\x27\xa8\xea\x16\xd8\x0c\xea\xfb\x6f\x00\x00\x00\xff\xff\xb4\x8c\x54\x54\x45\x26\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9797, mode: os.FileMode(420), modTime: time.Unix(1548789724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


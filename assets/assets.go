// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\xdb\xbe\x11\xbf\xf3\x29\xe0\xf9\x5f\x94\x19\x3f\x81\x8e\xb1\xd3\xc6\x6d\xd2\xaa\x56\x72\xf2\xf8\x00\x53\x2b\x09\x0d\x09\x30\x00\xa8\x5a\xd3\xc9\xbb\x77\xf0\x41\x60\x17\xfc\xb0\x65\xa7\x33\xff\x8b\x4d\x2c\x89\xdf\x7e\x60\x77\xb1\xbb\x32\x35\x6f\xb8\x66\xdf\x44\x0b\x55\x7c\xfe\xdb\xf6\x9f\xff\xa8\x2a\x53\x1f\xa1\xe5\xec\xbf\x15\x63\x3f\x7b\xd0\xe7\x35\xfb\x97\xfb\x57\x31\xd6\xf6\x96\x5b\xa1\xe4\x9a\x7d\x8d\x4f\xd5\xaf\xaa\xfa\x23\xbe\xb7\xe7\x0e\xc2\xa3\xdf\xfb\x07\xfb\x6e\x40\x57\x8c\xf5\x06\xf4\x4a\xec\xd6\xec\xee\xf6\xc3\x7a\x20\x86\xb7\x26\xbe\x36\xab\x0f\x6b\xf6\xe0\x28\x8f\x57\xfe\xe5\x46\xab\x7f\x43\x6d\x2b\xc6\xba\xf0\x14\x01\xae\x99\x69\xfa\xc3\x9a\x6d\xad\x16\xf2\x70\xcd\x24\x6f\x21\xaf\x40\x9e\x84\x56\xb2\x05\x69\xef\x6e\x07\xf2\x87\x35\x42\x4b\xc8\x26\x43\x9b\x55\x7c\xd8\x02\xd7\xf5\x31\x7d\x1e\x96\x77\xb2\xeb\xed\x35\xeb\xb8\xe6\xad\x59\xb3\x0d\x3f\x08\xc9\xad\xd2\x9e\x9e\xb1\xbf\x08\x63\x83\xe8\x7f\x01\x6e\x7b\x0d\x8e\xc1\x3e\x3e\xae\x66\x77\xc7\x8f\xf3\xee\x2d\xe8\x93\xa8\xfd\x6e\x13\x1f\xe7\x77\xc7\x8f\x47\xbb\x99\xe9\xa0\x46\x10\x5b\xb7\xf4\x26\xde\x66\x42\xb4\xf4\x3d\x34\xc0\x8d\x67\xa8\xe3\xe3\x3c\xc3\xf8\x71\x66\xf8\x29\x5b\xdc\x21\xa0\x03\xc8\x56\x45\x07\xe6\x44\x40\x5b\x1e\x47\x20\xec\xc4\xb5\xe0\x4f\x4d\x34\x40\xad\xc1\x2e\xea\xef\x3e\xc8\xd2\xc4\xb3\xf8\xf4\x6c\x41\x1a\xa1\xa4\xb7\x83\x13\x6b\x20\x98\xd5\x9c\x8b\x3c\xa4\x4d\x8f\xd3\x58\xc8\x61\x32\xcd\xdb\xb4\xfc\x92\x1a\x16\x31\xcf\x26\x2e\x10\xee\x0b\xea\x20\x02\xe8\x56\x98\xc4\x3c\xaf\xdc\x26\x17\xab\x57\x21\xfc\x52\x30\xfa\x08\x1c\x56\x31\x08\x6f\x34\x70\x0b\x83\xe8\x15\x63\xb5\x27\x44\xa1\x87\x43\x4a\x7e\x5c\xb8\x75\x88\xd4\x6e\x47\x21\x7a\x4f\xb8\x04\x22\x4a\x11\xd5\x4f\x52\x44\xc5\x57\x91\x9e\x1c\xac\xf0\xb7\xe0\xdb\x56\x75\x08\xc0\x58\xd5\x0d\xdb\x43\x6e\xb8\x2a\x36\x44\x9e\x31\x06\x12\xcf\x18\x02\xab\x48\x4f\x51\x54\x04\x15\xd6\x3c\x93\x82\xe6\x97\x40\xdc\x42\x03\x44\x8a\x9d\x27\x5c\x02\x41\x15\x19\x9c\x9a\x68\xe3\x02\x7a\x85\xa2\x3d\x01\xb8\x45\x81\xb9\x0d\xfb\x93\x76\x05\x2e\x51\xf1\x4d\xb8\x54\xe5\x01\x97\xe8\xfd\x26\xdc\x68\x07\x14\xc2\xc9\x0c\x28\x85\xe0\x10\x5f\xe3\xdc\x32\xc0\x7e\x22\xfb\x93\x19\x28\x6c\xb0\xc2\x7b\x60\xa3\x15\x28\x6c\x30\xc2\x7b\x60\xc7\x46\x48\x39\x13\x39\x85\xcb\x8b\xab\x90\x3f\x87\x34\x49\x93\xe6\x8c\xe6\x18\x6b\x70\x84\xd7\x61\x8d\xd5\x4d\x58\x0c\x9d\xfe\xeb\xc0\x06\x25\xcb\x44\x1e\x0f\x7b\x20\xaf\xd2\x07\x6b\x96\x88\xc9\x70\x03\x81\xa8\x5a\x22\xc6\x73\x7e\x03\xe2\xa0\x70\x89\x18\x8f\xf8\x0d\x88\xa5\xd6\x65\xb2\xce\x98\xe5\x45\xb4\x1e\x5d\x57\x45\x12\x5e\x36\x46\x99\xd2\x7f\x1b\x23\x64\xa3\x48\x0b\xd6\xf9\x3f\x29\xe4\x4a\x49\x7c\x4f\x26\xbd\x5c\x65\x89\x6e\xd3\x55\x4f\xd7\xa1\x2a\x45\x84\x81\xd9\x43\xa8\x0f\xae\xe2\x85\x4c\x2f\x42\x52\xed\x8c\x4c\x38\x51\x09\x61\x5a\x56\x04\x11\x13\x5b\x44\x1c\x78\x7f\x54\xea\x47\xcb\xf5\x0f\x74\x0d\x3f\x45\xd2\x86\x94\xc8\xee\x1a\xfc\xa8\x54\x03\x5c\xc6\xfa\x20\xd5\x4d\x95\x90\x16\xf4\x9e\xd7\x90\x69\xbe\x4c\xe8\xf8\x01\xd6\xec\x4e\xfa\x3a\xaa\x56\xbd\xcb\x45\x71\x25\xe1\xd9\xde\xf4\xda\x28\x3d\x54\x4b\x11\x15\xd5\x82\xa1\xf0\x40\x04\x26\xda\xae\x01\xaf\xd3\xeb\x39\x81\xb4\x5a\x80\xc9\xf5\xd0\xe3\x22\xff\x5c\xfc\x05\xf6\x79\xfd\x4e\xee\x01\xe8\x25\xe6\xa9\xf2\x1e\xb8\x27\xc2\xbb\xd9\x7b\xa4\x65\xfe\xa8\x6f\x08\xfc\x11\xe1\x9d\xfc\x23\xd2\x32\x7f\xd4\xf5\x04\xfe\x88\xf0\x4e\xfe\x11\x69\x99\xbf\xef\x22\x3d\x63\xf7\xe4\xc1\xa3\xf7\x3b\xac\x96\x8b\x26\x6f\x20\xa5\x73\x11\xd3\x21\xbf\xee\xd6\xbe\x0d\xa6\xb6\x25\x76\x2d\x38\x94\x25\xaf\xa3\xb5\x60\x8c\xd7\x2f\xf3\x75\x69\x06\xaf\x8f\xdc\x1c\x89\x5c\x5c\x83\xb4\x9f\x0b\xaa\x86\x3d\x5e\x4e\x89\x38\x54\x87\xd8\xf5\x5e\x21\x62\xad\xda\x96\xcb\x1d\x46\xc7\x0d\xf4\x15\xed\x18\x49\x01\x36\x3e\xb1\x4e\x69\x97\xc6\x1e\x5c\x23\xf2\x78\x45\x9b\x3f\x52\xb6\xb8\x77\x4e\xd0\x05\xa5\xdc\xbd\xd0\x35\xea\xec\x3e\xdf\x5a\xcd\x2d\x1c\xce\xa1\xc5\xa9\x18\x6b\xc4\x09\x24\x18\xb3\xd1\xea\x09\x12\x55\x03\xdf\x89\x92\xec\x8d\x83\x2b\x26\x6f\x20\xdc\x5f\x52\x23\x95\xda\xff\x80\x33\x5e\x0a\x73\x0b\x7b\xde\x37\x16\x65\x54\x67\x86\x46\xe9\x45\x65\x86\xc1\x02\xf1\xe6\x52\xb6\x5c\x6a\xa1\xf4\x55\xc8\x57\xc8\x73\xe2\x4d\x4f\x4f\xab\x56\xd4\xae\x53\xa7\x1e\xbc\xd0\xc5\xc9\xd4\x49\x9c\x40\xa7\xc0\xc8\x89\x6f\xe9\x2c\x47\xea\x0a\xb3\x8d\x05\x1d\xbd\x77\xf0\x34\x82\xb8\xaa\x73\xa8\x17\x4e\xa2\xee\xfa\x7b\xf8\xd9\x83\xb1\x05\xf5\x8b\x68\x05\xa1\xb5\xd0\x2a\x7d\x9e\xf8\x38\xbc\x18\x7d\x6f\x5d\x32\x90\xbe\x45\xfe\xab\xe6\x35\x6c\x40\x0b\xb5\x7b\x29\xe2\x86\xc6\x12\xdf\x74\xaf\x88\x38\x6a\x7b\xae\xad\xd8\x73\xef\x18\xa1\x7d\x67\xec\x08\x7c\x17\x73\x4c\x9a\x06\x79\x29\xb9\x68\xa6\xe8\xc6\x72\x0b\x34\x5b\x14\x13\x85\xb9\x79\x82\xdf\xf9\x75\x9c\xa4\x2e\x38\x6a\x9c\xfa\x49\xda\x7f\xe1\x30\xf1\xcc\x2e\xc8\xdc\x29\x23\xac\xd2\x67\x9a\x7a\x62\x57\x90\x28\x07\x61\xbf\xeb\xa6\xa0\x6c\xb4\xb2\xaa\x56\x84\xac\x0d\xdf\x68\x71\xe2\x16\xfe\x4e\x23\xc6\xbd\xe8\x9f\x1a\x51\x17\xf4\x34\x99\x33\x47\xf5\x9f\x5b\x9f\x7b\x9c\x9a\xd1\x7f\x17\xc6\x7d\xc5\xc0\xae\xee\xb5\x4b\xe1\xf7\xc5\xfc\xe2\x2d\xc3\xb4\x8b\xc7\x7d\x17\x8e\xc7\x00\x7b\xc8\xe4\xcc\xea\x20\xec\x47\xcd\x65\x4d\x6e\xa3\x5a\x49\x2b\x64\xaf\x7a\x13\xcc\x44\x52\x21\x90\x8a\x76\x5c\xb6\x0e\x15\x2a\xb2\xed\x9c\x5b\x15\x43\xbb\x90\xb8\x13\xed\x85\x64\xa1\xda\x4e\x49\xef\xc0\x28\xce\x8b\x44\x57\xe4\xd2\x45\xb7\x57\x72\x2f\x0e\x39\x48\x17\xc2\x20\xf7\x21\x38\x1e\xe6\x04\x9f\x4a\x11\x53\xfd\xe1\x4c\xb2\x18\xc9\xd5\x1b\xab\xda\x9b\x82\x3a\x4a\x11\xbf\x2b\xf2\x47\x13\x4d\x92\x0d\xe7\x74\x2e\x67\x7b\x85\xce\xa5\xc5\x70\x28\x6c\xc5\x41\xc6\x14\x58\xa6\x89\x99\x77\xa5\xea\xa5\x13\xcc\x99\x62\xc2\xd8\x7b\x21\x85\x39\xe2\x7b\x6e\xc1\x0d\x98\x70\x31\x57\xf9\xbf\x64\x0e\x9a\x8c\x11\x78\xcd\xa7\xb0\xc9\x5c\x47\xc3\x71\x3a\xa0\xe8\x41\xe6\xa1\xf6\x52\xec\x12\xd9\xc3\xef\x1c\x53\x1a\xa0\x5f\x40\xbc\x1e\xe3\xbc\x3d\x17\xe3\xb8\xef\x74\x2e\x41\xc0\x49\x9e\xf2\xc0\x35\xa9\xf1\x7d\xcd\xe7\x6f\xed\x3b\x69\xa9\xeb\x61\x1c\x3c\x2b\x1e\x9b\x19\x5d\xac\xd9\x26\x28\x06\x29\x71\xd2\x82\xde\x0b\x94\xae\xe1\x1e\x9e\x7a\xd1\x8c\xf4\x1b\xea\x1b\x2c\x14\x1e\xe3\x8e\x85\x9a\xe4\x7d\x59\x55\x5e\xee\x9d\x2a\xc9\xa3\x10\x1b\xa5\x83\x13\x5e\x3d\x4e\x84\xc2\xac\xca\x53\xa5\xf8\xed\x88\x16\x80\xc7\xe5\xf9\x67\xe0\x8d\x3d\xfa\x85\xff\x64\xa2\x54\x1f\x7d\xe2\xad\x79\xa3\xa4\xe5\x42\x82\xf6\x6a\x4c\x19\x35\xe9\x13\x9a\x49\xa5\x91\xe6\x29\xa2\x3c\xe1\x57\x15\x77\xce\xc8\xed\x01\x4a\x83\xb4\xfc\x79\xdb\x6b\xd4\xa1\xb6\xfc\xf9\xbb\xe4\x27\x2e\x1a\x57\xa6\x97\xd0\xa5\x16\x23\x4c\x5f\x82\xda\x63\x51\x5b\xd2\xc3\xc6\x7a\xf8\x7a\xfe\x08\x2d\x06\xe8\xb8\xc5\xe1\x2f\xa4\xb0\x82\x37\xb7\xd0\xf0\xf3\x16\x6a\x25\x77\x66\xd8\xda\xf9\x32\xb6\x20\x5a\xd1\x82\xea\x6d\x41\x35\x7d\x5d\x83\x31\xdf\x8e\x1a\xcc\x51\x39\xbf\x0e\xf4\x3d\x17\x4d\xaf\xa1\xa0\x8f\x4a\xf9\xa9\xa3\x49\x63\xfb\xb1\xcf\xff\x79\x2a\xfb\x51\x07\x86\x15\x29\x47\xef\x2f\x2b\xf2\x96\x66\x71\xb6\x09\x2c\x8c\x9a\xe6\xe2\x63\x31\x5e\xea\x09\x47\x57\xde\x4c\x8f\x48\x6e\x8a\xd9\x64\x30\xd7\xdb\x4d\xfe\xd4\x4a\x0d\x4a\x26\xb7\x17\x9b\x73\xb2\xa6\x9b\x15\xb3\xac\x8c\xa8\x11\xa6\x25\x9e\xb8\xf0\x16\x65\xbe\x9e\x4c\xe0\xd7\xb8\x9c\x29\xe8\xaf\xab\xd7\x66\x94\x4a\x73\xae\x3c\x97\x26\x22\x4f\x8d\xac\xbd\xc4\xae\xe7\x2c\xae\x3c\x32\xff\xa2\x1b\xe3\x05\x71\x29\xbf\xcc\x6e\xe4\x80\x07\xcd\xe5\xac\xbf\xcc\x44\xdf\xf8\x75\x66\x30\x7b\xe8\xaf\x64\x14\x4c\x33\xcb\x28\x5b\x6e\xea\x76\xa6\xa6\x9b\x11\x33\x98\xef\x7f\x01\x00\x00\xff\xff\xad\xbf\xae\x07\x51\x23\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9041, mode: os.FileMode(420), modTime: time.Unix(1532044626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529614596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


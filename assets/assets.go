// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\xdb\xb6\x13\xbf\xeb\x29\xe0\xc9\x45\x99\xf1\x13\xf0\x18\x3b\xff\x7f\xdd\x26\xa9\x6a\x35\xa7\x4c\x0e\x30\x05\x49\x68\x48\x82\x01\x40\x37\x9e\x4e\xdf\xbd\x03\x60\x01\xec\x82\x84\x64\x39\xe9\x4c\x2f\x16\xb1\x04\xf7\xe3\x87\xfd\xc2\xda\xb4\xbc\xe3\x9a\xfd\x2e\x7b\xb1\x82\xe7\x9f\xb7\xbf\x7e\x58\xad\x4c\x7b\x14\x3d\x67\x7f\xad\x18\xfb\x3a\x09\xfd\xd4\xb0\xdf\xdc\xcf\x8a\xb1\x7e\xb2\xdc\x4a\x35\x34\xec\x3d\x3c\xad\xfe\x5e\xad\x5e\xc1\x7b\xfb\x34\x8a\xf0\xe8\xbf\x7d\xc5\x3e\x1a\xa1\x57\x8c\x4d\x46\xe8\xb5\xdc\x35\xec\xee\xf6\x75\x13\x89\xe1\xad\x81\xd7\x66\xfd\xba\x61\x9f\x1c\xe5\xf3\x95\x7f\xb9\xd1\xea\x0f\xd1\xda\x15\x63\x63\x78\x02\x06\xd7\xcc\x74\xd3\xa1\x61\x5b\xab\xe5\x70\xb8\x66\x03\xef\x45\x5e\x89\xe1\x51\x6a\x35\xf4\x62\xb0\x77\xb7\x91\xfc\xba\x41\xdc\x12\x67\x93\x59\x9b\x35\x3c\x6c\x05\xd7\xed\x31\x6d\x0f\xcb\xbb\x61\x9c\xac\xd3\x0e\xa8\xa0\xe0\xff\x04\xb7\x93\x16\x8e\xcd\x1e\x1e\xbd\x0d\x40\x87\x5d\x5b\xa1\x1f\x65\xeb\x77\x19\x78\xf4\xbb\x80\x4e\x77\x31\x33\x8a\x16\x6d\xdd\xba\x25\xde\xee\x08\xf0\xc9\xbd\xe8\x04\x37\xe2\x9d\x34\xce\x2a\x1d\x56\x66\x3d\x72\xcd\x7b\xd3\xb0\x0d\x3f\xc8\x81\x5b\xa5\xa3\xf6\x74\xff\x2b\xf6\x36\x23\xe5\x24\x22\xe0\x32\x1a\x08\x68\xa7\x04\xfa\x04\x94\x40\x14\xf6\xc8\xb5\xe4\x0f\x1d\x98\xda\x6a\x61\xa3\xea\xee\x99\x9e\xea\xdb\x6f\x56\x0c\x46\xaa\xc1\x5b\xec\xc4\x47\x82\x59\xd7\x8e\xf0\x53\xfa\xa8\xc2\x0b\x1d\x68\xa6\xad\xd1\xc1\x95\x0c\x00\x12\x24\x3c\x23\x59\x70\xb8\x2f\xa8\x51\x05\xa1\x7b\x69\x92\xf0\xbc\x72\x1f\xb9\x58\xba\x0a\xe1\x91\x82\xc5\x47\x48\x5c\x41\x90\xdc\x68\xc1\xad\x88\xaa\xaf\x18\x6b\x3d\x01\x94\x8e\x87\x91\x9c\x32\x1e\x28\x76\xe9\x8f\xe3\x8e\xb2\x98\x3c\xe1\x12\x16\xa0\x05\x98\x9f\xb4\x00\xc3\xd7\x40\x4f\x7e\x54\xb8\x55\xf0\x62\xab\x46\xc4\xc0\x58\x35\xc6\xcf\x43\xec\x5e\x15\x1f\x80\x4c\xf0\xf6\x24\x13\x9c\x7d\x0d\xf4\x26\x86\x47\x94\xb9\x4d\xfb\x93\xe5\x99\x14\x2c\xbf\x84\xc5\xad\xe8\x04\xd1\x62\xe7\x09\x97\xb0\xa0\x86\x44\xa7\x26\xd6\xb8\xd0\x5d\xa3\xb8\x4e\x0c\xdc\xa2\xe0\xb9\x0d\xdf\x27\xeb\x0a\xbe\xc4\xc4\x17\xf1\xa5\x26\x47\xbe\xc4\xee\x17\xf1\x05\x1c\x50\x08\x27\x18\x50\xaa\xc0\x21\xde\xe0\x1c\x12\xd9\xbe\x25\xdf\x27\x18\x28\xdb\x80\xc2\xf7\xb0\x05\x14\x28\xdb\x00\xc2\xf7\xb0\x9d\x83\x90\x72\x23\x72\x0a\x97\x14\xd7\x21\x4f\x3a\x1c\xdd\x6f\x46\xd5\xad\x2a\x96\x63\x5e\xd1\x11\x9e\xc7\x6b\x6e\x6e\xe2\xc5\xd0\xe9\x3f\x8f\x59\x34\xb2\x4c\xe4\x70\xd8\x91\xbc\x4e\x1b\x1a\x96\x88\x09\xb8\x48\x20\xa6\x96\x1c\xe1\x9c\x5f\xc0\x31\x1a\x5c\x72\x84\x23\x7e\x01\xc7\xd2\xea\x32\x59\x67\x9e\x65\x21\x6a\x66\xe5\xaa\x48\xc2\xa7\xc1\x28\x53\xfa\x0f\x13\x84\x30\x02\x5a\x40\xe7\x5f\x32\xc8\xb5\x7a\xb8\x4e\x26\xbb\x5c\xe7\x87\xaa\xe9\x7a\xa2\xeb\xd0\x35\x22\x42\x6a\xca\x42\x7f\x70\x05\x05\x99\x16\x42\xd2\xd5\xcc\x20\x5c\xe8\x78\x30\x2d\x1b\x82\x88\x49\x2c\x22\x46\xd9\x6f\x94\xfa\xd2\x73\xfd\x05\x95\xe1\x07\x20\x6d\x48\x0b\xeb\xca\xe0\x1b\xa5\x3a\xc1\x07\xe8\x0f\x52\xb7\xb6\x92\x83\x15\x7a\xcf\x5b\x91\x69\xbe\x4d\x18\xf9\x41\x34\xec\x6e\xb0\x4e\x56\xab\x26\x97\x8b\x60\x75\xe4\xe6\x83\xf8\x66\x37\x7e\x07\xe5\x0b\xc5\xd6\x84\xbe\x03\xb5\x80\x4c\xf6\x63\x27\xbc\x49\xdf\x2b\x28\x37\x9f\xb9\x4f\xfa\x0c\xf2\x7d\xab\xef\x65\xbb\x27\xcf\x1f\x20\x70\x3d\x5f\xcf\x65\x17\x1b\xbc\x2b\xda\x3f\x15\x07\x1b\x82\x6c\xd7\xf8\xbb\x0a\xf0\x86\x3e\x3b\xb0\x87\x45\x21\xa1\xec\x7b\x1c\xad\x17\xc6\x78\x03\xb2\x5c\xe7\x6b\x78\x7d\xe4\xe6\x48\xf4\xe2\x5a\x0c\xf6\xa7\x82\xaa\xc5\x1e\x2f\x97\x54\x8c\x2d\x82\x57\x31\xf6\xf8\xe7\x55\x6c\x55\xdf\xf3\x61\x87\xb9\xe3\x5b\xce\x15\xbd\x20\x90\x2a\x8c\x0e\x0d\xe9\xaf\xb4\x73\xe7\x4f\xae\x21\xf5\x70\xd6\x2a\x9a\x7b\xe7\x74\x3d\x67\x17\xae\x78\xde\x36\x7c\x0f\xa0\xf6\x95\x8a\x7f\x11\x4f\x78\x29\xcd\xad\xd8\xf3\xa9\xb3\xc4\xa1\x5a\xd5\x29\x7d\x42\x89\x7c\x71\x23\xb7\xb2\x52\xb7\x5c\x2a\xe1\x00\x5c\xf5\x2a\xf4\x2b\xf4\x79\xe4\xdd\x44\x81\x6e\x15\xc5\x63\xe9\xc0\x82\x03\x39\x17\x5f\x42\xf0\x51\xe8\xe4\xd3\xf9\x2e\x74\xea\x0c\x66\xe6\x4a\xb3\x85\x82\x4c\xe3\x1b\xdf\x1b\x89\x97\x39\x5f\x38\x73\x12\xed\x38\xdd\x8b\xaf\x93\x30\xb6\xa0\xbe\x93\xbd\x24\xb4\x5e\xf4\x4a\x3f\x2d\x6c\x0e\x2f\x66\xfb\xad\x8b\xe3\xc1\x5f\x71\xfe\xaf\x79\x2b\x36\x42\x4b\xb5\x3b\xe7\x54\xf1\x62\x80\x53\xd5\x33\x82\x85\x62\xcf\xb5\x95\x7b\xee\x1d\x23\x5c\xbf\x18\x3b\x0a\xbe\x83\xf4\xd0\xc4\x3c\xe1\xb5\xe4\xb2\x5b\xa2\x1b\xcb\xad\xa0\x81\x5e\xdc\x08\x6b\xf7\x41\xff\xe5\xfb\x79\x7e\xb9\xe0\xa8\x43\x35\x80\xfa\xe1\x91\x80\xc5\x99\xc3\xc4\x33\x91\xa0\xf3\xa8\x8c\xb4\x4a\x3f\xd1\xac\x01\x5d\x5d\xa2\x1c\xa4\xfd\xa8\xbb\x82\xb2\xd1\xca\xaa\x56\x11\xb2\x36\x7c\xa3\xe5\x23\xb7\xe2\x17\x1a\x31\xee\xc5\xf4\xd0\xc9\xb6\xa0\xa7\x99\x88\x39\xaa\x3f\x6f\xc5\xd8\xa9\x27\x67\x26\xf8\x6f\x39\x28\x69\x27\xed\x72\xec\x7d\x71\xcb\xac\x15\x97\x3c\x4c\x29\x46\x29\x30\x78\x28\x42\x0d\x9f\xdc\xe2\x2c\xe0\x20\xed\x1b\xcd\x87\x96\x24\xf8\x56\x0d\x56\x0e\x93\x9a\x4c\x50\x9f\xa4\x28\x41\x3a\x85\x79\x3b\x10\x2b\x3f\xb2\xb9\x9a\x4d\x69\x7f\x1a\x12\x6a\xa2\x9d\x09\x62\xd5\x8f\x6a\x10\x34\xdf\x97\x09\xa8\xc8\x71\x27\xdd\x51\x0d\x7b\x79\xc8\xc1\x73\xc2\x3d\x73\x7f\x87\xfd\xb4\xa6\xf8\x52\xe8\x2e\xf5\xdd\x95\x20\x9e\xe9\x35\x19\xab\xfa\x9b\x82\x3a\x0b\xdd\x1f\x15\x91\xb3\x49\x11\xc9\x52\x35\x9b\xcb\x99\x49\x61\x73\x89\x18\x76\xeb\xad\x3c\x0c\x90\x9a\xca\xf0\xad\xbc\x2b\x4d\x2f\x9d\xa0\x06\xc5\x02\xd8\x7b\x39\x48\x73\xc4\xf5\xe7\x84\x1b\x30\xe9\x5a\xe2\x95\xff\x4b\xe6\x4b\x09\x8c\x20\xab\x9e\x5a\x16\x73\x10\x0d\xc7\xe5\x80\xa2\x07\x99\x87\x85\xa7\x62\x97\xe8\x1e\xe6\xbb\x4b\x16\xa0\xc9\xaf\xb7\x63\x9e\x4f\x6b\x31\x8e\xfb\x79\xe7\x12\x84\x39\x19\xca\x7a\xc6\x7c\x6f\x85\xbe\x99\xb4\xc9\x0d\x8f\x83\xcd\x8a\xde\x6c\x84\xde\xe4\x66\x9c\xf8\x21\x66\x8a\x07\x72\x73\xcc\x51\xf5\xcb\x00\xa1\x80\xa4\xc4\x45\x38\xbd\x4b\x28\xdd\x8a\x7b\xf1\x30\xc9\x6e\x66\x6c\x6c\x42\xb0\x52\x78\x56\x36\x57\x6a\x51\xf6\x65\x5d\x6f\xf9\x6d\xa5\xe5\x05\x3d\x36\x4a\x07\xa7\xbc\xfa\xbc\x10\x1a\x15\xab\xbd\x71\x37\x6a\xb0\x5c\x0e\xee\xd6\xaa\xb4\x5d\xb2\x31\xf1\x0e\xd7\x27\xa5\x6d\x01\x73\xe1\xf0\xb3\xc6\x6d\x89\x69\x1a\xb2\xcd\xc1\xfb\xef\xf4\x71\xb3\x7e\x1b\x1b\x52\x0e\xca\xce\x1b\xf2\x92\xab\x41\xb5\xe5\x2f\x40\x4d\x53\xac\xb9\x1a\xe7\x6e\x00\xb3\x44\x5a\xb9\x11\x90\xfc\x53\x0d\xa4\x5a\x27\xbf\xf8\x8f\x11\x0a\x28\x99\xb3\x5c\x0c\xe7\x62\xa7\x50\x55\xb3\xac\xb7\x14\x84\x65\x8d\x17\xd2\xe8\x49\x9d\xaf\x17\x33\xc1\x35\x2e\x92\x05\xfd\x79\x5d\xc0\xa9\x70\xa6\x53\x24\xa2\xf2\xd2\x80\xc9\x6b\xec\x6e\x18\x45\xee\x24\x83\x0a\xfa\x21\xa4\x99\x4b\xe5\x65\x71\x33\x07\x3c\x68\x3e\x54\xfd\xa5\x12\x7d\xf3\xd7\x59\x40\xf5\xd0\x9f\x29\x28\x40\x53\x15\x94\x91\x5b\x4a\xf3\x14\xba\x8a\x9a\x01\xbe\x7f\x02\x00\x00\xff\xff\xa9\xb2\x26\x18\x9f\x1e\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 7839, mode: os.FileMode(420), modTime: time.Unix(1529960278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529952739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


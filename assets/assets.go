// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\x36\x10\xbe\xeb\x29\xa0\xc9\x45\x9e\xf1\x13\xf0\x98\x38\x6d\xd3\x36\xad\x6b\x35\xa7\x4c\x0e\x08\x05\x4b\xa8\x49\x42\x01\x40\xb7\x9e\x4e\xdf\xbd\x03\x60\x01\xee\x2e\x09\xc9\x72\xd2\x99\x5e\x24\x62\x09\x2e\xf6\xfb\xb0\x7f\x80\x6b\x65\x27\xad\xf8\x5d\xf7\x6a\x05\xcf\x3f\x6e\x7f\xfd\x65\xb5\x72\xed\x41\xf5\x52\xfc\xbd\x12\xe2\xcb\xa8\xec\x53\x23\x7e\x0b\x7f\x2b\x21\xfa\xd1\x4b\xaf\xcd\xd0\x88\xf7\xf0\xb4\xfa\x67\xb5\x7a\x05\xef\xfd\xd3\x51\xa5\xc7\xf8\xed\x2b\xf1\xc1\x29\xbb\x12\x62\x74\xca\x6e\xf4\xae\x11\xef\x6e\xae\x9a\x2c\x4c\x6f\x1d\xbc\x76\x9b\xab\x46\x7c\x0c\x92\x4f\xeb\xf8\xf2\xd6\x9a\x3f\x54\xeb\x57\x42\x1c\xd3\x13\x28\xb8\x16\xae\x1b\xf7\x8d\xd8\x7a\xab\x87\xfd\xb5\x18\x64\xaf\xa6\x91\x1a\x1e\xb5\x35\x43\xaf\x06\xff\xee\x26\x8b\xaf\x1a\xa4\xad\x68\x76\x93\x6a\xb7\x81\x87\xad\x92\xb6\x3d\x94\xe9\x69\xf8\x6e\x38\x8e\x3e\x58\x07\x52\x30\xf0\x3b\x25\xfd\x68\x55\x50\x73\x0f\x8f\x11\x03\xc8\x61\xd6\x56\xd9\x47\xdd\xc6\x59\x0e\x1e\xe3\x2c\x90\xd3\x59\xc2\x1d\x55\x8b\xa6\x6e\xc3\x10\x4f\x0f\x02\xf8\xe4\x4e\x75\x4a\xba\xa8\xd8\xc2\x63\x9c\x09\x72\x98\xf5\x76\xe2\x23\xcc\x44\xf4\xa4\xd9\xe8\xfd\xfc\x0b\xf1\x28\xad\x96\x9f\x3b\xb0\xbe\xb5\xca\x67\x6b\xc2\x33\xdd\xa8\xb7\x7f\x79\x35\x38\x6d\x86\x08\x22\xac\x95\x05\x6e\x53\xdb\x95\x8f\xe5\xa3\x8a\x2e\xb4\x47\x93\x6c\x83\xf6\x82\x2b\x00\xf4\x68\xf1\x89\x1f\xa6\xe1\x8e\x49\xb3\x09\xca\xf6\xda\x95\xc5\xa7\x51\xf8\x28\x84\xc7\x3a\x79\x7c\xf1\xff\xe8\xf4\x79\x04\x7e\xff\xc6\x2a\xe9\x55\x36\x7d\x25\x44\x1b\x05\x60\x74\xf6\xb6\xe2\x67\xd9\xc3\xb0\x97\x7e\x38\xee\xa8\x8a\x31\x0a\x2e\x51\x01\x56\x00\xfc\x62\x05\x00\xdf\x80\xbc\xc9\xa4\x65\x15\x77\x65\x7e\x51\x01\xfe\x58\x54\x80\x3b\x6e\x40\xde\x64\x07\xce\x2a\xb6\x65\x7e\x01\x32\x89\x12\x90\x4b\x54\xdc\xa8\x4e\x11\x2b\x76\x51\x70\x89\x0a\x0a\x24\xfb\x28\x41\x13\x82\x6b\x83\x22\xaf\x28\x08\x03\xa6\x73\x9b\xbe\x2f\xe8\x98\x5e\x02\xf1\x45\x7a\x29\xe4\xac\x97\xe0\x7e\x91\x5e\xe0\x01\x45\x64\xa1\x01\x45\x3e\x8e\xd8\x06\xa7\x84\xac\xf6\x2d\xf9\xbe\xd0\x40\xd5\x26\x16\xbe\x46\x2d\xb0\x40\xd5\x26\x12\xbe\x46\xed\x9c\x84\x92\xea\x90\x53\x84\x1c\xb7\x49\x69\x2f\xf0\x18\xfe\x27\x56\xc3\xa8\x82\x1c\xeb\xca\x8e\xf0\x3c\x5d\x73\xb8\x45\x97\x40\xbb\xff\x3c\x65\x19\x24\xcf\xcb\xb0\xd9\x59\xbc\x29\x13\x1a\x51\x84\x85\xb8\x2c\x20\x50\xb9\x46\xd8\xe7\x17\x68\xcc\x80\xb9\x46\xd8\xe2\x17\x68\xe4\xa8\x79\xee\x9d\x74\xf2\xba\xd2\xcc\xaa\x0f\xcb\xa9\xa7\xc9\xe0\x19\xfa\x9b\x2d\x84\x38\x02\x59\x62\xe7\x3f\x02\x14\x9a\x31\x5c\xf6\x0a\xae\xd0\x9b\xa1\xe2\xb8\x19\xe9\x38\xf5\x75\x48\x50\xda\xa6\x54\xee\xd7\x50\x5f\x69\x5d\x23\x1d\xc9\x8c\x42\xdc\xad\x1c\xe7\xb2\x09\x08\x12\x96\x65\x91\x30\xaf\xfd\xda\x98\x87\x5e\xda\x07\x54\x55\x3f\x83\xe8\x96\x34\x99\xeb\xab\x26\x4c\xee\x94\x1c\xa0\xdc\xc7\xa6\x35\x96\xfa\xf0\x14\xcb\x3c\x4c\x0d\xad\x4e\x2f\x75\x97\xfb\x9a\x35\x6d\x1b\x18\x01\xc9\x19\x77\x4d\xec\xba\x41\x37\x74\x8c\x49\x3d\x0c\xd8\x0a\xbc\xdc\x07\x59\xaf\x9c\x93\x7b\x85\xd7\x0d\x7b\x82\xc7\x07\xe9\x0e\xc4\x2e\x69\xd5\xe0\x7f\x60\x52\xab\xee\xf1\x70\xc9\xc4\x5c\x4a\xa3\x89\xb9\x5b\x3d\x6f\x62\x6b\xfa\x5e\x0e\x3b\xac\x1d\xf7\xeb\x6b\xda\xea\x92\x6a\x95\x3e\x1f\x43\x46\x47\xf6\x1b\x1b\xb6\xfd\x63\xe8\xc3\x22\x9d\xb5\xcc\x1f\xde\x05\x5b\xcf\xe1\xc2\x95\x21\x62\xc3\xed\x2f\xc5\xc7\x0d\x7f\x50\x4f\x78\xa8\xdd\x8d\xba\x97\x63\xe7\x91\xe7\x04\x04\x9d\xb1\x17\x18\x31\xd5\x0e\x60\x3a\xa4\x73\x66\x08\x5b\xf8\x51\x76\x23\x65\xb4\x35\x14\xf8\xd2\xce\x24\x4f\x09\xbe\xbc\x44\xd5\xa3\xb2\xc5\x79\xa7\x5e\xff\x14\xd9\x0c\x57\xe0\x63\x0b\x15\x8a\x06\x12\x3e\xea\x10\x77\x0a\x9b\x7e\x86\xf2\xf6\x38\xde\xa9\x2f\xa3\x72\x9e\x49\x7f\xd6\xbd\x26\xb2\x5e\xf5\xc6\x3e\x2d\x4c\x4e\x2f\x66\xf3\x7d\x08\xd8\x21\xb6\xf0\xdf\x5b\xd9\xaa\x5b\x65\xb5\xd9\x9d\xdb\xb8\xdc\x29\x47\x18\xf9\xe8\x71\x3e\x2a\x28\xf7\xd2\x7a\x7d\x2f\xdb\xe0\xd7\xe9\x78\x21\xc4\x41\xc9\x1d\xe4\x81\x26\x27\x84\x68\xa5\xd4\xdd\x92\xdc\x79\xe9\x15\x8d\x68\x76\xe2\xa9\x9d\x77\xe2\x97\xef\xe7\x89\xe4\x82\xad\x8e\x4c\xe4\x63\x47\x64\x02\x06\x67\x36\x13\x1f\xe3\x93\xcd\x47\xe3\xb4\x37\xf6\x89\xa6\x07\x68\x73\x8a\x64\xaf\xfd\x07\xdb\x31\xc9\xad\x35\xde\xb4\x86\x88\xad\x93\xb7\x56\x3f\x4a\xaf\x7e\xa2\x11\x13\x5e\x8c\x9f\x3b\xdd\x32\x79\x39\xc6\xbb\x83\xf9\xf3\x46\x1d\x3b\xf3\x14\x60\x82\xff\xf2\xb3\x7d\x3b\xda\x90\x4c\xef\xd8\x29\x0a\x9d\xc7\xd9\x69\x3c\x9f\xff\xd9\xe9\x1f\x0e\xd6\x2c\xd4\xf0\xce\x2d\x9e\x75\xf7\xda\xbf\xb6\x72\x68\x49\x26\x6f\xcd\xe0\xf5\x30\x9a\xd1\x25\xf3\x49\x2e\x52\xa4\x74\xce\xeb\x63\x2e\x85\x08\x73\x35\x63\xd1\x86\x2d\x65\xce\x22\x3b\x13\xc4\xa6\x3f\x9a\x41\xd1\xc4\xce\x13\x10\xcb\x71\x27\xdd\xd1\x0c\xf7\x7a\x3f\x05\xcf\x09\xf7\x9c\x1a\x1e\xec\xa7\x35\xc3\x97\x42\x77\xa9\x11\xad\x04\xf1\xcc\xae\xd1\x79\xd3\xbf\x61\xd2\x59\xe8\x7e\xab\x88\x9c\xdd\x84\x90\x2c\x55\xc3\xcc\xef\x04\x18\x66\xce\x18\x76\xeb\xad\xde\x0f\x90\x9a\x78\xf8\x56\xde\x71\xe8\xdc\x09\x6a\x54\x2c\x90\x7d\xaf\x07\xed\x0e\xb8\xfe\x9c\x70\x03\xa1\x43\x8f\xb8\x8a\xbf\xe4\xfe\xa4\x90\x91\xd6\xaa\xa7\x96\xc5\x1c\x44\xc3\x71\x39\xa0\xe8\x46\x4e\x97\x61\xa7\x62\x97\xd8\x9e\xae\x24\x97\x10\xa0\xcb\xca\x88\x63\x9e\x4f\xaf\x6b\x41\x4e\x1c\x06\xab\xc6\x37\x43\x73\x72\x50\x99\x9a\x90\xa0\xc8\xa1\xc2\x45\xdc\xac\x29\xc0\x6b\xe3\xcb\x9c\xf9\xda\x8b\x4b\x5c\xd6\x6e\xf2\x6f\x2b\xbd\x26\xd8\x71\x6b\x6c\x72\x92\xf5\xa7\x05\x57\x3d\x05\xee\x8d\x19\xbc\xd4\x43\x38\x56\x19\xeb\x97\x30\x16\xdd\x11\x67\x98\xc5\xd8\x64\x0e\x38\x6b\xa4\x96\x94\x96\x5b\xa0\x39\x79\xff\x9f\xbe\x6a\xd6\xff\x62\x20\xfc\x26\xe7\x3c\x90\x97\xf4\xe4\xd5\x16\x9c\x91\x5a\xae\x59\xe6\x66\x9c\xeb\xc8\x67\x89\xad\xd2\xa1\x93\x7c\x50\x71\xa9\x7a\x67\xbd\x78\x11\x4f\x09\x25\x17\x01\x17\xd3\xb9\x58\xb9\xab\x66\xf2\xfa\x47\x49\x58\xb6\x78\x21\xad\x9d\xb4\xf9\x7a\x31\x13\x5c\xe3\xa2\xc5\xe4\xcf\xab\xca\xa7\xc2\x99\x5e\x73\x10\x93\x97\x6e\x40\xa2\xc5\xa1\xe3\x67\x29\x92\xdc\x10\xd0\x0f\x21\xcd\x5c\xba\xde\xb4\xdc\xcc\x01\xf7\x56\x0e\x55\x7f\xa9\x44\xdf\xfc\xf5\xb4\x40\x75\xd3\x9f\xb9\x50\xa2\xa6\xba\xd0\xc4\xdc\x52\x9a\xa7\xd4\x55\xcc\x4c\xf4\xfd\x1b\x00\x00\xff\xff\x68\xf0\xf3\x6e\xe2\x1c\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7394, mode: os.FileMode(436), modTime: time.Unix(1524365217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(436), modTime: time.Unix(1524362620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


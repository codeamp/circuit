// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\x36\x10\xbe\xf3\x29\x56\x93\x8b\x3c\xa3\x27\xe0\x31\x8d\xdb\xaa\x6d\x66\x54\x3b\xc9\xa5\xe3\x03\x44\xae\x24\xd4\x24\xc0\x00\xa0\x52\x4d\x27\xef\xde\x01\x08\x90\xf8\x13\x29\x3b\x3e\xf4\x24\x61\x81\xfd\xf6\x07\xd8\x0f\x0b\xca\x8a\x34\x44\xc0\x27\xda\x62\x61\xff\xff\x26\x39\x2b\x0a\x59\x9d\xb0\x25\xf0\x6f\x01\xf0\xb5\x47\x71\x29\xe1\x4f\xfd\x53\x00\xb4\xbd\x22\x8a\x72\x56\xc2\x47\xfb\xaf\xf8\x5e\x14\xef\xe0\xd3\x09\x87\xa5\xa0\x2e\x1d\x6e\x40\x60\x27\x50\x22\x53\x12\x48\xd3\x00\x3f\x80\x3a\x21\x20\x53\xe2\x02\x1d\xa7\x5a\x4e\x99\xe2\xc0\x7b\x01\x7c\xff\x37\x56\x0a\x8e\x82\x74\xa7\x42\xab\x0f\xd6\x8c\xf9\x77\xf0\x80\x4a\x50\x3c\x23\x48\xca\x8e\x0d\x42\x2f\x51\xc0\xfe\x02\xdb\x0f\x05\x98\xc1\x9a\xd6\x25\x6c\x3f\xdc\x95\xf0\x59\xa2\x08\x75\xb4\x6d\xbd\x46\xda\xb5\x72\x7d\x57\xc2\x5f\x7a\xdd\xd3\x2a\x8b\xde\x09\x6e\x9c\x71\x06\xec\xd8\xda\xd8\x80\x6c\xfa\x63\x09\x8f\x4a\x50\x76\xdc\x00\x23\x2d\x4e\x23\x64\x67\x2a\x38\x6b\x91\xa9\x6d\xed\xc4\x77\x25\xec\x06\x8c\xd4\x33\x0b\x2e\x27\x3b\x83\x7f\x56\x21\x76\x51\xab\x1c\x90\xa8\x5e\xa0\x56\x71\x7f\x8d\xca\xcf\xc3\xe0\x69\x55\xa4\x3a\x12\xc5\x99\x56\x46\xc7\xfd\x35\x3a\x8f\xc3\x60\x4e\x07\x64\x87\x95\xa7\xf8\xa8\x87\xbe\xb2\x16\x64\x01\x04\x36\x48\xa4\x31\xea\xfe\x1a\xbd\x87\x61\x90\xd5\xf1\x12\xa8\xf5\xfc\xa1\xd1\xbd\x9f\x04\x4b\xfa\x70\x26\x82\x92\x7d\x83\x11\xd0\x17\x27\x8e\x01\xdd\x44\x1e\xf8\x1f\x85\x4c\x52\xce\xc6\x7c\x8c\x92\x29\x23\xf7\xbe\x68\x1e\x26\x40\x88\xb4\xe7\xb2\x19\x22\x58\xe1\x7d\x08\xf4\x10\x49\xb3\x78\x35\x95\x8a\xb2\x4a\x0d\xd5\xd4\xa1\x68\xa9\x74\xb0\xde\x68\xd8\x69\x73\x8e\x57\x4f\xab\xa9\xd2\x1d\x0b\xe4\x8b\xbd\xef\x6a\xa2\x50\xc2\x37\x84\x8a\x30\x68\xc9\x33\x82\x2d\xf5\x9a\x28\x32\x94\xb8\xa3\x0f\x53\xe5\x95\x40\xa2\xd0\x1e\xfb\xb5\xad\x85\xb1\x70\xb6\xac\xeb\x55\x50\x47\x83\x85\x5b\xd7\x8f\x06\x6c\x6a\xd6\x36\x71\x25\x58\x81\x53\xb0\x43\x9d\x5a\xde\x34\x7b\x52\x3d\x47\x1a\x5b\xc3\x02\x2b\x6f\xe9\x88\x6d\xeb\x61\x6d\x0b\xa5\x04\x2b\x70\xd8\x76\x38\x3a\x7f\xfb\xfa\x1a\x1b\xbc\x7d\x7d\xec\x90\x3e\x8c\x6b\xaf\x7a\xc7\x95\x7a\x10\x29\x6b\x51\xec\xe0\x2b\xf4\x03\x87\x5f\xac\x3f\x06\xe0\x15\xe7\xda\xab\xe0\x12\xbc\x09\x07\xe0\x89\xc6\x00\x5e\xaf\x3f\x04\xf0\x5a\xfd\x5c\x00\x8e\x5d\xd6\x19\x2a\x0a\xb4\x9d\x30\x03\xec\xa6\x72\x01\xbe\x31\x7e\x92\x80\x37\xc5\x9f\x12\xe4\x33\xe6\x3a\xa0\xd4\x12\x82\xc9\x11\xce\x17\x4e\x89\xf8\x61\x1c\x1b\xf0\x0f\xe2\xa4\x81\x4d\x20\xde\xda\x44\x39\x0d\xe4\x66\xbd\xc8\xf1\x1b\xf5\x46\x83\xba\x13\xda\x79\x7c\xdf\x87\xe3\xa1\xa5\xf2\x04\x0e\x2a\xbe\x14\xf4\x32\xdb\xc7\x15\x94\x29\x14\x07\x52\xe1\x20\xd5\xfc\x3e\x74\x4f\xba\x9d\xc1\x96\xd0\xc6\xf5\x46\xab\xf0\xb6\x09\x60\x5d\x2a\xeb\xd2\xf4\xa7\xd6\x8e\x6d\x73\x52\x53\x6e\x22\xb4\x16\xdf\x0c\x5a\xd6\xa2\x94\xe4\x88\xbe\x0f\x3a\x6a\x7f\x7c\x22\xf2\x14\xf8\x48\x04\x32\xf5\x6b\x24\x15\x78\xf0\x87\xa9\xbb\x93\x77\x3f\x71\xa6\x08\x65\x28\x76\x5c\xa8\xd4\x47\xc5\x2b\x1e\x26\x85\x0b\x35\x8d\x03\x28\x4b\x95\x0b\x81\x6a\x7f\x78\xdb\x12\x56\xfb\xb0\x7e\xbb\xba\x0a\x9b\xba\x80\x83\x4d\x38\xbc\x67\x2a\x88\xcf\x8f\x41\xef\x55\x10\x94\xd9\xb1\x6b\x2c\xa9\xe7\xf4\xa5\x3f\x9f\xae\x77\xbe\x4a\xba\xc3\xfe\x64\x18\x7c\x1c\x56\xc5\x1b\x2e\x5e\x60\xcb\x11\xd3\xac\xcd\x71\x51\x68\xfb\x19\x2f\xbe\xa5\x33\x69\xfa\x30\xc5\x15\x0f\xe3\xce\x1d\xc9\xe1\xfc\xe9\x6a\xc9\x65\xea\x8c\xc2\x95\x47\xbe\x5f\x9d\x4f\x7c\x14\x3c\x00\x95\x8f\x58\x09\x54\x25\xbc\xe7\xbc\x41\xc2\xa2\x13\x96\x31\xf2\x45\x87\x15\x45\x9e\x84\x1a\x46\x71\xeb\x45\x71\x6d\x7f\xbc\xe3\x98\xee\x8b\x3f\xb9\x70\x16\xba\xfe\x01\xbf\xf6\x28\x55\x24\xfd\x83\xb6\x34\x90\xb5\xd8\x72\x71\xc9\x2c\x1e\x26\x92\xf5\x4a\x13\x17\x33\x3d\xec\x2f\x82\x54\xb8\x43\x41\x79\xbd\x74\xec\x6c\xdf\x98\x86\xe4\x26\x16\xeb\x7a\x4a\x73\x01\x40\x84\xa2\x07\x52\xe9\x7a\xd4\x2f\x77\x43\x5e\x48\x6a\xcb\x86\xa5\xa3\x45\xe3\x2f\xa1\x4d\x4e\x2e\x15\x51\x18\xf2\x5a\xf4\xac\xc8\x3f\x2a\xac\xe6\xc7\x94\x4e\x5f\x70\x1a\x4d\x4e\x6c\x6c\x69\x4e\xdc\xc4\xfc\x16\xfb\x4f\xf2\xc1\xff\x8e\x4b\xaa\xb8\xb8\x84\x5c\x37\x9c\xf9\x49\x72\xa4\xea\xb3\x68\x22\xc9\x2e\xc3\xc6\x42\x92\x9d\xa0\x67\xa2\xf0\xf7\xb0\xda\xf5\x44\xbf\x6f\x68\x15\xc9\xdd\xcb\x3c\x78\x97\x03\x54\xbd\xd0\xf7\xc8\x43\xf4\xfa\xf0\x5e\xc8\xc1\xfb\x78\x7a\xad\x07\x6f\xf5\xfc\x73\x76\x8e\x1c\xfc\x8d\x0c\x77\xf0\x48\xd5\x7b\x41\x58\x75\x5a\x64\x4b\xbf\xcf\xc9\xf0\x64\x30\xbd\xc4\xce\x6d\xc7\x19\x86\x97\x4b\xcc\x79\x11\xad\xce\x9e\x28\xce\x0e\xf4\x38\x9d\xff\x59\xf7\x67\x5c\xbf\xa1\x75\x98\xeb\x08\x57\xf9\x6a\x8c\xbd\x4b\xaa\xed\xad\x8a\x28\xae\xd0\xab\x0c\x73\x2d\xe0\xf8\x51\x1c\x04\xec\x05\xeb\x1f\xcc\x47\x7a\x64\x96\x51\xe2\x4a\xbb\x32\x17\x87\x1f\x6f\xfc\xb5\x74\x64\x52\x7b\xa0\x8c\xca\x93\x4b\xc3\x3c\xb7\x98\xbe\xd5\x7d\x68\x24\xac\x1e\xbe\xa5\x51\x6c\x6a\x09\x0c\xb1\xc6\x1a\x0e\x5c\x0c\x08\x94\x1d\x81\xe1\xb7\x91\x72\xa9\xd1\x0d\x80\x5c\xe6\x06\xff\xae\x33\x47\x96\x62\xc2\x8a\x2b\x00\xf6\x9c\x3f\xb7\x44\x3c\x6b\xd7\xed\x95\x1c\x1e\x80\x6d\x1d\x35\x83\xda\x07\xff\xdb\x45\xea\x90\x77\x0b\x6c\xeb\x4c\xff\x11\x0a\x97\x6c\xf9\xdf\x1a\x52\x5b\x59\xc8\x97\xb5\x9f\xb1\xee\x8b\x7a\x4f\xe3\xd6\xea\x29\x73\x9a\x96\xe2\x4a\x61\x4c\x74\x61\xfb\x9d\x6b\xd1\xe3\xcc\x8c\x6f\xc2\x34\x3b\xff\x9f\x8e\x64\x74\x3a\xfe\x80\x71\x83\xd3\x61\x4b\x9d\x43\x0a\x5e\xfe\x29\xe2\x52\xa3\x9c\x10\xc1\x95\xc6\x79\xeb\x83\x5e\xd9\xdf\xeb\x3d\xae\xf1\x39\x79\xc8\x2f\xc7\x1f\x79\x9f\xbd\xc3\xae\x3a\x13\xdf\x01\xb3\x97\x5d\xea\x66\xce\xc5\x4d\xb6\xec\x36\xf1\x1d\x15\xcd\xc5\x8e\x2c\x95\x47\xee\xf1\x6f\x1c\xd1\x3d\x68\x84\x1d\xbe\xe3\x8d\x85\xa7\xd5\xa6\xf8\x5e\xfc\x17\x00\x00\xff\xff\xb6\xfb\x5a\x5c\x65\x1a\x00\x00")

func pluginsCodeampSchemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaSchemaGraphql,
		"plugins/codeamp/schema/schema.graphql",
	)
}

func pluginsCodeampSchemaSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema/schema.graphql", size: 6757, mode: os.FileMode(420), modTime: time.Unix(1519803332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema/schema.graphql": pluginsCodeampSchemaSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampSchemaSchemaGraphql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


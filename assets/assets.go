// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xc1\x72\xe3\x36\x0c\xbd\xeb\x2b\xe8\xd9\x8b\x33\x93\x2f\xd0\x71\x37\x69\x9b\xb6\xdb\xa6\x71\x73\xda\xd9\x03\x23\x33\x36\x1b\x49\xf4\x92\x94\xa7\x99\x4e\xff\xbd\x43\x12\xa4\x08\x88\x92\x63\xef\x76\x66\x2f\xb6\x08\x91\x0f\xc0\x23\x08\x02\x32\x0d\x6f\xb9\x66\x7f\xca\x4e\x54\xf0\xfc\xf3\xe6\xf7\xdf\xaa\xca\x34\x7b\xd1\x71\xf6\x4f\xc5\xd8\x97\x41\xe8\xd7\x9a\xfd\xe1\xfe\x2a\xc6\xba\xc1\x72\x2b\x55\x5f\xb3\x8f\xf0\x54\xfd\x5b\x55\xef\xe0\xbd\x7d\x3d\x88\xf0\xe8\xd7\xbe\x63\x8f\x46\xe8\x8a\xb1\xc1\x08\xbd\x96\xdb\x9a\xdd\xdd\x5c\xd5\x51\x18\xde\x1a\x78\x6d\xd6\x57\x35\xfb\xe4\x24\x9f\x57\xfe\xe5\xbd\x56\x7f\x89\xc6\x56\x8c\x1d\xc2\x13\x00\x5c\x33\xd3\x0e\xbb\x9a\x6d\xac\x96\xfd\xee\x9a\xf5\xbc\x13\xe3\x48\xf4\x47\xa9\x55\xdf\x89\xde\xde\xdd\x44\xf1\x55\x9d\xa1\x25\x64\x33\x42\x07\xe5\x20\x07\xfd\x3f\x08\x6e\x07\x2d\xdc\xac\x67\x78\xf4\xb3\x40\x0e\xb3\x36\x42\x1f\x65\xe3\x67\x19\x78\xf4\xb3\x40\x8e\x67\x31\x73\x10\x4d\x36\x75\xe3\x86\xf9\x74\x27\x80\x25\x0f\xa2\x15\xdc\x78\x60\x0d\x8f\x7e\x26\xc8\x61\xd6\xed\xe8\xae\x9b\x99\x79\x1f\x66\x67\xef\xa7\x2b\xd8\x91\x6b\xc9\x9f\x5a\xb0\xbe\xd1\xc2\x46\x6b\xdc\x33\xde\x87\xdb\xbf\xad\xe8\x8d\x54\xbd\x77\xc2\xe9\x8a\x02\xd0\x14\x87\x33\xcb\x32\xb6\x6f\xf1\x4a\x3a\x13\x13\x90\xe9\x19\xa9\x20\x08\x0f\x44\x1a\x4d\x10\xba\x93\x26\x29\x1f\x47\x6e\x91\x0b\xf4\x55\x88\xdd\x14\xc9\x3e\x7c\xe3\x08\x22\xf8\x83\x16\xdc\x8a\x68\x7a\xc5\x58\xe3\x05\x60\xf4\x1a\xe4\x29\xc0\xee\xfa\xc3\x60\x49\xbc\x3d\x1e\xb6\x18\x62\xf0\x82\x73\x20\xc0\x0a\x70\x3f\x59\x01\x8e\xaf\x41\x5e\x47\xd2\x22\xc4\x43\x9a\x9f\x20\x20\xf4\x12\x04\x44\xde\x1a\xe4\x75\x8c\xd5\x08\xb1\x49\xf3\x93\x23\xa3\x28\x38\x72\x0e\xc4\x8d\x68\x05\xb2\x62\xeb\x05\xe7\x40\x60\x47\x62\x38\x22\x6f\xdc\x39\x5a\x67\x87\x2c\x01\xb8\x01\xc1\xdc\x84\xf5\xc9\x3b\x82\x8b\x5c\xbc\x08\x17\xbb\x1c\x71\x91\xdf\x17\xe1\x02\x0f\xd9\x99\x4f\x34\x64\x87\x7c\x9d\xbd\xaf\xf3\xd3\x1f\x61\x6f\xd1\xfa\x44\x03\x86\x0d\x2c\x7c\x0d\x2c\xb0\x80\x61\x03\x09\x5f\x03\x3b\x25\x21\x65\xb5\x2c\x28\x5c\x3a\x5b\x87\x0c\xe7\x78\x74\xff\x23\xab\x6e\x34\xe3\x79\x8e\x15\x03\xe1\x6d\x58\x53\x77\x13\x16\xcb\x76\xff\x6d\x60\xd1\x49\x9a\x82\x61\xb3\xa3\x78\x9d\x26\xd4\x2c\x09\x13\x71\x51\x80\x5c\xa5\x88\xb0\xcf\x17\x20\x46\x87\x29\x22\x6c\xf1\x05\x88\xd4\x6b\x9a\x7b\x47\x4c\x7a\xaf\xd4\x93\xdb\x87\xe4\xd4\x65\x32\x68\x86\xfe\x66\x8a\x32\x8e\x40\x16\xd8\xf9\x9f\x1c\x72\x65\x55\x7e\xed\x25\xbf\x5c\x95\x95\x5d\x8e\xeb\x01\x8f\x43\x85\x96\x09\xa2\xb2\x4f\xa1\x9c\x5a\xc1\xfd\x8a\xef\xb5\xa2\x26\x30\x2f\x57\x76\x98\x88\x92\x17\xcb\x2a\xfd\x5d\xed\x6b\x47\x7f\x4f\xbb\x27\x7f\x47\x87\xb2\xd0\x99\x24\x3a\x2e\xdb\x58\xf4\xad\xf0\x9d\x4f\xac\x0f\x91\xb4\xad\x7d\xf1\x0b\xd8\x50\xd9\x05\x78\x18\x10\x0d\xf4\xae\x76\xb2\x4e\x18\xc3\x77\x22\xd7\xeb\x08\xcd\xc7\x7b\x6e\xf6\xc8\x2e\xae\x45\x6f\x7f\x22\x52\x2d\x9e\xf3\x61\xc9\xc4\x78\x0f\x7a\x13\x63\x55\x79\xda\xc4\x46\x75\x1d\xef\xb7\x39\x7a\x5e\x36\xaf\x70\x49\x8a\xae\x9a\xb0\x7c\x70\xe9\x38\xb3\x5f\x69\xeb\x18\x75\x45\x94\xa7\x73\x2e\x6d\xbb\x77\xce\xd6\x53\x7e\xe5\x69\xdd\xfb\x96\x97\xa9\xd8\x3f\x6a\xf8\x8b\x78\x45\xe8\xaa\x55\xfa\x0c\x75\x63\x8a\x07\x4e\x5d\xd6\x25\x2a\x89\x8a\x23\x6f\x07\xcc\x5d\xa3\xb0\x8b\xa5\x3d\x08\x31\xe1\xa2\xb6\x44\xca\x51\xe8\x14\xa6\x63\xf5\xbd\x44\x2b\xf1\x8b\x31\x69\x36\x70\x91\xbc\x57\xaa\x15\xbc\xc7\x31\x13\x12\x72\x1e\x38\x6e\x7b\x4f\x90\xdb\x1c\x86\x07\xf1\x65\x10\xc6\x12\xe9\xaf\xb2\x93\x48\xd6\x89\x4e\xe9\xd7\xc2\xe4\xf0\x62\x32\xdf\xba\xa3\xd9\xfb\x4a\xfb\x47\xcd\x1b\x71\x2f\xb4\x54\xdb\x53\x1b\x17\x0b\x5a\xef\x46\xec\x10\x4e\xc7\x3f\xe6\x9e\x6b\x2b\x9f\x79\xe3\x22\x38\x74\x01\x8c\xed\x05\xdf\xc2\x89\xaf\xe3\xd1\xf7\x56\x72\xd9\x96\xe4\xc6\x72\x2b\xf0\xd9\x25\x8d\xc9\x5c\x5b\xe2\x57\x7e\x9c\xa6\x8c\x33\xb6\xda\x33\x11\xbb\x03\xcf\x04\x0c\x4e\x6c\x66\xde\x37\x07\x9b\x0f\xca\x48\xab\xf4\x2b\x4e\x04\x50\x8d\x24\xc9\x4e\xda\x47\xdd\x12\xc9\xbd\x56\x56\x35\x0a\x89\xb5\xe1\xf7\x5a\x1e\xb9\x15\xbf\xe0\x13\xe3\x5e\x0c\x4f\xad\x6c\x88\x3c\x36\xd6\xa4\xad\x6e\x06\xed\xf2\xe3\x03\xe9\x6a\xb2\x56\x98\x34\xc2\xb1\xf5\x26\x8d\x37\xf4\xb4\xe4\x4c\xe5\x5b\x54\xec\x3d\x77\xd2\xbe\xd7\xbc\x6f\xf6\x97\x5f\x25\xa4\x5b\x0e\x29\x2d\xc9\x4e\x9c\x39\xd5\x1d\x54\x2f\x70\xc6\xa5\xf9\x82\xa4\xa4\xc5\xe8\x51\xfd\xb3\xdc\x8d\xb1\xbe\x10\x4d\x63\x19\x91\x87\xd5\x9c\xe1\xa5\x93\x56\x2a\xef\x66\xce\x1c\xb5\x6b\x72\xa6\xbe\xd5\x51\x99\x7c\x49\x40\xe9\x63\xce\x3b\xda\x53\x13\xef\x28\x37\x79\x18\x6e\xe4\xae\x87\x9c\x41\xcf\xd5\xcc\x3b\xea\x3a\xdd\xee\x39\x2a\x0a\xb4\x3e\xcb\x5e\x9a\x7d\x7e\x31\x2c\x6c\x38\x93\xae\xce\xaa\xfc\x2f\xfa\xfe\x90\xc8\x08\xba\xe6\xcf\x7c\x31\x39\xe0\xe3\x53\x31\xf6\xa4\xd4\x4b\xc7\xf5\x8b\xb3\x02\x6e\x27\xbc\x91\xe3\xc7\x3a\xb2\x69\xb9\x81\xf9\xd7\x8d\xa9\x81\x59\x0e\xcf\xd1\x52\x9c\x62\xe1\x92\xee\x78\x63\xe6\xba\xf3\x0f\x12\x53\xdd\x45\x15\xe7\x55\x5d\x74\xed\x4c\xc9\x05\x76\xdc\x2b\x1d\x36\x6a\xf5\xb9\x10\x2e\x4b\xce\x7d\x50\xbd\xe5\xb2\x77\xad\x81\xd2\xb6\xe4\x63\xc2\xf6\x7e\xba\x59\x84\x4d\x12\x04\x93\x2a\xa3\x04\x9a\xbe\x64\x4c\xc9\xfb\x7e\x8a\x8e\x49\x71\x98\x3b\x42\xbf\x46\x9c\x76\x64\xb9\x34\x9d\xad\x44\x09\x7d\xe9\xa3\xc0\x54\xe1\xa9\xc2\x74\x92\x46\x66\x0a\xd5\x31\x48\xe6\x83\x67\xbe\xc0\x2c\x7e\x21\xc6\xd4\xa1\xb6\xf5\x02\xe2\x0a\x37\xe2\xac\x99\xf4\x5e\xc1\x24\x94\x2d\x2e\xa4\xc1\x45\x9b\xaf\x8b\x67\xfe\x3a\xbf\x22\x88\x9c\x5a\xb5\x74\x44\x71\xfb\x8d\x8c\x2b\x75\xe6\xde\x36\x57\xe2\x92\xb4\x87\x2a\x16\xbc\x10\x52\xc7\xb9\xfa\x46\x75\x93\x50\xdb\x69\xde\xcf\x45\xc6\x0c\xf6\xe4\xed\x08\x3f\xbb\xb9\x6f\x53\x13\x78\x99\x53\x33\xb2\x56\x4a\xdb\x98\xb6\xb2\x8d\x81\xb9\xff\x02\x00\x00\xff\xff\x25\xd8\x6f\xa6\x3f\x1b\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6975, mode: os.FileMode(420), modTime: time.Unix(1520553198, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


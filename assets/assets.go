// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\xe3\xb8\x11\xbe\xeb\x29\xa0\xda\x8b\xa6\xca\x4f\xa0\x5b\x66\x3c\x19\x3b\x99\x49\x1c\x6b\xe7\x90\x9a\xf2\x01\xa6\xda\x12\x62\x12\xe0\x02\xa0\x77\x55\xa9\xbc\x7b\x0a\xbf\xec\x06\x40\xd9\xf2\x6e\xaa\x72\xb1\xc5\x8f\xc0\x07\x74\xa3\x7f\x41\xd3\xf1\x9e\x6b\xf6\xb3\x18\x60\x15\x7f\xff\x65\xf7\xf7\xbf\xad\x56\xa6\x3b\xc2\xc0\xd9\xbf\x57\x8c\xfd\x32\x81\x3e\x6d\xd9\x3f\xdc\xbf\x15\x63\xc3\x64\xb9\x15\x4a\x6e\xd9\xb7\xf8\x6b\xf5\x9f\xd5\xea\xa7\xf8\xde\x9e\x46\x08\x3f\xfd\xdc\x9f\xd8\x77\x03\x7a\xc5\xd8\x64\x40\x6f\xc4\x7e\xcb\x6e\xaf\x3f\x6c\x13\x18\xde\x9a\xf8\xda\x6c\x3e\x6c\xd9\x0f\x87\x3c\xac\xfd\xcb\x3b\xad\xfe\x05\x9d\x5d\x31\x36\x86\x5f\x91\xe0\x8a\x99\x7e\x3a\x6c\xd9\xce\x6a\x21\x0f\x57\x4c\xf2\x01\xe6\x27\x90\x2f\x42\x2b\x39\x80\xb4\xb7\xd7\x09\xfe\xb0\x45\x6c\x99\xd9\xcc\xd4\x66\x13\x7f\xec\x80\xeb\xee\x98\x87\x87\xc7\x5b\x39\x4e\xf6\x8a\x8d\x5c\xf3\xc1\x6c\xd9\x1d\x3f\x08\xc9\xad\xd2\x1e\x9f\xb9\xbf\x0a\x63\xc3\xd6\xff\x0c\xdc\x4e\x1a\xdc\x02\x4f\xf1\xe7\x66\x71\x76\x1c\x3c\xcf\xde\x81\x7e\x11\x9d\x9f\x6d\xe2\xcf\xe5\xd9\x71\x70\x35\x9b\x99\x11\x3a\x44\xb1\x73\x8f\x5e\xc5\xbb\x19\x88\x9a\xbe\x87\x1e\xb8\xf1\x0b\xea\xf8\x73\x79\xc1\x38\x78\x5e\xf0\xf3\xac\x71\xc7\x80\x0e\x60\xd6\x2a\x3a\x30\xb7\x05\x34\xe5\xa1\x22\x61\x2f\x5c\x0b\xfe\xd8\x47\x05\x74\x1a\xec\x59\xf9\xdd\x00\x24\xbe\x90\x87\x1e\x22\x9c\x09\xbc\xe9\xe4\xf5\xf3\xcb\x6c\x0a\x9f\x7f\xb3\x20\x8d\x50\xd2\xab\xcd\x49\x91\x00\xb3\x59\xb2\xa8\x1f\x79\x12\x35\xd8\x0c\x23\xfb\x9a\x31\x7f\x04\xe5\x48\x7a\x0e\x68\xf1\xf9\x44\x0a\x86\xfb\x02\x4d\x5b\x00\x3d\x08\x93\x17\x9f\x9f\xdc\x24\xe7\xda\xeb\xe0\xad\xd9\x77\xbd\xc3\xa6\xa7\xe8\xb3\x9f\x34\x70\x0b\x69\xeb\x2b\xc6\x3a\x0f\xc4\x4d\xa7\x33\xcd\x66\x5f\x78\x41\x70\xec\x71\x4f\x29\x26\x0f\x5c\x42\x11\x77\x11\xc5\xcf\xbb\x88\x82\x6f\x22\x9e\xed\xb1\x30\xcf\x60\x0b\x56\x8d\x88\xc0\x58\x35\xa6\xe9\x21\x94\xac\x8b\x09\x71\xcd\xe8\x32\x79\xcd\xe8\x31\x9b\x88\x67\xa7\x2b\x7c\x10\x4b\x3e\x43\x41\xf2\x4b\x28\xae\xa1\x07\xb2\x8b\xbd\x07\x2e\xa1\xa0\x82\x24\xa3\x26\xd2\x38\xff\xdf\xa0\xe0\x90\x09\xdc\x43\xc1\xb9\x0b\xf3\xb3\x74\x05\x2f\x11\xf1\x5d\xbc\x54\xe4\xc4\x4b\xe4\x7e\x17\x6f\xd4\x03\x72\xe1\xac\x06\x14\x71\xb0\x8b\x6f\x71\x28\x4a\xb4\x9f\xc9\xfc\xac\x06\x4a\x1b\xb4\xf0\x7b\x68\xa3\x16\x28\x6d\x50\xc2\xef\xa1\xad\x95\x90\x43\x2c\x32\x0a\x1f\x26\x43\xb4\x4c\x11\x92\xc6\xd8\x05\xc9\x31\x57\x32\x84\xb7\x71\xd5\xe2\x66\x2e\x86\x4e\xff\x6d\x64\xb7\xc3\xa8\xb4\x65\x03\x97\xa7\x26\xa3\x61\xdc\x32\x25\xbd\x7f\x08\x3f\x76\x17\x53\x4b\x4c\x31\xdb\x48\x11\x61\xba\x84\x21\x8a\x2c\x93\x45\x34\xa8\x04\x6f\xf2\x80\x2d\xcb\x60\x3e\x9c\x04\x10\x75\x96\x8c\xd1\x96\xde\xc1\x98\x94\x5a\x32\x46\x33\x7a\x07\x63\x29\x75\x99\x10\x66\xce\x32\xd9\x6d\xab\x94\x58\x04\xfa\xf3\xca\x28\xd3\xc6\x1f\xb6\x10\xd2\x51\xc4\x82\x76\xfe\x47\x02\xb9\xea\x16\xe7\xe2\x2c\x97\x2b\x76\x51\xc6\xde\x4c\xf4\x39\x14\xca\x08\x48\x8b\xfd\x08\x35\xc8\x3a\x26\x7d\x9a\x6c\x49\x01\x56\xa9\xb0\x51\x9c\x61\x6c\x16\x04\x81\x79\x59\x04\xa6\xb5\x3f\x2a\xf5\x3c\x70\xfd\x8c\x52\xfd\x63\x84\xee\x48\xd5\xee\x52\xed\x47\xa5\x7a\xe0\x32\xcc\xfc\x02\x96\x7d\x11\x96\x7d\x52\xc3\x20\xfc\x4e\x0f\x60\xbf\x08\x1b\x9f\xd3\xee\x5c\xc9\x75\x7b\xbd\xae\x0a\x7b\x8f\x49\xf8\x35\xb3\x62\x7e\x5f\xe3\xe4\x52\x71\x25\xa4\x05\xfd\xc4\x3b\x98\x31\x5f\xea\x74\x6a\x72\x21\xf4\x56\xda\x38\x05\xd5\xb6\xa1\x32\x42\x80\x8b\x1a\x3d\x78\x85\x9c\xa1\x71\xf5\xaf\xd5\x02\xcc\x5c\xa3\x3d\x44\xf2\xb9\x52\x0d\xdc\xf3\xf3\xe5\xd4\x61\xee\xcc\x9c\x7b\x80\x44\x9d\x81\xf7\x70\xfb\xc9\x89\x1c\xb5\x27\x81\x1c\x01\x97\x93\xc7\xc9\x89\x1c\x75\x4e\x81\x1c\x01\x97\x93\xc7\xc9\x89\xdc\xb7\x99\x9e\xd5\xfd\xf2\x33\xa3\x2d\xba\x59\x03\x17\x7d\xaa\xe6\xd7\xb4\x58\x2e\x3c\x2c\x44\xbb\xfd\xd6\xf7\xc9\x54\x2b\x44\x23\xc5\x0a\x65\x91\xeb\xb0\x01\x8c\xe1\x07\xc0\xeb\x3a\xa7\xc7\xcf\x47\x6e\x8e\x64\x5f\x5c\x83\xb4\x37\x05\xaa\xe1\x09\x3f\xb6\xb6\x98\xea\x41\x6c\x11\x6f\xd8\x62\xa7\x86\x81\xcb\x3d\x66\xc7\x1d\xf6\x9a\xb6\x94\xa4\xe4\x5a\x57\x67\xe3\x12\xaa\x53\xa7\x6b\x3d\x1e\xd6\xb4\x3b\x24\x85\x8a\x7b\xe7\x36\x7a\x46\x28\x17\xa5\xc7\x5e\x9d\xdc\xf0\x9d\xd5\xdc\xc2\xe1\x14\x9a\x9a\x15\x63\xbd\x78\x01\x09\xc6\xdc\x69\xf5\x08\x19\xd5\xc0\xf7\xa2\x86\x47\x0d\xae\x35\xb8\x51\xea\x39\xad\x17\x54\x86\x2b\x27\xaf\x36\xdc\x96\x52\xd5\x95\x3a\x79\x86\x13\x7e\x14\xe6\x1a\x9e\xf8\xd4\x5b\x12\xf5\x3a\xd5\x2b\x7d\x56\xc4\x74\x1f\x51\x5b\x73\xab\x43\xc6\x81\xa4\xd8\x5f\xb1\x9f\x17\xde\x4f\xf4\x0c\x3b\x45\xb5\xdd\xb2\x85\x60\x9b\xce\x7b\x5a\xe7\xf3\x02\x3a\xbb\x4b\x8a\x47\xe7\x4f\xb8\x12\x57\x98\x5d\x2c\xec\x68\xec\xc6\x97\x18\xc4\x80\x9d\x99\xbd\x72\x12\xdd\x38\xdd\xc3\x2f\x13\x18\x5b\xa0\x5f\xc5\x20\x08\x36\xc0\xa0\xf4\xa9\x31\x38\xbc\xa8\xc6\x5b\x17\x22\xa4\x6f\x95\xbf\x68\xde\xc1\x1d\x68\xa1\xf6\x0d\xcf\xc8\x5e\xb1\x20\x74\x6d\x1b\x38\xfd\x90\xd4\xf3\x06\x8f\xa5\xa7\xc4\xb5\x15\x4f\xdc\x9b\x50\x68\xf8\x19\x3b\x02\xdf\xc7\x18\x95\xaf\x9b\xbc\x3c\x5c\xf4\x2d\xdc\x58\x6e\x81\x46\x9b\xe2\x0e\x62\xe9\x06\xc2\xcf\xfc\x56\x07\xb9\x8b\x8c\xc2\x58\xae\x09\xf0\x24\xa4\x30\x47\xaa\xc2\x7b\xd5\xf7\x8f\xbc\x7b\xae\xb2\x7e\xac\x43\x70\x36\x79\xc5\x60\xf0\x75\x62\x90\x76\x54\x46\x58\xa5\x4f\xf4\x68\x63\x07\x92\x91\x83\xb0\xdf\x75\x5f\x20\x77\x5a\x59\xd5\x29\x02\x6b\xc3\xef\xb4\x78\xe1\x16\xfe\x4a\xbd\xd2\xbd\x98\x1e\x7b\xd1\x15\x78\xbe\x34\x34\x47\xf5\xeb\xb5\x8f\x7a\x4e\xfa\x28\xe9\x99\x9b\xc8\xe2\x2e\xb1\x9b\xb4\x4b\x1e\xf7\xc5\x5d\xc9\x7b\xee\xf9\x5e\xb9\x89\xbc\x62\xc6\x5f\x95\x22\x41\xea\xcb\xc9\xf3\x97\x79\x4b\x14\xf8\x7e\x0f\xb0\x05\x36\x6f\xd1\x0e\xc2\x7e\xd4\x5c\x76\x24\x5b\x76\x4a\x5a\x21\x27\x35\x99\xa0\x4c\x12\x94\x81\xd4\xbf\x75\x91\x9b\xea\x59\x74\x02\x4b\x29\xb7\xb8\x46\x0c\x29\x24\x63\xaf\x84\x2d\x35\x8c\x4a\x7a\x07\x41\x11\xa7\x4c\x89\xbc\x3b\x82\x8b\xfc\x64\x2b\x45\xac\x3f\xeb\x6c\x4a\x3e\x89\xc3\x1c\x1a\x5a\x52\x54\xbd\x0c\xf6\xa5\x25\x71\x5a\x81\xa9\xd5\x63\x2e\x84\xa8\x6a\x5f\x93\xb1\x6a\xf8\x54\xa0\x55\x60\xfa\x03\xe2\x0d\x8e\xbc\xa8\xf7\xc4\x31\x78\x49\xe6\xf2\x0e\xb2\x90\xb9\xd4\x18\x76\xa3\x9d\x38\xc8\x18\x78\xcb\x10\xb3\xf0\xae\x14\xbd\x34\x8d\x25\x55\x34\x94\x4d\x03\x2c\x63\xcd\x10\x7b\xc6\x32\x98\x70\xfe\xba\xf2\x7f\xc9\x15\x6e\xd6\x4f\x2c\xaa\x16\x23\x62\x33\x74\x52\xbf\x6d\x7b\x1e\x3d\xdb\xf9\x3e\xfe\x9c\x93\x93\xbd\x87\x2f\x3a\x2d\x09\xd0\xb7\x1e\x2f\x47\x9d\x06\x96\x82\x01\x6e\x37\x9d\x95\x10\x72\x12\xe3\x3c\xf1\xe8\x4f\xe8\xd6\xdf\xce\xf5\xa1\xc6\x70\x0f\xc4\x10\x31\x05\xbe\xe1\xae\x35\x8c\x92\xfb\xac\x0e\xe4\x91\x14\x6c\x2a\xcf\xa7\x1c\xa5\x3b\xb8\x87\xc7\x49\xf4\x95\x68\xa9\x1a\xc3\x9b\xc2\x97\xcf\xf5\xa6\x9a\x6b\xbf\xa1\xb3\x68\x77\x0f\x71\xad\x3b\xa5\x83\x99\xad\x1f\x1a\xf6\xbf\x28\x59\xab\x6b\xb8\xae\xb0\x40\x5c\x77\x12\x37\xc0\x7b\x7b\xf4\x0f\x7e\x48\xa3\xab\x68\x0c\x59\xec\x30\x3e\x29\x69\xb9\x90\xa0\xbd\x70\x2d\x8d\x66\x29\x83\xad\x28\x8d\xf4\x91\x3d\x29\x5d\x59\x84\x99\x0b\xd2\x78\x82\x52\x4d\x03\xff\x6d\x37\xe9\x68\x80\x11\xf8\x2e\xf9\x0b\x17\x7d\xc8\x2b\x94\xba\x94\xad\xe2\xf4\xd5\xb2\x3d\xd2\x32\xb8\x38\x69\x2c\x87\x6f\x3d\x8e\x30\x60\x82\x91\x5b\xec\xf6\x42\x0a\x2b\x78\x7f\x0d\x3d\x3f\xed\xa0\x53\x72\x6f\xd2\xd4\xd1\x57\xdc\x05\x68\xc5\x00\x6a\xb2\x05\x6a\xa6\xae\x03\x63\x7e\x3e\x6a\x30\x47\xe5\x8c\x3a\xe0\x4f\x5c\xf4\x93\x86\x0a\x3f\x5a\x3b\xde\x00\xdf\x83\x76\x26\x87\xe4\xbe\xc9\x2f\x92\xf1\xb5\xb4\x53\x8c\xf2\x7a\x2a\xad\xbb\x68\xc2\xaa\x4e\xa7\x65\x0e\xf9\xeb\x46\xed\x64\xff\x4f\x8d\xcf\x62\x4f\x83\xdb\x56\x2c\x5e\xf9\xdd\xe2\x75\xf1\xde\xd3\x61\x2f\x76\xce\x85\xaa\xf3\x47\x85\x7a\x1b\xaf\x35\xd2\x55\x1e\x5e\x68\xac\x49\xae\x5a\x0c\x56\x4b\x0d\x71\x5b\x86\xa1\x0a\x22\xf5\x37\x0c\x2f\x51\xac\x2c\xfe\xf9\xa7\x6f\x5f\xc3\x5a\xaf\x26\x0a\xd7\x54\xbe\x29\x75\x34\x0a\x5f\x7a\xd0\xe4\xaa\xfc\xe2\x63\x6e\x96\xc5\x8b\xea\x6b\xd7\xc7\x65\x71\x49\x8f\xac\x59\xf3\xb6\x0a\x84\xb3\x92\x5c\x35\x15\x79\x85\x2b\xc2\x02\x7f\x5b\xc9\x7b\x4e\xeb\xf4\xf3\x00\xd9\x72\xeb\xcb\x81\xdf\x71\x7d\xae\xf4\xe2\x93\x4e\x8c\x11\xef\xd2\xf5\xe6\xe5\x2a\x77\x39\x68\x2e\x2b\xeb\xae\x3f\x3a\x34\xf5\xdf\x0a\x19\x8b\xa6\xf0\xc6\x85\x82\x6a\x16\x17\x9a\x35\xd7\xf2\x12\xaa\xba\x85\x6d\x06\xf5\xfd\x37\x00\x00\xff\xff\x47\xc9\x02\x43\x6b\x25\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9579, mode: os.FileMode(420), modTime: time.Unix(1548723309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


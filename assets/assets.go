// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xc1\x72\xdb\x36\x13\xbe\xeb\x29\xe0\xc9\x45\x99\xf1\x13\xf0\x18\x3b\xff\x5f\xb7\x49\xaa\x5a\xcd\x29\x93\x03\x4c\x41\x12\x1a\x92\x60\x00\xd0\x8d\xa7\xd3\x77\xef\x00\x58\x00\xbb\x20\x21\x59\x4e\x3a\xd3\x8b\x45\x2c\xc1\xc5\xee\x87\xdd\xc5\x87\xb5\x69\x79\xc7\x35\xfb\x5d\xf6\x62\x05\xcf\x3f\x6f\x7f\xfd\xb0\x5a\x99\xf6\x28\x7a\xce\xfe\x5a\x31\xf6\x75\x12\xfa\xa9\x61\xbf\xb9\x9f\x15\x63\xfd\x64\xb9\x95\x6a\x68\xd8\x7b\x78\x5a\xfd\xbd\x5a\xbd\x82\xf7\xf6\x69\x14\xe1\xd1\x7f\xfb\x8a\x7d\x34\x42\xaf\x18\x9b\x8c\xd0\x6b\xb9\x6b\xd8\xdd\xed\xeb\x26\x0a\xc3\x5b\x03\xaf\xcd\xfa\x75\xc3\x3e\x39\xc9\xe7\x2b\xff\x72\xa3\xd5\x1f\xa2\xb5\x2b\xc6\xc6\xf0\x04\x0a\xae\x99\xe9\xa6\x43\xc3\xb6\x56\xcb\xe1\x70\xcd\x06\xde\x8b\x3c\x12\xc3\xa3\xd4\x6a\xe8\xc5\x60\xef\x6e\xa3\xf8\x75\x83\xb4\x25\xcd\x26\xab\x36\x6b\x78\xd8\x0a\xae\xdb\x63\x9a\x1e\x86\x77\xc3\x38\x59\x67\x1d\x48\xc1\xc0\xff\x09\x6e\x27\x2d\x9c\x9a\x3d\x3c\x7a\x1f\x40\x0e\xb3\xb6\x42\x3f\xca\xd6\xcf\x32\xf0\xe8\x67\x81\x9c\xce\x62\x66\x14\x2d\x9a\xba\x75\x43\x3c\xdd\x09\xe0\x93\x7b\xd1\x09\x6e\xbc\x62\x0d\x8f\xeb\x91\x6b\xde\x9b\x86\x6d\xf8\x41\x0e\xdc\x2a\x1d\x4d\x87\xc9\xef\xa4\x09\x10\xbc\xcd\x30\x39\x05\x08\xb5\x0c\x05\x42\xd9\x59\x80\x3e\x01\x0b\x90\x84\x3d\x72\x2d\xf9\x43\x07\x7e\xb6\x5a\xd8\x68\xb7\x7b\xa6\x5b\xfa\xf6\x9b\x15\x83\x91\x6a\xf0\xee\xba\xe5\xa3\xc0\xac\x6b\xfb\xf7\x29\x7d\x54\xd1\x85\x76\x33\xcb\xd6\x68\xd7\x4a\x05\x00\x09\x5a\x3c\x23\x59\x68\xb8\x2f\xa4\xd1\x04\xa1\x7b\x69\xd2\xe2\x79\xe4\x3e\x72\x89\x74\x15\x72\x23\x65\x8a\x4f\x8f\x38\x82\x0c\xb9\xd1\x82\x5b\x11\x4d\x5f\x31\xd6\x7a\x01\x18\x1d\x37\x23\x45\x64\xdc\x50\x1c\xcf\x1f\xc7\x1d\x55\x31\x79\xc1\x25\x2a\xc0\x0a\x70\x3f\x59\x01\x8e\xaf\x41\x9e\xe2\xa8\x08\xab\x10\xc2\x56\x8d\x48\x81\xb1\x6a\x8c\x9f\x87\xc4\xbd\x2a\x3e\x80\x35\x21\xd4\xd3\x9a\x10\xe9\x6b\x90\x37\x31\x37\xe2\x9a\xdb\x34\x3f\x79\x9e\x45\xc1\xf3\x4b\x54\xdc\x8a\x4e\x10\x2b\x76\x5e\x70\x89\x0a\xea\x48\x0c\x6a\xe2\x8d\xcb\xdb\x35\x4a\xea\xa4\xc0\x0d\x0a\x9d\xdb\xf0\x7d\xf2\xae\xd0\x4b\x5c\x7c\x91\x5e\xea\x72\xd4\x4b\xfc\x7e\x91\x5e\xc0\x01\xa5\x70\x82\x01\x95\x0a\x9c\xe2\x0d\xae\x21\x51\xed\x5b\xf2\x7d\x82\x81\xaa\x0d\x28\x7c\x8f\x5a\x40\x81\xaa\x0d\x20\x7c\x8f\xda\x39\x08\xa9\x36\xa2\xa0\x70\x45\x71\x1d\xea\xa4\xc3\xd1\xfd\x66\x54\xdd\xa8\xe2\x39\xd6\x15\x03\xe1\x79\xba\xe6\xee\x26\x5d\x0c\xed\xfe\xf3\x94\x45\x27\xcb\x42\x0e\x9b\x1d\xc5\xeb\x34\xa1\x61\x49\x98\x80\x8b\x02\xe2\x6a\xa9\x11\xf6\xf9\x05\x1a\xa3\xc3\xa5\x46\xd8\xe2\x17\x68\x2c\xbd\x2e\x8b\x75\xd6\x59\x1e\x44\xcd\xec\xb8\x2a\x8a\xf0\x69\x30\xca\x92\xfe\xc3\x16\x42\x18\x81\x2c\xa0\xf3\x2f\x39\xe4\x78\x1e\x3e\x27\x93\x5f\x8e\xf6\xa1\xd3\x74\x3d\xd1\x71\xa0\x8c\x48\x90\x18\x59\xe0\x07\x57\x70\x20\xd3\x83\x90\xb0\x9a\x19\x84\x0b\x8c\x07\xcb\xb2\x23\x48\x98\x96\x45\xc2\xb8\xf6\x1b\xa5\xbe\xf4\x5c\x7f\x41\xc7\xf0\x03\x88\x36\x84\xbf\xba\x63\xf0\x8d\x52\x9d\xe0\x03\xf0\x83\xc4\xd6\x56\x72\xb0\x42\xef\x79\x2b\xb2\xcc\xd3\x84\x91\x1f\x44\xc3\xee\x06\xeb\xd6\x6a\xd5\xe4\x6a\x11\x8c\x8e\xdc\x7c\x10\xdf\xec\xc6\xcf\xa0\x7a\x13\x43\xf4\xbc\x03\x51\x40\x26\xfb\xb1\x13\xde\xa5\xef\x5d\x28\x93\xcf\xcc\x93\x3e\xc3\xfa\x9e\xe7\xfb\xb5\xdd\x93\xd7\x0f\x10\x38\xce\xd7\x73\xd9\x45\x82\x77\x45\xf9\x53\xb1\xb1\x21\xc9\x76\x8d\xbf\xa8\x80\x6e\x20\xd9\x41\x3d\x0c\x8a\x15\x4a\xde\xe3\x64\xbd\x30\xc6\x3b\x90\xd7\x75\xb1\x86\xc7\x47\x6e\x8e\xc4\x2e\xae\xc5\x60\x7f\x2a\xa4\x5a\xec\xf1\x70\xc9\xc4\x48\x11\xbc\x89\x91\xe0\x9f\x37\xb1\x55\x7d\xcf\x87\x1d\xd6\x8e\xaf\x38\x57\xf4\x76\x40\x4e\x61\xb4\x69\xc8\x7e\xa5\x5d\x38\x7f\x72\x84\xd4\xc3\x59\x3b\xd1\xdc\x3b\x67\xeb\x39\xbf\xf0\x89\xe7\x7d\xc3\xf7\x00\xea\x5f\x69\xf8\x17\xf1\x84\x87\xd2\xdc\x8a\x3d\x9f\x3a\x4b\x02\xaa\x55\x9d\xd2\x27\x8c\xc8\xb7\x36\x72\x25\x2b\x6d\xcb\x47\x25\x6c\x80\x3b\xbd\x0a\xfb\x0a\x7b\x1e\x79\x37\x51\xa0\x5b\x45\xf1\x58\xda\xb0\x10\x40\x2e\xc4\x97\x10\x7c\x14\x3a\xc5\x74\xbe\x0b\x9d\xda\x83\x99\xbb\xd2\x6c\xe1\x40\xa6\xf9\x8d\x2f\x8d\x24\xca\x5c\x2c\x9c\xd9\x89\x76\x9c\xee\xc5\xd7\x49\x18\x5b\x48\xdf\xc9\x5e\x12\x59\x2f\x7a\xa5\x9f\x16\x26\x87\x17\xb3\xf9\xd6\xe5\xf1\xe0\xaf\x38\xff\xd7\xbc\x15\x1b\xa1\xa5\xda\x9d\x0b\xaa\x78\x31\xc0\xa5\xea\x19\xc9\x42\xb1\xe7\xda\xca\x3d\xf7\x81\x11\xae\x5f\x8c\x1d\x05\xdf\x41\x79\x68\x62\x9d\xf0\x56\x72\xd9\x2d\xc9\x8d\xe5\x56\xd0\x44\x2f\x6e\x84\xb5\xfb\xa0\xff\xf2\xfd\xbc\xbe\x5c\xb0\xd5\xe1\x34\x80\xf3\xc3\x23\x01\x83\x33\x9b\x89\x1b\x22\xc1\xe6\x51\x19\x69\x95\x7e\xa2\x55\x03\x58\x5d\x92\x1c\xa4\xfd\xa8\xbb\x42\xb2\xd1\xca\xaa\x56\x11\xb1\x36\x7c\xa3\xe5\x23\xb7\xe2\x17\x9a\x31\xee\xc5\xf4\xd0\xc9\xb6\x90\xa7\x86\x88\x39\xaa\x3f\x6f\xc5\xd8\xa9\x27\xe7\x26\xc4\x6f\xd9\x25\x69\x27\xed\x6a\xec\x7d\x71\xcb\xac\x1d\x2e\xb9\x93\x52\xf4\x51\xa0\xf1\x50\xa4\x1a\xde\xb9\xc5\x5e\xc0\x41\xda\x37\x9a\x0f\x2d\x29\xf0\xad\x1a\xac\x1c\x26\x35\x99\x60\x3e\x29\x51\x82\x30\x85\x39\x1d\x88\x27\x3f\xf2\xb9\x5a\x4d\x29\x3f\x0d\x05\x35\xc9\xce\x24\xb1\xea\x47\x35\x08\x5a\xef\xcb\x02\x54\xd4\xb8\x93\xe1\xa8\x86\xbd\x3c\xe4\xe4\x39\x11\x9e\x99\xdf\xe1\x38\xad\x19\xbe\x94\xba\x4b\xbc\xbb\x92\xc4\x33\xbb\x26\x63\x55\x7f\x53\x48\x67\xa9\xfb\xa3\x32\x72\xd6\x29\x22\x55\xaa\xe6\x73\xd9\x33\x29\x7c\x2e\x11\xc3\x61\xbd\x95\x87\x01\x4a\x53\x99\xbe\x95\x77\xa5\xeb\x65\x10\xd4\xa0\x58\x00\x7b\x2f\x07\x69\x8e\xf8\xfc\x39\x11\x06\x4c\x3a\x4a\xbc\xf2\x7f\x49\x7f\x29\x81\x11\xd6\xaa\x97\x96\xc5\x1a\x44\xd3\x71\x39\xa1\xe8\x46\xe6\x66\xe1\xa9\xdc\x25\xb6\x87\xe6\xee\x92\x07\xa8\xed\xeb\xfd\x98\xd7\xd3\x5a\x8e\x63\x3e\xef\x42\x82\x28\x27\x4d\x59\xaf\x98\xef\xad\xd0\x37\x93\x36\x99\xf0\x38\xd8\xac\xe8\xcd\x46\xe8\x4d\x26\xe3\x24\x0e\xb1\x52\xdc\x90\x9b\x63\x8e\x4e\xbf\x0c\x10\x4a\x48\x2a\x5c\x84\xd3\x87\x84\xd2\xad\xb8\x17\x0f\x93\xec\x66\xce\x46\x12\x82\x8d\xc2\xbd\xb2\xb9\x51\x8b\x6b\x5f\xc6\x7a\xcb\x6f\x2b\x94\x17\xec\xd8\x28\x1d\x82\xf2\xea\xf3\x42\x6a\x54\xbc\xf6\xce\xdd\xa8\xc1\x72\x39\xb8\x5b\xab\xd2\x76\xc9\xc7\xa4\x3b\x5c\x9f\x94\xb6\x05\xcc\x45\xc0\xcf\x88\xdb\x92\xd2\xd4\x64\x9b\x83\xf7\xdf\xe1\x71\x33\xbe\x8d\x1d\x29\x1b\x65\xe7\x1d\x79\xc9\xd5\xa0\x4a\xf9\x0b\x50\x53\x17\x6b\x6e\xc6\xb9\x1b\xc0\xac\x90\x56\x6e\x04\xa4\xfe\x54\x13\xa9\xc6\xe4\x17\xff\x31\x42\x01\x25\x7d\x96\x8b\xe1\x5c\x64\x0a\x55\x33\xcb\xf3\x96\x82\xb0\x6c\xf1\x42\x19\x3d\x69\xf3\xf5\x62\x25\xb8\xc6\x87\x64\x21\x7f\x1e\x0b\x38\x95\xce\xb4\x8b\x44\x4c\x5e\x6a\x30\x79\x8b\xdd\x0d\xa3\xa8\x9d\xa4\x51\x41\x3f\x84\x32\x73\xe9\x7a\x79\xb9\x59\x00\x1e\x34\x1f\xaa\xf1\x52\xc9\xbe\xf9\xeb\xbc\x40\x75\xd3\x9f\xb9\x50\x80\xa6\xba\x50\x46\x6e\xa9\xcc\x53\xe8\x2a\x66\x06\xf8\xfe\x09\x00\x00\xff\xff\x33\x2b\xe7\x50\x9c\x1e\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 7836, mode: os.FileMode(420), modTime: time.Unix(1529968729, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529952739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


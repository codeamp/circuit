// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x51\x73\x1b\x27\x10\x7e\xbf\x5f\x81\x26\x2f\xca\x8c\x7f\xc1\x3d\x26\x4e\xdb\xb4\x4d\xeb\x5a\xcd\x53\x26\x0f\xf8\x84\x25\xea\xbb\xe3\x02\x9c\x5b\x4f\xa7\xff\xbd\x03\x2c\xdc\x2e\x07\x92\xe5\xa4\x33\x7d\x91\x8e\x05\x96\xfd\x3e\x76\x97\x05\xd3\xf1\x9e\x6b\xf6\xbb\x1c\x44\x03\xdf\x3f\xee\x7e\xfd\xa5\x69\x4c\x77\x14\x03\x67\x7f\x37\x8c\x7d\x99\x85\x7e\x6a\xd9\x6f\xee\xaf\x61\x6c\x98\x2d\xb7\x52\x8d\x2d\xfb\x00\x5f\xcd\x3f\x4d\xf3\x0a\xfa\xed\xd3\x24\xc2\xa7\x9f\xfb\x8a\x7d\x34\x42\x37\x8c\xcd\x46\xe8\xad\xdc\xb7\xec\xfd\xf5\xeb\x36\x0a\x43\xaf\x81\x6e\xb3\x7d\xdd\xb2\x4f\x4e\xf2\x79\xe3\x3b\x6f\xb4\xfa\x43\x74\xb6\x61\x6c\x0a\x5f\xa0\xe0\x8a\x99\x7e\x3e\xb4\x6c\x67\xb5\x1c\x0f\x57\x6c\xe4\x83\x58\x5a\x62\x7c\x94\x5a\x8d\x83\x18\xed\xfb\xeb\x28\x7e\xdd\x22\x6d\x49\xb3\x59\x54\x9b\x2d\x7c\xec\x04\xd7\xdd\x31\x0d\x0f\xcd\xf7\xe3\x34\x5b\x67\x1d\x48\xc1\xc0\xef\x04\xb7\xb3\x16\x4e\xcd\x3d\x7c\x7a\x0c\x20\x87\x51\x3b\xa1\x1f\x65\xe7\x47\x19\xf8\xf4\xa3\x40\x4e\x47\x31\x33\x89\x0e\x0d\xdd\xb9\x26\x1e\xee\x04\x30\xe5\x56\xf4\x82\x1b\xaf\x58\xc3\xa7\x1f\x09\x72\x18\xf5\x6e\xe1\xc3\x8d\x44\xf4\x84\xd1\xa8\x7f\x3d\x83\x3d\x72\x2d\xf9\x5d\x0f\xd6\x77\x5a\xd8\x68\x8d\xfb\xa6\x1b\xf5\xee\x2f\x2b\x46\x23\xd5\xe8\x41\xb8\xb5\xa2\xc0\x6c\x6b\xbb\xf2\x29\x4d\xaa\xe8\x42\x7b\xb4\xc8\xb6\x68\x2f\x72\x05\x80\x1e\x2d\xbe\xf0\x93\x69\xb8\xcd\xa4\xd1\x04\xa1\x07\x69\xd2\xe2\x4b\xcb\x4d\x72\xe1\xb1\x09\x1e\x9f\xfc\xdf\x3b\x7d\x6c\x81\xdf\xbf\xd5\x82\x5b\x11\x4d\x6f\x18\xeb\xbc\x00\x8c\x8e\xde\x96\xfc\x2c\x7a\x18\xf6\xd2\x8f\xd3\x9e\xaa\x98\xbd\xe0\x12\x15\x60\x05\xc0\x4f\x56\x00\xf0\x2d\xc8\xdb\x48\x5a\x54\x71\x9b\xc6\xbf\xda\x59\x35\xa1\xf9\xc6\xaa\x29\xce\x0e\xd1\xb8\xa1\xe3\xe3\x92\xe0\xbf\x69\x49\x70\xdf\x2d\xc8\xdb\xe8\xf0\x71\xc9\x5d\x1a\x9f\x80\x2f\xa2\x00\xfc\x12\x15\xd7\xa2\x17\xc4\x8a\xbd\x17\x5c\xa2\x82\x02\x89\x3e\x4d\xd0\xb8\x60\xdc\xa2\x48\x4d\x0a\x5c\x23\xd3\xb9\x0b\xf3\x13\xba\x4c\x2f\x81\xf8\x22\xbd\x14\x72\xd4\x4b\x70\xbf\x48\x2f\xf0\x80\x22\x38\xd1\x80\x32\x05\x8e\xf0\x16\xa7\x90\xa8\xf6\x1d\x99\x9f\x68\xa0\x6a\x03\x0b\x5f\xa3\x16\x58\xa0\x6a\x03\x09\x5f\xa3\x76\x4d\x42\x4a\x8d\xc8\x29\x5c\x4e\xdc\x86\x34\xe9\x78\x74\xff\x0b\xab\xae\x55\x41\x8e\x75\x45\x47\x78\x9e\xae\x35\xdc\xa4\x8b\xa1\xdd\x7f\x9e\xb2\x08\x32\xcf\xe3\xb0\xd9\x51\xbc\x4d\x03\x5a\x96\x84\x89\xb8\x28\x20\x50\x73\x8d\xb0\xcf\x2f\xd0\x18\x01\xe7\x1a\x61\x8b\x5f\xa0\x31\x47\x9d\xe7\xea\x45\x67\x7e\x0e\xb5\xab\xd3\x2a\xcb\xc1\xa7\xc9\xc8\x33\xfa\x37\x5b\x08\x71\x04\xb2\xc0\xce\x7f\x04\xc8\x15\x6f\xf8\x98\x4c\xb8\x5c\x2d\x87\x0e\xd3\xed\x4c\xdb\xa1\x0e\x44\x82\x54\x66\x85\xf2\x60\x03\xe7\x31\x3d\x07\x49\x05\xb3\xa2\x10\x57\x37\xd3\x5a\xb6\x00\x41\xc2\xb4\x2c\x12\xc6\xb5\xdf\x28\xf5\x30\x70\xfd\x80\x4e\xe1\x3b\x10\xdd\x90\xa2\xd4\x1d\x83\x6f\x94\xea\x05\x1f\xa1\x3c\xf0\x45\xae\x2f\x0d\xdc\x97\x2f\x0b\x60\xa8\x2b\x8d\x06\x2e\xfb\x58\x07\x6d\x68\x99\x91\x11\x10\x9c\x71\xdf\xfa\x2a\x1d\x74\x43\x85\x19\xd4\x43\x23\x5b\x21\x2f\x0f\x9c\x6c\x10\xc6\xf0\x83\xc0\xeb\xba\x3d\xc1\xed\x23\x37\x47\x62\x17\xd7\x62\xb4\x3f\x64\x52\x2d\xee\x71\xb3\x64\x62\x3c\x4a\xbd\x89\xb1\xba\x3d\x6f\x62\xa7\x86\x81\x8f\x7b\xac\x1d\xd7\xf7\x1b\x5a\x1a\x93\xd3\x2a\x4c\x9f\x5d\x46\x47\xf6\x2b\xed\xb6\xfd\x93\xab\xdb\x3c\x9d\xb5\xcc\xef\xfa\x9c\xad\xe7\x70\xe1\x93\xc1\x63\xc3\xe5\x32\xc5\x97\x1b\xfe\x20\x9e\x70\x53\x9a\x6b\x71\xcf\xe7\xde\x22\xcf\x71\x08\x7a\xa5\x2f\x30\x62\x39\x3b\x80\x69\x97\xce\x33\x43\xb2\x85\x1f\x79\x3f\x53\x46\x3b\x45\x81\x97\x76\x26\x78\x8a\xf3\xe5\x12\x55\x8f\x42\x27\xe7\x5d\xee\x06\xa7\xc8\xce\x70\x39\x3e\x76\x70\x42\xd1\x40\xc2\x57\x23\xe2\x4e\x6e\xd3\xcf\x50\xde\x4d\xf3\xad\xf8\x32\x0b\x63\x33\xe9\xcf\x72\x90\x44\x36\x88\x41\xe9\xa7\xc2\xe0\xd0\xb1\x1a\x6f\x5d\xc0\x8e\xbe\xe4\xff\x5e\xf3\x4e\xdc\x08\x2d\xd5\xfe\xdc\xc6\xc5\x4a\xd9\xc3\x88\x57\x95\xf3\x51\x41\xb9\xe7\xda\xca\x7b\xde\x39\xbf\x0e\xd7\x11\xc6\x8e\x82\xef\x21\x0f\xb4\x31\x21\x78\x2b\xb9\xec\x4b\x72\x63\xb9\x15\x34\xa2\xb3\x1b\x52\xed\x7e\xe4\x67\x7e\x58\x27\x92\x0b\xb6\xda\x33\x11\xaf\x29\x9e\x09\x68\x9c\xd9\x4c\x7c\xed\x0f\x36\x4f\xca\x48\xab\xf4\x13\x4d\x0f\x50\xe6\x24\xc9\x41\xda\x8f\xba\xcf\x24\x37\x5a\x59\xd5\x29\x22\xd6\x86\xdf\x68\xf9\xc8\xad\xf8\x89\x46\x8c\xeb\x98\xef\x7a\xd9\x65\xf2\x74\xed\x37\x47\xf5\xe7\xb5\x98\x7a\xf5\xe4\x60\x82\xff\xe6\x6f\x01\xdd\xac\x5d\x32\xbd\xcd\x6e\x5d\xe8\xfe\x9e\xdd\xde\xe3\x7b\x41\xf6\x5a\x00\x17\xf1\x2c\xd4\xf0\xce\x15\xef\xc6\x07\x69\xdf\x68\x3e\x76\x24\x93\x77\x6a\xb4\x72\x9c\xd5\x6c\x82\xf9\x24\x17\x09\x72\x74\xae\xcf\xc7\x78\x14\x22\xcc\xd5\x8c\x45\x0b\xb6\x90\x39\x93\xec\x4c\x10\xab\x61\x52\xa3\xa0\x89\x3d\x4f\x40\x59\x8e\x3b\xe9\x8e\x6a\xbc\x97\x87\x25\x78\x4e\xb8\xe7\x52\xf0\x60\x3f\xad\x19\x5e\x0a\xdd\x52\x21\x5a\x09\xe2\x95\x5d\xb3\xb1\x6a\x78\x9b\x49\x57\xa1\xfb\xad\x22\x72\xf5\x72\x42\xb2\x54\x0d\x73\xfe\x86\x90\x61\xce\x19\xc3\x6e\xbd\x93\x87\x11\x52\x53\x1e\xbe\x95\xbe\x1c\x7a\xee\x04\x35\x2a\x0a\x64\xdf\xcb\x51\x9a\x23\x3e\x7f\x4e\xb8\x01\x93\xae\x46\x6c\xfc\x2f\x79\x6f\x49\x64\x84\xb5\xea\xa9\xa5\x98\x83\x68\x38\x96\x03\x8a\x6e\xe4\xf2\x78\x76\x2a\x76\x89\xed\xe1\x09\xb3\x84\x00\x3d\x6e\x7a\x1c\xeb\x7c\x7a\x55\x0b\x72\xe2\x30\x58\x35\x7e\x49\x5a\x93\x83\x8e\xa9\x05\x09\x8a\x1c\x2a\x2c\xe2\xf6\x7b\xa7\x74\x27\x6e\xc5\xdd\x2c\xfb\x95\x51\xb1\x5a\xc0\x46\xe1\x57\x9e\xb5\x51\xc5\xb5\x2f\xab\x43\xf3\xb9\x95\x22\x14\xec\xb8\x51\x3a\x78\xcf\xe6\x73\xc1\x87\x2b\xa8\x3d\xb8\xb7\x6a\xb4\x5c\x8e\xee\xbe\xa5\xb4\x2d\x61\x4c\xba\x3d\x4e\x37\x2a\xa3\x39\xf3\xcc\x55\x85\x55\x52\x9a\x9e\x87\xd6\xe4\xfd\x7f\x0a\xae\x55\x61\x8c\x81\xe4\x4f\x3c\xe7\x81\xbc\xa4\x58\xaf\xd6\xe6\x19\xa9\xe9\xfd\x65\x6d\xc6\xb9\x52\x7d\x95\xf1\x2a\xa5\x3b\x49\x14\xd5\x40\xaa\x95\xdc\xc5\x17\x7d\x4a\x28\x79\x21\xb8\x98\xce\xe2\x91\x5e\x35\x33\x3f\x18\x29\x09\x65\x8b\x0b\xf9\xee\xa4\xcd\x57\xc5\x4c\x70\x85\x4f\xb3\x4c\xfe\xbc\xe3\xfa\x54\x38\xd3\xf7\x0f\x62\x72\xe9\x69\xc4\x5b\xec\xae\x02\x59\xee\x24\x4f\x07\x74\x22\xa4\x99\x4b\xd7\x5b\x96\x5b\x39\xe0\x41\xf3\xb1\xea\x2f\x95\xe8\x5b\x77\x2f\x0b\x54\x37\xfd\x99\x0b\x05\x6a\xaa\x0b\x2d\xcc\x95\xd2\x3c\xa5\xae\x62\x66\xa0\xef\xdf\x00\x00\x00\xff\xff\xc5\x1a\x68\x59\x2b\x1d\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 7467, mode: os.FileMode(436), modTime: time.Unix(1525365705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(436), modTime: time.Unix(1524543030, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x23\xb9\x0d\xbe\xeb\x29\xa8\xda\x8b\xa6\xca\x4f\xa0\xe3\x8c\x27\x63\x27\xbb\x89\x63\xed\x9c\x5c\x3e\xd0\x2d\x58\x62\xdc\x4d\xf6\x92\x6c\xef\xaa\x52\x79\xf7\x14\x7f\x1b\x20\xd9\xb2\xe5\x9d\x54\xe5\x62\x37\xd1\x8d\x8f\x00\x08\x80\x00\x64\x3a\xde\x73\xcd\x7e\x15\x03\xac\xe2\xf3\x5f\x77\xff\xf8\xfb\x6a\x65\xba\x23\x0c\x9c\xfd\x7b\xc5\xd8\x6f\x13\xe8\xd3\x96\xfd\xd3\xfd\x5b\x31\x36\x4c\x96\x5b\xa1\xe4\x96\xfd\x12\x9f\x56\xff\x59\xad\x7e\x8a\xef\xed\x69\x84\xf0\xe8\x79\x7f\x62\xdf\x0d\xe8\x15\x63\x93\x01\xbd\x11\xfb\x2d\xbb\xbd\xfe\xb4\x4d\xc4\xf0\xd6\xc4\xd7\x66\xf3\x69\xcb\x1e\x1c\xe5\x71\xed\x5f\xde\x69\xf5\x2f\xe8\xec\x8a\xb1\x31\x3c\x45\x80\x2b\x66\xfa\xe9\xb0\x65\x3b\xab\x85\x3c\x5c\x31\xc9\x07\x98\x57\x20\x5f\x85\x56\x72\x00\x69\x6f\xaf\x13\xf9\xd3\x16\xa1\x65\x64\x33\x43\x9b\x4d\x7c\xd8\x01\xd7\xdd\x31\x7f\x1e\x96\xb7\x72\x9c\xec\x15\x1b\xb9\xe6\x83\xd9\xb2\x3b\x7e\x10\x92\x5b\xa5\x3d\x7d\xc6\xfe\x59\x18\x1b\x44\xff\x0b\x70\x3b\x69\x70\x1b\x3c\xc7\xc7\xcd\x22\x77\xfc\x78\xe6\xde\x81\x7e\x15\x9d\xe7\x36\xf1\x71\x99\x3b\x7e\x5c\x71\x33\x33\x42\x87\x20\x76\x6e\xe9\x4d\xbc\x9b\x09\xd1\xd2\xf7\xd0\x03\x37\x7e\x43\x1d\x1f\x97\x37\x8c\x1f\xcf\x1b\x7e\x9d\x2d\xee\x10\xd0\x01\xcc\x56\x45\x07\xe6\x44\x40\x2c\x8f\x15\x08\x7b\xe5\x5a\xf0\xa7\x3e\x1a\xa0\xd3\x60\xcf\xea\xef\x3e\x40\xea\x0b\x79\xe8\x21\x92\x33\x80\x77\x9d\xbc\x7f\x7e\x99\x5d\xe1\xeb\x1f\x16\xa4\x11\x4a\x7a\xb3\x39\x2d\x12\xc1\x6c\x96\x3c\xea\x21\x33\x51\x87\xcd\x64\xe4\x5f\x33\xcd\x1f\x41\xf9\x25\x3d\x07\xb4\xf9\x7c\x22\x05\xc2\x7d\x41\x4d\x22\x80\x1e\x84\xc9\x9b\xcf\x2b\xc7\xe4\x42\x7b\x1d\xa2\x35\xc7\xae\x0f\xd8\xb4\x8a\x31\xfb\x45\x03\xb7\x90\x44\x5f\x31\xd6\x79\x42\x14\x3a\x9d\x69\x76\xfb\x22\x0a\x42\x60\x8f\x7b\x0a\x31\x79\xc2\x25\x10\x51\x8a\xa8\x7e\x96\x22\x2a\xbe\x89\xf4\xec\x8f\x85\x7b\x06\x5f\xb0\x6a\x44\x00\xc6\xaa\x31\xb1\x87\x54\xb2\x2e\x18\xe2\x9e\x31\x64\xf2\x9e\x31\x62\x36\x91\x9e\x83\xae\x88\x41\xac\xf9\x4c\x0a\x9a\x5f\x02\x71\x0d\x3d\x10\x29\xf6\x9e\x70\x09\x04\x55\x24\x39\x35\xd1\xc6\xc5\xff\x06\x25\x87\x0c\xe0\x16\x05\xe6\x2e\xf0\x67\xed\x0a\x5c\xa2\xe2\x87\x70\xa9\xca\x09\x97\xe8\xfd\x21\xdc\x68\x07\x14\xc2\xd9\x0c\x28\xe3\xe0\x10\xdf\xe2\x54\x94\x60\xbf\x12\xfe\x6c\x06\x0a\x1b\xac\xf0\x67\x60\xa3\x15\x28\x6c\x30\xc2\x9f\x81\xad\x8d\x90\x53\x2c\x72\x0a\x9f\x26\x43\xb6\x4c\x19\x92\xe6\xd8\x05\xcd\x31\x56\x72\x84\xf7\x61\xd5\xea\x66\x2c\x86\x4e\xff\x7d\x60\x49\xc9\x32\x91\xc7\xc3\x4e\xe4\x4d\xfe\x60\xcb\x32\x31\x1b\x2e\x11\x88\xaa\x25\x62\x3c\xe7\x0f\x20\x26\x85\x4b\xc4\x78\xc4\x1f\x40\x2c\xb5\x2e\x93\xf5\x8c\x59\x5e\x44\xdb\xea\xba\x2a\x92\xf0\x79\x63\x94\x29\xfd\x87\x6d\x84\x6c\x14\x69\xc1\x3a\xff\x23\x85\x5c\xe5\x89\xef\xc9\xac\x97\x2b\x44\xd1\x6d\xba\x99\xe8\x3a\x14\xb1\x88\x90\x36\x7b\x08\xf5\xc1\x3a\x5e\xc8\xf4\x22\x24\xc5\x51\x65\xc2\x46\xe1\x84\x69\xb3\x22\x88\x98\xb7\x45\xc4\xb4\xf7\x67\xa5\x5e\x06\xae\x5f\xd0\x35\xfc\x14\x49\x77\xa4\xa2\x76\xd7\xe0\x67\xa5\x7a\xe0\x32\x70\x7e\x03\xcb\xbe\x09\xcb\xbe\xa8\x61\x10\x5e\xd2\x03\xd8\x6f\xc2\xc6\x75\x92\xce\x95\x43\xb7\xd7\xeb\xaa\xe8\xf6\x34\x09\xbf\x67\x54\x8c\xef\xeb\x8f\x5c\xc6\xad\x84\xb4\xa0\x9f\x79\x07\x33\xcd\x97\x21\x9d\x9a\x5c\x7a\xbb\x95\x36\xb2\xa0\xba\x33\x54\x2d\x88\xc0\xc4\x30\xf6\xe0\x0d\x72\x06\xc6\xd5\xa6\x56\x0b\x30\x73\xfd\xf4\x18\xc1\xe7\x2a\x32\x60\xcf\xeb\xcb\xa1\x03\xef\x8c\x9c\xeb\xf3\x04\x9d\x09\x1f\xc1\xf6\xcc\x09\x1c\xb5\x0e\x01\x1c\x11\x2e\x07\x8f\xcc\x09\x1c\x75\x35\x01\x1c\x11\x2e\x07\x8f\xcc\x09\xdc\xb7\x80\x1e\xd5\x3d\x79\xce\xe8\x8b\x8e\x6b\xe0\xa2\x4f\x95\xf6\x9a\x16\xb2\x45\x84\x85\x6c\xb7\xdf\xfa\x1e\x96\x5a\x85\x58\xa4\xd8\xa1\x2c\x40\x1d\x6d\x00\x63\xf8\x01\xf0\xbe\x2e\xe8\xf1\xfa\xc8\xcd\x91\xc8\xc5\x35\x48\x7b\x53\x50\x35\x3c\xe3\x65\x4b\xc4\x54\xab\x61\x8f\x78\x87\x88\x9d\x1a\x06\x2e\xf7\x18\x1d\x77\xbf\x6b\xda\xee\x91\x72\x68\x5d\x9d\xcd\xa8\xb4\x4b\x2a\x0f\xae\x2d\x78\x5c\xd3\xce\x8d\x14\x11\xee\x9d\x13\xf4\x8c\x52\x2e\x4b\x8f\xbd\x3a\xb9\xcf\x77\x56\x73\x0b\x87\x53\x68\x38\x56\x8c\xf5\xe2\x15\x24\x18\x73\xa7\xd5\x13\x64\xaa\x06\xbe\x17\x35\x79\xd4\xe0\xca\xf6\x1b\xa5\x5e\xd2\x7e\xc1\x64\xb8\xaa\xf1\x66\xc3\x2d\x23\x35\x5d\x69\x93\x17\x38\xe1\xa5\x30\xd7\xf0\xcc\xa7\xde\x92\xac\xd7\xa9\x5e\xe9\xb3\x2a\xa6\x59\x41\xed\xcd\xad\xee\x15\x27\x92\x42\xbe\x42\x9e\x57\xde\x4f\xf4\x0c\x3b\x45\xad\xdd\xf2\x85\xe0\x9b\x2e\x7a\x5a\xe7\xf3\x0a\x3a\x87\x4b\xca\x47\xe7\x4f\xb8\x52\x57\x98\x5d\x2c\xba\x68\xee\xc6\x03\x06\xe2\xc0\xce\xcd\xde\x38\x89\x6e\x9c\xee\xe1\xb7\x09\x8c\x2d\xa8\x3f\x8b\x41\x10\xda\x00\x83\xd2\xa7\xc6\xc7\xe1\x45\xf5\xbd\x75\x29\x42\xfa\x36\xf6\x9b\xe6\x1d\xdc\x81\x16\x6a\xdf\x88\x8c\x1c\x15\x4b\xb1\x99\x1a\x42\x7c\xc9\xbc\x23\x36\xe9\x79\x70\x6d\xc5\x33\xf7\xce\x12\xda\x6e\xc6\x8e\xc0\xf7\x31\x1b\xe5\xa1\x8f\x97\x9c\x8b\xbe\x45\x37\x96\x5b\xa0\x79\xa5\x98\x04\x2c\xcd\x01\x3c\xe7\x2f\x75\x3a\xbb\xe8\xf8\x8d\xe5\x9a\x10\x9e\x85\x14\xe6\x48\x3d\xe4\x5e\xf5\xfd\x13\xef\x5e\xaa\xfb\x3d\x56\x1c\xf8\xde\x78\xc3\x35\xf0\x50\x2f\x68\x3b\x2a\x23\xac\xd2\x27\x7a\x88\xb1\x0f\xc8\x94\x83\xb0\xdf\x75\x5f\x50\xee\xb4\xb2\xaa\x53\x84\xac\x0d\xbf\xd3\xe2\x95\x5b\xf8\x1b\x8d\x3f\xf7\x62\x7a\xea\x45\x57\xd0\xf3\xe8\xce\x1c\xd5\xef\xd7\x3e\xbf\x39\xed\xa3\xa6\x67\xe6\x81\xc5\x44\xaf\x9b\xb4\xbb\x26\xee\x8b\x89\xc5\x47\xa6\x6d\x17\xcf\x03\x2f\x9c\x9f\x01\xf6\xad\xe6\x94\xea\x20\xec\x67\xcd\x65\x47\x6e\xbc\x4e\x49\x2b\xe4\xa4\x26\x13\xcc\x44\x12\x2b\x90\x1a\xb6\x2e\x54\x53\x4d\x8a\x6c\xbb\x14\x9a\xc5\x98\x2e\x5c\x03\x99\xf6\x46\xea\x51\xc3\xa8\xa4\x77\x7d\x94\x35\xca\x6b\x8d\x77\x47\x70\xd9\x9b\x88\x52\xe4\xeb\xb3\x61\xa4\xe4\xb3\x38\xcc\x41\xdf\xd2\xa2\xea\x47\x70\x94\x2c\xa9\xd3\x4a\x39\xad\x3e\x71\x21\xf9\x54\x72\x4d\xc6\xaa\xe1\x4b\x41\xad\x52\xce\x0f\xc8\x24\x38\xa7\xa2\xfe\x11\x67\xd7\x25\x9d\xcb\x19\x5f\xa1\x73\x69\x31\x1c\x20\x3b\x71\x90\x31\xa5\x96\xc9\x63\xe1\x5d\xa9\x7a\xe9\x1a\x4b\xa6\x68\x18\x9b\xa6\x4e\xc6\x9a\xc9\xf3\x8c\x67\x30\xe1\x82\x73\xe5\xff\x92\x11\x69\xb6\x4f\x2c\x8c\x16\x73\x5d\x33\x29\xd2\xb8\x6d\x47\x1e\x3d\xdb\x79\xde\x7d\x2e\xc8\x89\xec\xe1\x17\x93\x96\x06\xe8\xb7\x14\xaf\x47\x9d\xe0\x97\x92\x01\x6e\x19\x9d\x97\x10\x70\x92\xd0\x3c\xf0\xe8\x4f\xe8\xd6\x4f\xbf\xfa\x50\x27\xb8\x05\x71\x44\x0c\x81\x27\xc8\xb5\x85\xd1\xb5\x3d\x9b\x03\x45\x24\x25\x36\x8d\xe7\x2f\x13\xa5\x3b\xb8\x87\xa7\x49\xf4\x95\x6a\xa9\xa2\xc2\x42\xe1\xe1\x6e\x2d\x54\x73\xef\xcb\xba\x83\x92\xb7\xd5\x1a\x44\x21\xee\x94\x0e\xfe\xb7\x7e\x6c\x04\xc6\xa2\xca\xad\x96\xe0\xba\xa2\x05\xe0\xba\x4d\xb8\x01\xde\xdb\xa3\x5f\xf8\x4f\x1a\x2d\x43\xe3\x93\xc5\xf6\xe1\x8b\x92\x96\x0b\x09\xda\x2b\xd7\x32\x75\xd6\x32\x38\x91\xd2\xc8\x1e\x39\xc4\xd2\x3c\x22\x70\x2e\x68\xe3\x01\x4a\x33\x0d\xfc\x8f\xdd\xa4\xa3\x67\x46\xc2\x77\xc9\x5f\xb9\xe8\xc3\x85\x43\xa1\x4b\xdd\x2a\x4c\x5f\x0a\xdb\x23\xad\x71\x0b\x17\xc0\x7a\xf8\xbe\xe2\x08\x03\x06\x18\xb9\xc5\xf9\x40\x48\x61\x05\xef\xaf\xa1\xe7\xa7\x1d\x74\x4a\xee\x4d\x62\x1d\x7d\x39\x5d\x10\xad\x18\x40\x4d\xb6\xa0\x9a\xa9\xeb\xc0\x98\x5f\x8f\x1a\xcc\x51\x39\x6f\x0f\xf4\x67\x2e\xfa\x49\x43\x45\x3f\x5a\x3b\xde\x00\xdf\x83\x76\x2e\x87\xf4\xbe\xc9\x2f\x92\xf3\xb5\xac\x53\x7c\xe5\xed\x54\xba\x7d\xd1\x61\x55\x6d\x4c\xcb\x1d\xf2\xcf\x0a\x75\xf4\xfd\xff\x74\x35\x55\xf7\x89\x15\x29\x7f\x1a\x78\x5b\x91\x8f\x34\xca\x8b\x0d\x70\x61\xd4\x3c\xb7\xaf\xc5\x78\xab\x1f\xae\xae\xe2\x85\xfe\x98\x5c\x57\x8b\x69\x69\xa9\xaf\xa5\xc5\x25\xb5\x24\x19\x29\x5f\x6c\xc7\x66\xe9\xb9\x28\x5f\xbb\x06\x2d\x0b\x38\x6a\x93\x66\x5d\xd9\xba\x84\xcf\x6a\x72\xd5\xbc\x59\xae\x70\xd5\x55\xd0\xdf\x57\x56\x2e\xa8\x9a\x07\x81\xf3\x18\x9d\x88\xdc\x9a\xb0\x7b\x89\x5d\xab\x5d\xdc\xc5\x64\x40\x48\x19\x63\xf2\xb8\x74\xbf\x79\xbb\xca\x1f\x0f\x9a\xcb\xca\x7d\xea\xe1\x7c\xd3\xfe\xad\x98\x5c\x74\x85\x77\x6e\x14\x4c\xb3\xb8\xd1\x6c\xb9\x56\xd9\x40\x4d\xb7\x20\x66\x30\xdf\x7f\x03\x00\x00\xff\xff\x9d\xe1\x8e\x85\x2f\x24\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9263, mode: os.FileMode(420), modTime: time.Unix(1541693891, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


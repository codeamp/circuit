// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcb\x72\xdb\xbc\x15\xde\xeb\x29\xa0\xc9\x46\x99\xf1\x13\x68\xd7\x58\xae\xed\x36\x69\x55\x2b\x59\x74\x32\x5e\xc0\xd4\x91\x84\x9a\x04\x18\x00\x54\xac\xe9\xf4\xdd\x3b\xb8\xf2\xe0\x42\xd9\x72\xf2\xcf\xfc\x1b\x5b\xf8\x48\x7c\xc0\x39\x38\x57\x50\x35\xb4\xa5\x92\x7c\x65\x1d\xcc\xfc\xef\xbf\x6d\xfe\xf9\x8f\xd9\x4c\x35\x07\xe8\x28\xf9\xef\x8c\x90\x1f\x03\xc8\xd3\x92\xfc\xcb\xfc\x9b\x11\xd2\x0d\x9a\x6a\x26\xf8\x92\x7c\xf1\xbf\x66\xff\x9b\xcd\x3e\xf8\xe7\xfa\xd4\x83\xfb\x69\xe7\x7e\x20\xdf\x14\xc8\x19\x21\x83\x02\xb9\x60\xdb\x25\xb9\x5f\x7d\x5c\x06\xd0\x3d\x55\xfe\xb1\x5a\x7c\x5c\x92\xef\x06\x79\x9c\xdb\x87\x6b\x29\xfe\x03\x8d\x9e\x11\xd2\xbb\x5f\x9e\xe0\x8a\xa8\x76\xd8\x2f\xc9\x46\x4b\xc6\xf7\x57\x84\xd3\x0e\xc6\x11\xf0\x23\x93\x82\x77\xc0\xf5\xfd\x2a\xc0\x1f\x97\x88\x2d\x32\xab\x91\x5a\x2d\xfc\x8f\x0d\x50\xd9\x1c\xe2\xeb\x6e\x78\xcf\xfb\x41\x5f\x91\x9e\x4a\xda\xa9\x25\x59\xd3\x3d\xe3\x54\x0b\x69\xf1\x91\xfb\x33\x53\xda\x6d\xfd\xaf\x40\xf5\x20\xc1\x2c\xb0\xf3\x3f\x17\x93\xb3\xfd\xcb\xe3\xec\x0d\xc8\x23\x6b\xec\x6c\xe5\x7f\x4e\xcf\xf6\x2f\x17\xb3\x89\xea\xa1\x41\x14\x1b\x33\xb4\x2a\xde\x8c\x80\xd7\xf4\x03\xb4\x40\x95\x5d\x50\xfa\x9f\xd3\x0b\xfa\x97\xc7\x05\x6f\x46\x8d\x1b\x06\x74\x00\xa3\x56\xd1\x81\x99\x2d\xa0\x29\x8f\x05\x09\x39\x52\xc9\xe8\x53\xeb\x15\xd0\x48\xd0\x67\xe5\x37\x2f\x20\xf1\x19\xdf\xb7\xe0\xe1\x48\x60\x4d\x27\xae\x1f\x1f\x46\x53\xb8\x79\xd1\xc0\x15\x13\xdc\xaa\xcd\x48\x11\x00\xb5\x98\xb2\xa8\xef\x71\x52\x6a\xb0\x11\x46\xf6\x35\x62\xf6\x08\xf2\x37\xd3\x73\x40\x8b\x8f\x27\x92\x31\x3c\x64\x68\xd8\x02\xc8\x8e\xa9\xb8\xf8\x38\x32\x93\x8c\x6b\xcf\x9d\xb7\x46\xdf\xb5\x0e\x1b\x46\xde\x67\xaf\x25\x50\x0d\x61\xeb\x33\x42\x1a\x0b\xf8\x4d\x87\x33\x8d\x66\x9f\x79\x81\x73\xec\x7e\x9b\x52\x0c\x16\xb8\x84\xc2\xef\xc2\x8b\x1f\x77\xe1\x05\x5f\x78\x3c\xda\x63\x66\x9e\xce\x16\xb4\xe8\x11\x81\xd2\xa2\x0f\xd3\x5d\x28\x99\x67\x13\xfc\x9a\xde\x65\xe2\x9a\xde\x63\x16\x1e\x8f\x4e\x97\xf9\x20\x96\x7c\x84\x9c\xe4\x97\x50\xac\xa0\x85\x64\x17\x5b\x0b\x5c\x42\x91\x0a\x12\x8c\x3a\x91\xc6\xf8\xff\x02\x05\x87\x48\x60\x06\x19\xe7\xc6\xcd\x8f\xd2\x65\xbc\x89\x88\xef\xe2\x4d\x45\x0e\xbc\x89\xdc\xef\xe2\xf5\x7a\x40\x2e\x1c\xd5\x80\x22\x0e\x76\xf1\x25\x0e\x45\x81\xf6\x26\x99\x1f\xd5\x90\xd2\x3a\x2d\xfc\x0a\xad\xd7\x42\x4a\xeb\x94\xf0\x2b\xb4\xa5\x12\x62\x88\x45\x46\x61\xc3\xa4\x8b\x96\x21\x42\xa6\x31\x76\x42\x72\xcc\x15\x0c\xe1\x6d\x5c\xa5\xb8\x91\x8b\xa0\xd3\x7f\x1b\xd9\x7d\xd7\x0b\xa9\x49\x47\xf9\xa9\xca\xa8\x08\xd5\x44\x70\xeb\x1f\xcc\xbe\xbb\xf1\xa9\xc5\xa7\x98\xa5\xa7\xf0\x70\x58\xe2\xbb\x1b\xcf\x7d\x80\x0d\xba\xcc\xf3\x85\xb7\xa9\x00\x2f\xe2\x0b\x4b\x12\xc1\x78\x3e\x01\x48\x34\x9a\x33\x7a\x73\x7a\x07\x63\xd0\x6b\xce\xe8\x2d\xe9\x1d\x8c\xb9\xd4\x79\x4e\x18\x39\xf3\x7c\xb7\x2c\xb2\x62\x16\xeb\xcf\x2b\x23\xcf\x1c\xbf\x6d\x21\xa4\x23\x8f\x39\xed\xfc\x41\x02\x99\x02\x17\xa7\xe3\x28\x97\xa9\x77\x51\xd2\x5e\x0c\xe9\xd8\xd5\xca\x08\x18\xcd\xd2\x96\x21\xc1\x2c\xd3\x7c\x9b\xd4\x60\x85\x0a\x2b\xf5\x19\xc6\x46\x41\x10\x18\x97\x45\x60\x58\xfb\x93\x10\xcf\x1d\x95\xcf\x28\xdb\x3f\x79\x68\x9d\x14\xee\x26\xdb\x7e\x12\xa2\x05\xca\xdd\xcc\x5b\xd0\xe4\x96\x69\x72\x2d\xba\x8e\xd9\x9d\xee\x41\xdf\x32\xed\xc7\x61\x77\xa6\xea\xba\x5f\xcd\x8b\xda\xde\x62\x1c\x7e\x46\x56\xcc\x6f\xcb\x9c\x58\x2d\xce\x18\xd7\x20\x77\xb4\x81\x11\xb3\xd5\x4e\x23\x06\x13\x45\xef\xb9\xf6\x53\x50\x79\xeb\x8a\x23\x04\x98\xc0\xd1\x82\x55\xc8\x19\x1a\x53\x02\x6b\xc9\x40\x8d\x65\xda\xa3\x27\x1f\x8b\x55\xc7\x3d\x8e\x2f\xa7\x76\x73\x47\xe6\xd8\x06\x04\xea\x08\xbc\x87\xdb\x4e\x0e\xe4\xa8\x43\x71\xe4\x08\xb8\x9c\xdc\x4f\x0e\xe4\xa8\x79\x72\xe4\x08\xb8\x9c\xdc\x4f\x0e\xe4\xb6\xd3\xb4\xac\xe6\x97\x9d\xe9\x6d\xd1\xcc\xea\x28\x6b\x43\x41\x3f\x4f\xeb\xe5\xcc\xc3\x5c\xb4\xdb\x2e\x6d\xab\x9c\x6a\x25\xd1\x48\xb6\x42\x5e\xe7\x1a\xac\x03\xa5\xe8\x1e\xf0\xba\xc6\xe9\xf1\xf8\x40\xd5\x21\xd9\x17\x95\xc0\xf5\x5d\x86\x4a\xd8\xe1\x61\x6d\x8b\xa1\x24\xc4\x16\xf1\x86\x2d\x36\xa2\xeb\x28\xdf\x62\x76\xdc\x64\xcf\xd3\xae\x32\xa9\xba\xe6\xc5\xd9\x98\x9c\x6a\xd4\x69\xba\x8f\xc7\x79\xda\x20\x26\xb5\x8a\x79\x66\x36\x7a\x46\x28\x13\xa5\xfb\x56\x9c\xcc\xeb\x1b\x2d\xa9\x86\xfd\xc9\xf5\x35\x33\x42\x5a\x76\x04\x0e\x4a\xad\xa5\x78\x82\x88\x4a\xa0\x5b\x56\xc2\xbd\x04\xd3\x1d\xdc\x09\xf1\x1c\xd6\x73\x2a\xc3\xc5\x93\x55\x1b\xee\x4c\x53\xd5\xe5\x3a\x79\x86\x13\x1e\x32\xb5\x82\x1d\x1d\x5a\x9d\x44\xbd\x46\xb4\x42\x9e\x15\x31\x5c\x49\x94\xd6\x5c\x6b\x92\x71\x20\xc9\xf6\x97\xed\xe7\x48\xdb\x21\x3d\xc3\x46\xa4\xda\xae\xd9\x82\xb3\x4d\xe3\x3d\xb5\xf3\x39\x82\x8c\xee\x12\xe2\xd1\xf9\x13\x2e\xc4\x65\x6a\xe3\x6b\xbb\x34\x76\xe3\x7b\x8c\xc4\x80\x8d\x99\xbd\x72\x12\x4d\x3f\x3c\xc0\x8f\x01\x94\xce\xd0\xcf\xac\x63\x09\xd6\x41\x27\xe4\xa9\xf2\xb2\x7b\x50\xbc\xaf\x4d\x88\xe0\xb6\x5b\xbe\x95\xb4\x81\x35\x48\x26\xb6\x15\xcf\x88\x5e\x31\x21\x74\x69\x1b\x38\xfd\x24\xa9\xe7\x0d\x1e\x9b\x9e\x12\x95\x9a\xed\xa8\x35\x21\xd7\xf3\x13\x72\x00\xba\xf5\x31\x2a\xde\x38\x59\x79\x28\x6b\x6b\xb8\xd2\x54\x43\x1a\x6d\xb2\x6b\x88\xa9\x4b\x08\x3b\xf3\x4b\x19\xe4\x2e\x32\x0a\xa5\xa9\x4c\x80\x1d\xe3\x4c\x1d\x52\x15\x3e\x88\xb6\x7d\xa2\xcd\x73\x91\xf5\x7d\x1d\x82\xb3\xc9\x2b\x06\x83\x6f\x14\x9d\xb4\xbd\x50\x4c\x0b\x79\x4a\x8f\xd6\x37\x21\x11\xd9\x33\xfd\x4d\xb6\x19\xb2\x96\x42\x8b\x46\x24\xb0\x54\x74\x2d\xd9\x91\x6a\xf8\x7b\xea\x95\xe6\xc1\xf0\xd4\xb2\x26\xc3\xe3\xbd\xa1\x3a\x88\x9f\x2b\x1b\xf5\x8c\xf4\x5e\xd2\x33\x97\x91\xd9\x75\x62\x33\x48\x93\x3c\x1e\xb2\xeb\x92\xf7\x5c\xf5\xbd\x72\x19\x79\x45\x94\xbd\x2d\x45\x82\x94\xf7\x93\xe7\xef\xf3\xa6\x28\xf0\x15\x1f\x60\x0b\xac\x5e\xa4\xed\x99\xfe\x24\x29\x6f\x92\x6c\xd9\x08\xae\x19\x1f\xc4\xa0\x9c\x32\x93\xa0\x0c\x49\xfd\x5b\x16\xb9\xa1\x9e\x45\x27\x30\x95\x72\xb3\x9b\x44\x97\x42\x22\xf6\x4a\xd8\x12\x5d\x2f\xb8\x75\x10\x14\x71\xf2\x94\x48\x9b\x03\x98\xc8\x9f\x6c\x25\x8b\xf5\x67\x9d\x4d\xf0\x1d\xdb\x8f\xa1\xa1\x26\x45\xd1\xcb\x60\x5f\x9a\x12\xa7\x16\x98\x6a\x3d\xe6\x44\x88\x2a\xf6\x35\x28\x2d\xba\xeb\x0c\x2d\x02\xd3\x6f\x88\x37\x38\xf2\xa2\xde\x13\xc7\xe0\x29\x99\xf3\x6b\xc8\x4c\xe6\x5c\x63\xd8\x8d\x36\x6c\xcf\x7d\xe0\xcd\x43\xcc\xc4\xb3\x5c\xf4\xdc\x34\xa6\x54\x51\x51\x76\x1a\x60\x09\xa9\x86\xd8\x33\x96\x41\x98\xf1\xd7\x99\xfd\x9b\xdc\xe2\x46\xfd\xf8\xa2\x6a\x32\x22\x56\x43\x67\xea\xb7\x75\xcf\x4b\xcf\x76\xbc\x92\x3f\xe7\xe4\xc9\xde\xdd\x47\x9d\x9a\x04\xe8\x73\x8f\x95\xa3\x4c\x03\x53\xc1\x00\xb7\x9b\xc6\x4a\x12\xf2\x24\xc6\x59\xe2\xde\x9e\xd0\xbd\xbd\xa0\x6b\x5d\x8d\x61\x06\x89\x21\x62\x0a\x7c\xc9\x5d\x6a\x18\x25\xf7\x51\x1d\xc8\x23\x53\xb0\xaa\x3c\x9b\x72\x84\x6c\xe0\x01\x9e\x06\xd6\x16\xa2\x85\x6a\x0c\x6f\x0a\xdf\x3f\x97\x9b\xaa\xae\xfd\x86\xce\xa2\xde\x3d\xf8\xb5\xd6\x42\x3a\x33\x9b\x3f\x56\xec\x7f\x52\xb2\x5a\xd7\xb0\x2a\x30\x47\x5c\x76\x12\x77\x40\x5b\x7d\xb0\x03\xfb\x4a\xa5\xab\xa8\xbc\x32\xd9\x61\x5c\x0b\xae\x29\xe3\x20\xad\x70\x35\x8d\x46\x29\x9d\xad\x08\x89\xf4\x11\x3d\x29\x5c\x59\xb8\x99\x13\xd2\x58\x82\x5c\x4d\x1d\x7d\xd9\x0c\xd2\x1b\xa0\x07\xbe\x71\x7a\xa4\xac\x75\x79\x25\xa5\xce\x65\x2b\x38\x6d\xb5\xac\x0f\x69\x19\x9c\x9d\x34\x96\xc3\xb6\x1e\x07\xe8\x30\x41\x4f\x35\x76\x7b\xc6\x99\x66\xb4\x5d\x41\x4b\x4f\x1b\x68\x04\xdf\xaa\x30\xb5\xb7\x15\x77\x06\x6a\xd6\x81\x18\x74\x86\xaa\xa1\x69\x40\xa9\xaf\x07\x09\xea\x20\x8c\x51\x3b\x7c\x47\x59\x3b\x48\x28\xf0\x83\xd6\xfd\x1d\xd0\x2d\x48\x63\x72\x48\xee\xbb\xf8\x20\x18\x5f\x4d\x3b\xd9\x5b\x56\x4f\xb9\x75\x67\x4d\x58\xd1\xe9\xd4\xcc\x21\x7e\xe0\x28\x9d\xec\xcf\xd4\xf8\x4c\xf6\x34\xb8\x6d\xc5\xe2\xe5\x9f\x2e\x5e\x17\xef\x3d\x1d\xf6\x64\xe7\x9c\xa9\x3a\x7e\x57\x28\xb7\xf1\x5a\x23\x5d\xe4\xe1\x89\xc6\x3a\xc9\x55\x93\xc1\x6a\xaa\x21\xae\xcb\xd0\x15\x41\xa4\xfc\x8c\x61\x25\xf2\x95\xc5\xbf\xff\xf2\xe5\xb3\x5b\xeb\xd5\x44\x61\x9a\x4a\x8c\x4c\xed\x01\x5e\x8a\x3d\xdc\xbc\x54\xf7\x70\x49\x3e\xaa\x54\xd3\xd9\x12\xf8\xfe\xfd\x62\xdb\xa9\xd6\xda\x93\x67\x52\x2f\xba\xf3\x8a\x35\xb5\x83\x6a\x21\x5d\xab\x3a\xce\x4a\x72\x55\x55\xdb\x15\x2e\x33\x33\xfc\x6d\x75\xf4\x39\xad\xa7\xdf\x1c\x92\x2d\xd7\x3e\x47\xd8\x1d\xe7\xc6\x92\xdf\xa6\xa6\x13\x7d\x18\xbd\x74\xbd\x71\xb9\xc2\x07\xf7\x92\xf2\xc2\x65\xca\x2f\x19\x55\xfd\xd7\xe2\xd0\xa4\x29\xbc\x71\x21\xa7\x9a\xc9\x85\x46\xcd\xd5\x7c\x22\x55\xdd\xc4\x36\x9d\xfa\xfe\x1f\x00\x00\xff\xff\x08\x89\xfa\x2a\xc3\x25\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9667, mode: os.FileMode(420), modTime: time.Unix(1548789367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


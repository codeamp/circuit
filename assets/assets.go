// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xe4\x26\x10\xbe\xeb\x29\x70\xed\x65\x5c\xe5\x27\xd0\x71\xd7\x4e\xe2\x24\x9b\x38\x9e\xf8\x94\xf2\x01\x6b\xf0\x98\x58\x12\xb3\x80\xa6\xe2\x4a\xe5\xdd\x53\x40\x83\xba\x5b\xd2\xfc\xec\xfa\xb0\x17\x8f\x68\xe0\xa3\xfb\xa3\xff\xb0\x6b\x64\x2b\xad\xf8\x53\x77\xaa\x82\xef\x9f\xd7\xbf\xff\x56\x55\xae\x79\x51\x9d\x14\xff\x56\x42\x7c\x19\x94\x7d\xab\xc5\x1f\xe1\xa7\x12\xa2\x1b\xbc\xf4\xda\xf4\xb5\xf8\x0c\x5f\xd5\x7f\x55\xf5\x01\xe6\xfd\xdb\x4e\xa5\xcf\xb8\xf7\x83\x78\x70\xca\x56\x42\x0c\x4e\xd9\x95\xde\xd4\xe2\xf6\xfa\xb2\xce\xc2\x34\xeb\x60\xda\xad\x2e\x6b\xf1\x57\x90\x3c\x5e\xc4\xc9\x3b\x6b\xfe\x56\x8d\xaf\x84\xd8\xa5\x2f\x00\xb8\x12\xae\x1d\xb6\xb5\x58\x7b\xab\xfb\xed\x95\xe8\x65\xa7\xc6\x91\xea\xf7\xda\x9a\xbe\x53\xbd\xbf\xbd\xce\xe2\xcb\x1a\xa1\x15\x64\x37\x42\xa7\xc3\x41\x0e\xe7\xff\xa0\xa4\x1f\xac\x0a\xab\x9e\xe1\x33\xae\x02\x39\xac\x5a\x2b\xbb\xd7\x4d\x5c\xe5\xe0\x33\xae\x02\x39\x5d\x25\xdc\x4e\x35\x68\xe9\x3a\x0c\xf1\xf2\x20\x80\x2d\xf7\xaa\x55\xd2\x45\x60\x0b\x9f\x71\x25\xc8\x61\xd5\xcd\x68\x6e\x58\x89\xac\x4f\xab\xd1\xfc\x74\x87\xd8\x4b\xab\xe5\x53\x0b\xda\x37\x56\xf9\xac\x4d\xf8\xce\x1b\xfe\xf1\xaa\x77\xda\xf4\x51\xfb\x70\x48\x16\x8c\xea\xdf\x60\x11\xdf\xe7\xf0\x1e\xb6\x9e\x1a\x8b\x96\x8d\x66\xdf\xd0\xad\xf7\x4c\xfa\x78\x91\x1c\xb0\xb8\x63\xf4\xc1\x3c\x02\x37\xfc\x64\x95\xf4\x2a\xdf\x76\x25\x44\x13\x05\x70\xe1\x2b\x90\x17\x2f\xb9\xed\x77\x83\x67\x4e\xf3\xb0\xdb\x50\x88\x21\x0a\xce\x81\x00\x2d\xc0\xae\xa2\x05\x58\xb4\x02\x79\x9d\xd9\xc8\x10\xf7\x65\x7d\x81\x00\xff\x29\x10\xe0\x3e\x2b\x90\xd7\xd9\xe1\x32\xc4\xba\xac\x2f\x86\x8c\xa2\x64\xc8\x39\x10\xd7\xaa\x55\x44\x8b\x4d\x14\x9c\x03\x41\x0d\xc9\xae\x45\xac\x09\xbe\xb4\x42\x91\x52\x00\xc2\x80\x61\xae\xd3\xfe\x62\x1d\xc3\x25\x26\x7e\x15\x2e\x35\x39\xe3\x12\xbb\xbf\x0a\x17\x78\x40\x81\x5b\x68\x40\x91\xba\x42\xf3\x35\x0e\xe1\x0c\x7b\x43\xf6\x17\x1a\x28\x6c\x62\xe1\x5b\x60\x81\x05\x0a\x9b\x48\xf8\x16\xd8\x29\x09\x25\x35\x21\xa7\x08\x39\x69\x95\xd2\x54\xe0\x31\xfc\x8e\xac\x86\xd1\x82\xe5\x18\x2b\x3b\xc2\x69\x58\x53\x73\x0b\x96\x40\xb7\x7f\x1a\x58\x36\x92\xa7\x53\xb8\x6c\x9c\x41\x57\x24\xc5\xd6\x82\x4c\x16\x12\xb1\x90\x98\xce\x4f\x80\x7b\x7f\x87\x13\x32\x21\xfc\x04\x70\x81\x77\x38\x81\xb3\x34\x25\x68\x04\x46\xfb\x27\x80\xb3\x84\x4c\xb9\x38\x03\x0c\xd9\x0e\x32\x66\xf5\x89\x58\xb1\x5a\xc5\x16\x28\x56\xaa\xf0\x15\xab\x54\xea\x6e\x42\x3d\x54\x9d\xd4\x6d\xee\x5d\x82\x60\xa7\x6c\xa7\x5d\xac\x81\xa1\x3a\x27\x79\x2c\x9d\x89\x9b\x4d\x1d\x7b\x38\xa8\x84\xd0\xa0\x24\x78\x18\xb0\x13\x78\xb5\x0a\xb2\x4e\x39\x27\xb7\x0a\x9f\x1b\xfa\x32\x3c\x7e\x91\xee\x85\xe8\x25\xad\xea\xfd\x4f\x4c\x6a\xd5\x33\x1e\xce\xa9\x98\x2b\x41\x54\x31\x37\x47\xc7\x55\x6c\x4c\xd7\xc9\x7e\x83\xd1\x71\xf7\x77\x41\x3b\x2b\x92\x6c\xd3\xf6\x21\x24\x24\xa4\xbf\xb1\x3e\x30\x1a\x9a\xde\x48\xe7\x52\xe2\x0a\x73\x41\xd7\x63\x76\xe1\xc4\x16\x6d\xc3\xdd\x16\xb5\x8f\x2b\xde\x98\xd6\xd8\x33\xf0\xc7\xac\x06\x24\x86\x44\xc3\xce\x78\x55\x6f\x18\x71\x2f\xdb\x81\x92\xd5\x18\x6a\xd3\x1c\xe9\xc9\x09\x82\x9b\xce\xb1\xb0\x57\xb6\xf8\xe5\xd8\x35\x1e\xe2\x91\xd9\x25\x84\x76\x6b\xc8\x9d\x1f\x8d\x69\x95\xec\xa9\x93\xa4\x1c\x83\x3d\x25\xdc\xe7\x31\x36\x77\xc3\xbd\xfa\x32\x28\xe7\x99\xf4\x57\xdd\x69\x22\xeb\x54\x67\xec\xdb\xcc\xe2\x34\x31\x59\xef\x43\x2c\xf6\xb1\xb9\xfc\xd1\xca\x46\xdd\x29\xab\xcd\xe6\xd8\xc5\xe5\x1e\x2e\x9a\x91\xbb\xdd\xe3\x0e\x4f\xb9\x97\xd6\xeb\x67\xd9\x04\x97\x0d\x1e\x1b\x23\x52\xc9\x0d\x84\x78\x9d\x63\x3d\x6a\x29\x75\x3b\x27\x77\x5e\x7a\x45\x83\x95\x35\xd9\xf3\x2d\x36\xec\xfc\x3c\xcd\x11\x67\x5c\x75\x64\x22\x37\xc4\x91\x09\x18\x1c\xb9\x4c\xfc\xde\x4b\x3a\xef\x8c\xd3\xde\xd8\x37\x1a\xf9\x50\x80\x8b\x64\xab\xfd\x83\x6d\x99\xe4\xce\x1a\x6f\x1a\x43\xc4\xd6\xc9\x3b\xab\xf7\xd2\xab\x5f\x68\xc4\x84\x89\xe1\xa9\xd5\x0d\x93\xe7\x07\x21\x7b\x0e\x36\x83\x0d\x09\xf1\x9e\x35\xf2\xe8\x09\xc7\x1e\x70\xf9\xc9\xc8\x1e\x8c\xf0\x16\x63\x31\x85\xaf\x88\xde\xcd\x56\xfb\x8f\x56\xf6\xcd\xcb\xd1\xfc\x41\x0b\x77\x4a\x51\xb8\x06\x1f\x4d\x52\xdd\xce\xf4\x8a\x66\x51\x9e\x12\x58\xd6\x39\xe8\x20\xa6\x7f\xd6\xdb\xd1\x9d\x0f\xea\xcc\xd4\x3d\x21\x7c\x0e\xb5\x20\x0b\x01\xc5\x35\x9a\x04\xcc\x7b\xc5\xc1\xe4\xc9\x4b\x72\xc3\x92\x95\xfc\x8d\x48\xac\x44\x16\x62\xe7\x5a\xeb\x6d\x0f\x99\x80\x47\xcb\xc2\x1c\xb7\x99\xdf\xf0\x12\x07\x33\x7c\x3e\xeb\x5e\xbb\x17\x9c\xee\x0f\x24\x05\xa1\x43\xb7\x54\xc5\xbf\xe4\x21\x5d\x58\x48\x67\x2d\x47\xf2\x34\xe4\x9f\x8c\x79\xed\xa4\x7d\x0d\x27\x42\x7d\xa1\xb7\x35\xfe\x9b\x88\xdd\x0c\x56\x06\x3f\xc9\xa7\xca\xa0\x2c\x8c\xd1\x8a\x53\x52\xe1\xa1\xb3\x73\xcd\xc3\x67\xe3\x57\xf4\xf4\xec\xd9\x23\xce\x6b\x94\xf8\xde\x85\x2e\x09\xf4\xb8\x33\x36\x5d\xca\xc5\xe3\x8c\x6b\x1c\x32\xee\x93\xe9\xbd\xd4\xbd\xb2\x11\x72\xce\xc6\x82\x1d\xed\x0c\xab\x18\x9b\xec\xc2\x27\x7d\xc2\x1c\x68\x79\x70\x4c\xc9\xfb\x7e\xda\x86\x49\x7b\x87\x0d\xe1\x4f\xe8\x13\x0c\xa1\xdd\xe4\x62\xf3\xc8\xf8\x2a\x4f\xd7\xe9\x09\xc7\x7a\xc9\x49\x8e\x58\xe8\x2d\x47\xaf\x58\xf6\x96\xe5\x9e\x90\x16\x30\x4a\xd2\xe4\x81\x79\x9c\x26\x66\xd4\x6c\x79\x5b\xd4\x91\x97\x0a\xca\x00\x53\x77\x56\xd3\x39\x2d\xaf\x66\x63\xfa\x8a\x57\x33\x36\xc7\x75\x59\x0c\xc3\xff\x03\x00\x00\xff\xff\xef\x1b\x33\x8a\xf3\x17\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6131, mode: os.FileMode(420), modTime: time.Unix(1519782121, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\xf6\x78\x18\x75\x71\x44\x23\xb6\xe6\xba\x44\x98\x43\x80\xd6\x0b\x6f\x89\xaf\x30\x28\xbc\xf5\x98\x0f\xa3\xd6\xe1\xe4\x72\xe3\x2f\x1a\x8d\xe7\x0f\x6a\xf0\xb4\x34\x22\xb8\x02\xb5\xc8\xa7\xd3\xd7\xa1\x26\x91\x86\xdb\xeb\xc7\xe0\x90\x1b\x75\xbd\x21\xac\x71\x1e\x5a\x14\x98\xff\x03\xe7\xda\x46\xd2\xe8\x21\x3c\xe0\x36\xc8\xae\xe9\xa2\x17\x42\x60\xe1\xa3\x04\xa2\x30\x23\x55\x93\xa2\xf8\xd2\x59\x13\x8d\x77\x52\xaf\xac\xf1\x68\xfc\xe4\xa2\x2a\xf0\x56\xd9\xb6\x5f\x5b\x7b\x2a\x85\x61\xeb\xf0\xa8\x67\xef\x46\xa6\xdc\xdd\x99\x1a\x77\xe1\xf6\xb6\xc0\x6d\x01\xdc\x37\x84\xfb\x04\x71\x43\xfa\x45\xe9\x33\x4b\xea\x7b\xcd\x8f\x92\x5d\xfa\x7f\x83\x2f\x2f\x91\x13\x12\xfc\xfc\xa3\x25\x5e\x7f\x81\x04\x4c\xa9\x75\x87\x70\xbd\xbf\x0e\x09\x7d\x49\x06\xea\xf1\x33\x8c\xe2\x6f\x25\x52\x15\x8d\x7b\x91\xe4\xe8\x33\x2b\x13\x88\x0a\xeb\x7c\xcf\x97\x6d\xd4\xe3\xde\x32\x94\x55\x02\xef\x16\x67\x1f\x98\xf3\xa4\xcc\x4a\xa5\xd5\x5e\xe9\xec\x84\x05\xa1\x44\xe3\x15\xd7\x2e\x81\x48\x19\xa1\xcb\xb0\x8d\x5a\xe7\x46\xcc\x67\x68\x86\x5d\x41\x0e\x09\x5d\x61\x8d\xc3\xfe\xa3\x6d\x5d\x6f\x59\xcc\xe3\x95\x1f\x76\xef\x72\x37\xc6\x4b\x2b\xab\x3e\x8e\xa7\xea\xc6\xcb\x6d\x71\xeb\x48\x0a\x4e\x0e\x6f\x6a\xee\x1e\xfe\x1a\x04\xf7\x22\x83\x21\x12\x59\x1a\xdd\x06\xd2\xd7\xec\x29\x76\x3e\x36\xb4\xe6\x1e\xc7\x70\x8e\x46\x22\xc1\xec\x4d\x5d\x79\x9f\x4e\x21\x3e\x02\x65\xbc\x05\x9f\x61\x9d\x60\xd6\x4a\x2e\x10\x6b\xe2\xf9\xc9\x8b\xe3\xf7\x27\xa0\x4c\x7d\xf3\xb6\x00\x8d\x6b\xd4\x60\x53\xf0\x99\x72\x90\x5b\x59\xea\xc0\x00\x8d\x9c\x0c\xe4\x96\x10\xf8\xd2\x96\xbe\x45\xca\xec\x06\x2a\x5b\x82\xe0\x06\x44\xe9\xbc\xcd\xd5\x77\x84\xce\x83\x65\x05\x05\xd9\xb5\x0a\xa3\x0d\xa4\x4a\x53\x24\x34\x1e\xea\x36\x76\x60\xa9\x85\x09\xff\x15\x42\x9e\xb9\x06\x91\x29\x2d\x01\x9b\x09\xe0\x1a\x97\xcf\xc3\x96\x38\x3e\x7b\xcf\xa8\x0e\x71\xb8\xcd\x40\x4d\x66\x82\x90\x7b\xdc\x8e\x8c\x61\x6b\xba\x5f\x85\x69\x33\x8a\x92\xbd\xd1\xb4\x2b\x98\xf6\x74\xe7\x0c\x6a\x9b\x39\x1a\xd5\x92\xdb\xcc\xdf\xdc\x25\xcd\x0a\x99\xc5\xcd\x5f\xdc\xbf\x02\x00\x00\xff\xff\xc3\x5b\xa9\x7b\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1519776929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


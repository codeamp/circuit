// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x6e\xdc\xb0\x11\xbe\xeb\x29\xb8\xc8\x65\x03\xf8\x09\x16\x6d\x81\xc4\x76\x1b\xb7\x49\xba\xf5\x36\x27\xc3\x07\x5a\x3b\xbb\xcb\x46\x12\x15\x92\x72\x63\x04\x7d\xf7\x82\xff\x33\x94\xb4\x3f\x76\x0a\xd4\x87\x44\x1c\x89\xf3\xc7\x99\x8f\x33\xb3\x7f\xf0\x7f\xec\xd3\xed\x87\x9b\xea\x8f\xfe\xaf\xd2\x35\x6f\xb8\x62\xff\x14\x2d\xc4\xe7\xbf\x6e\xfe\xfe\xb5\xaa\x74\x7d\x80\x96\xb3\x5f\x15\x63\x3f\x06\x50\x2f\x2b\xf6\x0f\xfb\x5f\xc5\x58\x3b\x18\x6e\x84\xec\x56\xec\x4b\x78\xaa\xfe\x53\x55\xef\xc2\x7b\xf3\xd2\x83\x7f\x74\x7b\xdf\xb1\x6f\x1a\x54\xc5\xd8\xa0\x41\x2d\xc5\x76\xc5\xee\x6e\xde\xaf\x22\xd1\xbf\xd5\xe1\xb5\x5e\xbe\x5f\xb1\x07\x4b\x79\x5c\xb8\x97\x6b\x25\xff\x05\xb5\xa9\x18\xeb\xfd\x53\x60\x70\xc5\x74\x33\xec\x57\x6c\x63\x94\xe8\xf6\x57\xac\xe3\x2d\xe4\x15\x74\xcf\x42\xc9\xae\x85\xce\xdc\xdd\x44\xf2\xfb\x15\xe2\x96\x38\xeb\xcc\x5a\x2f\xc3\xc3\x06\xb8\xaa\x0f\xe9\x73\xbf\xbc\xeb\xfa\xc1\x5c\xb1\x9e\x2b\xde\xea\x15\x5b\xf3\xbd\xe8\xb8\x91\xca\xd1\x33\xef\xcf\x42\x1b\xaf\xfa\x9f\x81\x9b\x41\x81\x15\xb0\x0b\x8f\xcb\xd9\xdd\xe1\xe3\xbc\x7b\x03\xea\x59\xd4\x6e\xb7\x0e\x8f\xf3\xbb\xc3\xc7\xa3\xdd\x4c\xf7\x50\x23\x16\x1b\xbb\x74\x2e\xde\x64\xc2\xe3\xa2\x22\x71\x61\xf7\xdf\x43\x03\x5c\x3b\xe9\x2a\x3c\xce\x4b\x0f\x1f\x7b\xe9\x31\xaa\x10\x17\xfb\xe2\x52\x46\xd5\x9f\xfc\x1f\xfb\xb0\xdd\xb2\xde\x7f\x28\x64\xc7\x76\x52\x61\xe5\xde\xb1\xdb\x7c\xd4\x96\x80\x4e\x3e\x1f\x27\x8a\x14\x6b\x3b\xda\x12\xa2\x0c\x51\xd8\x33\x57\x82\x3f\x35\xc1\xf3\xb5\x02\x73\xd4\xf1\xf6\x83\xec\xf7\x10\x04\xb7\x3f\x0d\x74\xda\xea\x6b\x0f\xc0\xaa\x15\x09\x7a\x39\x17\x9b\x0f\x69\xd3\xe3\x34\x2f\x14\xa9\x99\xe6\x0e\xb3\xfc\x32\x30\x08\x7e\x42\xc2\xf3\x29\x14\x1c\xee\x0b\x6a\x54\x01\x54\x2b\x74\x12\x9e\x57\x76\x93\x05\x89\x85\xcf\xfb\x84\x02\x2e\xf5\xe3\x2a\x64\xff\xb5\x02\x6e\x20\xaa\x5e\x31\x56\x3b\x42\x50\x3a\x1e\x52\x4a\xa0\x22\x9f\x3c\x44\xf4\x5b\xca\x62\x70\x84\x4b\x58\x04\x2d\x82\xf9\x49\x8b\x60\xf8\x32\xd0\x53\x0c\x16\x21\xe9\x93\xca\xc8\x1e\x31\xd0\x46\xf6\x71\xbb\x07\xa5\x45\xb1\x21\xc8\x0c\xc9\x97\x64\x86\xdc\x5b\x06\x7a\x4a\xdf\x22\x9b\xb1\xe5\x99\xe4\x2d\xbf\x84\xc5\x0d\x34\x40\xb4\xd8\x3a\xc2\x25\x2c\xa8\x21\x31\xa8\x89\x35\x16\x49\x96\x08\x66\x12\x03\xbb\x28\x78\x6e\xfc\xfe\x64\x5d\xc1\x97\x98\xf8\x2a\xbe\xd4\xe4\xc8\x97\xd8\xfd\x2a\xbe\xc1\x0f\x28\x85\x93\x1b\x10\x84\xe0\x14\x5f\x61\x6c\x89\x6c\x6f\xc9\xfe\xe4\x06\xca\xd6\x7b\xe1\x2d\x6c\x83\x17\x28\x5b\xef\x84\xb7\xb0\x1d\x3b\x21\x61\x26\x0a\x0a\x8b\x8b\x4b\x8f\x9f\x11\x26\x29\x68\xce\x58\x8e\x79\xc5\x40\x38\x8f\xd7\xd8\xdc\xc4\x8b\xa1\xd3\x3f\x8f\x59\x34\xb2\x04\xf2\x70\xd8\x91\xbc\x4c\x1f\xac\x58\x22\x26\xc7\x45\x02\x31\xb5\xe4\x18\xce\xf9\x15\x1c\xa3\xc1\x25\xc7\x70\xc4\xaf\xe0\x58\x5a\x5d\x82\x75\xe6\x59\x5e\x44\xab\xd1\x75\x55\x80\xf0\x71\x67\x94\x90\xfe\xdb\x04\x21\x1f\x05\x9a\xf7\xce\xff\xc8\x20\x5b\xc3\xe2\x7b\x32\xd9\x65\x4b\x5a\x74\x9b\x2e\x07\xba\xf6\xe5\x30\x22\x44\x61\x0f\xbe\x3e\x58\x84\x0b\x99\x5e\x84\xa4\xda\x19\xb9\x70\xa2\x12\xc2\xb4\x6c\x08\x22\x26\xb1\x88\x18\x65\x7f\x94\xf2\x7b\xcb\xd5\x77\x74\x0d\x3f\x05\xd2\x9a\xd4\xe6\xf6\x1a\xfc\x28\x65\x03\xbc\x0b\xf5\x41\xaa\x9b\x2a\xd1\x19\x50\x3b\x5e\x43\xa6\xb9\x32\xa1\xe7\x7b\x58\xb1\xbb\xce\xd5\x51\xb5\x1c\x2c\x16\xb9\x55\x51\x9a\x76\xf0\xd3\x5c\x0f\x4a\x4b\x15\x4b\xa7\x20\x02\xd7\x8e\xae\x0a\x41\x04\x26\xda\xbe\x01\x67\xe0\xb9\x62\x6d\x25\x69\x94\x00\x9d\x8b\x23\xe7\x86\x59\xf9\xb9\x12\xf4\xe2\xf3\xfa\x8d\xd2\x3d\xa3\x53\xc2\x53\xfd\x1f\xa5\x27\xc2\x9b\xc5\x3b\x4e\xc7\xe5\xa3\xee\xc5\xcb\x47\x84\x37\xca\x0f\x9c\x8e\xcb\x47\xbd\x97\x97\x8f\x08\x6f\x94\x1f\x38\xcd\xca\xcf\xfd\xce\x81\xeb\xaf\xf0\xd3\xac\x1d\x57\x1a\xff\xa9\x63\xf9\x2d\x91\x39\x2d\x28\x37\x58\x24\x64\xcf\xe9\xa3\x9c\x8e\xae\x1f\x77\xfa\xd9\x27\xa7\x43\x48\x67\xeb\x8f\x96\x8b\x26\x1b\x4d\x7a\x81\x02\xa4\xfc\x85\xb1\x5d\xb9\x81\x02\x8d\x0f\x12\x1b\x85\x84\xb2\x86\xb7\xb4\x16\xb4\x76\x46\x66\xb9\x16\x37\xf1\xfa\xc0\xf5\x81\xe8\xc5\x15\x74\xe6\x53\x41\x55\xb0\xc3\xcb\x29\x15\x63\xb9\x8b\xd3\xe7\x0c\x15\x6b\xd9\xb6\xbc\xdb\x62\xee\x78\x14\xb1\xa0\xbd\x37\xa9\x28\xd1\xc1\x22\xfd\xa5\xb2\xd0\xfc\x60\x9b\xab\xc7\x05\x6d\x68\x49\x29\x66\xdf\x59\x5d\x4f\xd9\x85\xab\x37\x67\x1b\xee\x75\xa9\x7d\xa5\xe2\xdf\xe1\x05\x2f\x85\xbe\x81\x1d\x1f\x1a\x43\x82\xae\x96\x8d\x54\x47\x94\xc8\xd3\x15\x92\x4c\xa5\x6e\xb9\xec\x43\xe8\x59\xe8\x57\xe8\xf3\xcc\x9b\x81\x3a\xba\x96\xd4\x1f\x53\x07\xe6\x03\xc8\x86\xf8\x94\x07\x9f\x41\xa5\x98\xce\xb8\x7b\xec\x0c\x46\xe6\x0a\xbd\x09\xc5\x25\xc5\x00\x3c\x92\x21\x51\x66\x63\xe1\xc4\x49\xd4\xfd\x70\x0f\x3f\x06\xd0\xa6\xa0\x7e\x16\xad\x20\xb4\x16\x5a\xa9\x5e\x26\x3e\xf6\x2f\x46\xdf\x1b\x9b\xc7\x1e\x13\xfe\xa2\x78\x0d\x6b\x50\x42\x6e\x4f\x05\x55\x6c\x72\x31\x9c\x9d\x91\x2c\xd4\xf7\x5c\x19\xb1\xe3\x2e\x30\xfc\x28\x81\xb1\x03\xf0\x6d\x80\x87\x34\x12\x73\x5a\x72\xd1\x4c\xd1\xb5\xe1\x06\x68\xa2\x17\xd3\x8d\xb9\xd9\x86\xdb\xf9\x65\x8c\x2f\x17\x1c\x35\xbe\x79\xc8\xad\x73\xe2\x30\xf1\xe0\xd2\xeb\xdc\x4b\x2d\x8c\x54\x2f\x14\x35\x42\x87\x92\x28\x7b\x61\xbe\xa9\xa6\xa0\xac\x95\x34\xb2\x96\x84\xac\x34\x5f\x2b\xf1\xcc\x0d\xfc\x8d\x66\x8c\x7d\x31\x3c\x35\xa2\x2e\xe8\x69\x3c\xa9\x0f\xf2\xdf\x37\xd0\x37\xf2\xc5\x9a\x19\xe2\xf7\xc8\xcc\xb3\x98\x5a\xd6\x83\xb2\xe8\x7b\x5f\xcc\x52\x2e\x1f\x22\xbe\x62\xe6\x79\xe1\xa8\x0e\x70\x84\x4c\xce\xcf\xf6\xc2\x7c\x54\xbc\xab\xc9\x45\x52\xcb\xce\x88\x6e\x90\x83\xf6\x6e\x22\x50\x08\xa4\xba\x1e\x97\xd0\xb1\x5a\x46\xbe\x9d\x45\x6d\xda\xd3\x79\xe0\x4e\xb4\x13\x60\x21\xdb\x5e\x76\x40\xef\x95\x12\xe8\x0a\x2c\x3d\x1a\xf6\xb2\xdb\x89\x7d\x4e\xd2\x23\x69\x90\x7b\x22\x9c\x0f\x73\x8a\x4f\x41\xc4\x54\xaf\x3a\x03\x16\x23\xbd\x06\x6d\x64\x7b\x5d\x50\x47\x10\xf1\xbb\x32\x7f\x34\x5d\x25\x68\x38\x67\x73\x39\x67\x2c\x6c\x2e\x3d\x86\x53\x61\x23\xf6\x5d\x80\xc0\x12\x26\x66\xde\x95\xa6\x97\x41\x30\xe7\x8a\x09\x67\xef\x44\x27\xf4\x01\xdf\x73\x47\xc2\x80\x09\x9b\x73\x95\xfb\x97\xcc\x64\x93\x33\xbc\xac\x79\x08\x9b\xc4\x3a\x9a\x8e\xd3\x09\x45\x0f\x32\x0f\xd8\x8f\xe5\x2e\xd1\xdd\xff\xd8\x33\x65\x01\xfa\x19\xc8\xd9\x31\xc6\xed\xb9\x1c\xc7\x3d\xb0\x0d\x09\xc2\x9c\xe0\x14\xfb\x55\x36\xbc\x35\xe9\x37\x2a\xc6\x1a\x7f\x85\xdf\x75\x06\xf5\x1e\x7c\x67\x40\x5d\x97\x9f\x0a\x03\xad\x5e\x83\x5a\xe7\x5e\xe2\xec\x76\x20\x86\x37\xd6\x15\xcf\xc6\xc7\x47\x89\x2e\xef\xec\x77\x94\xe7\x94\x38\x79\x4a\x2e\xd2\xa4\xaa\xe1\x1e\x9e\x06\xd1\x8c\x7c\x18\x6b\x28\xac\x14\x1e\x5b\x8f\x95\x9a\x94\x7d\x59\xd1\x5e\xee\x9d\xa9\xd8\x83\x1e\x6b\xa9\x7c\xac\x2f\x1e\x27\x32\x6e\xc6\x6a\x67\xdc\xb5\xec\x0c\x17\x1d\x28\xc7\x72\xca\xc6\xc4\xdb\x77\x88\x52\x99\xc2\xcd\x45\x1e\x8d\xea\xce\x29\xa6\x69\xde\x3d\x76\xde\xff\x4f\x19\x3a\x6a\x17\xb0\x21\xe5\xcc\xfa\xb4\x21\xaf\xe9\x6c\x66\x3b\x96\xc2\xa9\x69\xa0\x3c\x56\xe3\x54\x03\x33\xc2\xe7\x99\x86\x86\xc0\xda\x6c\x22\xcd\x35\x22\x93\xbf\x51\x52\x87\x92\x91\xe7\xc5\xee\x9c\x2c\x40\x66\xd5\x2c\xaf\x71\xea\x84\x69\x8d\x27\xd0\xf9\xa8\xce\x57\x93\x48\x70\x85\xef\xde\x82\x7e\x5e\x71\x71\x2c\x9d\xe9\x40\x97\xa8\x3c\x35\xeb\x75\x1a\xdb\x06\xa9\xc0\x4e\x32\x67\xa1\x1b\x03\xcc\x5c\x2a\x2f\x8b\x1b\x05\xe0\x5e\xf1\x6e\x36\x5e\x66\xb2\x6f\xfc\x3a\x0b\x98\x3d\xf4\x33\x05\x79\xd7\xcc\x0a\xca\x9e\x9b\x82\x79\xea\xba\x19\x35\xbd\xfb\xe2\xad\x08\x5d\xcd\x7b\x3d\x34\xdc\x00\xdb\x89\xc6\x80\x65\xc5\x1a\xb9\x17\x36\x41\x62\xf1\xd6\x08\x6d\xaa\xff\x06\x00\x00\xff\xff\x07\x1a\xbe\x6d\x4b\x23\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9035, mode: os.FileMode(420), modTime: time.Unix(1529975858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529973808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x23\xb9\x0d\xbe\xeb\x29\xa8\xda\x8b\xa6\xca\x4f\xa0\xdb\x8e\xed\x8c\x9d\xcc\x24\x8e\xb5\x73\xd8\x9a\xf2\x81\x6e\xc1\x12\xe3\x6e\x52\x4b\xb2\x3d\xe3\x4a\xe5\xdd\x53\xfc\x6d\x80\x64\xcb\x96\x76\x52\x95\x8b\xdd\x84\x9a\x20\x00\x02\x1f\x7e\xda\x74\xbc\xe7\x9a\xfd\x26\x06\x58\xc4\xe7\xbf\x6e\xfe\xf1\xf7\xc5\xc2\x74\x7b\x18\x38\xfb\xf7\x82\xb1\x3f\x46\xd0\xaf\x6b\xf6\x4f\xf7\x6f\xc1\xd8\x30\x5a\x6e\x85\x92\x6b\xf6\x25\x3e\x2d\xfe\xb3\x58\xfc\x12\x7f\xb7\xaf\x07\x08\x8f\x7e\xef\x2f\xec\xab\x01\xbd\x60\x6c\x34\xa0\x57\x62\xbb\x66\xb7\x57\x1f\xd6\x89\x18\x7e\x35\xf1\x67\xb3\xfa\xb0\x66\xdf\x1c\xe5\x61\xe9\x7f\xbc\xd3\xea\x5f\xd0\xd9\x05\x63\x87\xf0\x14\x19\x5c\x30\xd3\x8f\xbb\x35\xdb\x58\x2d\xe4\xee\x82\x49\x3e\xc0\xb4\x02\xf9\x22\xb4\x92\x03\x48\x7b\x7b\x95\xc8\x1f\xd6\x88\xdb\x2f\xec\xfa\xc7\x41\x69\x3b\x51\x00\xaf\xfd\x29\x61\xdb\x72\x86\xdd\xf2\x43\x7a\xc2\x82\x9a\x49\x52\xb3\x8a\x0f\x1b\xe0\xba\xdb\xe7\xd3\xc3\xf2\x56\x1e\x46\x7b\xc1\x0e\x5c\xf3\xc1\xac\xd9\x1d\xdf\x09\xc9\xad\xd2\x9e\x3e\x89\xfa\x59\x18\x1b\x2c\xf1\x17\xe0\x76\xd4\xe0\x0e\x78\x8a\x8f\xab\xd9\xdd\xf1\xe5\x69\xf7\x06\xf4\x8b\xe8\xfc\x6e\x13\x1f\xe7\x77\xc7\x97\xa7\xdd\xc1\x56\x8c\xf7\x7d\xde\xcd\xbe\x0b\xbb\x17\x92\xed\xc4\x0b\xc8\xa4\xf2\xed\x15\xe3\x72\x4b\xed\x95\x4d\xbb\x29\xcf\xbd\x26\xe4\x7c\x78\xb0\x2e\x63\x58\x6e\x66\x0e\xd0\x21\xe1\x37\x6e\xe9\x7d\x65\x33\x11\xa2\xcb\xdc\x43\x0f\xdc\x78\x55\x75\x7c\x9c\x57\x35\xbe\x8c\x54\x9d\x64\x77\x1c\x90\x2a\xd3\x7d\x22\xcf\x73\x22\xa0\x2d\x0f\x15\x13\xf6\xc2\xb5\xe0\x8f\x7d\x34\x7d\xa7\xc1\x1e\xb5\xbc\x7b\xa1\x69\x78\x68\xf1\x3c\xe7\x16\xa8\x08\xd7\x98\x3a\x73\x07\x42\xee\x7a\x88\xb2\x65\x2d\x50\x88\x64\xc1\x71\x24\x5c\xff\xb0\x20\x8d\x50\xd2\xdf\x9d\x3f\x3f\x12\xcc\x6a\x2e\x3e\xbf\xe5\x4d\x34\xfc\x33\x19\x85\xd7\x44\xf3\x7e\x50\xbe\x49\x9d\x01\x1d\x3e\xb9\x45\xc1\xe1\xbe\xa0\x26\x11\x40\x0f\xc2\xe4\xc3\xa7\x95\xdb\xe4\x80\x72\x19\xb0\x2f\x23\xa1\x87\xbf\xb4\x8a\x08\x78\xa9\x81\x5b\x48\xa2\x2f\x18\xeb\x3c\x21\xa1\x4d\xa4\xe7\xa8\x2f\x40\x20\xc0\xe4\x61\x4b\x59\x8c\x9e\x70\x0a\x8b\xdb\xc1\x7b\xd3\x44\x12\xc3\x89\x98\x77\x91\xce\xff\xfd\xd7\x2f\x9f\x2f\x95\x7c\x12\x3b\x8c\x87\xf8\xb0\xa8\x72\xb4\x75\x56\x39\x5a\x79\x15\xe9\x39\x02\x8b\x80\x0c\x8e\x67\xd5\x01\x31\x30\x56\x1d\xd2\xf6\x90\x05\x96\xc5\x86\x78\x66\x04\x89\x7c\x66\xc4\x88\x55\xa4\x67\x80\x2b\xf0\x0e\x9b\x79\x22\x05\x33\x9f\xc2\xe2\x0a\x7a\x20\x52\x6c\x3d\xe1\x14\x16\xf1\xa6\x06\x2e\x5f\x27\xc4\xe5\x96\x29\xe9\x5f\x08\xf7\x96\x01\x35\xbd\xb1\x8e\xfb\x4a\x48\x4d\x20\xb9\x8c\x2e\x4d\xcd\x94\xe2\x93\xd8\xca\xe1\xe9\x0a\x81\x6d\x16\xcf\x2d\x0a\x89\x37\x61\x7f\xb6\x5d\xc1\x97\x18\xf0\x2c\xbe\xd4\xa0\x89\x2f\xb1\xea\x59\x7c\xa3\x1d\x90\xab\x67\x33\x20\x04\xc7\x68\xb5\xc6\xd0\x9e\xd8\x5e\x93\xfd\xd9\x0c\x94\x6d\xb0\xc2\x9f\x61\x1b\xad\x40\xd9\x06\x23\xfc\x19\xb6\xb5\x11\x72\x7a\x41\x4e\xe1\x11\x3f\x00\x7f\x02\x7b\x9a\xb3\x66\x34\xc7\xbc\x92\x23\xbc\x8f\x57\xad\x6e\xe6\xc5\xd0\xed\xbf\x8f\x19\x8e\xa7\x76\x22\xad\x83\x2b\xe4\xc9\x98\xb2\xa7\xd0\x22\x89\xf2\x5b\x58\x17\x81\x05\x65\xea\x8b\x3e\x95\xc8\xab\xfc\x82\xcb\xbf\xf1\x31\xdf\x4f\x22\x10\x8b\x96\x1c\xa3\x3b\x9d\xc1\x31\xd9\xb5\xe4\x18\x3d\xe9\x0c\x8e\xa5\xd6\x65\x7a\x9b\x78\x96\xa9\x7b\x5d\x25\xf8\x22\x6d\x1d\x37\x46\x99\x04\x7f\xda\x41\xc8\x46\x91\x16\xac\xf3\x3f\x52\xc8\x75\x3e\xb8\xb2\xc8\x7a\xb9\x46\x08\xd5\x1f\xab\x91\xae\x43\x13\x85\x08\x93\x5b\x86\x94\x1c\xdd\x92\x96\x0e\xa4\xa6\xad\x4c\xd8\xa8\x77\x31\x6d\x52\x04\x11\xf3\xb1\x88\x98\xce\xfe\xa8\xd4\xf3\xc0\xf5\x33\x2a\x5c\x1e\x23\xe9\x8e\x74\x74\x2e\x97\x7f\x54\xaa\x07\x2e\xc3\xce\x4f\x60\xd9\x27\x61\xd9\xa5\x1a\x06\xe1\x25\xdd\x81\xfd\x24\x6c\x5c\xaf\x72\xb5\xeb\x77\x57\x15\x8b\xa7\x49\xf8\x9e\xb9\x62\xfe\xbe\x62\xcb\xd5\xf7\x42\x48\x0b\xfa\x89\x77\x30\xd1\x7c\xe1\xd6\xa9\xd1\xa1\xe8\xad\xb4\x71\x0b\x6a\x17\x42\x9d\x87\x08\x0e\x38\x7a\xf0\x06\x39\xc2\xc6\xb5\x14\x56\x0b\x97\xac\x53\xc5\xf9\x10\x99\x4f\xc5\x7f\xe0\x3d\xad\x4f\x67\x1d\xf6\x4e\x9c\x73\x43\x97\x58\x67\xc2\x39\xbc\xfd\xe6\xc4\x1c\xf5\x9a\x81\x39\x22\x9c\xce\x3c\x6e\x4e\xcc\x51\x1b\x1c\x98\x23\xc2\xe9\xcc\xe3\xe6\xc4\xdc\x8f\x20\x3c\x57\xf7\xe4\x77\x46\x5f\x74\xbb\x06\x2e\xfa\x5c\xdc\xd2\xd2\xbf\x88\xb0\x80\x76\xdb\xb5\x9f\xa1\x50\xab\x10\x8b\x14\x27\x94\x25\xbb\xa3\x0d\x60\x0c\xdf\x01\x3e\xd7\x05\x3d\x5e\xef\xb9\xd9\x13\xb9\xb8\x06\x69\x6f\x0a\xaa\x86\x27\xbc\x6c\x89\x98\x0a\x4e\xec\x11\xef\x10\xb1\x53\xc3\xc0\xe5\x16\x73\xc7\xd3\x97\x25\xed\xd2\x49\xd5\xb5\xac\xee\xc6\xe5\x54\x67\x4e\xd7\x48\x3d\x2c\x69\xc3\x4d\x6a\x15\xf7\x9b\x13\xf4\x88\x52\x0e\xa5\x0f\xbd\x7a\x75\xaf\x6f\xac\xe6\x16\x76\xaf\xa1\x45\x5b\x30\xd6\xbb\x0e\x19\x8c\xb9\xd3\xea\x11\x32\x55\x03\xdf\x8a\x9a\x7c\xd0\xe0\x7a\x8f\x1b\xa5\x9e\xf3\x90\xc7\x9b\x0c\x17\x4f\xde\x6c\xb8\xd3\xa7\xa6\x2b\x6d\xf2\x0c\xaf\x78\x29\xcc\x15\x3c\xf1\xb1\xb7\x04\xf5\x3a\xd5\x2b\x7d\x54\xc5\x34\x5c\xaa\xbd\xb9\x35\x74\xc0\x40\x52\xc8\x57\xc8\xf3\xc2\xfb\x91\xde\x61\xa7\xa8\xb5\x5b\xbe\x10\x7c\xd3\x45\x4f\xeb\x7e\x5e\x40\xe7\x70\x49\x78\x74\xfc\x86\x2b\x75\x85\xd9\xc4\xda\x8e\x62\x37\x9e\x0b\x11\x07\x76\x6e\xf6\xc6\x4d\x74\x87\xf1\x1e\xfe\x18\xc1\xd8\x82\xfa\x59\x0c\x82\xd0\x06\x18\x94\x7e\x6d\xbc\x1c\x7e\xa8\xde\xb7\x0e\x22\xa4\x6f\xfc\x3f\x69\xde\xc1\x1d\x68\xa1\xb6\x8d\xc8\xc8\x51\x31\xa3\x74\xed\x1b\x38\xfd\x90\xd4\xf3\x8e\x88\xa5\xb7\xc4\xb5\x15\x4f\xdc\xbb\x50\x18\x5f\x30\xb6\x07\xbe\x8d\x18\x95\x67\x87\x5e\x1f\x2e\xfa\x16\xdd\x58\x6e\x81\xa2\x4d\x31\x51\x99\x9b\xa7\xf8\x9d\x5f\x6a\x90\x3b\xc9\x29\x8c\xe5\x9a\x10\x9e\x84\x14\x66\x4f\x4d\x78\xaf\xfa\xfe\x91\x77\xcf\x55\xd6\x8f\x75\x08\xce\x26\x6f\x38\x0c\x1e\x35\x07\x6d\x0f\xca\x08\xab\xf4\x2b\xbd\xda\xd8\x84\x64\xca\x4e\xd8\xaf\xba\x2f\x28\x77\x5a\x59\xd5\x29\x42\xd6\x86\xdf\x69\xf1\xc2\x2d\xfc\x8d\x46\xa5\xfb\x61\x7c\xec\x45\x57\xd0\xf3\x04\xd8\xec\xd5\xf7\x2b\x8f\x7a\x4e\xfb\xa8\xe9\x91\xb1\x72\x31\x18\xee\x46\xed\x92\xc7\x7d\x31\x8c\x39\x67\x74\xfa\xc6\x58\xf9\x82\x19\x3f\xf7\x46\x8a\xd4\x93\xe6\xe3\xf3\xd1\x39\x16\x78\x64\x0a\xd8\x03\x9b\x33\xc1\x9d\xb0\x1f\x35\x97\x1d\xc9\x96\x9d\x92\x56\xc8\x51\x8d\x26\x18\x93\x80\x32\x90\xfa\xb7\x2e\x72\x53\x3d\x8b\x6e\x60\x2e\xe5\x16\x43\xd1\x90\x42\x32\xed\x0d\xd8\x52\xc3\x41\x49\x1f\x20\x08\x71\xca\x94\xc8\xbb\x3d\x38\xe4\x27\xa2\x14\x58\x7f\x34\xd8\xe2\x50\x2f\x41\x43\x4b\x8b\xaa\x97\xc1\xb1\x34\xa7\x4e\x0b\x98\x5a\x3d\xe6\x0c\x44\x55\x72\x8d\xc6\xaa\xe1\xb2\xa0\x56\xc0\xf4\x13\xf0\x06\x23\x2f\xea\x3d\x31\x06\xcf\xe9\x5c\x0e\x39\x0b\x9d\x4b\x8b\xe1\x30\xda\x88\x9d\x8c\xc0\x5b\x42\xcc\xcc\x6f\xa5\xea\xa5\x6b\xcc\x99\xa2\x61\x6c\x0a\xb0\xfe\x33\x40\x0d\xb1\x47\x3c\x83\x09\x17\xaf\x0b\xff\x97\x0c\xa4\xb3\x7d\xf2\x97\xb3\x19\x44\x6c\x42\x27\x8d\xdb\x76\xe4\xd1\xbb\x9d\x46\xd7\xc7\x82\x9c\xc8\x1e\x3e\xcf\xb5\x34\x40\x1f\xee\xbc\x1e\x75\x1a\x98\x03\x03\xdc\x6e\x3a\x2f\x21\xcc\x09\xc6\x79\xc6\x07\x7f\x43\xb7\x7e\x40\xd7\x87\x1a\xc3\x2d\x88\x23\x62\x16\x78\x84\x5e\x5b\x18\x25\x77\x34\xc9\x9f\x22\x92\x12\xdb\x73\x7f\xe7\x00\x4a\x77\x70\x0f\x8f\xa3\xe8\x2b\xd5\x52\x35\x86\x85\xc2\xd3\xed\x5a\xa8\xe6\xd9\xef\xe8\x2c\xda\xdd\x43\x3c\xeb\x4e\xe9\xe0\x66\xcb\x87\x86\xff\xcf\x6a\xd6\xea\x1a\xae\x2a\x5a\x60\x5c\x77\x12\x37\xc0\x7b\xbb\xf7\x0b\xff\x4a\xa3\xab\x68\xbc\x32\xdb\x61\xa4\xd9\x7d\x1c\x43\x12\x93\x36\xa6\xfb\xde\xb2\x09\x33\x7e\xff\xf5\xcb\xe7\xc0\xeb\xdc\x6b\xa6\x22\x84\x2f\x86\x44\x84\xc6\x37\xdb\xe0\xb2\xa7\x1e\x72\xa9\xa4\xe5\x42\x82\x66\xd5\x19\xe5\x6d\x86\x03\x94\x46\xf7\x9e\x11\x23\x8d\x66\xc2\xce\x99\x5b\xf3\x0c\x4a\x77\x18\xf8\x8f\xcd\xa8\x63\xa0\x45\xc2\x57\xc9\x5f\xb8\xe8\x43\xfe\xa4\xac\xcb\x3b\xac\x78\xfa\xae\xc0\xee\x69\xb9\x5f\x78\x34\xd6\xc3\xb7\x58\x7b\x18\x30\x83\x03\xb7\x18\xde\x84\x14\x56\xf0\xfe\x0a\x7a\xfe\xba\x81\x4e\xc9\xad\x49\x5b\x0f\xbe\xb3\x28\x88\x56\x0c\xa0\x46\x5b\x50\xcd\xd8\x75\x60\xcc\x6f\x7b\x0d\x66\xaf\x5c\xf0\x06\xfa\x13\x17\xfd\xa8\xa1\xa2\xef\xad\x3d\xdc\x00\xdf\x82\x76\xa1\x85\xf4\xbe\xc9\x3f\xa4\x20\x6b\x59\xa7\x78\xcb\xdb\xa9\x8c\xe2\xa2\xd9\xac\x3a\xba\x96\x3b\xe4\x0f\x39\x35\x98\xfc\x3f\x35\x78\xb3\xbd\x1b\x6e\xcf\x49\x44\x15\x9f\x68\xde\x56\xef\x9c\x49\xc2\xec\x84\xa0\x30\x75\xfe\x7e\x52\x8b\xf1\xd6\xc0\xa0\xaa\x37\x66\x06\x08\x24\x27\xcf\x82\xf2\x5c\xe3\xdf\xd6\x61\x1e\x2b\xa7\xcf\x35\x11\x2a\x3d\xe1\x27\x21\x65\x53\x98\x23\xa8\x59\x08\x73\xfa\x79\xa4\x7d\x28\x8e\xc0\x1f\x1c\x4e\x76\xa2\x66\x73\x31\x7b\x39\xed\x2e\xa3\x2c\xd1\xa9\x43\x34\x3b\x87\x56\x99\x75\x54\x93\x8b\xa6\xd9\x2e\x70\x5d\x5d\xd0\xdf\xd7\x38\x1c\xb3\x3a\xfd\xc8\x42\x44\x6e\x7d\x7f\xf1\x12\x8f\x06\x74\x51\x6d\x91\xf1\x31\xdd\x18\xf1\xf4\xd4\xf3\xa6\xe3\xaa\x60\xdc\x69\x2e\xab\xd8\xa9\x3f\xdd\x34\xed\xdf\x02\xa4\x59\x57\x78\xe7\x41\xc1\x34\xb3\x07\x4d\x96\x6b\xc5\x04\x35\xdd\x8c\x98\xc1\x7c\xff\x0d\x00\x00\xff\xff\x20\xba\xae\x5c\xcd\x28\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 10445, mode: os.FileMode(420), modTime: time.Unix(1551383270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


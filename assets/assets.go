// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\x23\xb9\x0d\xbe\xeb\x29\xa8\xda\x8b\xa6\xca\x4f\xa0\xe3\x8c\x27\x63\x27\xbb\x89\x63\xed\x9c\x5c\x3e\xd0\x2d\x58\x62\xdc\x4d\xf6\x92\x6c\xef\xaa\x52\x79\xf7\x14\x7f\x1b\x20\xd9\xb2\xe5\x9d\x54\xe5\x62\x37\xbf\x6e\x7e\x04\x40\x00\x04\x28\xd3\xf1\x9e\x6b\xf6\xab\x18\x60\x15\x9f\xff\xba\xfb\xc7\xdf\x57\x2b\xd3\x1d\x61\xe0\xec\xdf\x2b\xc6\x7e\x9b\x40\x9f\xb6\xec\x9f\xee\xdf\x8a\xb1\x61\xb2\xdc\x0a\x25\xb7\xec\x97\xf8\xb4\xfa\xcf\x6a\xf5\x53\x7c\x6f\x4f\x23\x84\x47\x3f\xf7\x27\xf6\xdd\x80\x5e\x31\x36\x19\xd0\x1b\xb1\xdf\xb2\xdb\xeb\x4f\xdb\x04\x86\xb7\x26\xbe\x36\x9b\x4f\x5b\xf6\xe0\x90\xc7\xb5\x7f\x79\xa7\xd5\xbf\xa0\xb3\x2b\xc6\xc6\xf0\x14\x09\xae\x98\xe9\xa7\xc3\x96\xed\xac\x16\xf2\x70\xc5\x24\x1f\x60\x1e\x81\x7c\x15\x5a\xc9\x01\xa4\xbd\xbd\x4e\xf0\xa7\x2d\x62\xcb\xcc\x66\xa6\x36\x9b\xf8\xb0\x03\xae\xbb\x63\xfe\x3c\x0c\x6f\xe5\x38\xd9\x2b\x36\x72\xcd\x07\xb3\x65\x77\xfc\x20\x24\xb7\x4a\x7b\x7c\xe6\xfe\x59\x18\x1b\x44\xff\x0b\x70\x3b\x69\x70\x0b\x3c\xc7\xc7\xcd\xe2\xec\xf8\xf1\x3c\x7b\x07\xfa\x55\x74\x7e\xb6\x89\x8f\xcb\xb3\xe3\xc7\xd5\x6c\x66\x46\xe8\x10\xc5\xce\x0d\xbd\x89\x77\x33\x10\x2d\x7d\x0f\x3d\x70\xe3\x17\xd4\xf1\x71\x79\xc1\xf8\xf1\xbc\xe0\xd7\xd9\xe2\x8e\x01\x6d\xc0\x6c\x55\xb4\x61\x4e\x04\x34\xe5\xb1\x22\x61\xaf\x5c\x0b\xfe\xd4\x47\x03\x74\x1a\xec\x59\xfd\xdd\x07\x48\x7d\x21\x0f\x3d\x44\x38\x13\x78\xd7\xc9\xeb\xe7\x97\xd9\x15\xbe\xfe\x61\x41\x1a\xa1\xa4\x37\x9b\xd3\x22\x01\x66\xb3\xe4\x51\x0f\x79\x12\x75\xd8\x0c\x23\xff\x9a\x31\xbf\x05\xe5\x97\x74\x1f\xd0\xe2\xf3\x8e\x14\x0c\xf7\x05\x9a\x44\x00\x3d\x08\x93\x17\x9f\x47\x6e\x92\x0b\xed\x75\x88\xd6\x1c\xbb\x3e\x60\xd3\x28\xc6\xec\x17\x0d\xdc\x42\x12\x7d\xc5\x58\xe7\x81\x28\x74\xda\xd3\xec\xf6\x45\x14\x84\xc0\x1e\xf7\x94\x62\xf2\xc0\x25\x14\x51\x8a\xa8\x7e\x96\x22\x2a\xbe\x89\x78\xf6\xc7\xc2\x3d\x83\x2f\x58\x35\x22\x02\x63\xd5\x98\xa6\x87\x54\xb2\x2e\x26\xc4\x35\x63\xc8\xe4\x35\x63\xc4\x6c\x22\x9e\x83\xae\x88\x41\xac\xf9\x0c\x05\xcd\x2f\xa1\xb8\x86\x1e\x88\x14\x7b\x0f\x5c\x42\x41\x15\x49\x4e\x4d\xb4\x71\xf1\xbf\x41\xc9\x21\x13\xb8\x41\xc1\xb9\x0b\xf3\xb3\x76\x05\x2f\x51\xf1\x43\xbc\x54\xe5\xc4\x4b\xf4\xfe\x10\x6f\xb4\x03\x0a\xe1\x6c\x06\x94\x71\x70\x88\x6f\x71\x2a\x4a\xb4\x5f\xc9\xfc\x6c\x06\x4a\x1b\xac\xf0\x67\x68\xa3\x15\x28\x6d\x30\xc2\x9f\xa1\xad\x8d\x90\x53\x2c\x72\x0a\x9f\x26\x43\xb6\x4c\x19\x92\xe6\xd8\x05\xcd\x31\x57\x72\x84\xf7\x71\xd5\xea\x66\x2e\x86\x76\xff\x7d\x64\x49\xc9\x32\x91\xc7\xcd\x4e\xf0\x26\x7f\xb0\x65\x19\xcc\x86\x4b\x00\x51\xb5\x64\x8c\xfb\xfc\x01\xc6\xa4\x70\xc9\x18\xb7\xf8\x03\x8c\xa5\xd6\x65\xb2\x9e\x39\xcb\x83\x68\x5b\x1d\x57\x45\x12\x3e\x6f\x8c\x32\xa5\xff\xb0\x85\x90\x8d\x22\x16\xac\xf3\x3f\x52\xc8\x55\x9e\xf8\x9c\xcc\x7a\xb9\x42\x14\x9d\xa6\x9b\x89\x8e\x43\x11\x8b\x80\xb4\xd8\x43\xa8\x0f\xd6\xf1\x40\xa6\x07\x21\x29\x8e\x2a\x13\x36\x0a\x27\x8c\xcd\x8a\x20\x30\x2f\x8b\xc0\xb4\xf6\x67\xa5\x5e\x06\xae\x5f\xd0\x31\xfc\x14\xa1\x3b\x52\x51\xbb\x63\xf0\xb3\x52\x3d\x70\x19\x66\x7e\x03\xcb\xbe\x09\xcb\xbe\xa8\x61\x10\x5e\xd2\x03\xd8\x6f\xc2\xc6\x71\x92\xce\x95\x43\xb7\xd7\xeb\xaa\xe8\xf6\x98\x84\xdf\x33\x2b\xe6\xf7\xf5\x47\x2e\xe3\x56\x42\x5a\xd0\xcf\xbc\x83\x19\xf3\x65\x48\xa7\x26\x97\xde\x6e\xa5\x8d\x53\x50\xdd\x19\xaa\x16\x04\x30\x31\x8c\x3d\x78\x83\x9c\xa1\x71\xb5\xa9\xd5\x02\xcc\x5c\x3f\x3d\x46\xf2\xb9\x8a\x0c\xdc\xf3\xf8\x72\xea\x30\x77\x66\xce\xf5\x79\xa2\xce\xc0\x47\xb8\xfd\xe4\x44\x8e\x5a\x87\x40\x8e\x80\xcb\xc9\xe3\xe4\x44\x8e\xba\x9a\x40\x8e\x80\xcb\xc9\xe3\xe4\x44\xee\x5b\x40\xcf\xea\x9e\xfc\xcc\xe8\x8b\x6e\xd6\xc0\x45\x9f\x2a\xed\x35\x2d\x64\x8b\x08\x0b\xd9\x6e\xbf\xf5\x3d\x2c\xb5\x0a\xb1\x48\xb1\x42\x59\x80\x3a\x6c\x00\x63\xf8\x01\xf0\xba\x2e\xe8\xf1\xf8\xc8\xcd\x91\xc8\xc5\x35\x48\x7b\x53\xa0\x1a\x9e\xf1\xb0\x25\x62\xaa\xd5\xb0\x47\xbc\x43\xc4\x4e\x0d\x03\x97\x7b\xcc\x8e\xbb\xdf\x35\x6d\xf7\x48\x39\xb4\xae\xf6\x66\x54\xda\x25\x95\x07\xd7\x16\x3c\xae\x69\xe7\x46\x8a\x08\xf7\xce\x09\x7a\x46\x29\x97\xa5\xc7\x5e\x9d\xdc\xe7\x3b\xab\xb9\x85\xc3\x29\x34\x1c\x2b\xc6\x7a\xf1\x0a\x12\x8c\xb9\xd3\xea\x09\x32\xaa\x81\xef\x45\x0d\x8f\x1a\x5c\xd9\x7e\xa3\xd4\x4b\x5a\x2f\x98\x0c\x57\x35\xde\x6c\xb8\x65\xa4\xa6\x2b\x6d\xf2\x02\x27\x3c\x14\xe6\x1a\x9e\xf9\xd4\x5b\x92\xf5\x3a\xd5\x2b\x7d\x56\xc5\x74\x57\x50\x7b\x73\xab\x7b\xc5\x89\xa4\x90\xaf\x90\xe7\x95\xf7\x13\xdd\xc3\x4e\x51\x6b\xb7\x7c\x21\xf8\xa6\x8b\x9e\xd6\xfe\xbc\x82\xce\xe1\x92\xf2\xd1\xf9\x1d\xae\xd4\x15\x66\x17\x8b\x2e\x9a\xbb\xf1\x05\x03\x71\x60\xe7\x66\x6f\xec\x44\x37\x4e\xf7\xf0\xdb\x04\xc6\x16\xe8\xcf\x62\x10\x04\x1b\x60\x50\xfa\xd4\xf8\x38\xbc\xa8\xbe\xb7\x2e\x45\x48\xdf\xc6\x7e\xd3\xbc\x83\x3b\xd0\x42\xed\xdf\x8a\xc3\xd4\xfc\xe1\x03\xe5\x1d\x71\x48\x6d\xcf\xb5\x15\xcf\xdc\x3b\x46\x68\xb1\x19\x3b\x02\xdf\xc7\xcc\x93\x2f\x78\xbc\x94\x5c\xf4\x2d\xdc\x58\x6e\x81\xe6\x90\xa2\xeb\x5f\xea\xf9\xfd\xcc\x5f\xea\xd4\x75\xd1\x56\x1b\xcb\x35\x01\x9e\x85\x14\xe6\x48\xbd\xe1\x5e\xf5\xfd\x13\xef\x5e\xaa\xb3\x3c\x56\x17\xf8\x8c\x78\xc3\x0d\xf0\x05\x5e\xd0\x76\x54\x46\x58\xa5\x4f\x34\x95\xc5\x9a\x3f\x23\x07\x61\xbf\xeb\xbe\x40\xee\xb4\xb2\xaa\x53\x04\xd6\x86\xdf\x69\xf1\xca\x2d\xfc\x8d\xc6\x9a\x7b\x31\x3d\xf5\xa2\x2b\xf0\x7c\x4d\x67\x8e\xea\xf7\x6b\x9f\xcb\x9c\xf6\x51\xd3\x33\x77\x7f\xc5\xed\x5d\x37\x69\x77\x24\xdc\x17\xb7\x13\x1f\xb9\x59\xbb\xf8\xee\xef\xc2\xbb\x32\xc0\xbe\xd5\xbc\x91\x3a\x08\xfb\x59\x73\xd9\x91\xd3\xad\x53\xd2\x0a\x39\xa9\xc9\x04\x33\x91\x24\x0a\xa4\x5e\xad\x8b\xd2\x54\x7f\x22\xdb\x2e\x85\x66\x71\x25\x17\x52\x7e\xc6\xde\x48\x33\x6a\x18\x95\xf4\xae\x8f\x32\x44\x79\x84\xf1\xee\x08\x2e\x53\x13\x51\x8a\xdc\x7c\x36\x8c\x94\x7c\x16\x87\x39\xe8\x5b\x5a\x54\xbd\x07\x8e\x92\x25\x75\x5a\x29\xa7\xd5\x13\x2e\x24\x9f\x4a\xae\xc9\x58\x35\x7c\x29\xd0\x2a\xe5\xfc\x80\x4c\x82\x73\x2a\xea\x15\x71\x76\x5d\xd2\xb9\xbc\xcf\x2b\x74\x2e\x2d\x86\x03\x64\x27\x0e\x32\xa6\xd4\x32\x79\x2c\xbc\x2b\x55\x2f\x5d\x63\xc9\x14\x0d\x63\xd3\xd4\xc9\x58\x33\x79\x9e\xf1\x0c\x26\x5c\x70\xae\xfc\x5f\x72\x1d\x9a\xed\x13\x8b\xa0\xc5\x5c\xd7\x4c\x8a\x34\x6e\xdb\x91\x47\xf7\x76\xbe\xdb\x3e\x17\xe4\x44\xf6\xf0\xeb\x48\x4b\x03\xf4\xbb\x89\xd7\xa3\x4e\xf0\x4b\xc9\x00\xb7\x87\xce\x4b\x08\x39\x49\x68\x9e\x78\xf4\x3b\x74\xeb\x6f\xba\xfa\x50\x13\xb8\x01\x71\x44\x4c\x81\x6f\x8b\x6b\x0b\xa3\x63\x7b\x36\x07\x8a\x48\x0a\x36\x8d\xe7\x0f\x13\xa5\x3b\xb8\x87\xa7\x49\xf4\x95\x6a\xa9\x7a\xc2\x42\xe1\x8b\xdc\x5a\xa8\xe6\xda\x97\x75\x02\xe5\xdc\x56\x1b\x10\x85\xb8\x53\x3a\xf8\xdf\xfa\xb1\x11\x18\x8b\x2a\xb7\xca\xff\xeb\x0a\x0b\xc4\x75\x4b\x70\x03\xbc\xb7\x47\x3f\xf0\x9f\x34\xda\x83\xc6\x27\x8b\xad\xc2\x17\x25\x2d\x17\x12\xb4\x57\xae\x65\xea\xac\x65\x70\x22\xa5\x91\x3d\x72\x88\xa5\xbb\x87\x30\x73\x41\x1b\x4f\x50\x9a\x69\xe0\x7f\xec\x26\x1d\x3d\x33\x02\xdf\x25\x7f\xe5\xa2\x0f\x07\x0e\xa5\x2e\x75\xab\x38\x7d\xd9\x6b\x8f\x45\x3d\x4b\x5d\x00\xeb\xe1\x7b\x88\x23\x0c\x98\x60\xe4\x16\xe7\x03\x21\x85\x15\xbc\xbf\x86\x9e\x9f\x76\xd0\x29\xb9\x37\x69\xea\xe8\x4b\xe7\x02\xb4\x62\x00\x35\xd9\x02\x35\x53\xd7\x81\x31\xbf\x1e\x35\x98\xa3\x72\xde\x1e\xf0\x67\x2e\xfa\x49\x43\x85\x1f\xad\x1d\x6f\x80\xef\x41\x3b\x97\x43\x7a\xdf\xe4\x17\xc9\xf9\x5a\xd6\x29\xbe\xf2\x76\x2a\xdd\xbe\xe8\xa6\xaa\x96\xa5\xe5\x0e\xf9\x27\x84\x3a\xfa\xfe\x7f\x3a\x98\xaa\xd3\xc4\x8a\x94\x3f\x03\xbc\xad\xc8\x47\x9a\xe2\xc5\x66\xb7\x30\x6a\xbe\xa3\xaf\xc5\x78\xab\xf7\xad\x8e\xe2\x85\x5e\x98\x1c\x57\x8b\x69\x69\xa9\x87\xa5\xc5\x25\xb5\x24\xb9\x3e\xbe\xd8\x8e\xcd\xd2\x73\x51\xbe\x76\x0d\x5a\x16\x70\xd4\x26\xcd\xba\xb2\x75\x08\x9f\xd5\xe4\xaa\x79\xb2\x5c\xe1\xaa\xab\xc0\xdf\x57\x56\x2e\xa8\x9a\x2f\xfd\xe6\x2b\x73\x22\x72\xeb\x36\xdd\x4b\xec\x5a\xed\xe2\x2c\x26\x97\x81\x74\x62\x4c\x1e\x97\xae\x37\x2f\x57\xf9\xe3\x41\x73\x59\xb9\x4f\x7d\x11\xdf\xb4\x7f\x2b\x26\x17\x5d\xe1\x9d\x0b\x05\xd3\x2c\x2e\x34\x5b\xae\x55\x36\x50\xd3\x2d\x88\x19\xcc\xf7\xdf\x00\x00\x00\xff\xff\xbc\x6e\xbd\x39\x1b\x24\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9243, mode: os.FileMode(420), modTime: time.Unix(1539895830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x72\xdb\xbe\x11\xbf\xeb\x29\xe0\xf9\x5f\x94\x19\x3f\x81\x8e\xb1\xd3\xc6\x6d\xd2\xaa\x56\x72\xf2\xf8\x00\x53\x2b\x09\x0d\x09\x30\x00\xa8\x5a\xd3\xc9\xbb\x77\xf0\x41\x60\x17\x04\x65\xcb\x4e\x67\xfe\x17\x9b\x58\x12\xfb\xf1\xc3\xee\x62\x77\x65\x1a\xde\x72\xcd\xbe\x89\x0e\x16\xf1\xf9\x6f\x9b\x7f\xfe\x63\xb1\x30\xcd\x01\x3a\xce\xfe\xbb\x60\xec\xe7\x00\xfa\xb4\x62\xff\x72\xff\x16\x8c\x75\x83\xe5\x56\x28\xb9\x62\x5f\xe3\xd3\xe2\xd7\x62\xf1\x47\x7c\x6f\x4f\x3d\x84\x47\xbf\xf7\x0f\xf6\xdd\x80\x5e\x30\x36\x18\xd0\x4b\xb1\x5d\xb1\xbb\xdb\x0f\xab\x91\x18\xde\x9a\xf8\xda\x2c\x3f\xac\xd8\x83\xa3\x3c\x5e\xf9\x97\x6b\xad\xfe\x0d\x8d\x5d\x30\xd6\x87\xa7\xc8\xe0\x9a\x99\x76\xd8\xaf\xd8\xc6\x6a\x21\xf7\xd7\x4c\xf2\x0e\xf2\x0a\xe4\x51\x68\x25\x3b\x90\xf6\xee\x76\x24\x7f\x58\x21\x6e\x89\xb3\xc9\xac\xcd\x32\x3e\x6c\x80\xeb\xe6\x90\x3e\x0f\xcb\x3b\xd9\x0f\xf6\x9a\xf5\x5c\xf3\xce\xac\xd8\x9a\xef\x85\xe4\x56\x69\x4f\xcf\xbc\xbf\x08\x63\x83\xea\x7f\x01\x6e\x07\x0d\x4e\xc0\x2e\x3e\x2e\x67\x77\xc7\x8f\xf3\xee\x0d\xe8\xa3\x68\xfc\x6e\x13\x1f\xe7\x77\xc7\x8f\x27\xbb\x99\xe9\xa1\x41\x2c\x36\x6e\xe9\x21\xde\x64\x42\x44\xfa\x1e\x5a\xe0\xc6\x0b\xd4\xf1\x71\x5e\x60\xfc\x38\x0b\xfc\x94\x11\x77\x1c\xd0\x01\x64\x54\xd1\x81\x39\x15\xd0\x96\xc7\x09\x13\x76\xe4\x5a\xf0\xa7\x36\x02\xd0\x68\xb0\x67\xed\x77\x1f\x64\x6d\xe2\x59\x7c\x7a\xb6\x20\x8d\x50\xd2\xe3\xe0\xd4\x1a\x09\x66\x39\xe7\x22\x0f\x69\xd3\x63\x9d\x17\x72\x98\x4c\xf3\x98\x96\x5f\x52\x60\x91\xf0\x0c\x71\xc1\xe1\xbe\xa0\x8e\x2a\x80\xee\x84\x49\xc2\xf3\xca\x6d\x72\xb1\x7a\x15\xc2\x2f\x05\xa3\x8f\xc0\x71\x15\x83\xf0\x46\x03\xb7\x30\xaa\xbe\x60\xac\xf1\x84\xa8\xf4\x78\x48\xc9\x8f\x0b\xb7\x0e\x91\xda\x6f\x29\x8b\xc1\x13\x2e\x61\x11\xb5\x88\xe6\x27\x2d\xa2\xe1\xcb\x48\x4f\x0e\x56\xf8\x5b\xf0\x6d\xab\x7a\xc4\xc0\x58\xd5\x8f\xdb\x43\x6e\xb8\x2a\x36\x44\x99\x31\x06\x92\xcc\x18\x02\xcb\x48\x4f\x51\x54\x04\x15\xb6\x3c\x93\x82\xe5\x97\xb0\xb8\x85\x16\x88\x16\x5b\x4f\xb8\x84\x05\x35\x64\x74\x6a\x62\x8d\x0b\xe8\x25\x8a\xf6\xc4\xc0\x2d\x0a\x9e\x9b\xb0\x3f\x59\x57\xf0\x25\x26\xbe\x89\x2f\x35\x79\xe4\x4b\xec\x7e\x13\xdf\x88\x03\x0a\xe1\x04\x03\x4a\x21\x38\xc4\x57\x38\xb7\x8c\x6c\x3f\x91\xfd\x09\x06\xca\x36\xa0\xf0\x1e\xb6\x11\x05\xca\x36\x80\xf0\x1e\xb6\x53\x10\x52\xce\x44\x4e\xe1\xf2\xe2\x32\xe4\xcf\x31\x4d\xd2\xa4\x39\x63\x39\xe6\x35\x3a\xc2\xeb\x78\x4d\xcd\x4d\xbc\x18\x3a\xfd\xd7\x31\x1b\x8d\x2c\x13\x79\x3c\xec\x91\xbc\x4c\x1f\xac\x58\x22\x26\xe0\x46\x02\x31\xb5\xe4\x18\xcf\xf9\x0d\x1c\x47\x83\x4b\x8e\xf1\x88\xdf\xc0\xb1\xb4\xba\x4c\xd6\x99\x67\x79\x11\xad\x26\xd7\x55\x91\x84\xcf\x83\x51\xa6\xf4\xdf\x26\x08\x61\x14\x69\x01\x9d\xff\x93\x41\xae\x94\xc4\xf7\x64\xb2\xcb\x55\x96\xe8\x36\x5d\x0e\x74\x1d\xaa\x52\x44\x18\x85\x3d\x84\xfa\xe0\x2a\x5e\xc8\xf4\x22\x24\xd5\xce\x04\xc2\x4a\x25\x84\x69\xd9\x10\x44\x4c\x62\x11\x71\x94\xfd\x51\xa9\x1f\x1d\xd7\x3f\xd0\x35\xfc\x14\x49\x6b\x52\x22\xbb\x6b\xf0\xa3\x52\x2d\x70\x19\xeb\x83\x54\x37\x2d\x84\xb4\xa0\x77\xbc\x81\x4c\xf3\x65\x42\xcf\xf7\xb0\x62\x77\xd2\xd7\x51\x8d\x1a\x5c\x2e\x8a\x2b\x09\xcf\xf6\x66\xd0\x46\xe9\xb1\x5a\x8a\x5c\x51\x2d\x18\x0a\x0f\x44\x60\xa2\xeb\x5b\xf0\x36\xbd\x5e\x12\x48\xab\x05\x98\x5c\x0f\x3d\x9e\x95\x9f\x8b\xbf\x20\x3e\xaf\xdf\x29\x3d\x30\x7a\x49\x78\xaa\xbc\x47\xe9\x89\xf0\x6e\xf1\x9e\xd3\x79\xf9\xa8\x6f\x08\xf2\x11\xe1\x9d\xf2\x23\xa7\xf3\xf2\x51\xd7\x13\xe4\x23\xc2\x3b\xe5\x47\x4e\xe7\xe5\xfb\x2e\xd2\x0b\x76\x4f\x9e\x79\xf4\x7e\xc7\xab\xe3\xa2\xcd\x1b\x48\xe9\x5c\xc4\x74\xc8\xaf\xdb\x95\x6f\x83\x29\xb6\x04\xd7\x42\x42\x59\xf2\x3a\x5a\x07\xc6\x78\xfb\xb2\x5c\x97\x66\xf0\xfa\xc0\xcd\x81\xe8\xc5\x35\x48\xfb\xb9\xa0\x6a\xd8\xe1\x65\x4d\xc5\xb1\x3a\xc4\xae\xf7\x0a\x15\x1b\xd5\x75\x5c\x6e\x31\x77\xdc\x40\x5f\xd1\x8e\x91\x14\x60\xd3\x13\xeb\x95\x76\x69\xec\xc1\x35\x22\x8f\x57\xb4\xf9\x23\x65\x8b\x7b\xe7\x14\x3d\x63\x94\xbb\x17\xfa\x56\x9d\xdc\xe7\x1b\xab\xb9\x85\xfd\x29\xb4\x38\x0b\xc6\x5a\x71\x04\x09\xc6\xac\xb5\x7a\x82\x24\xd1\x03\xc5\xb7\xa2\xf2\xc6\x43\x84\xeb\x26\x0f\x13\xee\x32\x29\x54\x25\x06\x3f\xe0\x84\x97\xc2\xdc\xc2\x8e\x0f\xad\x45\x79\xd5\x81\xd1\x2a\x7d\xd6\xa4\x71\xbc\x40\x7c\xba\xd4\x2d\x17\x5c\x28\x89\x15\xfa\x15\xfa\x1c\x79\x3b\xd0\x33\x6b\x14\x45\xb7\x76\xf6\xc1\x17\x5d\xb4\xd4\xce\xe3\x08\x3a\x85\x47\x4e\x7f\xe7\x4e\x74\x62\xae\x30\x9b\x58\xd6\xd1\xdb\x07\xcf\x24\x88\xc3\x3a\xb7\x7a\xe1\x24\x9a\x7e\xb8\x87\x9f\x03\x18\x5b\x50\xbf\x88\x4e\x10\x5a\x07\x9d\xd2\xa7\xca\xc7\xe1\xc5\xe4\x7b\xeb\x52\x82\xf4\x8d\xf2\x5f\x35\x6f\x60\x0d\x5a\xa8\xed\x4b\x71\x37\xb6\x97\xf8\xbe\x7b\x45\xdc\x51\xec\xb9\xb6\x62\xc7\xbd\x63\x84\x26\x9e\xb1\x03\xf0\x6d\xcc\x34\x69\x26\xe4\xb5\xe4\xa2\xad\xd1\x8d\xe5\x16\x68\xce\x28\xe6\x0a\x73\x53\x05\xbf\xf3\xeb\x34\x55\x5d\x70\xd4\xf8\x02\x20\xc9\xff\x85\xc3\xc4\x93\xbb\xa0\x73\xaf\x8c\xb0\x4a\x9f\x68\x02\x8a\xbd\x41\xa2\xec\x85\xfd\xae\xdb\x82\xb2\xd6\xca\xaa\x46\x11\xb2\x36\x7c\xad\xc5\x91\x5b\xf8\x3b\x8d\x18\xf7\x62\x78\x6a\x45\x53\xd0\xd3\x7c\xce\x1c\xd4\x7f\x6e\x7d\x06\x72\x66\x46\xff\x3d\x33\xf4\x2b\xc6\x76\xcd\xa0\x5d\x22\xbf\x2f\xa6\x18\x6f\x19\xa9\x5d\x3c\xf4\xbb\x70\x48\x06\xd8\x43\xaa\x93\xab\xbd\xb0\x1f\x35\x97\x0d\xb9\x93\x1a\x25\xad\x90\x83\x1a\x4c\x80\x89\xa4\x42\x20\x75\xed\xb4\x78\x1d\xeb\x54\x84\xed\x9c\x5b\x15\xa3\xbb\x90\xb8\x13\xed\x85\x64\xa1\xba\x5e\x49\xef\xc0\x28\xce\x8b\x44\x57\xe4\xd2\xb3\x6e\xaf\xe4\x4e\xec\x73\x90\x9e\x09\x83\xdc\x8d\xe0\x78\x98\x53\xbc\x96\x22\x6a\x5d\xe2\x4c\xb2\x98\xe8\x35\x18\xab\xba\x9b\x82\x3a\x49\x11\xbf\x2b\xf2\x27\x73\x4d\x92\x0d\xe7\x6c\x2e\x27\x7c\x85\xcd\x25\x62\x38\x14\x36\x62\x2f\x63\x0a\x2c\xd3\xc4\xcc\xbb\xd2\xf4\xd2\x09\xe6\xa0\xa8\x80\xbd\x13\x52\x98\x03\xbe\xe7\xce\xb8\x01\x13\x2e\xe6\x16\xfe\x2f\x99\x86\x26\x30\x82\xac\xf9\x14\x56\xcd\x75\x34\x1c\xeb\x01\x45\x0f\x32\x8f\xb6\xcf\xc5\x2e\xd1\x3d\xfc\xda\x51\xb3\x00\xfd\x0e\xe2\xed\x98\xe6\xed\xb9\x18\xc7\xdd\xa7\x73\x09\xc2\x9c\xe4\x29\xcf\xb8\x21\x95\xbe\xaf\xfc\xfc\xad\x7d\x27\x2d\x75\x3d\xcc\x07\x4f\x8c\xa7\x30\xa3\x8b\x35\x63\x82\x62\x90\x12\xab\x08\x7a\x2f\x50\xba\x81\x7b\x78\x1a\x44\x3b\xb1\x6f\xac\x6f\xb0\x52\x78\x98\x3b\x55\xaa\x2a\xfb\xb2\xda\xbc\xdc\x5b\x2b\xcc\xa3\x12\x6b\xa5\x83\x13\x5e\x3d\x56\x42\x61\xd6\xe4\x5a\x41\x7e\x3b\xa1\x05\xc6\xb5\x22\xfd\x33\xf0\xd6\x1e\xfc\xd2\x7f\x54\x2f\xd8\xa7\x5f\x79\x4c\x6f\x94\xb4\x5c\x48\xd0\xde\x98\x1a\xb4\xc9\xaa\xd0\x58\x2a\x8d\xec\x4f\x71\xe5\x09\xbf\x16\x71\xe7\x8c\xf6\x9e\x41\x09\x4b\xc7\x9f\x37\x83\x46\xdd\x6a\xc7\x9f\xbf\x4b\x7e\xe4\xa2\x75\xc5\x7a\xc9\xba\x34\x63\xc2\xd3\x17\xa2\xf6\x50\x54\x98\xf4\xc8\xb1\x1d\xbe\xaa\x3f\x40\x87\x19\xf4\xdc\xe2\x24\x20\xa4\xb0\x82\xb7\xb7\xd0\xf2\xd3\x06\x1a\x25\xb7\x66\xdc\xda\xfb\x62\xb6\x20\x5a\xd1\x81\x1a\x6c\x41\x35\x43\xd3\x80\x31\xdf\x0e\x1a\xcc\x41\x39\xef\x0e\xf4\x1d\x17\xed\xa0\xa1\xa0\x4f\x0a\xfa\xda\xd1\xa4\x11\xfe\xd4\xf3\xff\x3c\xf5\xfd\xa4\x0f\xc3\x86\x94\x63\xf8\x97\x0d\x79\x4b\xcb\x38\xdb\x0a\x16\xa0\xa6\x19\xf9\x54\x8d\x97\x3a\xc3\xc9\xc5\x37\xd3\x29\x92\xfb\x62\x36\x25\xcc\x75\x78\xd5\x9f\x5d\x29\xa0\x64\x8a\x7b\x31\x9c\xd5\xca\x6e\x56\xcd\xb2\x3e\xa2\x20\xd4\x35\xae\x5c\x7b\x67\x75\xbe\xae\xa6\xf1\x6b\x5c\xd4\x14\xf4\xd7\x55\x6d\x33\x46\xa5\x99\x57\x9e\x51\x13\x95\x6b\xe3\x6b\xaf\xb1\xeb\x3c\x8b\x8b\x8f\xcc\xc2\xe8\xc6\x78\x4d\x5c\x2a\x2f\x8b\x9b\x38\xe0\x5e\x73\x39\xeb\x2f\x33\xd1\x37\x7d\x9d\x05\xcc\x1e\xfa\x2b\x05\x05\x68\x66\x05\x65\xe4\x6a\x77\x34\x85\x6e\x46\xcd\x00\xdf\xff\x02\x00\x00\xff\xff\xbb\x18\x46\x70\x5d\x23\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9053, mode: os.FileMode(420), modTime: time.Unix(1531946041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529614596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


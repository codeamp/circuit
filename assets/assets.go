// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdb\x6e\xdc\x36\x13\xbe\xd7\x53\xd0\xc8\xcd\x06\xf0\x13\x2c\xfe\xbf\x40\x63\xbb\x8d\xdb\xa4\x75\xbd\xcd\x95\xe1\x0b\x5a\x9e\xdd\x65\x23\x91\x0a\x49\xb9\x31\x8a\xbe\x7b\xc1\x83\xc8\x19\xea\xb0\xbb\x76\x0a\xd4\x17\x89\x38\x12\xbf\x39\x70\x66\x38\x33\xfb\xbf\xf0\xc7\xde\x5f\x7d\x7f\x59\xfd\x3f\xfc\x55\xa6\xe6\x0d\xd7\xec\x77\xd1\xc2\xf0\xfc\xd3\xe6\xd7\x5f\xaa\xca\xd4\x7b\x68\x39\xfb\xab\x62\xec\x4b\x0f\xfa\x79\xcd\x7e\x73\xff\x55\x8c\xb5\xbd\xe5\x56\x28\xb9\x66\x1f\xe3\x53\xf5\x77\x55\xbd\x89\xef\xed\x73\x07\xe1\xd1\xef\x7d\xc3\x3e\x19\xd0\x15\x63\xbd\x01\xbd\x12\x8f\x6b\x76\x7d\xf9\x76\x3d\x10\xc3\x5b\x13\x5f\x9b\xd5\xdb\x35\xbb\x73\x94\xfb\x33\xff\xf2\x46\xab\x3f\xa0\xb6\x15\x63\x5d\x78\x8a\x00\xe7\xcc\x34\xfd\x6e\xcd\x36\x56\x0b\xb9\x3b\x67\x92\xb7\x90\x57\x20\x9f\x84\x56\xb2\x05\x69\xaf\x2f\x07\xf2\xdb\x35\x42\x4b\xc8\x26\x43\x9b\x55\x7c\xd8\x00\xd7\xf5\x3e\x7d\x1e\x96\xd7\xb2\xeb\xed\x39\xeb\xb8\xe6\xad\x59\xb3\x1b\xbe\x13\x92\x5b\xa5\x3d\x3d\x63\x7f\x10\xc6\x06\xd1\x7f\x00\x6e\x7b\x0d\x8e\xc1\x36\x3e\xae\x66\x77\xc7\x8f\xf3\xee\x0d\xe8\x27\x51\xfb\xdd\x26\x3e\xce\xef\x8e\x1f\x8f\x76\x33\xd3\x41\x8d\x20\x36\x6e\xe9\x4d\xbc\xc9\x84\x68\xe9\x5b\x68\x80\x1b\xcf\x50\xc7\xc7\x79\x86\xf1\xe3\xcc\xf0\x2a\x5b\xdc\x21\xa0\x03\xc8\x56\x45\x07\xe6\x44\x40\x5b\xee\x47\x20\xec\x89\x6b\xc1\x1f\x9a\x68\x80\x5a\x83\x5d\xd4\xdf\x7d\x90\xa5\x89\x67\x71\xf5\xd5\x82\x34\x42\x49\x6f\x07\x27\xd6\x40\x30\xab\x39\x17\xb9\x4b\x9b\xee\xa7\xb1\x90\xc3\x64\x9a\xb7\x69\xf9\x25\x35\x2c\x62\x9e\x4d\x5c\x20\xdc\x16\xd4\x41\x04\xd0\xad\x30\x89\x79\x5e\xb9\x4d\x2e\x56\xcf\x42\xf8\xa5\x60\xf4\x11\x38\xac\x62\x10\x5e\x68\xe0\x16\x06\xd1\x2b\xc6\x6a\x4f\x88\x42\x0f\x87\x94\xfc\xb8\x70\xeb\x10\xa9\xdd\x23\x85\xe8\x3d\xe1\x14\x88\x28\x45\x54\x3f\x49\x11\x15\x5f\x45\x7a\x72\xb0\xc2\xdf\x82\x6f\x5b\xd5\x21\x00\x63\x55\x37\x6c\x0f\xb9\xe1\xac\xd8\x10\x79\xc6\x18\x48\x3c\x63\x08\xac\x22\x3d\x45\x51\x11\x54\x58\xf3\x4c\x0a\x9a\x9f\x02\x71\x09\x0d\x10\x29\x1e\x3d\xe1\x14\x08\xaa\xc8\xe0\xd4\x44\x1b\x17\xd0\x2b\x14\xed\x09\xc0\x2d\x0a\xcc\x4d\xd8\x9f\xb4\x2b\x70\x89\x8a\x2f\xc2\xa5\x2a\x0f\xb8\x44\xef\x17\xe1\x46\x3b\xa0\x10\x4e\x66\x40\x29\x04\x87\xf8\x1a\xe7\x96\x01\xf6\x8a\xec\x4f\x66\xa0\xb0\xc1\x0a\xaf\x81\x8d\x56\xa0\xb0\xc1\x08\xaf\x81\x1d\x1b\x21\xe5\x4c\xe4\x14\x2e\x2f\xae\x42\xfe\x1c\xd2\x24\x4d\x9a\x33\x9a\x63\xac\xc1\x11\x8e\xc3\x1a\xab\x9b\xb0\x18\x3a\xfd\xe3\xc0\x06\x25\xcb\x44\x1e\x0f\x7b\x20\xaf\xd2\x07\x6b\x96\x88\xc9\x70\x03\x81\xa8\x5a\x22\xc6\x73\x7e\x01\xe2\xa0\x70\x89\x18\x8f\xf8\x05\x88\xa5\xd6\x65\xb2\xce\x98\xe5\x45\xb4\x1e\x5d\x57\x45\x12\x5e\x36\x46\x99\xd2\xbf\x19\x23\x64\xa3\x48\x0b\xd6\xf9\x97\x14\x72\xa5\x24\xbe\x27\x93\x5e\xae\xb2\x44\xb7\xe9\xaa\xa7\xeb\x50\x95\x22\xc2\xc0\xec\x2e\xd4\x07\x67\xf1\x42\xa6\x17\x21\xa9\x76\x46\x26\x9c\xa8\x84\x30\x2d\x2b\x82\x88\x89\x2d\x22\x0e\xbc\xdf\x29\xf5\xb9\xe5\xfa\x33\xba\x86\x1f\x22\xe9\x86\x94\xc8\xee\x1a\x7c\xa7\x54\x03\x5c\xc6\xfa\x20\xd5\x4d\x95\x90\x16\xf4\x96\xd7\x90\x69\xbe\x4c\xe8\xf8\x0e\xd6\xec\x5a\xfa\x3a\xaa\x56\xbd\xcb\x45\x71\x25\xe1\xab\xbd\xe8\xb5\x51\x7a\xa8\x96\x22\x2a\xaa\x05\x43\xe1\x81\x08\x4c\xb4\x5d\x03\x5e\xa7\xe3\x39\x81\xb4\x5a\x80\xc9\xf5\xd0\xfd\x22\xff\x5c\xfc\x05\xf6\x79\xfd\x4a\xee\x01\xe8\x10\xf3\x54\x79\x0f\xdc\x13\xe1\xd5\xec\x3d\xd2\x32\x7f\xd4\x37\x04\xfe\x88\xf0\x4a\xfe\x11\x69\x99\x3f\xea\x7a\x02\x7f\x44\x78\x25\xff\x88\xb4\xcc\xdf\x77\x91\x9e\xb1\x7b\xf2\xe0\xd1\xfb\x1d\x56\xcb\x45\x93\x37\x90\xd2\xb9\x88\xe9\x90\x5f\x1f\xd7\xbe\x0d\xa6\xb6\x25\x76\x2d\x38\x94\x25\xaf\xa3\xb5\x60\x8c\xd7\x2f\xf3\x75\x69\x06\xaf\xf7\xdc\xec\x89\x5c\x5c\x83\xb4\xef\x0b\xaa\x86\x2d\x5e\x4e\x89\x38\x54\x87\xd8\xf5\x8e\x10\xb1\x56\x6d\xcb\xe5\x23\x46\xc7\x0d\xf4\x19\xed\x18\x49\x01\x86\x4e\x0c\xc9\xaf\xb4\xcb\x64\x77\xae\x17\xb9\x3f\xa3\xfd\x1f\xa9\x5c\xdc\x3b\x27\xeb\x21\xbd\x70\xb1\xe3\x75\xc3\xad\x21\xd5\xaf\x14\xfc\x33\x3c\xe3\xa5\x30\x97\xb0\xe5\x7d\x63\x51\x32\x74\x1a\x34\x4a\x2f\x08\x91\x67\x02\xc4\x11\x4b\xd9\x72\x95\x84\x32\x4f\x21\x5f\x21\xcf\x13\x6f\x7a\x6a\xe8\x5a\x51\x7b\x4c\x1d\x58\x70\x20\xe7\xe2\x53\x16\x7c\x02\x9d\x7c\x3a\xe7\xac\xa5\x33\x18\xa9\x2b\xcc\x26\xd6\x62\xf4\xca\xc0\x83\x04\xe2\x65\xce\x17\x0e\x9c\x44\xdd\xf5\xb7\xf0\xa5\x07\x63\x0b\xea\x07\xd1\x0a\x42\x6b\xa1\x55\xfa\x79\xe2\xe3\xf0\x62\xf4\xbd\x75\x71\x2c\x7d\x77\xfb\xa3\xe6\x35\xdc\x80\x16\xea\xf1\x90\x53\x0d\x3d\x21\xbe\xa4\x8e\x08\x16\x6a\x7b\xae\xad\xd8\x72\xef\x18\xa1\xf3\x66\x6c\x0f\xfc\x31\xa6\x87\x34\xc8\xf1\x52\x72\xd1\x4c\xd1\x8d\xe5\x16\x68\xa0\x17\xc3\x80\xb9\x51\x80\xdf\xf9\x71\x9c\x5f\x4e\x38\x6a\x9c\xb5\x49\xc6\x3e\x70\x98\x78\xdc\x16\x64\xee\x94\x11\x56\xe9\x67\x9a\x35\x62\x41\x9f\x28\x3b\x61\x3f\xe9\xa6\xa0\xdc\x68\x65\x55\xad\x08\x59\x1b\x7e\xa3\xc5\x13\xb7\xf0\x33\x8d\x18\xf7\xa2\x7f\x68\x44\x5d\xd0\xd3\x50\xcd\xec\xd5\x9f\x97\xd0\x35\xea\xd9\xa9\x19\xfd\x77\x61\x52\x57\xcc\xda\xea\x5e\xbb\xec\x7b\x5b\x8c\x1e\x5e\x32\x07\x3b\x79\x52\x77\xe2\x64\x0b\xb0\x87\x4c\x8e\x9b\x76\xc2\xbe\xd3\x5c\xd6\xe4\x22\xa9\x95\xb4\x42\xf6\xaa\x37\xc1\x4c\x24\x15\x02\x29\x46\xc7\x15\xe7\x50\x5c\x22\xdb\xce\x66\x6d\xda\x02\x85\xc4\x9d\x68\x07\x92\x85\x6a\x3b\x25\x81\xde\x2b\x65\xa2\x2b\x72\xe9\xa2\xdb\x2b\xb9\x15\xbb\x1c\xa4\x0b\x61\x90\x5b\x08\x1c\x0f\x73\x82\x4f\xa5\x88\xa9\xd6\x6e\x26\x59\x8c\xe4\xea\x8d\x55\xed\x45\x41\x1d\xa5\x88\x6f\x15\xf9\xa3\x61\x24\xc9\x86\x73\x3a\x97\x63\xb9\x42\xe7\xd2\x62\x38\x14\x36\x62\x27\x63\x0a\x2c\xd3\xc4\xcc\xbb\x52\xf5\xd2\x09\xe6\x4c\x31\x61\xec\xad\x90\xc2\xec\xf1\x3d\xb7\xe0\x06\x4c\xb8\x98\xab\xfc\xbf\x64\x84\x99\x8c\x11\x78\xcd\xa7\xb0\xc9\x5c\x47\xc3\x71\x3a\xa0\xe8\x41\xe6\x79\xf4\x52\xec\x12\xd9\xc3\x4f\x14\x53\x1a\xa0\x1f\x2f\xbc\x1e\xe3\xbc\x3d\x17\xe3\xb8\x65\x74\x2e\x41\xc0\x49\x9e\xf2\xc0\x35\x29\xcf\x2b\xc6\x9a\x70\x6b\x5f\x4b\x4b\x5d\x0f\xe3\xe0\x31\xef\xd8\xcc\xe8\x62\xcd\x36\x41\x31\x48\x89\x93\x16\xf4\x5e\xa0\x74\x0d\xb7\xf0\xd0\x8b\x66\xa4\xdf\x50\xdf\x60\xa1\xf0\x04\x76\x2c\xd4\x24\xef\xd3\x0a\xea\x72\xef\x4c\x35\x1d\xe5\xb8\x51\x3a\xf8\xe1\xd9\xfd\x44\x34\xcc\x68\xed\x95\xbb\x50\xd2\x72\x21\x41\x7b\xc8\x29\x1d\x13\x76\x68\xcb\x94\xb6\x85\x99\x0b\x1f\x1f\xd5\x84\x53\xa0\x69\x74\x3b\x36\xde\x7f\xa7\x44\x1c\x95\xf2\x58\x91\x72\xfc\x7a\x58\x91\x97\x74\x1d\xb3\xdd\x44\x61\xd4\x34\x1b\x1d\x8b\x71\xa8\xb9\x18\xe5\xce\x99\x66\x83\xa4\x9c\xd9\x40\x9a\x6b\x12\x26\x7f\x6e\xa3\x06\x25\xd3\xbb\x93\xcd\x39\x59\x1c\xcc\x8a\x59\x5e\xb1\xd4\x08\xd3\x12\x4f\x64\xce\x45\x99\xcf\x27\x33\xc1\x39\xbe\x17\x0b\xfa\x71\x17\xff\x52\x38\xd3\xd9\x24\x11\x79\x6a\x6c\xe9\x25\x76\xcd\x4b\x91\x3b\xc9\x0c\x84\x6e\x8c\x69\xe6\x54\x7e\x99\xdd\xc8\x01\x77\x9a\xcb\x59\x7f\x99\x89\xbe\xf1\xeb\xcc\x60\xf6\xd0\x8f\x64\x14\x4c\x33\xcb\x28\x5b\x6e\x2a\xcd\x53\xd3\xcd\x88\x19\xcc\xf7\x5d\xf8\x63\x20\x6b\xde\x99\xbe\xe1\x16\xd8\x56\x34\x16\x1c\x14\x6b\xd4\x4e\xb8\x00\x19\x0a\xab\x46\x18\x5b\xfd\x13\x00\x00\xff\xff\xf3\x63\xf2\xd9\x9d\x21\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 8605, mode: os.FileMode(420), modTime: time.Unix(1529973808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529973808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


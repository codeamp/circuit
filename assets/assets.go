// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// plugins/codeamp/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xc1\x72\xe3\x36\x0c\xbd\xeb\x2b\x98\xd9\x8b\x33\x93\x2f\xd0\x71\x37\x69\x9b\xb6\xdb\xa6\x71\x73\xea\xec\x81\x91\x11\x9b\x8d\x24\x7a\x49\xca\xd3\x4c\xa7\xff\xde\x21\x09\x52\x04\x24\xd9\x71\x36\x87\xbd\x24\x22\x48\x3e\x00\x8f\x00\x08\xda\x36\xb2\x95\x46\xfc\xa9\x3a\xa8\xf0\xfb\xe7\xf5\xef\xbf\x55\x95\x6d\x76\xd0\x49\xf1\x6f\x25\xc4\xd7\x01\xcc\x4b\x2d\xfe\xf0\xff\x2a\x21\xba\xc1\x49\xa7\x74\x5f\x8b\xcf\xf8\x55\xfd\x57\x55\x1f\x70\xde\xbd\xec\x21\x7e\x86\xbd\x1f\xc4\x83\x05\x53\x09\x31\x58\x30\x2b\xb5\xa9\xc5\xed\xf5\x65\x9d\x84\x71\xd6\xe2\xb4\x5d\x5d\xd6\xe2\x2f\x2f\xf9\x72\x11\x26\xef\x8c\xfe\x1b\x1a\x57\x09\xb1\x8f\x5f\x08\x70\x25\x6c\x3b\x6c\x6b\xb1\x76\x46\xf5\xdb\x2b\xd1\xcb\x0e\xc6\x11\xf4\x07\x65\x74\xdf\x41\xef\x6e\xaf\x93\xf8\xb2\x2e\xd0\x32\xb2\x1d\xa1\xa3\x72\x94\xa3\xfe\x1f\x40\xba\xc1\x80\x5f\xf5\x84\x9f\x61\x15\xca\x71\xd5\x1a\xcc\x41\x35\x61\x95\xc5\xcf\xb0\x0a\xe5\x74\x95\xb0\x7b\x68\x8a\xa5\x6b\x3f\x2c\x97\x7b\x01\x6e\xb9\x87\x16\xa4\x0d\xc0\x06\x3f\xc3\x4a\x94\xe3\xaa\x9b\xd1\x5d\xbf\xb2\xf0\x3e\xae\x2e\xe6\xa7\x3b\xc4\x41\x1a\x25\x1f\x5b\xb4\xbe\x31\xe0\x92\x35\xfe\x9b\x9e\xc3\xcd\x3f\x0e\x7a\xab\x74\x1f\x9c\xf0\xba\x92\x00\x35\xa5\xe1\xc2\xb6\x82\xed\x1b\xba\x93\xaf\xa4\x04\x14\x7a\x46\x2a\x18\xc2\x3d\x93\x26\x13\xc0\x74\xca\x66\xe5\xe3\xc8\x6f\xf2\x81\x7e\x11\x63\x37\x47\x72\x08\xdf\x34\xc2\x08\xfe\x64\x40\x3a\x48\xa6\x57\x42\x34\x41\x80\x46\xaf\x50\x9e\x03\xec\xb6\xdf\x0f\x8e\xc5\xdb\xc3\x7e\x43\x21\x86\x20\x38\x07\x02\xad\x40\xf7\xb3\x15\xe8\xf8\x0a\xe5\x75\x22\x2d\x41\xdc\xe7\xf5\x19\x02\x43\x2f\x43\x60\xe4\xad\x50\x5e\xa7\x58\x4d\x10\xeb\xbc\x3e\x3b\x32\x8a\xa2\x23\xe7\x40\x5c\x43\x0b\xc4\x8a\x4d\x10\x9c\x03\x41\x1d\x49\xe1\x48\xbc\xf1\x79\xb4\x2a\x92\x2c\x03\xf8\x01\xc3\x5c\xc7\xfd\xd9\x3b\x86\x4b\x5c\x7c\x13\x2e\x75\x39\xe1\x12\xbf\xdf\x84\x8b\x3c\x14\x39\x9f\x69\x28\x92\x7c\x55\xcc\xd7\x65\xf6\x27\xd8\x1b\xb2\x3f\xd3\x40\x61\x23\x0b\xdf\x02\x8b\x2c\x50\xd8\x48\xc2\xb7\xc0\x4e\x49\xc8\x55\xad\x08\x0a\x5f\xce\x56\xb1\xc2\x79\x1e\xfd\xff\x91\x55\x3f\x5a\xf0\xbc\xc4\x4a\x81\xf0\x3a\xac\xa9\xbb\x19\x4b\x14\xa7\xff\x3a\xb0\xe4\x24\x2f\xc1\x78\xd8\x49\xbc\xca\x0b\x6a\x91\x85\x99\xb8\x24\x20\xae\x72\x44\x3c\xe7\x37\x20\x26\x87\x39\x22\x1e\xf1\x1b\x10\xb9\xd7\xbc\xf6\x8e\x98\xfc\x5e\xa9\x27\xb7\x0f\xab\xa9\xc7\xc9\xe0\x15\xfa\xdd\x14\x15\x1c\xa1\x2c\xb2\xf3\x9e\x7a\xc2\x8d\x16\x3a\xac\x70\x9b\xf9\xaf\x70\x93\xc5\xe6\xc9\x5f\x8c\xd0\x49\xd5\xa6\xd6\xe8\x82\xde\x8c\xfe\xf2\x8f\xf2\x70\x87\x46\xbe\x37\x75\x68\x11\xf1\xb6\xc4\xfe\x27\xc2\xe3\x80\x69\xe0\x37\x9a\x97\x75\x60\xad\xdc\x42\xa9\xd7\xb7\x7d\xe5\x78\x27\xed\x8e\xd8\x25\x0d\xf4\xee\x27\x26\x35\xf0\x54\x0e\xe7\x4c\x4c\xb7\x45\x30\x31\xf5\x5e\xa7\x4d\x6c\x74\xd7\xc9\x7e\x53\xa2\x97\xcd\xe5\x05\x6d\xdc\x48\x41\x8e\xdb\x07\x5f\xb4\x0a\xfb\xb5\x71\x9e\x51\xdf\x6a\x04\x3a\x97\x8a\x9b\x9f\xf3\xb6\x9e\xf2\xab\x2c\x7e\xc1\xb7\xb2\x99\xa3\xfe\x71\xc3\x1b\xdd\x6a\x73\x06\xfe\x58\xf9\x90\x44\x5f\x8c\x98\x8e\x67\x78\x29\x11\x0f\xb2\x1d\x28\x59\x8d\xa6\x3e\xcd\x91\x1e\x83\xc0\x87\xe9\x1c\x0b\x07\x30\x39\x2e\xc7\xa6\xf4\x18\x8f\xcc\x2f\x21\x94\x5d\x63\x7d\xfd\xa8\x75\x0b\xb2\xa7\x41\x12\xeb\x54\x19\x29\xfe\x3c\x4f\xb1\xb9\x1f\xee\xe1\xeb\x00\xd6\x31\xe9\xaf\xaa\x53\x44\xd6\x41\xa7\xcd\xcb\xcc\xe2\x38\x31\x59\xef\x7c\x2e\xf6\xa1\x01\xfd\xd1\xc8\x06\xee\xc0\x28\xbd\x39\x75\x70\xa9\xcf\x0b\x6e\xa4\xc6\xf9\x74\xc0\x53\xee\xa5\x71\xea\x49\x36\x3e\x64\x63\x73\x2c\xc4\x0e\xe4\x06\x53\xbc\x4e\xb9\x1e\xac\x94\xaa\x9d\x93\x5b\x27\x1d\xd0\x64\x65\xfd\xfa\x52\xb7\x1e\x76\x7e\x9e\xd6\x88\x33\x8e\x3a\x30\x91\x9a\xe6\xc0\x04\x0e\x4e\x1c\x66\xf9\x9c\x8c\x36\xef\xb5\x55\x4e\x9b\x17\x9a\xf9\x78\x49\x67\xc9\x56\xb9\x07\xd3\x32\xc9\x9d\xd1\x4e\x37\x9a\x88\x8d\x95\x77\x46\x1d\xa4\x83\x5f\x68\xc6\xf8\x89\xe1\xb1\x55\x0d\x93\xa7\xf7\x26\x7b\x6d\x36\x83\xf1\x05\xf1\x9e\x35\xfb\xc5\x0b\x91\xbd\x0f\xd3\x8b\x94\xbd\x47\xf1\xa9\xc7\x72\xaa\x3c\xa2\xd9\x27\xd9\x56\xb9\x8f\x46\xf6\xcd\xee\x64\x19\xa1\x3d\x40\xac\x54\x59\x76\xaa\x4e\x75\x7b\xdd\x03\x2d\xa4\xbc\x2a\xb0\xc2\x73\x34\x46\x74\xff\xa4\xb6\x63\x44\x1f\x89\x99\xf1\x0e\x2d\x83\x67\xc9\xf0\xb9\x7c\x9a\xeb\x6d\x16\x32\x8b\xdb\x35\xc9\x9c\xf7\x4a\x88\xc9\x33\x9a\x14\x89\x25\xef\xf8\x83\x92\x79\xc7\xb9\x29\x83\x6d\xad\xb6\x3d\x56\x06\x9e\x3d\x0b\x73\xdc\x75\x7e\xdc\x4b\x54\xcc\xd0\xfa\xa4\x7a\x65\x77\x65\xf9\x3f\x72\xe0\x42\xf9\x26\xaa\x0a\x7f\xc9\xe3\x3b\x93\x11\x75\x2d\x67\xf6\xb4\x04\x3c\x6a\xfd\xdc\x49\xf3\xec\x35\xe2\x7d\x43\x0f\x6d\xfc\x55\x8a\x1d\x50\x69\x4c\xf9\x8c\x9f\x1a\x53\x54\xe5\x12\x2d\xc7\x24\x15\x1e\xd3\x9d\xee\xc0\x52\x77\xf9\xf2\x9e\xea\x9e\x55\x71\x5e\xe3\xc4\xf7\x2e\x74\x4d\x68\xc7\x9d\x36\xf1\x50\x2e\xbe\xcc\x84\xc6\x31\xe7\x3e\xe9\xde\x49\xd5\x83\x09\x90\x73\x3e\x66\xec\xe0\xa7\x5f\xc5\xd8\x64\x07\x3e\xe9\x1b\xe6\x40\xf3\x93\x7d\x4a\xde\xf7\xd3\x46\x4c\xda\xbd\xd2\x11\xfe\xec\x7e\x85\x23\xb4\xbb\x5c\x6c\x26\x19\x5f\xf9\xb9\x3b\xd5\x70\xaa\xb7\x9c\xd4\x88\x85\x5e\x73\x8c\x8a\xe5\x68\x59\xee\x11\x67\x7f\xfb\xa4\x5c\x91\x07\xd9\x69\xa6\x98\x5f\xb3\xd7\xdd\xa2\x99\xfc\xd2\xa0\x24\xcc\x5b\x3c\x53\xe3\x8e\xda\x7c\x35\x9b\xe4\x57\x65\xfd\x67\x72\x6e\xd5\xb1\x9c\xf4\xbd\xe6\xf8\xb3\x2c\x31\x8e\x4e\xd9\xd1\x36\xdf\xa5\xb2\x3a\x47\x1e\xac\x74\x23\xd6\x8a\x73\xf5\x8d\xea\x26\xa1\xb6\x35\xb2\xa7\x91\xf1\x7f\x00\x00\x00\xff\xff\x9f\x05\x57\xae\x38\x19\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6456, mode: os.FileMode(420), modTime: time.Unix(1519927080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampStaticIndexHtml,
		"plugins/codeamp/static/index.html",
	)
}

func pluginsCodeampStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1519789868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
	"plugins/codeamp/static/index.html": pluginsCodeampStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{pluginsCodeampStaticIndexHtml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


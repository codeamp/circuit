// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\xb6\x13\xbf\xf3\x29\x56\xe3\x8b\x32\xe3\x27\xe0\xd1\xff\xf8\xdf\xaa\x6d\x66\x5c\x3b\xc9\xa5\xe3\x03\x44\xae\x24\xd4\x24\xc0\x00\xa0\x52\x4d\xa7\xef\xde\x01\x08\x90\xf8\x22\x29\x3b\x3e\xf4\x24\x61\x17\xfb\x89\xdd\x1f\x16\x94\x15\x69\x88\x80\xcf\xb4\xc5\xc2\xfe\xff\x45\x72\x56\x14\xb2\x3a\x61\x4b\xe0\xef\x02\xe0\x5b\x8f\xe2\x52\xc2\xef\xfa\xa7\x00\x68\x7b\x45\x14\xe5\xac\x84\x4f\xf6\x5f\xf1\x4f\x51\xdc\xc0\xe7\x13\x0e\x5b\x41\x5d\x3a\xbc\x05\x81\x9d\x40\x89\x4c\x49\x20\x4d\x03\xfc\x00\xea\x84\x80\x4c\x89\x0b\x74\x9c\x6a\x3a\x65\x8a\x03\xef\x05\xf0\xfd\x9f\x58\x29\x38\x0a\xd2\x9d\x0a\x2d\x3e\x58\x33\xe6\x6f\xe0\x11\x95\xa0\x78\x46\x90\x94\x1d\x1b\x84\x5e\xa2\x80\xfd\x05\x76\x1f\x0b\x30\x8b\x2d\xad\x4b\xd8\x7d\xfc\x50\xc2\x17\x89\x22\x94\xd1\xb6\xf5\x1e\x69\xf7\xca\xed\x87\x12\xfe\xd0\xfb\x9e\x37\x59\xed\x9d\xe0\xc6\x19\x67\xc0\xae\xad\x8d\x5b\x90\x4d\x7f\x2c\xe1\x49\x09\xca\x8e\xb7\xc0\x48\x8b\xd3\x0a\xd9\x99\x0a\xce\x5a\x64\x6a\x57\x3b\xf2\x87\x12\x1e\x06\x1d\xa9\x67\x56\xb9\x9c\xec\x0c\xfe\x59\x81\xd8\x45\x2d\x72\x40\xa2\x7a\x81\x5a\xc4\xfd\x35\x22\xff\x1f\x16\xcf\x9b\x22\x95\x91\x28\xce\xb4\x32\x32\xee\xaf\x91\x79\x1a\x16\x4b\x32\x20\x3b\xac\x3c\xc1\x27\xbd\xf4\x85\x35\x21\xab\x40\x60\x83\x44\x1a\xa3\xee\xaf\x91\x7b\x1c\x16\x59\x19\x2f\x81\x5a\xce\x5f\x1a\xd9\xfb\x89\xb0\x26\x0f\x67\x22\x28\xd9\x37\x18\x29\xfa\xea\xc8\xb1\x42\xc7\xc8\x2b\xfe\x4b\x21\x93\x94\xb3\x31\x1f\x23\x65\xca\xc8\xbd\x4f\x5a\x56\x13\x68\x88\xa4\x97\xb2\x19\x6a\xb0\xc4\xfb\x50\xd1\x63\x44\x7d\xde\x4c\x1d\xea\xba\x37\xdf\xa4\x7d\x57\x13\x85\x12\xbe\x23\x54\x84\x41\x4b\x5e\x10\x6c\x8b\xd6\x44\x91\xa1\x35\x5d\xdb\x9b\xee\xac\x04\x12\x85\xb6\x5c\xb7\xb6\x86\xc7\x82\xdf\xb1\xae\x57\x41\xfd\x0f\x16\xae\xdd\x3f\x1a\xb0\x21\x6d\x6d\xc0\x25\x58\x82\x13\xb0\x4b\x9d\x12\xde\x34\x7b\x52\xbd\x44\x12\x3b\xd3\xbd\x1b\x6f\xeb\xa8\xdb\xd6\xf1\xd6\x16\x78\x09\x96\xe0\x74\xdb\xe5\xe8\xfc\xf5\xfb\x6b\x6c\xf0\xfa\xfd\xb1\x43\xba\x88\xb6\x5e\xd7\x8d\x3b\xf5\x22\x12\xd6\xa4\xd8\xc1\x37\xc8\x07\x0e\xbf\x5a\x7e\x0c\xc0\x6b\xaa\xad\xd7\x79\x25\x78\x0c\xa7\xc0\x23\x8d\x01\xbc\x5d\x7e\x08\xe0\xad\xf2\xb9\x00\x1c\x2a\x6c\x33\x10\x12\x48\x3b\x62\x46\xb1\x63\xe5\x02\x7c\x67\xfd\x49\x02\xde\x55\xff\x94\x20\x1f\xe9\xb6\x01\x14\x96\x10\x30\x47\x75\x3e\x71\x4a\xc4\x0f\xeb\xb1\x01\xff\xa0\x9e\x34\xb0\x49\x89\xb7\x37\x11\x4e\x03\xb9\x5a\x2e\x72\xfc\x4a\x39\x03\xe4\x7a\x7a\xb1\x33\x53\x41\x99\x42\x71\x20\x15\x0e\x54\x8d\xc9\xc3\xa4\xa2\x47\x07\x6c\x09\x6d\xdc\x1c\xa2\x09\x1d\x8a\x96\x4a\x73\x55\xe8\x1b\x7c\xa0\x9b\x29\x63\x08\xbf\x2e\xcd\x2c\x68\x2e\x8c\xe2\x06\xec\x4c\x91\xda\x72\x8c\xd0\x5c\x0c\xe7\x9a\xd6\xa2\x94\xe4\x88\xbe\x13\x7a\x0c\xf3\xd7\x27\x22\x4f\x81\x93\x44\x20\x53\x3f\x47\x54\x81\x07\x7f\x99\xfa\x3b\x79\xf7\x3f\xce\x14\xa1\x0c\xc5\x03\x17\x2a\xf5\x51\xf1\x8a\x87\x59\xe1\x42\x4d\xeb\x40\x95\xc5\xb7\x95\x40\xb5\x3f\xbc\x6d\x09\xab\x7d\xb5\xfe\x6c\xb8\x09\x27\xa8\x00\x38\x4d\x38\xbc\x67\x2a\x88\xcf\x8f\x41\x1f\x56\x10\x94\x39\xb2\x39\x68\xd3\x3c\x7d\x53\x2f\xa7\xeb\xc6\x17\x49\x4f\xd8\x67\x86\xc1\xc7\x61\x55\xbc\xe1\xe2\x15\xb6\x1c\x9a\x2c\xda\x1c\x37\x85\xb6\x5f\xf0\xe2\x5b\x3a\x93\xa6\x0f\x53\x5c\xf1\x30\xee\x5c\x49\x0e\xf5\xa7\xdb\x25\x97\xa9\x33\x0a\xd7\x1f\xf9\xe1\x70\x39\xf1\x51\xf0\x00\x54\x3e\x61\x25\x50\x95\x70\xc7\x79\x83\x84\x45\x15\x96\x31\xf2\x55\x87\x15\x45\x9e\x84\x1a\x46\x71\x2d\xba\xcf\x9d\x8f\x57\x8e\xe9\xb9\xf8\xcc\x95\x5a\xe8\xfa\x47\xfc\xd6\xa3\x54\x11\xf5\x37\xda\xd2\x80\xd6\x62\xcb\xc5\x25\xb3\x79\x60\x24\xfb\x95\x46\x2e\x66\x06\xcf\x9f\x04\xa9\xf0\x01\x05\xe5\xf5\x5a\xd9\xd9\x61\x2f\x0d\xc9\x31\x56\xfb\x7a\x4a\x73\x01\x40\x84\xa2\x07\x52\xe9\x7e\xd4\xcf\x64\x03\x5e\x48\x6a\x8b\x86\xa5\x83\x45\xe3\x2f\xa1\x4d\x8e\x2e\x15\x51\x18\xe2\x5a\x34\xc3\xe7\x27\x78\x2b\xf9\x29\x85\xd3\x57\x54\xa3\xc9\x89\x8d\x2d\xcd\x89\x63\x2c\x1f\xb1\xff\xfe\x1d\xfc\xef\xb8\xa4\x8a\x8b\x4b\x88\x75\x43\xcd\x4f\x94\x23\x55\x5f\x44\x13\x51\x1e\x32\x68\x2c\x24\x79\x10\xf4\x4c\x14\xfe\x1a\x76\xbb\x66\xf4\xfb\x86\x56\x11\xdd\x3d\x83\x83\x47\x30\x40\xd5\x0b\x7d\x8f\x3c\x46\x4f\x06\xef\x39\x1a\x3c\x46\xa7\xa7\x71\xf0\x30\xce\xbf\x1d\x97\xc0\xc1\x3f\xc8\xf0\x04\x8f\x54\xdd\x09\xc2\xaa\xd3\x2a\x5a\xfa\xc3\x49\x06\x27\x03\xf6\x1a\x3a\xb7\x1d\x67\x18\x5e\x2e\x31\xe6\x45\xb0\xba\x58\x51\x9c\x1d\xe8\x71\xaa\xff\x45\xf7\x17\x5c\xbf\x62\x74\x58\x1a\xe3\x36\xf9\x6e\x8c\xbd\x4b\xba\xed\xbd\x9a\x28\xee\xd0\x59\x84\x99\x0b\x38\x7e\xc9\x06\x01\x7b\xc1\xfa\x85\xf9\x44\x8f\xcc\x22\x4a\xdc\x69\x33\xbc\x38\xfc\xf8\xe0\xe7\xd2\x91\x49\xed\x81\x32\x2a\x4f\x2e\x0d\x2b\x13\x98\x97\xc1\x3b\x22\xb1\xb6\xa7\x3a\x54\x7f\x3c\xa4\x2e\xa4\x3e\x57\x16\x69\x17\x41\x00\x6c\x66\x68\x76\x9f\x14\x09\xab\x87\xaf\x66\x14\x9b\x5a\x02\x43\xac\xb1\x86\x03\x17\x83\xfb\x94\x1d\x81\xe1\xf7\x11\xef\xa9\x91\x0d\x14\x39\x67\x07\x5b\xf3\xb0\x95\xe2\xdb\x9e\xf3\x97\x96\x88\x17\x9d\x23\x7b\xf7\x87\xe1\xee\xea\x68\xea\xd4\xf6\xfc\x2f\x1b\xa9\x71\xef\xba\xd9\xd5\x99\x41\x27\x24\xae\xd9\xf2\xbf\x44\xa4\xb6\xb2\x2a\x5f\x37\xe7\xc6\xb2\xaf\x1a\x72\x8d\x5b\x9b\xe7\x4c\xd9\xae\xc5\x95\xaa\x31\xd1\x85\x73\x7e\xee\x2d\x10\x67\x66\x7c\x31\xa6\xd9\xf9\xef\x8c\x3e\xa3\xd3\xf1\xe7\x8d\x2b\x9c\x0e\x67\xf7\x9c\xa6\xe0\xbb\x40\xaa\x71\x6d\x22\x4f\x10\x67\x66\x42\xdf\xf9\x4a\x67\xce\x77\x7e\x98\x8e\x7c\x4e\x31\x67\xc6\xfb\x59\x43\xd9\xda\x9f\x41\x1e\x6b\x3e\xf9\xca\xb0\x9e\xfe\x28\x79\xd9\xbb\x7a\xd6\xc5\xf8\xae\x5b\xbc\xd4\x53\x37\x73\x2e\xde\x66\x23\xbf\x8d\xef\xe2\x88\x17\x3b\x32\xdb\x9d\xff\x06\x00\x00\xff\xff\x28\x5b\xa3\x73\x6e\x1a\x00\x00")

func pluginsCodeampSchemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaSchemaGraphql,
		"plugins/codeamp/schema/schema.graphql",
	)
}

func pluginsCodeampSchemaSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema/schema.graphql", size: 6766, mode: os.FileMode(420), modTime: time.Unix(1519510910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema/schema.graphql": pluginsCodeampSchemaSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampSchemaSchemaGraphql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


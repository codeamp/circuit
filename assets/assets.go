// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcf\x72\xdb\x3c\x0e\xbf\xfb\x29\x98\xe9\xc5\x9d\xc9\x13\xf8\xd8\xa4\xbb\xcd\x6e\xbb\xeb\x8d\xdb\x53\x26\x07\x46\x86\x6d\x6e\x25\x52\x25\x29\x6f\x3d\x3b\x7d\xf7\x6f\xf8\x47\x24\x40\x51\x4e\x9c\xf4\x9b\xf9\x2e\x89\x08\x89\xf8\xf3\x23\x00\x02\xb0\x69\x78\xcb\x35\xfb\x2a\x3a\x58\xc4\xe7\x7f\x6c\xfe\xfd\xaf\xc5\xc2\x34\x07\xe8\x38\xfb\xff\x82\xb1\x1f\x03\xe8\xd3\x8a\xfd\xc7\xfd\x5b\x30\xd6\x0d\x96\x5b\xa1\xe4\x8a\x7d\x89\x4f\x8b\x5f\x8b\xc5\xbb\xf8\xde\x9e\x7a\x08\x8f\x7e\xef\x3b\xf6\xcd\x80\x5e\x30\x36\x18\xd0\x4b\xb1\x5d\xb1\xbb\xdb\xf7\xab\x91\x18\xde\x9a\xf8\xda\x2c\xdf\xaf\xd8\x83\xa3\x3c\x5e\xf9\x97\x6b\xad\xfe\x0b\x8d\x5d\x30\xd6\x87\xa7\xc8\xe0\x9a\x99\x76\xd8\xaf\xd8\xc6\x6a\x21\xf7\xd7\x4c\xf2\x0e\xf2\x0a\xe4\x51\x68\x25\x3b\x90\xf6\xee\x76\x24\xbf\x5f\x21\x6e\x89\xb3\xc9\xac\xcd\x32\x3e\x6c\x80\xeb\xe6\x90\x3e\x0f\xcb\x3b\xd9\x0f\xf6\x9a\xf5\x5c\xf3\xce\xac\xd8\x9a\xef\x85\xe4\x56\x69\x4f\xcf\xbc\x3f\x0b\x63\x83\xea\x7f\x03\x6e\x07\x0d\x4e\xc0\x2e\x3e\x2e\x67\x77\xc7\x8f\xf3\xee\x0d\xe8\xa3\x68\xfc\x6e\x13\x1f\xe7\x77\xc7\x8f\x27\xbb\x99\xe9\xa1\x41\x2c\x36\x6e\xe9\x21\xde\x64\x42\x44\xfa\x1e\x5a\xe0\xc6\x0b\xd4\xf1\x71\x5e\x60\xfc\x38\x0b\xfc\x98\x11\x77\x1c\xd0\x01\x64\x54\xd1\x81\x39\x15\xd0\x96\xc7\x09\x13\x76\xe4\x5a\xf0\xa7\x36\x02\xd0\x68\xb0\x67\xed\x77\x1f\x64\x6d\xe2\x59\x7c\xfc\x69\x41\x1a\xa1\xa4\xc7\xc1\xa9\x35\x12\xcc\x72\xce\x45\x1e\xd2\xa6\xc7\x3a\x2f\xe4\x30\x99\xe6\x31\x2d\xbf\xa4\xc0\x22\xe1\x19\xe2\x82\xc3\x7d\x41\x1d\x55\x00\xdd\x09\x93\x84\xe7\x95\xdb\xe4\x62\xf5\x2a\x84\x5f\x0a\x46\x1f\x81\xe3\x2a\x06\xe1\x8d\x06\x6e\x61\x54\x7d\xc1\x58\xe3\x09\x51\xe9\xf1\x90\x92\x1f\x17\x6e\x1d\x22\xb5\xdf\x52\x16\x83\x27\x5c\xc2\x22\x6a\x11\xcd\x4f\x5a\x44\xc3\x97\x91\x9e\x1c\xac\xf0\xb7\xe0\xdb\x56\xf5\x88\x81\xb1\xaa\x1f\xb7\x87\xdc\x70\x55\x6c\x88\x32\x63\x0c\x24\x99\x31\x04\x96\x91\x9e\xa2\xa8\x08\x2a\x6c\x79\x26\x05\xcb\x2f\x61\x71\x0b\x2d\x10\x2d\xb6\x9e\x70\x09\x0b\x6a\xc8\xe8\xd4\xc4\x1a\x17\xd0\x4b\x14\xed\x89\x81\x5b\x14\x3c\x37\x61\x7f\xb2\xae\xe0\x4b\x4c\x7c\x15\x5f\x6a\xf2\xc8\x97\xd8\xfd\x2a\xbe\x11\x07\x14\xc2\x09\x06\x94\x42\x70\x88\xaf\x70\x6e\x19\xd9\x7e\x24\xfb\x13\x0c\x94\x6d\x40\xe1\x2d\x6c\x23\x0a\x94\x6d\x00\xe1\x2d\x6c\xa7\x20\xa4\x9c\x89\x9c\xc2\xe5\xc5\x65\xc8\x9f\x63\x9a\xa4\x49\x73\xc6\x72\xcc\x6b\x74\x84\x97\xf1\x9a\x9a\x9b\x78\x31\x74\xfa\x2f\x63\x36\x1a\x59\x26\xf2\x78\xd8\x23\x79\x99\x3e\x58\xb1\x44\x4c\xc0\x8d\x04\x62\x6a\xc9\x31\x9e\xf3\x2b\x38\x8e\x06\x97\x1c\xe3\x11\xbf\x82\x63\x69\x75\x99\xac\x33\xcf\xf2\x22\x5a\x4d\xae\xab\x22\x09\x9f\x07\xa3\x4c\xe9\xbf\x4d\x10\xc2\x28\xd2\x02\x3a\x7f\x92\x41\xae\x94\xc4\xf7\x64\xb2\xcb\x55\x96\xe8\x36\x5d\x0e\x74\x1d\xaa\x52\x44\x18\x85\x3d\x84\xfa\xe0\x2a\x5e\xc8\xf4\x22\x24\xd5\xce\x04\xc2\x4a\x25\x84\x69\xd9\x10\x44\x4c\x62\x11\x71\x94\xfd\x41\xa9\xef\x1d\xd7\xdf\xd1\x35\xfc\x14\x49\x6b\x52\x22\xbb\x6b\xf0\x83\x52\x2d\x70\x19\xeb\x83\x54\x37\x2d\x84\xb4\xa0\x77\xbc\x81\x4c\xf3\x65\x42\xcf\xf7\xb0\x62\x77\xd2\xd7\x51\x8d\x1a\x5c\x2e\x8a\x2b\x09\x3f\xed\xcd\xa0\x8d\xd2\x63\xb5\x14\xb9\xa2\x5a\x30\x14\x1e\x88\xc0\x44\xd7\xb7\xe0\x6d\x7a\xb9\x24\x90\x56\x0b\x30\xb9\x1e\x7a\x3c\x2b\x3f\x17\x7f\x41\x7c\x5e\xbf\x51\x7a\x60\xf4\x9c\xf0\x54\x79\x8f\xd2\x13\xe1\xcd\xe2\x3d\xa7\xf3\xf2\x51\xdf\x10\xe4\x23\xc2\x1b\xe5\x47\x4e\xe7\xe5\xa3\xae\x27\xc8\x47\x84\x37\xca\x8f\x9c\xce\xcb\xf7\x5d\xa4\x17\xec\x9e\x3c\xf3\xe8\xfd\x8e\x57\xc7\x45\x9b\x37\x90\xd2\xb9\x88\xe9\x90\x5f\xb7\x2b\xdf\x06\x53\x6c\x09\xae\x85\x84\xb2\xe4\x75\xb4\x0e\x8c\xf1\xf6\x65\xb9\x2e\xcd\xe0\xf5\x81\x9b\x03\xd1\x8b\x6b\x90\xf6\x53\x41\xd5\xb0\xc3\xcb\x9a\x8a\x63\x75\x88\x5d\xef\x05\x2a\x36\xaa\xeb\xb8\xdc\x62\xee\xb8\x81\xbe\xa2\x1d\x23\x29\xc0\xd0\x89\x21\xfd\x95\x76\x99\xec\xc1\xf5\x22\x8f\x57\xb4\xff\x23\x95\x8b\x7b\xe7\x74\x3d\x63\x97\xbb\x1a\xfa\x56\x9d\xdc\xe7\x1b\xab\xb9\x85\xfd\x29\x74\x39\x0b\xc6\x5a\x71\x04\x09\xc6\xac\xb5\x7a\x82\x24\xd1\x63\xc5\xb7\xa2\xf2\xc6\xa3\x84\x4b\x27\x8f\x14\x6e\x34\x29\x5a\x25\x0c\xdf\xe1\x84\x97\xc2\xdc\xc2\x8e\x0f\xad\x45\xa9\xd5\xe1\xd1\x2a\x7d\xd6\xa4\x71\xc2\x40\xdc\xba\xd4\x2d\xd7\x5c\x28\x8f\x15\xfa\x15\xfa\x1c\x79\x3b\xd0\x63\x6b\x14\x45\xb7\x76\xfc\xc1\x1d\x5d\xc0\xd4\xce\xe3\x08\x3a\x45\x48\xce\x80\xe7\x4e\x74\x62\xae\x30\x9b\x58\xd9\xd1\x0b\x08\x8f\x25\x88\xcf\x3a\xcf\x7a\xe6\x24\x9a\x7e\xb8\x87\x1f\x03\x18\x5b\x50\x3f\x8b\x4e\x10\x5a\x07\x9d\xd2\xa7\xca\xc7\xe1\xc5\xe4\x7b\xeb\xb2\x82\xf4\xbd\xf2\xdf\x35\x6f\x60\x0d\x5a\xa8\xed\x73\xa1\x37\x76\x98\xf8\xca\x7b\x41\xe8\x51\xec\xb9\xb6\x62\xc7\xbd\x63\x84\x3e\x9e\xb1\x03\xf0\x6d\x4c\x36\x69\x2c\xe4\xb5\xe4\xa2\xad\xd1\x8d\xe5\x16\x68\xda\x28\x46\x0b\x73\x83\x05\xbf\xf3\xcb\x34\x5b\x5d\x70\xd4\xf8\x0e\x20\xf9\xff\x99\xc3\xc4\xc3\xbb\xa0\x73\xaf\x8c\xb0\x4a\x9f\x68\x0e\x8a\xed\x41\xa2\xec\x85\xfd\xa6\xdb\x82\xb2\xd6\xca\xaa\x46\x11\xb2\x36\x7c\xad\xc5\x91\x5b\xf8\x27\x8d\x18\xf7\x62\x78\x6a\x45\x53\xd0\xd3\x88\xce\x1c\xd4\xff\x6e\x7d\x06\x72\x66\x46\xff\x3d\x33\xf7\x2b\x26\x77\xcd\xa0\x5d\x2e\xbf\x2f\x06\x19\xaf\x99\xaa\x5d\x3c\xf7\xbb\x70\x4e\x06\xd8\x43\xaa\xc3\xab\xbd\xb0\x1f\x34\x97\x0d\xb9\x96\x1a\x25\xad\x90\x83\x1a\x4c\x80\x89\xa4\x42\x20\xa5\xed\xb4\x7e\x1d\x4b\x55\x84\xed\x9c\x5b\x15\xd3\xbb\x90\xb8\x13\xed\x99\x64\xa1\xba\x5e\x49\xa0\xb7\x54\x99\xe8\x8a\x5c\x7a\xd6\xed\x95\xdc\x89\x7d\x0e\xd2\x33\x61\x90\x1b\x12\x1c\x0f\x73\x8a\xd7\x52\x44\xad\x51\x9c\x49\x16\x13\xbd\x06\x63\x55\x77\x53\x50\x27\x29\xe2\x77\x45\xfe\x64\xb4\x49\xb2\xe1\x9c\xcd\xe5\x90\xaf\xb0\xb9\x44\x0c\x87\xc2\x46\xec\x65\x4c\x81\x65\x9a\x98\x79\x57\x9a\x5e\x3a\xc1\x1c\x14\x15\xb0\x77\x42\x0a\x73\xc0\xf7\xdc\x19\x37\x60\xc2\xc5\xdc\xc2\xff\x25\x03\xd1\x04\x46\x90\x35\x9f\xc2\xaa\xb9\x8e\x86\x63\x3d\xa0\xe8\x41\xe6\xe9\xf6\xb9\xd8\x25\xba\x87\x1f\x3c\x6a\x16\xa0\x9f\x42\xbc\x1d\xd3\xbc\x3d\x17\xe3\xb8\x01\x75\x2e\x41\x98\x93\x3c\xe5\x19\x37\xa4\xd8\xf7\x95\x9f\xbf\xb5\xef\xa4\xa5\xae\x87\xf9\xe0\xa1\xf1\x14\x66\x74\xb1\x66\x4c\x50\x0c\x52\x62\x15\x41\xef\x05\x4a\x37\x70\x0f\x4f\x83\x68\x27\xf6\x8d\xf5\x0d\x56\x0a\xcf\x73\xa7\x4a\x55\x65\x5f\x56\x9e\x97\x7b\x67\x6a\xf3\xa8\xc7\x5a\xe9\xe0\x87\x57\x8f\x95\x68\x98\xb5\xba\x56\x93\xdf\x4e\x68\x81\x71\xad\x4e\xff\x04\xbc\xb5\x07\xbf\xf4\x1f\xd5\x6b\xf6\xe9\x57\x1e\xd6\x1b\x25\x2d\x17\x12\xb4\x37\xa6\x86\x6e\xb2\x2a\xb4\x97\x4a\xdb\xe2\x80\x8b\xe8\xfa\xb5\x88\xfb\x67\x6c\xf0\x6c\x4a\x70\x3a\xfe\x73\x33\xe8\x7d\x49\xfb\x26\xf9\x91\x8b\xd6\x15\xee\x15\x01\xa5\x49\x13\xce\xbe\x2e\xb5\x87\xa2\xe0\xa4\x1e\x90\x6c\xba\xf3\xc3\x5f\xff\xc3\x2c\x66\xd0\x73\x8b\x73\x82\x90\xc2\x0a\xde\xde\x42\xcb\x4f\x1b\x68\x94\xdc\x9a\x71\x6b\xef\x6b\xdb\x82\x68\x45\x07\x6a\xb0\x05\xd5\x0c\x4d\x03\xc6\x7c\x3d\x68\x30\x07\xe5\x9c\x3d\xd0\x77\x5c\xb4\x83\x86\x82\x3e\xa9\xef\x6b\xc7\x94\x86\xfa\xd3\x40\xf8\xeb\x94\xfb\x93\xb6\x0c\x1b\x52\x0e\xe6\x9f\x37\xe4\x35\x1d\xe4\x6c\x67\x58\x80\x9a\xa6\xe6\x53\x35\x9e\x6b\x14\x27\xf7\xe0\x4c\xe3\x48\xae\x8f\xd9\xf4\x30\xd7\xf0\x55\x7f\x88\xa5\x80\x92\xb9\xee\xc5\x70\x56\x0b\xbd\x59\x35\xcb\x72\x89\x82\x50\xd7\xb8\x72\x0b\x9e\xd5\xf9\xba\x9a\xd5\xaf\x71\x8d\x53\xd0\x5f\x56\xc4\xcd\x18\x95\xa6\x60\x79\x6a\x4d\x54\xae\x0d\xb4\xbd\xc6\xae\x11\x2d\xee\x41\x32\x1d\xa3\x1b\xe3\x95\x71\xa9\xbc\x2c\x6e\xe2\x80\x7b\xcd\xe5\xac\xbf\xcc\x44\xdf\xf4\x75\x16\x30\x7b\xe8\x2f\x14\x14\xa0\x99\x15\x94\x91\xab\x5d\xd9\x14\xba\x19\x35\x03\x7c\x7f\x04\x00\x00\xff\xff\xbf\xd6\xa7\xf4\x6f\x23\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9071, mode: os.FileMode(420), modTime: time.Unix(1531934640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529614596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


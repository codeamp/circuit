// Code generated by go-bindata.
// sources:
// plugins/codeamp/schema.graphql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xc1\x72\xe3\x36\x0f\xbe\xeb\x29\xe8\xd9\x8b\x77\x26\x4f\xa0\xe3\xee\xe6\xff\x9b\xb6\xdb\xa6\x71\x73\xda\xc9\x81\x91\x19\x9b\x8d\x24\x7a\x49\xca\xd3\x4c\xa7\xef\xde\x21\x09\x52\x00\x24\xd9\x71\x76\x3b\xd3\x4b\x22\x82\xe4\x47\xe0\x23\x00\x02\x76\x8d\x6c\xa5\x15\xbf\xeb\x4e\x55\xf0\xfd\xe3\xe6\xd7\x5f\xaa\xca\x35\x7b\xd5\x49\xf1\x57\x25\xc4\xd7\x41\xd9\x97\x5a\xfc\x16\xfe\x55\x42\x74\x83\x97\x5e\x9b\xbe\x16\x9f\xe1\xab\xfa\xbb\xaa\xde\xc1\xbc\x7f\x39\xa8\xf4\x19\xf7\xbe\x13\xf7\x4e\xd9\x4a\x88\xc1\x29\xbb\xd6\xdb\x5a\xdc\x7c\x7a\x5f\x67\x61\x9a\x75\x30\xed\xd6\xef\x6b\xf1\x25\x48\x1e\x56\x71\xf2\xd6\x9a\x3f\x54\xe3\x2b\x21\x0e\xe9\x0b\x00\xae\x84\x6b\x87\x5d\x2d\x36\xde\xea\x7e\x77\x25\x7a\xd9\xa9\x71\xa4\xfa\xa3\xb6\xa6\xef\x54\xef\x6f\x3e\x65\xf1\xfb\x1a\xa1\x15\x64\x37\x42\xa7\xc3\x41\x0e\xe7\xff\x4f\x49\x3f\x58\x15\x56\x3d\xc1\x67\x5c\x05\x72\x58\xb5\x51\xf6\xa8\x9b\xb8\xca\xc1\x67\x5c\x05\x72\xba\x4a\xb8\x83\x6a\xd0\xd2\x4d\x18\xe2\xe5\x41\x00\x5b\xee\x54\xab\xa4\x8b\xc0\x16\x3e\xe3\x4a\x90\xc3\xaa\xeb\xd1\xdc\xb0\x12\x59\x9f\x56\xa3\xf9\xe9\x0e\x71\x94\x56\xcb\xc7\x16\xb4\x6f\xac\xf2\x59\x9b\xf0\x4d\xef\xe1\xfa\x4f\xaf\x7a\xa7\x4d\x1f\x8d\x08\x67\x65\x01\x9c\x94\x87\x0b\xdb\x10\xdb\xd7\x74\x27\x5f\x49\x09\x40\xe7\x8c\x54\x30\x84\x3b\x26\xcd\x2a\x28\xdb\x69\x57\x0e\x1f\x47\x61\x53\x70\xf4\x55\xf2\xdd\xe2\xc9\xd1\x7d\xf3\x08\x3c\xf8\xa3\x55\xd2\xab\xac\x7a\x25\x44\x13\x05\xa0\xf4\x1a\xe4\xc5\xc1\x6e\xfa\xc3\xe0\x99\xbf\xdd\x1f\xb6\x14\x62\x88\x82\x4b\x20\x40\x0b\x30\xbf\x68\x01\x86\xaf\x41\x5e\x67\xd2\x32\xc4\x5d\x59\x5f\x20\xc0\xf5\x0a\x04\x78\xde\x1a\xe4\x75\xf6\xd5\x0c\xb1\x29\xeb\x8b\x21\xa3\x28\x19\x72\x09\xc4\x27\xd5\x2a\xa2\xc5\x36\x0a\x2e\x81\xa0\x86\x64\x77\x24\xd6\x84\x38\x5a\xa3\x20\x2b\x00\x61\xc0\x30\x37\x69\x7f\xb1\x8e\xe1\x12\x13\xdf\x84\x4b\x4d\xce\xb8\xc4\xee\x37\xe1\x02\x0f\x28\xe6\x0b\x0d\x28\xc8\xd7\x68\xbe\xc6\xd1\x9f\x61\xaf\xc9\xfe\x42\x03\x85\x4d\x2c\x7c\x0b\x2c\xb0\x40\x61\x13\x09\xdf\x02\x3b\x25\xa1\x64\x35\xe4\x14\x21\x9d\xad\x53\x86\x0b\x3c\x86\xff\x23\xab\x61\xb4\x60\x39\xc6\xca\x8e\xf0\x3a\xac\xa9\xb9\x05\x4b\xa0\xdb\x7f\x1d\x58\x36\x92\xa7\x60\xb8\xec\x2c\x5e\x97\x05\xb5\x28\xc2\x42\x5c\x16\x10\x53\x39\x22\xdc\xf3\x1b\x10\xb3\xc1\x1c\x11\xae\xf8\x0d\x88\xdc\x6a\x9e\x7b\x47\x4c\xfe\xae\xd4\x93\xd7\x87\xe5\xd4\xd3\x64\xf0\x0c\xfd\xdd\x0e\x42\x1c\x81\x2c\xb1\xf3\x2f\x19\x14\xca\x2a\xfc\xec\x15\xbb\x42\x95\x85\x1e\xc7\xf5\x40\xc7\xa9\x42\x43\x82\x7c\xd8\x97\x54\x4e\xad\x1e\xe0\xe1\x8c\x85\x5c\x7c\x34\xc3\x57\x7c\x30\x53\x8d\x16\xde\x5f\xd5\x49\xdd\xe6\x0a\x6c\x45\x1f\x60\x02\x95\xaf\x75\x5b\xc7\x4a\x14\xb0\xa1\xcc\x4a\xf0\x30\x60\x27\xf0\x87\x33\xc8\x3a\xe5\x9c\xdc\x29\x7c\x6e\xb0\x0e\x8f\xf7\xd2\xed\x89\x5e\xd2\xaa\xde\xff\xc0\xa4\x56\x3d\xe1\xe1\x9c\x8a\xf9\x51\x8a\x2a\xe6\x12\xef\xbc\x8a\x8d\xe9\x3a\xd9\x6f\x31\x3a\xae\x61\x57\xb4\x3e\x24\x79\x3f\x6d\x1f\x42\x6e\x44\xfa\x1b\xeb\x03\xa3\xa1\xa2\x89\x74\x2e\xe5\xd0\x30\x17\x74\x3d\x67\x17\xce\xb1\xd1\x36\x5c\x33\x52\xfb\xb8\xe2\x8d\x69\x8d\xbd\x00\x7f\x4c\xb0\x40\x62\xc8\x79\xec\x8c\x67\xf5\x82\x11\x8f\xb2\x1d\x28\x59\x8d\xa1\x36\xcd\x91\x9e\x9c\x20\xb8\xe9\x1c\x0b\x47\x65\x8b\x5f\x8e\xb5\xef\x29\x1e\x99\x5d\x42\x68\xb7\x81\x34\xfe\xc1\x98\x56\xc9\x9e\x3a\x49\x4a\x87\xd8\x53\xc2\x7d\x9e\x63\xf3\x30\xdc\xa9\xaf\x83\x72\x9e\x49\x7f\xd6\x9d\x26\xb2\x4e\x75\xc6\xbe\xcc\x2c\x4e\x13\x93\xf5\x3e\xc4\x62\x1f\xeb\xdc\xff\x5b\xd9\xa8\x5b\x65\xb5\xd9\x9e\xbb\xb8\x5c\x4e\x46\x33\x72\x7d\x7e\xde\xe1\x29\xf7\xd2\x7a\xfd\x24\x9b\xe0\xb2\xa9\x06\x17\x62\xaf\xe4\x16\x42\xbc\xce\xb1\x1e\xb5\x94\xba\x9d\x93\x3b\x2f\xbd\xa2\xc1\xca\xda\x82\xa5\xa6\x20\xee\xfc\x3c\xcd\x11\x17\x5c\x75\x64\x22\xd7\xe6\x91\x09\x18\x9c\xb9\x4c\xdc\xb5\x26\x9d\x0f\xc6\x69\x6f\xec\x0b\x8d\x7c\xa8\x05\x8a\x64\xa7\xfd\xbd\x6d\x99\xe4\xd6\x1a\x6f\x1a\x43\xc4\xd6\xc9\x5b\xab\x8f\xd2\xab\x9f\x68\xc4\x84\x89\xe1\xb1\xd5\x0d\x93\xe7\xb6\x96\x35\xb5\xcd\x60\x43\x42\xbc\x63\x3d\x05\x6a\x44\x59\x1b\x9a\x1b\x5f\xd6\xf6\x42\x47\xc9\x62\x0a\x5f\xd1\x6c\xe7\xb7\xd3\xfe\x83\x95\x7d\xb3\x3f\x9b\x46\x68\xa9\x91\x32\x55\x91\x9d\xcb\x53\xdd\xc1\xf4\x8a\x26\x52\x9e\x15\x58\xe2\x39\xe9\x23\xa6\x7f\xd2\xbb\xd1\xa3\x4f\xf8\xcc\xf8\x54\x63\xe7\x59\x52\x7c\x2e\x9e\xe6\x4a\xa8\x85\xc8\xe2\x7a\x4d\x22\xe7\x7b\x05\xc4\xa4\x5b\x27\x49\x62\xc9\x3a\xde\xb7\x32\xeb\x38\x37\xd8\xd9\x36\x7a\xd7\x43\x66\xe0\xd1\xb3\x30\xc7\x4d\xe7\xd7\xbd\x44\xc5\x0c\xad\x4f\xba\xd7\x6e\x8f\xd3\xff\x89\x0b\x17\x3a\x94\x4f\x55\xfc\x4b\x7a\xfc\x42\x46\x3a\x6b\x39\xb2\x67\x53\x00\x0d\x92\x4a\x88\x47\x63\x9e\x3b\x69\x9f\x83\x16\xf0\x06\xd1\x8b\x1c\x7f\x10\x63\x97\x86\x15\xc4\xbf\x20\x4c\x15\x44\x99\x1a\xa3\x15\x3f\xa5\xc2\x53\x67\xe7\x77\x11\x9f\x8d\x9b\xfe\xe9\xd9\xb3\x47\x5c\x56\x4c\xf1\xbd\x0b\x95\x14\xe8\x71\x6b\x6c\xba\xa8\xd5\xc3\x8c\xbb\x9c\x32\xee\xa3\xe9\xbd\xd4\x7d\x28\xbf\x8d\xf5\x73\x36\x16\xec\x68\x67\x58\xc5\xd8\x64\x4e\x30\xa9\x25\xe6\x40\xcb\xaf\x05\x53\xf2\xfe\x3b\xa5\xc5\xa4\x04\xc4\x86\xf0\x8e\xff\x15\x86\xd0\x8a\x73\xb1\xc0\x64\x7c\x95\x4e\x7b\x7a\xc2\xb9\x7a\x73\x92\x37\x16\xea\xcf\xd1\x2b\x96\xbd\x65\xb9\x6e\x9c\xfd\xd9\x95\x72\x45\x7a\xc1\xf3\x4c\x31\xbb\x66\x9f\xc0\x45\x35\xf9\x43\x42\x49\x98\xd7\x78\x26\xef\x9d\xd4\xf9\x6a\x36\xc8\xaf\xf0\x9b\xc0\xe4\x5c\xab\x53\x31\x49\x7b\x5a\xa2\xdc\x5c\xbb\x1b\x75\x0b\x95\x2b\xcb\x73\xa4\x89\xa5\x1b\x21\x57\x5c\x7a\xde\x78\xdc\xc4\xd5\x76\x56\xf6\xd4\x33\xfe\x09\x00\x00\xff\xff\xe2\x55\x26\x91\xb3\x19\x00\x00")

func pluginsCodeampSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampSchemaGraphql,
		"plugins/codeamp/schema.graphql",
	)
}

func pluginsCodeampSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/schema.graphql", size: 6579, mode: os.FileMode(420), modTime: time.Unix(1520380868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/schema.graphql": pluginsCodeampSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pluginsCodeampSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


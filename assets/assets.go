// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x72\xdb\xb8\x0e\xbe\xf7\x53\xd0\xd3\x1b\x77\x26\x4f\xe0\xcb\xc6\x3d\x49\xce\x69\xcf\x7a\xe3\xf6\x2a\x93\x0b\x46\x86\x6d\x6e\x24\x52\x25\x29\xb7\x9e\x9d\x7d\xf7\x1d\xfe\x0a\xfc\x91\x13\xa7\xdd\x99\xbd\x49\x44\x48\xfc\x08\x7c\x04\x40\x80\x56\x0d\x6d\xa9\x24\x5f\x58\x07\x33\xff\xfc\xdf\xcd\x6f\xff\x9f\xcd\x54\x73\x80\x8e\x92\x3f\x67\x84\x7c\x1b\x40\x9e\x96\xe4\x77\xf3\x6f\x46\x48\x37\x68\xaa\x99\xe0\x4b\xf2\xd9\x3f\xcd\xfe\x9a\xcd\xde\xf9\xf7\xfa\xd4\x83\x7b\xb4\x73\xdf\x91\xaf\x0a\xe4\x8c\x90\x41\x81\x5c\xb0\xed\x92\xdc\xad\xde\x2f\x83\xd0\xbd\x55\xfe\xb5\x5a\xbc\x5f\x92\x07\x23\x79\x9c\xdb\x97\x6b\x29\xfe\x80\x46\xcf\x08\xe9\xdd\x93\x07\xb8\x22\xaa\x1d\xf6\x4b\xb2\xd1\x92\xf1\xfd\x15\xe1\xb4\x83\x71\x04\xfc\xc8\xa4\xe0\x1d\x70\x7d\xb7\x0a\xe2\xf7\x4b\x84\x16\x91\xd5\x08\xad\x16\xfe\x61\x03\x54\x36\x87\xf8\xb9\x1b\xde\xf1\x7e\xd0\x57\xa4\xa7\x92\x76\x6a\x49\xd6\x74\xcf\x38\xd5\x42\x5a\xf9\x88\xfd\x89\x29\xed\x54\xff\x0f\x50\x3d\x48\x30\x0b\xec\xfc\xe3\x62\x72\xb6\xff\x78\x9c\xbd\x01\x79\x64\x8d\x9d\xad\xfc\xe3\xf4\x6c\xff\x71\x31\x9b\xa8\x1e\x1a\x04\xb1\x31\x43\x4b\xf1\x66\x14\x78\xa6\xef\xa1\x05\xaa\xec\x82\xd2\x3f\x4e\x2f\xe8\x3f\x1e\x17\xfc\x38\x32\x6e\x10\xd0\x06\x8c\xac\xa2\x0d\x33\x2a\xa0\x29\x8f\x05\x08\x39\x52\xc9\xe8\x53\xeb\x09\x68\x24\xe8\xb3\xf6\x9b\x0f\x46\x6d\xfc\x5e\x7c\xfc\xa1\x81\x2b\x26\xb8\xe5\xc1\xa8\x15\x04\x6a\x31\xe5\x22\x0f\x71\xd2\x63\x1d\x0b\x39\xcc\x28\xb3\x9c\xe6\x5f\xa6\xc4\xa2\xc5\x47\x8a\x33\x84\xfb\x4c\x1a\x54\x00\xd9\x31\x15\x17\x1f\x47\x66\x92\x89\xd5\xb9\x0b\xbf\x18\x8c\x36\x02\xc3\xc8\x07\xe1\xb5\x04\xaa\x21\xa8\x3e\x23\xa4\xb1\x02\xaf\x74\xd8\xa4\xe8\xc7\x99\x5b\xbb\x48\xed\xb7\x29\xc4\x60\x05\x97\x40\x78\x2d\xbc\xf9\x51\x0b\x6f\xf8\xc2\xcb\xa3\x83\x65\xfe\xe6\x7c\x5b\x8b\x1e\x01\x28\x2d\xfa\x30\xdd\xe5\x86\x79\x36\xc1\xaf\xe9\x63\x20\xae\xe9\x43\x60\xe1\xe5\x31\x8a\xb2\xa0\xc2\x96\x8f\x22\x67\xf9\x25\x10\x2b\x68\x21\xd1\x62\x6b\x05\x97\x40\xa4\x86\x04\xa7\x4e\xac\x31\x01\xbd\x40\xd1\x1e\x01\xcc\x20\xc3\xdc\xb8\xf9\xd1\xba\x0c\x37\x31\xf1\x4d\xb8\xa9\xc9\x01\x37\xb1\xfb\x4d\xb8\x9e\x07\x14\xc2\x91\x06\x94\x42\x70\x88\x2f\x71\x6e\x09\xb0\x1f\x93\xf9\x91\x86\x14\xd6\xb1\xf0\x33\xb0\x9e\x85\x14\xd6\x91\xf0\x33\xb0\x25\x09\x31\x67\x22\xa7\x30\x79\x71\xe1\xf2\x67\x48\x93\x69\xd2\x9c\xb0\x1c\x63\x05\x47\x78\x1d\x56\x69\x6e\xc4\x22\x68\xf7\x5f\x07\x16\x8c\xcc\x13\xb9\xdf\xec\x20\x5e\xc4\x0f\x96\x24\x0a\x23\x71\x41\x90\x98\x9a\x23\xfa\x7d\x7e\x03\x62\x30\x38\x47\xf4\x5b\xfc\x06\xc4\xdc\xea\x3c\x59\x8f\x98\xf9\x41\xb4\x2c\x8e\xab\x2c\x09\x9f\x27\x23\x4f\xe9\xbf\x6c\x21\xc4\x91\x97\x39\x76\xfe\x21\x83\x4c\x29\x89\xcf\xc9\x68\x97\xa9\x2c\xd1\x69\xba\x18\xd2\xb1\xab\x4a\x91\x20\x2c\xf6\xe0\xea\x83\xb9\x3f\x90\xd3\x83\x30\xa9\x76\x0a\x0a\x2b\x95\x10\x96\x8d\x86\x20\x61\x5c\x16\x09\xc3\xda\x1f\x84\x78\xee\xa8\x7c\x46\xc7\xf0\x93\x17\xad\x93\x12\xd9\x1c\x83\x1f\x84\x68\x81\x72\x37\xf3\x06\x34\xb9\x61\x9a\x5c\x8b\xae\x63\x56\xd3\x3d\xe8\x1b\xa6\xfd\x38\x68\x67\xca\xa1\xbb\xd5\xbc\xa8\xa2\xad\x8c\xc3\xf7\x88\x8a\xf1\x6d\xfd\x11\xeb\xb2\x19\xe3\x1a\xe4\x8e\x36\x30\xca\x6c\x19\xd2\x88\xc1\xa4\xb7\x3b\xae\xfd\x14\x54\x48\xba\xaa\x05\x09\x08\xeb\xfa\x16\x2c\x21\x67\x60\x4c\xb1\xa9\x25\x03\x35\xd6\x4f\x8f\x1e\x7c\x2c\x0b\x1d\xf6\x38\xbe\x1c\xda\xcd\x1d\x91\x63\xc1\x1d\xa0\xa3\xe0\x2d\xd8\x76\x72\x00\x47\xbd\x80\x03\x47\x82\xcb\xc1\xfd\xe4\x00\x8e\xda\x14\x07\x8e\x04\x97\x83\xfb\xc9\x01\xdc\xf6\x74\x16\xd5\x3c\xd9\x99\xde\x17\xcd\xac\x8e\xb2\x36\x54\xda\xf3\xb4\x90\xcd\x22\xcc\x65\xbb\xed\xd2\x36\xa5\x29\x2b\x09\x23\xd9\x0a\x79\x01\x6a\x64\x1d\x28\x45\xf7\x80\xd7\x35\x41\x8f\xc7\x07\xaa\x0e\x89\x5e\x54\x02\xd7\xb7\x99\x54\xc2\x0e\x0f\x6b\x2a\x86\x5a\x0d\x7b\xc4\x2b\x54\x6c\x44\xd7\x51\xbe\xc5\xe8\xb8\x9d\x9d\xa7\xfd\x5b\x52\x0e\xcd\x8b\xbd\xe9\x85\x34\x49\xe5\xc1\xb4\x05\x8f\xf3\xb4\x15\x4b\x8a\x08\xf3\xce\x28\x7a\xc6\x28\x93\xa5\xfb\x56\x9c\xcc\xe7\x1b\x2d\xa9\x86\xfd\xc9\x35\x1c\x33\x42\x5a\x76\x04\x0e\x4a\xad\xa5\x78\x82\x28\x95\x40\xb7\xac\x14\xf7\x12\x4c\xd9\x7e\x2b\xc4\x73\x58\xcf\x51\x86\xab\x1a\x4b\x1b\xee\x01\x53\xea\x72\x4e\x9e\xe1\x84\x87\x4c\xad\x60\x47\x87\x56\x27\x59\xaf\x11\xad\x90\x67\x4d\x0c\xcd\x7f\xe9\xcd\xb5\x76\x14\x27\x92\x4c\xbf\x4c\x9f\x23\x6d\x87\x74\x0f\x1b\x91\xb2\x5d\xf3\x05\xe7\x9b\x26\x7a\x6a\xfb\x73\x04\x19\xc3\x25\xe4\xa3\xf3\x3b\x5c\x98\xcb\xd4\xc6\x17\x5d\x69\xee\xc6\x37\x06\x89\x03\x1b\x37\x7b\x61\x27\x9a\x7e\xb8\x87\x6f\x03\x28\x9d\x49\x3f\xb1\x8e\x25\xb2\x0e\x3a\x21\x4f\x95\x8f\xdd\x8b\xe2\x7b\x6d\x52\x04\xb7\x6d\xec\x8d\xa4\x0d\xac\x41\x32\xb1\x7d\x29\x0e\x43\xf3\x87\x0f\x94\x57\xc4\x61\xca\x3d\x95\x9a\xed\xa8\x75\x0c\xd7\x62\x13\x72\x00\xba\xf5\x99\x27\xde\xd8\x58\x2d\x29\x6b\x6b\x72\xa5\xa9\x86\x34\x87\x64\x5d\xff\x54\xcf\x6f\x67\x7e\x2e\x53\xd7\x45\x5b\xad\x34\x95\x89\x60\xc7\x38\x53\x87\xd4\x1b\xee\x45\xdb\x3e\xd1\xe6\xb9\x38\xcb\x7d\x75\x81\xcf\x88\x17\xdc\x00\xdf\xc8\x39\x6b\x7b\xa1\x98\x16\xf2\x94\xa6\x32\x5f\xf3\x47\xc9\x9e\xe9\xaf\xb2\xcd\x24\x6b\x29\xb4\x68\x44\x22\x96\x8a\xae\x25\x3b\x52\x0d\xff\x4b\x63\xcd\xbc\x18\x9e\x5a\xd6\x64\xf2\x78\xef\xa6\x0e\xe2\xfb\xca\xe6\x32\x63\xbd\xb7\xf4\xcc\x65\x5e\x76\x1d\xd7\x0c\xd2\x1c\x09\xf7\xd9\xed\xc4\x5b\xae\xca\x2e\xbe\xcc\xbb\xf0\xf2\x0b\xb0\x6f\x55\x6f\xa4\xf6\x4c\x7f\x90\x94\x37\xc9\xe9\xd6\x08\xae\x19\x1f\xc4\xa0\x1c\x4d\x49\x12\x85\xa4\x5e\x2d\x8b\xd2\x50\x7f\x22\x6e\xa7\x42\x33\xbb\x92\x73\x29\x3f\xca\x5e\x48\x33\xa2\xeb\x05\xb7\xae\x8f\x32\x44\x96\x22\xb3\x2c\x7c\x36\x60\x04\xdf\xb1\xfd\x18\xde\x35\x7d\x8b\x2e\x03\xc7\xc3\x94\xe2\xb5\xe4\x52\xeb\xfe\x26\xd2\x4c\xa1\xd7\xa0\xb4\xe8\xae\x33\x69\x91\x5c\x7e\x41\xce\xc0\xd9\x13\x75\x85\x38\x8f\x4e\xd9\x9c\xdf\xdc\x65\x36\xe7\x8c\xe1\x50\xd8\xb0\x3d\xf7\xc9\x33\x4f\x13\x13\xef\x72\xd3\x73\x27\x98\xa2\xa2\x42\x76\x9a\x24\x09\xa9\xa6\xc9\x33\x9e\x41\x98\x09\xc3\x99\xfd\x9b\x5c\x7c\x46\x7e\x7c\xb9\x33\x99\xd5\xaa\xe9\x2f\x8d\xd0\x7a\x8c\xa5\x7b\x3b\xde\x62\x9f\x0b\xe7\x44\x77\xf7\xc3\x46\xcd\x02\xf4\x93\x87\xb5\xa3\x4c\xe5\x53\x61\x8f\x1b\x41\xe3\x25\x09\x78\x92\xba\x2c\x70\x6f\x77\xe8\xce\xde\x69\xb5\xee\xf4\x37\x83\xc4\x11\x31\x04\xbe\x17\x2e\x19\x46\x07\xf4\x48\x07\x8a\xc8\x54\x58\x25\xcf\x1e\x1b\x42\x36\x70\x0f\x4f\x03\x6b\x0b\xd3\x42\x9d\x84\x95\xc2\x57\xb6\xa5\x52\xd5\xb5\x2f\xab\xf9\xf3\xb9\xb5\x82\xdf\x2b\xb1\x16\xd2\xf9\xdf\xfc\xb1\x12\x18\x93\x26\xd7\x0a\xfd\x55\x21\x73\xc0\x65\xf1\x7f\x0b\xb4\xd5\x07\x3b\xb0\x9f\x54\x1a\x81\xca\x27\x93\x4d\xc1\xb5\xe0\x9a\x32\x0e\xd2\x1a\x57\xa3\x3a\x5a\xe9\x9c\x48\x48\xc4\x47\x0c\xb1\x70\xcb\xe0\x66\x4e\x58\x63\x01\x72\x9a\x3a\xfa\x63\x33\x48\xef\x99\x5e\xf0\x95\xd3\x23\x65\xad\x69\x02\x72\xe8\xdc\xb6\x02\xd3\x16\xb8\xfa\x90\x55\xae\xa9\x0b\x60\x3b\x6c\xb7\x70\x80\x0e\x03\xf4\x54\xe3\x7c\xc0\x38\xd3\x8c\xb6\x2b\x68\xe9\x69\x03\x8d\xe0\x5b\x15\xa6\xf6\xb6\x48\xce\x84\x9a\x75\x20\x06\x9d\x49\xd5\xd0\x34\xa0\xd4\x97\x83\x04\x75\x10\xc6\xdb\x9d\x7c\x47\x59\x3b\x48\x28\xe4\x07\xad\xfb\x5b\xa0\x5b\x90\xc6\xe5\x90\xdd\xb7\xf1\x45\x70\xbe\x1a\x3b\xd9\x57\x96\xa7\xdc\xed\xb3\xbe\xa9\x68\x4e\x6a\xee\x10\x7f\x2c\x28\xa3\xef\xdf\xd3\xab\x14\x3d\x25\x36\x24\xbf\xf0\x7f\xd9\x90\xb7\xb4\xbf\x93\x6d\x6d\x46\x6a\xbc\x8d\x2f\xd5\x78\xa9\xcb\x2d\x8e\xe2\x89\xae\x37\x39\xae\x26\xd3\xd2\x54\xb7\x5a\xfd\x81\x37\x25\x34\xb9\x2f\xbe\x98\xce\x6a\xad\x39\xa9\x66\x5e\xb1\xa5\x24\xd4\x35\xae\x9c\xba\x67\x75\xbe\xaa\x1e\x25\x57\xb8\xcc\xca\xe4\xaf\xab\x23\x27\x8c\x8a\xf7\x79\xe3\x6d\x78\xa2\x72\xed\xa2\xdc\x6a\x6c\xba\xe8\xec\xf0\x4d\xee\xf9\xd2\x89\x3e\x5b\x5c\xba\xde\xb8\x5c\xe1\x80\x7b\x49\xf9\xa4\xbf\x4c\x44\x5f\xf9\x7a\x5c\x60\x72\xd3\x5f\xb9\x90\xa3\x66\x72\xa1\x91\xb9\x5a\x9d\x90\x52\x37\xa1\xa6\xa3\xef\xef\x00\x00\x00\xff\xff\x70\xbd\x18\x99\xc7\x23\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9159, mode: os.FileMode(420), modTime: time.Unix(1535049964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529970651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


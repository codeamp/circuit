// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\x1b\xb9\x11\x7f\xd7\xa7\xa0\x70\x2f\x0a\xe0\x4f\x20\xb4\x05\x92\x38\x8d\xdd\x26\xad\x6b\x5d\x1e\x8a\x43\x1e\xe8\xd5\x58\x62\xbd\x4b\xee\x91\x5c\xdf\x09\x45\xbf\x7b\xc1\xbf\x3b\x43\x72\x65\xcb\x77\x05\xea\x87\x44\x9c\x5d\xfe\xc8\x19\xce\xfc\x38\x33\x6b\x3a\xde\x73\xcd\x7e\x14\x03\xac\xe2\xef\xbf\xec\xfe\xfe\xb7\xd5\xca\x74\x47\x18\x38\xfb\xf7\x8a\xb1\x9f\x27\xd0\xa7\x2d\xfb\x87\xfb\x6f\xc5\xd8\x30\x59\x6e\x85\x92\x5b\xf6\x35\xfe\x5a\xfd\x67\xb5\xfa\x21\x3e\xb7\xa7\x11\xc2\x4f\x3f\xf7\x07\xf6\xcd\x80\x5e\x31\x36\x19\xd0\x1b\xb1\xdf\xb2\xdb\xeb\x77\xdb\x24\x0c\x4f\x4d\x7c\x6c\x36\xef\xb6\xec\x27\x27\xf9\xbe\xf6\x0f\xef\xb4\xfa\x17\x74\x76\xc5\xd8\x18\x7e\x45\x80\x2b\x66\xfa\xe9\xb0\x65\x3b\xab\x85\x3c\x5c\x31\xc9\x07\x98\x47\x20\x9f\x85\x56\x72\x00\x69\x6f\xaf\x93\xf8\xdd\x16\xa1\x65\x64\x33\x43\x9b\x4d\xfc\xb1\x03\xae\xbb\x63\x7e\x3d\x0c\x6f\xe5\x38\xd9\x2b\x36\x72\xcd\x07\xb3\x65\x77\xfc\x20\x24\xb7\x4a\x7b\xf9\x8c\xfd\x45\x18\x1b\xb6\xfe\x67\xe0\x76\xd2\xe0\x16\x78\x8c\x3f\x37\x8b\xb3\xe3\xcb\xf3\xec\x1d\xe8\x67\xd1\xf9\xd9\x26\xfe\x5c\x9e\x1d\x5f\xae\x66\x33\x33\x42\x87\x20\x76\x6e\xe8\x4d\xbc\x9b\x05\xd1\xd2\xf7\xd0\x03\x37\x7e\x41\x1d\x7f\x2e\x2f\x18\x5f\x9e\x17\xfc\x34\x5b\xdc\x21\xa0\x03\x98\xad\x8a\x0e\xcc\x6d\x01\x4d\xf9\x5e\x81\xb0\x67\xae\x05\x7f\xe8\xa3\x01\x3a\x0d\xf6\xac\xfe\xee\x05\xa4\xbe\x90\x87\x1e\xa2\x38\x03\x78\xd7\xc9\xeb\xe7\x87\xd9\x15\x3e\xfd\x6a\x41\x1a\xa1\xa4\x37\x9b\xd3\x22\x09\xcc\x66\xc9\xa3\x7e\xca\x93\xa8\xc3\x66\x31\xf2\xaf\x59\xe6\x8f\xa0\x7c\x93\x9e\x03\x5a\x7c\x3e\x91\x02\xe1\xbe\x90\xa6\x2d\x80\x1e\x84\xc9\x8b\xcf\x23\x37\xc9\x85\xf6\x3a\x44\x6b\x8e\x5d\x1f\xb0\x69\x14\x63\xf6\xa3\x06\x6e\x21\x6d\x7d\xc5\x58\xe7\x05\x71\xd3\xe9\x4c\xb3\xdb\x17\x51\x10\x02\x7b\xdc\x53\x88\xc9\x0b\x2e\x81\x88\xbb\x88\xea\xe7\x5d\x44\xc5\x37\x51\x9e\xfd\xb1\x70\xcf\xe0\x0b\x56\x8d\x08\xc0\x58\x35\xa6\xe9\x81\x4a\xd6\xc5\x84\xb8\x66\x0c\x99\xbc\x66\x8c\x98\x4d\x94\xe7\xa0\x2b\x62\x10\x6b\x3e\x8b\x82\xe6\x97\x40\x5c\x43\x0f\x64\x17\x7b\x2f\xb8\x04\xe2\x76\x18\x95\xb6\x6c\xe0\xf2\x94\x39\x84\x71\xcb\x94\xf4\x2f\x08\xff\x38\xf1\x4c\x42\x34\xdb\x38\x2f\x3d\x48\xc8\x89\x32\xd6\xd1\xcb\xa8\x99\x52\xc8\x10\x5b\x39\x76\xd9\x20\xea\xc9\xdb\x73\x83\x62\xc7\xbb\x30\x3f\xdb\xae\xc0\x25\x06\x7c\x13\x2e\x35\x68\xc2\x25\x56\x7d\x13\x6e\xb4\x03\x22\x88\x6c\x06\xc4\x67\x98\x40\xb6\x98\xe8\x12\xec\x27\x32\x3f\x9b\x81\xc2\x06\x2b\xfc\x16\xd8\x68\x05\x0a\x1b\x8c\xf0\x5b\x60\x6b\x23\x64\x02\x47\x4e\xe1\x49\x38\x70\x71\xe2\x5f\xca\xe0\x0b\x9a\x63\xac\xe4\x08\xaf\xc3\xaa\xd5\xcd\x58\x0c\x9d\xfe\xeb\xc0\x70\x3c\xb5\x10\xe7\xe0\xfa\x43\xf8\x63\x37\x9f\xde\x5f\xa3\x48\x0b\xb7\x58\xbc\xcd\xe6\x38\xf3\x43\x14\x66\x6e\xec\xa2\xec\x8f\xe1\xef\x42\x80\x38\x5c\xfd\x29\xfc\xb1\xf7\xfb\x7d\xba\x40\x23\x4e\xcc\xbb\xd2\x99\x95\xb7\x5e\xf4\xdd\x24\xde\xe4\x17\xb6\x2c\x0b\xb3\x1f\x24\x01\x39\xb9\x12\x31\xba\xed\x1b\x10\xd3\xf9\x95\x88\xd1\x63\xdf\x80\x58\x6a\x5d\xde\x6c\x33\x66\x79\x6b\x6f\xab\xbb\xbd\xb8\xb1\xce\x1b\xa3\xbc\xff\x7e\xb7\x85\x90\x8d\xa2\x2c\x58\xe7\x7f\xa4\x90\x4b\xd3\x71\x52\x91\xf5\x72\x59\x3b\x4a\x3d\x36\x13\x1d\x87\x8c\x1f\x09\x66\x8f\xf7\xc9\x54\xba\x57\x68\xd6\x40\x32\xc9\xca\x84\x8d\x2c\x13\xcb\x66\x45\x90\x30\x2f\x8b\x84\x69\xed\x0f\x4a\x3d\x0d\x5c\x3f\xa1\x9c\xe5\x21\x8a\xee\x48\xf9\xe1\x72\x86\x0f\x4a\xf5\xc0\x65\x98\xf9\x19\x2c\xfb\x2c\x2c\xfb\xa8\x86\x41\xf8\x9d\x1e\xc0\x7e\x16\x36\x8e\xd3\xee\x5c\xee\x78\x7b\xbd\xae\x2a\x14\x2f\x93\xf0\x4b\x46\xc5\xf8\x3e\x59\xcb\x39\xef\x4a\x48\x0b\xfa\x91\x77\x30\xcb\x7c\xce\xd6\xa9\xc9\xb1\xf5\xad\xb4\x71\x0a\x4a\xd2\x43\x8a\x87\x04\x8e\x0a\x7a\xf0\x06\x39\x03\xe3\x12\x79\xab\x85\x4b\x0a\x52\xb2\xf9\x3d\x82\xcf\x29\x77\xc0\x9e\xc7\x97\x43\x87\xb9\x33\x72\x2e\x66\x12\x74\x16\xbc\x05\xdb\x4f\x4e\xe0\xa8\xce\x0a\xe0\x48\x70\x39\x78\x9c\x9c\xc0\x51\x09\x18\xc0\x91\xe0\x72\xf0\x38\x39\x81\xfb\x7a\xd9\xa3\xba\x5f\x7e\x66\xf4\x45\x37\x6b\xe0\xa2\x4f\x65\xc9\x9a\x66\xfd\x45\x84\x05\xb6\xdb\x6f\x7d\xc1\x4f\xad\x42\x2c\x52\xac\x50\x66\xeb\x4e\x36\x80\x31\xfc\x00\x78\x5d\x17\xf4\x78\x7c\xe4\xe6\x48\xf6\xc5\x35\x48\x7b\x53\x48\x35\x3c\xe2\x61\x6b\x8b\x29\xb1\xc5\x1e\xf1\x8a\x2d\x76\x6a\x18\xb8\xdc\x63\x74\xdc\x2a\x58\xd3\xda\x98\x64\x77\xeb\xea\x6c\xdc\xe5\xe9\xcc\xe9\x6a\xa8\xef\x6b\x5a\xe6\x92\x9c\xc8\x3d\x73\x1b\x3d\xa3\x94\x63\xe9\xb1\x57\x27\xf7\xfa\xce\x6a\x6e\xe1\x70\x0a\xd5\xd9\x8a\xb1\x5e\x3c\x83\x04\x63\xee\xb4\x7a\x80\x2c\xd5\xc0\xf7\xa2\x16\x8f\x1a\x5c\x8d\x73\xa3\xd4\x53\x5a\x2f\x98\x0c\x27\x69\xde\x6c\xb8\xbe\xa6\xa6\x2b\x6d\xf2\x04\x27\x3c\x14\xe6\x1a\x1e\xf9\xd4\x5b\xc2\x7a\x9d\xea\x95\x3e\xab\x62\x6a\xac\xd4\xde\xdc\x2a\xf5\x31\x91\x14\xfb\x2b\xf6\xf3\xcc\xfb\x89\x9e\x61\xa7\xa8\xb5\x5b\xbe\x10\x7c\xd3\x45\x4f\xeb\x7c\x9e\x41\xe7\x70\x49\x7c\x74\xfe\x84\x2b\x75\x85\xd9\xc5\x1c\x92\x72\x37\xee\xc6\x10\x07\x76\x6e\xf6\xc2\x49\x74\xe3\x74\x0f\x3f\x4f\x60\x6c\x21\xfd\x22\x06\x41\x64\x03\x0c\x4a\x9f\x1a\x2f\x87\x07\xd5\xfb\xd6\x51\x84\xf4\x35\xff\x67\xcd\x3b\xb8\x03\x2d\xd4\xbe\x11\x19\x39\x2a\x16\x94\xae\x7d\x03\x5f\x3f\xe4\xea\x79\x45\xc4\xd2\x53\xe2\xda\x8a\x47\xee\x5d\x28\x74\x2e\x18\x3b\x02\xdf\x47\x8e\xca\x7d\x33\xaf\x0f\x17\x7d\x4b\x6e\x2c\xb7\x40\xd9\xa6\x68\xa6\x2c\xb5\x52\xfc\xcc\xaf\x35\xc9\x5d\xe4\x14\xc6\x72\x4d\x04\x8f\x42\x0a\x73\xa4\x26\xbc\x57\x7d\xff\xc0\xbb\xa7\xea\xd6\x8f\x79\x08\xbe\x4d\x5e\x70\x18\xdc\x17\x0d\xda\x8e\xca\x08\xab\xf4\x89\x1e\x6d\x2c\x76\xb2\xe4\x20\xec\x37\xdd\x17\x92\x3b\xad\xac\xea\x14\x11\x6b\xc3\xef\xb4\x78\xe6\x16\xfe\x4a\xa3\xd2\x3d\x98\x1e\x7a\xd1\x15\xf2\xdc\xfd\x34\x47\xf5\xcb\xb5\x67\x3d\xa7\x7d\xd4\xf4\x4c\x4b\xb5\x68\x8a\x76\x93\x76\x97\xc7\x7d\xd1\xf4\x79\x4b\xc3\xf2\x85\x96\xea\x15\x33\xbe\xe7\x8b\x14\xa9\xbb\xac\xe7\xbb\x92\x4b\x10\xb8\x51\x09\xd8\x03\x9b\xed\xc0\x83\xb0\x1f\x34\x97\x1d\xb9\x2d\x3b\x25\xad\x90\x93\x9a\x4c\x30\x26\x21\x65\x20\xf9\x6f\x9d\xe4\xa6\x7c\x16\x9d\xc0\xd2\x95\x5b\xf4\x43\xc3\x15\x92\x65\x2f\xd0\x96\x1a\x46\x25\x7d\x80\x20\xc6\x29\xaf\x44\xde\x1d\xc1\x31\x3f\xd9\x4a\xc1\xf5\x67\x83\x4d\xc9\x47\x71\x98\xa9\xa1\xa5\x45\x55\xcb\xe0\x58\x5a\x52\xa7\x45\x4c\xad\x1a\x73\x81\xa2\xaa\x7d\x4d\xc6\xaa\xe1\x63\x21\xad\x88\xe9\x77\xe0\x1b\xcc\xbc\xa8\xf6\xc4\x1c\xbc\xa4\x73\xd9\x4c\x2d\x74\x2e\x2d\x86\xc3\x68\x27\x0e\x32\x12\x6f\x49\x31\x0b\xcf\x4a\xd5\x4b\xd7\x58\x32\x45\xc3\xd8\x94\x60\x19\x6b\x52\xec\x19\xcf\x60\xc2\xc5\xeb\xca\xff\x4b\x7a\xd1\xd9\x3e\x31\xa9\x5a\x64\xc4\x26\x75\xd2\xb8\x6d\x47\x1e\x3d\xdb\xf9\xc3\xc2\xb9\x20\x27\x7b\x0f\x9f\xa6\x5a\x1a\xa0\x8f\x56\x5e\x8f\xfa\x1a\x58\x22\x03\x5c\x6e\x3a\x2f\x21\xe0\x84\xe3\x3c\xf0\xe8\x4f\xe8\xd6\x37\x02\xfb\x90\x63\xb8\x01\x71\x44\x0c\x81\x5b\xf5\xb5\x85\xd1\xe5\x3e\x9b\x03\x45\x24\x15\x36\x8d\xe7\xaf\x1c\xa5\x3b\xb8\x87\x87\x49\xf4\x95\x6a\x29\x1b\xc3\x9b\xc2\x5d\xf4\x7a\x53\xcd\xb5\x5f\x51\x59\xb4\xab\x87\xb8\xd6\x9d\xd2\xc1\xcd\xd6\xdf\x1b\xfe\xbf\xa8\x59\xab\x6a\xb8\xae\x64\x01\xb8\xae\x24\x6e\x80\xf7\xf6\xe8\x07\xfe\x95\x46\x55\xd1\x78\x65\xb1\xc2\x48\xdf\x08\x62\x63\x91\x98\xb4\xf1\x15\xc1\x5b\x36\x71\xc6\x3f\xdf\x7f\xfd\x12\xb0\xde\x7a\xcc\x7e\x0b\x1f\x95\xb4\x5c\x48\xd0\xac\xda\x41\x69\xe8\xe0\xae\x4a\xa3\x23\xc9\xc1\x9c\xba\x26\x61\xe6\x82\x41\x3d\x40\x79\x52\x03\xff\x75\x37\xe9\x18\x03\x51\xf0\x4d\xf2\x67\x2e\xfa\x70\xb5\x51\xe8\xd2\xbc\x15\xa6\x4f\xd8\xed\x91\x66\xe2\x85\xb3\x61\x3d\x7c\xf5\x73\x84\x01\x03\x8c\xdc\x62\xe6\x11\x52\x58\xc1\xfb\x6b\xe8\xf9\x69\x07\x9d\x92\x7b\x93\xa6\x8e\x3e\xe9\x2f\x84\x56\x0c\xa0\x26\x5b\x48\xcd\xd4\x75\x60\xcc\x8f\x47\x0d\xe6\xa8\x5c\x5c\x05\xf9\x23\x17\xfd\xa4\xa1\x92\x1f\xad\x1d\x6f\x80\xef\x41\x3b\xaf\x47\x7a\xdf\xe4\x07\xc9\xff\x5b\xd6\x29\xde\xf2\x76\x2a\x03\xac\xa8\x03\xab\x62\xab\xe5\x0e\xf9\x5b\x4e\x1d\xe7\xff\x4f\xb5\xd7\x62\x59\x85\x2b\x67\xac\x5e\xf9\x95\xe6\x65\xf5\xde\x52\xe4\x2f\x16\xef\x85\xa9\xf3\x27\x94\x7a\x1b\x2f\xd5\xf2\x55\x2a\xb0\x50\xdb\x93\xeb\x72\x91\x2f\x97\x6a\xf2\xb6\x0e\xcb\x34\x36\x7f\x63\x89\x2c\xe6\x05\x17\x90\x98\xab\x6b\x5f\x4f\x6b\x34\xf7\xa6\x07\x4d\xba\xf5\x17\x1f\x73\x33\x33\x5f\x34\x5f\x3b\x45\x2f\xf3\x5b\x7a\x64\xcd\xb4\xbb\x95\xa3\x9c\xd5\xe4\xaa\x69\xc8\x2b\x9c\x94\x16\xf2\xd7\x65\xdd\xe7\xac\x4e\xbf\x50\x90\x2d\xb7\x3e\x5e\xf8\x1d\xd7\xe7\x4a\x7b\xaf\x74\x62\x64\xbc\x4b\xd7\x9b\x97\xab\xc2\xe5\xa0\xb9\xac\xbc\xbb\xfe\xee\xd1\xb4\x7f\x8b\x32\x16\x5d\xe1\x95\x0b\x05\xd3\x2c\x2e\x34\x5b\xae\x15\x25\xd4\x74\x0b\xdb\x0c\xe6\xfb\x6f\x00\x00\x00\xff\xff\xf9\x89\x89\xff\xb7\x26\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 9911, mode: os.FileMode(420), modTime: time.Unix(1548883695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1533663930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x72\xdb\xb6\x12\xbe\xe7\x53\x40\x93\x1b\x65\xc6\x4f\xa0\xcb\xd8\x39\xe7\xf8\x34\x69\x5d\xab\xb9\xf2\xf8\x02\xa6\x56\x12\x1a\x12\x60\x00\xd0\x8d\xa7\xd3\x77\xef\xe0\x87\xc0\x2e\xf8\x23\xc9\x4e\x67\x7a\x63\x13\x4b\x62\xff\xb0\xfb\x61\x77\x65\x6a\xde\x70\xcd\x7e\x13\x2d\x54\xf1\xf9\xff\xdb\x5f\x7e\xae\x2a\x53\x1f\xa1\xe5\xec\xcf\x8a\xb1\x6f\x3d\xe8\x97\x0d\xfb\xd5\xfd\xab\x18\x6b\x7b\xcb\xad\x50\x72\xc3\x3e\xc7\xa7\xea\xaf\xaa\x7a\x17\xdf\xdb\x97\x0e\xc2\xa3\xdf\xfb\x8e\x7d\x31\xa0\x2b\xc6\x7a\x03\x7a\x2d\x76\x1b\x76\x7b\xf3\x7e\x33\x10\xc3\x5b\x13\x5f\x9b\xf5\xfb\x0d\x7b\x70\x94\xc7\x95\x7f\x79\xa7\xd5\xef\x50\xdb\x8a\xb1\x2e\x3c\x45\x06\x57\xcc\x34\xfd\x61\xc3\xb6\x56\x0b\x79\xb8\x62\x92\xb7\x90\x57\x20\x9f\x85\x56\xb2\x05\x69\x6f\x6f\x06\xf2\xfb\x0d\xe2\x96\x38\x9b\xcc\xda\xac\xe3\xc3\x16\xb8\xae\x8f\xe9\xf3\xb0\xbc\x95\x5d\x6f\xaf\x58\xc7\x35\x6f\xcd\x86\xdd\xf1\x83\x90\xdc\x2a\xed\xe9\x99\xf7\x27\x61\x6c\x50\xfd\x3f\xc0\x6d\xaf\xc1\x09\xd8\xc7\xc7\xf5\xec\xee\xf8\x71\xde\xbd\x05\xfd\x2c\x6a\xbf\xdb\xc4\xc7\xf9\xdd\xf1\xe3\xd1\x6e\x66\x3a\xa8\x11\x8b\xad\x5b\x7a\x17\x6f\x33\x21\x7a\xfa\x1e\x1a\xe0\xc6\xf3\xa8\x18\xd3\x61\xb5\x20\x93\x7e\xff\x8e\x7d\xcc\x3e\x77\x12\xd1\x11\x64\xbf\xa2\x23\x73\x4a\xa0\x2d\x51\x09\x44\x61\xcf\x5c\x0b\xfe\xd4\x44\x17\xd4\x1a\xec\xa2\x07\xdc\x07\xd9\x01\xf1\x34\x3e\x7e\xb7\x20\x8d\x50\xd2\x7b\xc2\xa9\x35\x10\xcc\x7a\x2e\x48\x1e\xd2\xa6\xc7\x69\x5e\x28\x64\x32\xcd\x7b\xb5\xfc\x92\xba\x16\x09\xcf\x1e\x2e\x38\xdc\x17\xd4\x41\x05\xd0\xad\x30\x49\x78\x5e\xb9\x4d\x2e\x5b\x57\x21\x01\x53\x3a\xfa\x1c\x1c\x56\x31\x0d\xaf\x35\x70\x0b\x83\xea\x15\x63\xb5\x27\x44\xa5\x87\x43\x4a\x91\x5c\x04\x76\xc8\xd5\x6e\x47\x59\xf4\x9e\x70\x09\x8b\xa8\x45\x34\x3f\x69\x11\x0d\x5f\x47\x7a\x8a\xaf\x22\xdc\x42\x74\x5b\xd5\x21\x06\xc6\xaa\x6e\xd8\x1e\xd0\x61\x55\x6c\x88\x32\x63\x16\x24\x99\x31\x09\xd6\x91\x9e\xf2\xa8\x48\x2b\x6c\x79\x26\x05\xcb\x2f\x61\x71\x03\x0d\x10\x2d\x76\x9e\x70\x09\x0b\x6a\xc8\x10\xd4\xc4\x1a\x97\xd2\x6b\x94\xef\x89\x81\x5b\x14\x3c\xb7\x61\x7f\xb2\xae\xe0\x4b\x4c\x7c\x15\x5f\x6a\xf2\xc0\x97\xd8\xfd\x2a\xbe\xd1\x0f\x28\x85\x93\x1b\x10\x84\xe0\x14\xdf\x60\x6c\x19\xd8\x7e\x24\xfb\x93\x1b\x28\xdb\xe0\x85\xb7\xb0\x8d\x5e\xa0\x6c\x83\x13\xde\xc2\x76\xec\x84\x84\x99\x28\x28\x1c\x2e\xae\x03\x7e\x0e\x30\x49\x41\x73\xc6\x72\xcc\x6b\x08\x84\xf3\x78\x8d\xcd\x4d\xbc\x18\x3a\xfd\xf3\x98\x0d\x46\x96\x40\x1e\x0f\x7b\x20\xaf\xd3\x07\x1b\x96\x88\xc9\x71\x03\x81\x98\x5a\x72\x8c\xe7\xfc\x0a\x8e\x83\xc1\x25\xc7\x78\xc4\xaf\xe0\x58\x5a\x5d\x82\x75\xe6\x59\x5e\x44\x9b\xd1\x75\x55\x80\xf0\xb2\x33\x4a\x48\xff\x61\x82\x90\x8f\x22\x2d\x78\xe7\x1f\x32\xc8\x15\x93\xf8\x9e\x4c\x76\xb9\xda\x12\xdd\xa6\xeb\x9e\xae\x43\x5d\x8a\x08\x83\xb0\x87\x50\x1f\xac\xe2\x85\x4c\x2f\x42\x52\xed\x8c\x5c\x38\x51\x09\x61\x5a\x36\x04\x11\x93\x58\x44\x1c\x64\x7f\x50\xea\x6b\xcb\xf5\x57\x74\x0d\x3f\x45\xd2\x1d\x29\x92\xdd\x35\xf8\x41\xa9\x06\xb8\x8c\xf5\x41\xaa\x9b\x2a\x21\x2d\xe8\x3d\xaf\x21\xd3\x7c\x99\xd0\xf1\x03\x6c\xd8\xad\xf4\x75\x54\xad\x7a\x87\x45\x71\x25\xe1\xbb\xbd\xee\xb5\x51\x7a\xa8\x96\x22\x57\x5c\x0a\xfa\xc2\x03\x11\x98\x68\xbb\x06\xbc\x4d\xe7\x4b\x02\x69\xb5\x00\x93\xeb\xa1\xc7\x45\xf9\xb9\xf8\x0b\xe2\xf3\xfa\x8d\xd2\x03\xa3\x53\xc2\x53\xed\x3d\x48\x4f\x84\x37\x8b\xf7\x9c\x96\xe5\xa3\xce\x21\xc8\x47\x84\x37\xca\x8f\x9c\x96\xe5\xa3\xbe\x27\xc8\x47\x84\x37\xca\x8f\x9c\x96\xe5\xfb\x3e\xd2\x0b\x76\x4f\x9e\x79\x8c\x7e\xc7\xab\xe5\xa2\xc9\x1b\x48\xe9\x5c\xe4\x74\xc0\xd7\xdd\xc6\x37\xc2\xd4\xb7\xc4\xaf\x85\x84\xb2\xe4\x75\xb4\x16\x8c\xf1\xf6\x65\xb9\x0e\x66\xf0\xfa\xc8\xcd\x91\xe8\xc5\x35\x48\xfb\xbf\x82\xaa\x61\x8f\x97\x53\x2a\x0e\xd5\x21\x0e\xbd\x33\x54\xac\x55\xdb\x72\xb9\xc3\xdc\x71\x0b\xbd\xa2\x3d\x23\x29\xc0\xd0\x89\x21\xfd\x95\x76\x48\xf6\xe0\x7a\x91\xc7\x15\xed\xff\x48\xe5\xe2\xde\x39\x5d\x4f\xd9\x85\x8b\x1d\x6f\x1b\x6e\x0d\xa9\x7d\xa5\xe2\x5f\xe1\x05\x2f\x85\xb9\x81\x3d\xef\x1b\x8b\xc0\xd0\x59\xd0\x28\xbd\xa0\x44\x9e\x0a\x90\x40\x2c\x75\xcb\x55\x12\x42\x9e\x42\xbf\x42\x9f\x67\xde\xf4\xd4\xd1\xb5\xa2\xfe\x98\x3a\xb0\x10\x40\x2e\xc4\xa7\x3c\xf8\x0c\x3a\xc5\x74\xc6\xac\xa5\x33\x18\x99\x2b\xcc\x36\xd6\x62\xf4\xca\xc0\xa3\x04\x12\x65\x2e\x16\x4e\x9c\x44\xdd\xf5\xf7\xf0\xad\x07\x63\x0b\xea\x27\xd1\x0a\x42\x6b\xa1\x55\xfa\x65\xe2\xe3\xf0\x62\xf4\xbd\x75\x79\x2c\x7d\x77\xfb\x5f\xcd\x6b\xb8\x03\x2d\xd4\xee\x54\x50\x0d\x3d\x21\xbe\xa4\xce\x48\x16\xea\x7b\xae\xad\xd8\x73\x1f\x18\xa1\xf3\x66\xec\x08\x7c\x17\xe1\x21\x8d\x72\xbc\x96\x5c\x34\x53\x74\x63\xb9\x05\x9a\xe8\xc5\x30\x60\x6e\x14\xe0\x77\x7e\x1e\xe3\xcb\x05\x47\x8d\x51\x9b\x20\xf6\x89\xc3\xc4\x03\xb7\xa0\x73\xa7\x8c\xb0\x4a\xbf\x50\xd4\x88\x05\x7d\xa2\x1c\x84\xfd\xa2\x9b\x82\x72\xa7\x95\x55\xb5\x22\x64\x6d\xf8\x9d\x16\xcf\xdc\xc2\x4f\x34\x63\xdc\x8b\xfe\xa9\x11\x75\x41\x4f\x63\x35\x73\x54\x7f\xdc\x40\xd7\xa8\x17\x67\x66\x8c\xdf\x85\x59\x5d\x31\x6d\xab\x7b\xed\xd0\xf7\xbe\x18\x3d\x5c\x3a\x06\x5b\xbd\x66\x56\x77\xe1\x64\x0b\x70\x84\x4c\x8e\x9b\x0e\xc2\x7e\xd0\x5c\xd6\xe4\x22\xa9\x95\xb4\x42\xf6\xaa\x37\xc1\x4d\x04\x0a\x81\x14\xa3\xe3\x8a\x73\x28\x2e\x91\x6f\x67\x51\x9b\xb6\x40\x01\xb8\x13\xed\x04\x58\xa8\xb6\x53\x12\xe8\xbd\x52\x02\x5d\x81\xa5\x8b\x61\xaf\xe4\x5e\x1c\x72\x92\x2e\xa4\x41\x6e\x21\x70\x3e\xcc\x29\x3e\x05\x11\x53\xad\xdd\x0c\x58\x8c\xf4\xea\x8d\x55\xed\x75\x41\x1d\x41\xc4\x8f\xca\xfc\xd1\x30\x92\xa0\xe1\x9c\xcd\xe5\x58\xae\xb0\xb9\xf4\x18\x4e\x85\xad\x38\xc8\x08\x81\x25\x4c\xcc\xbc\x2b\x4d\x2f\x83\x60\xce\x15\x13\xce\xde\x0b\x29\xcc\x11\xdf\x73\x0b\x61\xc0\x84\xcb\xb9\xca\xff\x25\x23\xcc\xe4\x8c\x20\x6b\x1e\xc2\x26\xb1\x8e\xa6\xe3\x74\x42\xd1\x83\xcc\xf3\xe8\xa5\xdc\x25\xba\x87\x1f\x29\xa6\x2c\x40\x3f\x5f\x78\x3b\xc6\xb8\x3d\x97\xe3\xb8\x65\x74\x21\x41\x98\x13\x9c\xf2\x8c\x6b\x52\x9e\x57\x8c\x35\xe1\xd6\xbe\x95\x96\x86\x1e\xe6\x83\xc7\xbc\x63\x37\xa3\x8b\x35\xfb\x04\xe5\x20\x25\x4e\x7a\xd0\x47\x81\xd2\x35\xdc\xc3\x53\x2f\x9a\x91\x7d\x43\x7d\x83\x95\xc2\x13\xd8\xb1\x52\x93\xb2\x2f\x2b\xa8\xcb\xbd\x33\xd5\x74\xd4\xe3\x4e\xe9\x10\x87\xab\xc7\x89\x6c\x98\xb1\xda\x1b\x77\xad\xa4\xe5\x42\x82\xf6\x2c\xa7\x6c\x4c\xbc\x43\x5b\xa6\xb4\x2d\xdc\x5c\xc4\xf8\xa8\x26\x9c\x62\x9a\x46\xb7\x63\xe7\xfd\x7b\x4a\xc4\x51\x29\x8f\x0d\x29\xc7\xaf\xa7\x0d\x79\x4d\xd7\x31\xdb\x4d\x14\x4e\x4d\xb3\xd1\xb1\x1a\xa7\x9a\x8b\x11\x76\xce\x34\x1b\x04\x72\x66\x13\x69\xae\x49\x98\xfc\xb9\x8d\x3a\x94\x4c\xef\x2e\x76\xe7\x64\x71\x30\xab\x66\x79\xc5\x52\x27\x4c\x6b\x3c\x81\x9c\x8b\x3a\x5f\x4d\x22\xc1\x15\xbe\x17\x0b\xfa\x79\x17\xff\x52\x3a\xd3\xd9\x24\x51\x79\x6a\x6c\xe9\x35\x76\xcd\x4b\x81\x9d\x64\x06\x42\x37\x46\x98\xb9\x54\x5e\x16\x37\x0a\xc0\x83\xe6\x72\x36\x5e\x66\xb2\x6f\xfc\x3a\x0b\x98\x3d\xf4\x33\x05\x05\xd7\xcc\x0a\xca\x9e\x9b\x82\x79\xea\xba\x19\x35\x83\xfb\xfe\x0e\x00\x00\xff\xff\x44\x2d\x6b\x23\x57\x21\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 8535, mode: os.FileMode(420), modTime: time.Unix(1530038718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529973808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


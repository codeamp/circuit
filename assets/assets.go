// Code generated by go-bindata.
// sources:
// plugins/codeamp/graphql/schema.graphql
// plugins/codeamp/graphql/static/index.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pluginsCodeampGraphqlSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x72\xdb\xb6\x12\xbe\xe7\x53\xc0\x93\x1b\x65\xc6\x4f\xa0\xcb\xd8\x39\xe7\xf8\x34\x69\x55\xab\xb9\xf2\xf8\x02\xa6\x56\x12\x1a\x12\x60\x00\xd0\x8d\xa7\xd3\x77\xef\xe0\x87\xc0\x2e\xf8\x23\xc9\x4e\x67\x7a\x63\x13\x4b\xe2\xdb\x1f\xec\x2e\x76\x57\xa6\xe6\x0d\xd7\xec\x37\xd1\x42\x15\x9f\xff\xbf\xfd\xe5\xe7\xaa\x32\xf5\x11\x5a\xce\xfe\xac\x18\xfb\xd6\x83\x7e\x59\xb3\x5f\xdd\xbf\x8a\xb1\xb6\xb7\xdc\x0a\x25\xd7\xec\x73\x7c\xaa\xfe\xaa\xaa\x77\xf1\xbd\x7d\xe9\x20\x3c\xfa\xbd\xef\xd8\x17\x03\xba\x62\xac\x37\xa0\x57\x62\xb7\x66\x77\xb7\xef\xd7\x03\x31\xbc\x35\xf1\xb5\x59\xbd\x5f\xb3\x07\x47\x79\xbc\xf2\x2f\x37\x5a\xfd\x0e\xb5\xad\x18\xeb\xc2\x53\x04\xb8\x66\xa6\xe9\x0f\x6b\xb6\xb5\x5a\xc8\xc3\x35\x93\xbc\x85\xbc\x02\xf9\x2c\xb4\x92\x2d\x48\x7b\x77\x3b\x90\xdf\xaf\x11\x5a\x42\x36\x19\xda\xac\xe2\xc3\x16\xb8\xae\x8f\xe9\xf3\xb0\xbc\x93\x5d\x6f\xaf\x59\xc7\x35\x6f\xcd\x9a\x6d\xf8\x41\x48\x6e\x95\xf6\xf4\x8c\xfd\x49\x18\x1b\x44\xff\x0f\x70\xdb\x6b\x70\x0c\xf6\xf1\x71\x35\xbb\x3b\x7e\x9c\x77\x6f\x41\x3f\x8b\xda\xef\x36\xf1\x71\x7e\x77\xfc\x78\xb4\x9b\x99\x0e\x6a\x04\xb1\x75\x4b\x6f\xe2\x6d\x26\x44\x4b\xdf\x43\x03\xdc\x78\x86\x3a\x3e\xce\x33\x8c\x1f\x67\x86\x1f\xb3\xc5\x1d\x02\x3a\x80\x6c\x55\x74\x60\x4e\x04\xb4\xe5\x71\x04\xc2\x9e\xb9\x16\xfc\xa9\x89\x06\xa8\x35\xd8\x45\xfd\xdd\x07\x59\x9a\x78\x16\x1f\xbf\x5b\x90\x46\x28\xe9\xed\xe0\xc4\x1a\x08\x66\x35\xe7\x22\x0f\x69\xd3\xe3\x34\x16\x72\x98\x4c\xf3\x36\x2d\xbf\xa4\x86\x45\xcc\xb3\x89\x0b\x84\xfb\x82\x3a\x88\x00\xba\x15\x26\x31\xcf\x2b\xb7\xc9\xc5\xea\x55\x08\xbf\x14\x8c\x3e\x02\x87\x55\x0c\xc2\x1b\x0d\xdc\xc2\x20\x7a\xc5\x58\xed\x09\x51\xe8\xe1\x90\x92\x1f\x17\x6e\x1d\x22\xb5\xdb\x51\x88\xde\x13\x2e\x81\x88\x52\x44\xf5\x93\x14\x51\xf1\x55\xa4\x27\x07\x2b\xfc\x2d\xf8\xb6\x55\x1d\x02\x30\x56\x75\xc3\xf6\x90\x1b\xae\x8a\x0d\x91\x67\x8c\x81\xc4\x33\x86\xc0\x2a\xd2\x53\x14\x15\x41\x85\x35\xcf\xa4\xa0\xf9\x25\x10\xb7\xd0\x00\x91\x62\xe7\x09\x97\x40\x50\x45\x06\xa7\x26\xda\xb8\x80\x5e\xa1\x68\x4f\x00\x6e\x51\x60\x6e\xc3\xfe\xa4\x5d\x81\x4b\x54\x7c\x15\x2e\x55\x79\xc0\x25\x7a\xbf\x0a\x37\xda\x01\x85\x70\x32\x03\x4a\x21\x38\xc4\xd7\x38\xb7\x0c\xb0\x1f\xc9\xfe\x64\x06\x0a\x1b\xac\xf0\x16\xd8\x68\x05\x0a\x1b\x8c\xf0\x16\xd8\xb1\x11\x52\xce\x44\x4e\xe1\xf2\xe2\x2a\xe4\xcf\x21\x4d\xd2\xa4\x39\xa3\x39\xc6\x1a\x1c\xe1\x3c\xac\xb1\xba\x09\x8b\xa1\xd3\x3f\x0f\x6c\x50\xb2\x4c\xe4\xf1\xb0\x07\xf2\x2a\x7d\xb0\x66\x89\x98\x0c\x37\x10\x88\xaa\x25\x62\x3c\xe7\x57\x20\x0e\x0a\x97\x88\xf1\x88\x5f\x81\x58\x6a\x5d\x26\xeb\x8c\x59\x5e\x44\xeb\xd1\x75\x55\x24\xe1\x65\x63\x94\x29\xfd\x87\x31\x42\x36\x8a\xb4\x60\x9d\x7f\x48\x21\x57\x4a\xe2\x7b\x32\xe9\xe5\x2a\x4b\x74\x9b\xae\x7a\xba\x0e\x55\x29\x22\x0c\xcc\x1e\x42\x7d\x70\x15\x2f\x64\x7a\x11\x92\x6a\x67\x64\xc2\x89\x4a\x08\xd3\xb2\x22\x88\x98\xd8\x22\xe2\xc0\xfb\x83\x52\x5f\x5b\xae\xbf\xa2\x6b\xf8\x29\x92\x36\xa4\x44\x76\xd7\xe0\x07\xa5\x1a\xe0\x32\xd6\x07\xa9\x6e\xaa\x84\xb4\xa0\xf7\xbc\x86\x4c\xf3\x65\x42\xc7\x0f\xb0\x66\x77\xd2\xd7\x51\xb5\xea\x5d\x2e\x8a\x2b\x09\xdf\xed\x4d\xaf\x8d\xd2\x43\xb5\x14\x51\x51\x2d\x18\x0a\x0f\x44\x60\xa2\xed\x1a\xf0\x3a\x9d\xcf\x09\xa4\xd5\x02\x4c\xae\x87\x1e\x17\xf9\xe7\xe2\x2f\xb0\xcf\xeb\x37\x72\x0f\x40\xa7\x98\xa7\xca\x7b\xe0\x9e\x08\x6f\x66\xef\x91\x96\xf9\xa3\xbe\x21\xf0\x47\x84\x37\xf2\x8f\x48\xcb\xfc\x51\xd7\x13\xf8\x23\xc2\x1b\xf9\x47\xa4\x65\xfe\xbe\x8b\xf4\x8c\xdd\x93\x07\x8f\xde\xef\xb0\x5a\x2e\x9a\xbc\x81\x94\xce\x45\x4c\x87\xfc\xba\x5b\xfb\x36\x98\xda\x96\xd8\xb5\xe0\x50\x96\xbc\x8e\xd6\x82\x31\x5e\xbf\xcc\xd7\xa5\x19\xbc\x3e\x72\x73\x24\x72\x71\x0d\xd2\xfe\xaf\xa0\x6a\xd8\xe3\xe5\x94\x88\x43\x75\x88\x5d\xef\x0c\x11\x6b\xd5\xb6\x5c\xee\x30\x3a\x6e\xa0\xaf\x68\xc7\x48\x0a\x30\x74\x62\x48\x7e\xa5\x5d\x26\x7b\x70\xbd\xc8\xe3\x15\xed\xff\x48\xe5\xe2\xde\x39\x59\x4f\xe9\x85\x8b\x1d\xaf\x1b\x6e\x0d\xa9\x7e\xa5\xe0\x5f\xe1\x05\x2f\x85\xb9\x85\x3d\xef\x1b\x8b\x92\xa1\xd3\xa0\x51\x7a\x41\x88\x3c\x13\x20\x8e\x58\xca\x96\xab\x24\x94\x79\x0a\xf9\x0a\x79\x9e\x79\xd3\x53\x43\xd7\x8a\xda\x63\xea\xc0\x82\x03\x39\x17\x9f\xb2\xe0\x33\xe8\xe4\xd3\x39\x67\x2d\x9d\xc1\x48\x5d\x61\xb6\xb1\x16\xa3\x57\x06\x1e\x24\x10\x2f\x73\xbe\x70\xe2\x24\xea\xae\xbf\x87\x6f\x3d\x18\x5b\x50\x3f\x89\x56\x10\x5a\x0b\xad\xd2\x2f\x13\x1f\x87\x17\xa3\xef\xad\x8b\x63\xe9\xbb\xdb\xff\x6a\x5e\xc3\x06\xb4\x50\xbb\x53\x4e\x35\xf4\x84\xf8\x92\x3a\x23\x58\xa8\xed\xb9\xb6\x62\xcf\xbd\x63\x84\xce\x9b\xb1\x23\xf0\x5d\x4c\x0f\x69\x90\xe3\xa5\xe4\xa2\x99\xa2\x1b\xcb\x2d\xd0\x40\x2f\x86\x01\x73\xa3\x00\xbf\xf3\xf3\x38\xbf\x5c\x70\xd4\x38\x6b\x93\x8c\x7d\xe2\x30\xf1\xb8\x2d\xc8\xdc\x29\x23\xac\xd2\x2f\x34\x6b\xc4\x82\x3e\x51\x0e\xc2\x7e\xd1\x4d\x41\xd9\x68\x65\x55\xad\x08\x59\x1b\xbe\xd1\xe2\x99\x5b\xf8\x89\x46\x8c\x7b\xd1\x3f\x35\xa2\x2e\xe8\x69\xa8\x66\x8e\xea\x8f\x5b\xe8\x1a\xf5\xe2\xd4\x8c\xfe\xbb\x30\xa9\x2b\x66\x6d\x75\xaf\x5d\xf6\xbd\x2f\x46\x0f\xaf\x99\x83\x5d\x3c\xa9\xbb\x70\xb2\x05\xd8\x43\x26\xc7\x4d\x07\x61\x3f\x68\x2e\x6b\x72\x91\xd4\x4a\x5a\x21\x7b\xd5\x9b\x60\x26\x92\x0a\x81\x14\xa3\xe3\x8a\x73\x28\x2e\x91\x6d\x67\xb3\x36\x6d\x81\x42\xe2\x4e\xb4\x13\xc9\x42\xb5\x9d\x92\x40\xef\x95\x32\xd1\x15\xb9\x74\xd1\xed\x95\xdc\x8b\x43\x0e\xd2\x85\x30\xc8\x2d\x04\x8e\x87\x39\xc1\xa7\x52\xc4\x54\x6b\x37\x93\x2c\x46\x72\xf5\xc6\xaa\xf6\xa6\xa0\x8e\x52\xc4\x8f\x8a\xfc\xd1\x30\x92\x64\xc3\x39\x9d\xcb\xb1\x5c\xa1\x73\x69\x31\x1c\x0a\x5b\x71\x90\x31\x05\x96\x69\x62\xe6\x5d\xa9\x7a\xe9\x04\x73\xa6\x98\x30\xf6\x5e\x48\x61\x8e\xf8\x9e\x5b\x70\x03\x26\x5c\xcc\x55\xfe\x2f\x19\x61\x26\x63\x04\x5e\xf3\x29\x6c\x32\xd7\xd1\x70\x9c\x0e\x28\x7a\x90\x79\x1e\xbd\x14\xbb\x44\xf6\xf0\x13\xc5\x94\x06\xe8\xc7\x0b\xaf\xc7\x38\x6f\xcf\xc5\x38\x6e\x19\x9d\x4b\x10\x70\x92\xa7\x3c\x70\x4d\xca\xf3\x8a\xb1\x26\xdc\xda\x77\xd2\x52\xd7\xc3\x38\x78\xcc\x3b\x36\x33\xba\x58\xb3\x4d\x50\x0c\x52\xe2\xa4\x05\xbd\x17\x28\x5d\xc3\x3d\x3c\xf5\xa2\x19\xe9\x37\xd4\x37\x58\x28\x3c\x81\x1d\x0b\x35\xc9\xfb\xb2\x82\xba\xdc\x3b\x53\x4d\x47\x39\x36\x4a\x07\x3f\xbc\x7a\x9c\x88\x86\x19\xad\xbd\x72\x37\x4a\x5a\x2e\x24\x68\x0f\x39\xa5\x63\xc2\x0e\x6d\x99\xd2\xb6\x30\x73\xe1\xe3\xa3\x9a\x70\x0a\x34\x8d\x6e\xc7\xc6\xfb\xf7\x94\x88\xa3\x52\x1e\x2b\x52\x8e\x5f\x4f\x2b\xf2\x9a\xae\x63\xb6\x9b\x28\x8c\x9a\x66\xa3\x63\x31\x4e\x35\x17\xa3\xdc\x39\xd3\x6c\x90\x94\x33\x1b\x48\x73\x4d\xc2\xe4\xcf\x6d\xd4\xa0\x64\x7a\x77\xb1\x39\x27\x8b\x83\x59\x31\xcb\x2b\x96\x1a\x61\x5a\xe2\x89\xcc\xb9\x28\xf3\xf5\x64\x26\xb8\xc6\xf7\x62\x41\x3f\xef\xe2\x5f\x0a\x67\x3a\x9b\x24\x22\x4f\x8d\x2d\xbd\xc4\xae\x79\x29\x72\x27\x99\x81\xd0\x8d\x31\xcd\x5c\xca\x2f\xb3\x1b\x39\xe0\x41\x73\x39\xeb\x2f\x33\xd1\x37\x7e\x9d\x19\xcc\x1e\xfa\x99\x8c\x82\x69\x66\x19\x65\xcb\x4d\xa5\x79\x6a\xba\x19\x31\x83\xf9\xfe\x0e\x00\x00\xff\xff\x7a\x36\x20\xfe\x55\x21\x00\x00")

func pluginsCodeampGraphqlSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlSchemaGraphql,
		"plugins/codeamp/graphql/schema.graphql",
	)
}

func pluginsCodeampGraphqlSchemaGraphql() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/schema.graphql", size: 8533, mode: os.FileMode(420), modTime: time.Unix(1530120202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pluginsCodeampGraphqlStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xeb\x6f\xdb\x36\x10\xff\xde\xbf\xe2\xe6\x6c\x90\x5d\xd8\x94\xd3\xf5\x01\xa8\x76\x86\xb6\x49\xbb\x16\x69\xd3\xc6\x19\x8a\x7d\x2b\x4d\x9e\x2c\xa6\x14\xa9\x1e\x29\x3b\x6a\x91\xff\x7d\xa0\x64\xc9\x8a\x91\x0c\xd9\xb0\x41\x1f\x4c\xde\xe3\x77\x0f\xde\xc3\xb3\x9f\x8e\xcf\x5e\x5d\xfc\xf9\xf1\x04\x32\x9f\xeb\xa3\x07\xb3\xe6\x07\x60\x96\x21\x97\xe1\x00\x30\x73\xbe\xd2\xd8\x9c\x01\x96\x56\x56\xf0\x63\x7b\x01\xc8\x50\xad\x32\x9f\xc0\xe1\x74\xfa\xcb\xf3\x8e\x9a\x73\x5a\x29\x93\xc0\x74\x47\xda\x28\xe9\xb3\x7d\x39\xbb\x46\x4a\xb5\xdd\x24\x90\x29\x29\xd1\xb4\x9c\xeb\xed\xef\xc1\x8a\x78\x91\xa9\x6f\xfa\x76\x8b\xeb\x6c\x5f\x81\x5d\x6e\xfc\xc4\xdb\xaf\x68\x7a\x1a\x4b\x2e\xbe\xae\xc8\x96\x46\x26\xa0\x95\x41\x4e\x93\x15\x71\xa9\xd0\xf8\xe1\x41\xfa\x2c\x7c\x63\x38\xc0\x47\xe1\x1b\xed\x9c\x5b\x5a\x92\x48\x93\xa5\xf5\xde\xe6\x09\x1c\x16\x57\xe0\xac\x56\x12\x0e\xe4\x34\x7c\x3b\xc9\xd4\x1a\x3f\x49\x79\xae\x74\x95\x80\xab\x9c\xc7\x7c\x0c\x13\x5e\x14\x1a\x27\xed\x35\x5a\x70\x03\xaf\x89\x1b\xa1\x9c\xb0\xd1\x18\x22\xb6\x78\xfd\x61\x71\xac\x5c\xa1\x79\x35\x39\xc7\x55\xa9\x39\x05\xfa\x02\x57\x16\xe1\x8f\xb7\xd1\x18\xea\x63\x47\xfa\xfc\x31\xb0\x7f\x47\xbd\x46\xaf\x04\x87\x0f\x58\x62\x34\x86\xac\x25\x8c\x21\x3a\x2d\x85\x92\x1c\xde\x10\x37\x32\xf0\x38\x29\xae\xc7\xe0\xb8\x71\x13\x87\xa4\xd2\x9d\xd3\x05\x97\x52\x99\x55\x02\xcf\x8a\x2b\x38\x7c\x5c\x5c\xc1\xd3\xe2\x6a\x2f\x26\xa7\xbe\x63\x52\x33\x6f\x26\x7a\x16\xf7\x6a\x62\xa6\x95\xf9\x0a\x84\x7a\x3e\xa8\xa9\x2e\x43\xf4\x03\xc8\x08\xd3\xf9\x20\xf3\xbe\x70\x49\x1c\x0b\x69\x2e\x1d\x13\xda\x96\x32\xd5\x9c\x90\x09\x9b\xc7\xfc\x92\x5f\xc5\x5a\x2d\x5d\xdc\xbe\x73\x3c\x65\x87\x53\xf6\xa8\xbb\x33\xe1\xdc\x00\xe2\xdb\x0a\x31\x7e\x08\x67\x6b\x24\x52\x12\x1d\x3c\x8c\xdb\x02\x68\x35\x27\xc2\x1a\xcf\x95\x41\x02\xb6\x0e\x69\x58\x6a\x9c\xa0\x54\xde\xd2\x2d\xc5\xf4\xf4\xe9\xdf\x87\xe8\x04\xa9\xc2\x83\x23\x71\xef\x90\x52\xf4\x22\x8b\x1f\xb1\x29\xfb\xb5\x39\xb3\x5c\x19\x76\xe9\x06\x47\xb3\xb8\x81\xfb\xf7\xd8\x84\x5c\xf8\xf8\xf0\x09\x7b\xc2\x1e\x37\x97\xff\x15\x7c\x22\x6d\xfe\x1f\x1a\xb8\xf3\xb1\xf7\xe1\x67\x71\x3b\x85\x66\x61\xec\x6c\x2d\x4a\xb5\x06\xa1\xb9\x73\xf3\x41\xd7\xed\x83\xa3\x77\x9f\x2f\xe0\xa2\x6e\xfc\x99\x32\x45\xe9\x41\xc9\x3e\x1f\x0a\xcd\x05\x66\x56\x4b\xa4\xf9\x60\x27\xbc\xb2\xe8\x20\x43\xc2\x60\x59\xaa\x75\xcf\x46\x00\x68\x5d\x1b\x1c\x9d\x5a\x1e\xda\x85\x31\xd6\x97\xeb\xa7\x62\xcd\x09\x1c\x72\x12\x19\xcc\x61\xa3\x8c\xb4\x1b\xa6\xad\xe0\x5e\x59\xc3\x1a\xc6\xf3\x4e\xb0\xe0\xc4\x73\xf4\x48\x0e\xe6\xf0\xe3\xba\x61\x48\x2b\xca\x1c\x8d\x67\x2b\xf4\x27\x1a\xc3\xf1\x65\xf5\x56\x0e\xa3\x2e\x8e\x68\xc4\xd6\x5c\x97\x08\x73\x08\xd0\x7a\xe1\x2d\xf1\x15\x06\x85\xb7\x1e\xf3\x61\xd4\x3a\x9c\x5c\x6e\xfc\x45\xa3\xf1\xfc\x41\x0d\x9e\x96\x46\x04\x57\xa0\x16\xf9\x74\xfa\x3a\xd4\x24\xd2\x70\x7b\xfd\x18\x1c\x72\xa3\xae\x37\x84\x35\xce\x43\x8b\x02\xf3\x7f\xe0\x5c\xdb\x48\x1a\x3d\x84\x07\xdc\x06\xd9\x35\x5d\xf4\x42\x08\x2c\x7c\x94\x40\x14\x66\xa4\x6a\x52\x14\x5f\x3a\x6b\xa2\xf1\x4e\xea\x95\x35\x1e\x8d\x9f\x5c\x54\x05\xde\x2a\xdb\xf6\x6b\x6b\x4f\xa5\x30\x6c\x1d\x1e\xf5\xec\xdd\xc8\x94\xbb\x3b\x53\xe3\x2e\xdc\xde\x16\xb8\x2d\x80\xfb\x86\x70\x9f\x20\x6e\x48\xbf\x28\x7d\x66\x49\x7d\xaf\xf9\x51\xb2\x4b\xff\x6f\xf0\xe5\x25\x72\x42\x82\x9f\x7f\xb4\xc4\xeb\x2f\x90\x80\x29\xb5\xee\x10\xae\xf7\xd7\x21\xa1\x2f\xc9\x40\x3d\x7e\x86\x51\xfc\xad\x44\xaa\xa2\x71\x2f\x92\x1c\x7d\x66\x65\x02\x51\x61\x9d\xef\xf9\xb2\x8d\x7a\xdc\x5b\x86\xb2\x4a\xe0\xdd\xe2\xec\x03\x73\x9e\x94\x59\xa9\xb4\xda\x2b\x9d\x9d\xb0\x20\x94\x68\xbc\xe2\xda\x25\x10\x29\x23\x74\x19\xb6\x51\xeb\xdc\x88\xf9\x0c\xcd\xb0\x2b\xc8\x21\xa1\x2b\xac\x71\xd8\x7f\xb4\xad\xeb\x2d\x8b\x79\xbc\xf2\xc3\xee\x5d\xee\xc6\x78\x69\x65\xd5\xc7\xf1\x54\xdd\x78\xb9\x2d\x6e\x1d\x49\xc1\xc9\xe1\x4d\xcd\xdd\xc3\x5f\x83\xe0\x5e\x64\x30\x44\x22\x4b\xa3\xdb\x40\xfa\x9a\x3d\xc5\xce\xc7\x86\xd6\xdc\xe3\x18\xce\xd1\x48\x24\x98\xbd\xa9\x2b\xef\xd3\x29\xc4\x47\xa0\x8c\xb7\xe0\x33\xac\x13\xcc\x5a\xc9\x05\x62\x4d\x3c\x3f\x79\x71\xfc\xfe\x04\x94\xa9\x6f\xde\x16\xa0\x71\x8d\x1a\x6c\x0a\x3e\x53\x0e\x72\x2b\x4b\x1d\x18\xa0\x91\x93\x81\xdc\x12\x02\x5f\xda\xd2\xb7\x48\x99\xdd\x40\x65\x4b\x10\xdc\x80\x28\x9d\xb7\xb9\xfa\x8e\xd0\x79\xb0\xac\xa0\x20\xbb\x56\x61\xb4\x81\x54\x69\x8a\x84\xc6\x43\xdd\xc6\x0e\x2c\xb5\x30\xe1\xbf\x42\xc8\x33\xd7\x20\x32\xa5\x25\x60\x33\x01\x5c\xe3\xf2\x79\xd8\x12\xc7\x67\xef\x19\xd5\x21\x0e\xb7\x19\xa8\xc9\x4c\x10\x72\x8f\xdb\x91\x31\x6c\x4d\xf7\xab\x30\x6d\x46\x51\xb2\x37\x9a\x76\x05\xd3\x9e\xee\x9c\x41\x6d\x33\x47\xa3\x5a\x72\x9b\xf9\x9b\xbb\xa4\x59\x21\xb3\xb8\xf9\x8b\xfb\x57\x00\x00\x00\xff\xff\x45\xab\x31\x54\xfa\x0a\x00\x00")

func pluginsCodeampGraphqlStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pluginsCodeampGraphqlStaticIndexHtml,
		"plugins/codeamp/graphql/static/index.html",
	)
}

func pluginsCodeampGraphqlStaticIndexHtml() (*asset, error) {
	bytes, err := pluginsCodeampGraphqlStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "plugins/codeamp/graphql/static/index.html", size: 2810, mode: os.FileMode(420), modTime: time.Unix(1529973808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"plugins/codeamp/graphql/schema.graphql": pluginsCodeampGraphqlSchemaGraphql,
	"plugins/codeamp/graphql/static/index.html": pluginsCodeampGraphqlStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"plugins": &bintree{nil, map[string]*bintree{
		"codeamp": &bintree{nil, map[string]*bintree{
			"graphql": &bintree{nil, map[string]*bintree{
				"schema.graphql": &bintree{pluginsCodeampGraphqlSchemaGraphql, map[string]*bintree{}},
				"static": &bintree{nil, map[string]*bintree{
					"index.html": &bintree{pluginsCodeampGraphqlStaticIndexHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


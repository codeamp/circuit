scalar Time
scalar JSON

schema {
  query: Query
  mutation: Mutation
}

# Query
type Query {
  # User
  user(id: ID): User
  # Users
  users(): [User]!
  # Project
  project(id: ID, slug: String, name: String, environmentID: String): Project
  # Projects
  projects(projectSearch: ProjectSearchInput, params: PaginatorInput): ProjectList!
  # Features
  features(params: PaginatorInput): FeatureList!
  # Services
  services(params: PaginatorInput): ServiceList!
  # Service specs
  serviceSpecs(): [ServiceSpec]!
  # ReleaseList
  releases(params: PaginatorInput): ReleaseList
  # Environments
  environments(projectSlug: String): [Environment]!
  # Environment variables
  secrets(params: PaginatorInput): SecretList!
  # ProjectExtension spec
  extensions(environmentID: String): [Extension]!
  # ProjectExtensions
  projectExtensions(): [ProjectExtension]!
  # Release extensions
  releaseExtensions(): [ReleaseExtension]!
  # Permissions
  permissions(): JSON!
}

# Mutation
type Mutation {
  # Create project
  createProject(project: ProjectInput): Project
  # Update project
  updateProject(project: ProjectInput): Project
  # Create release
  createRelease(release: ReleaseInput): Release
  # Stop release
  stopRelease(id: ID!): Release
  # Create service
  createService(service: ServiceInput): Service
  # Update Service
  updateService(service: ServiceInput): Service
  # Delete service
  deleteService(service: ServiceInput): Service
  # Create service spec
  createServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec
  # Update service spec
  updateServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec
  # Delete service spec
  deleteServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec
  # Create environment
  createEnvironment(environment: EnvironmentInput): Environment
  # Update environment
  updateEnvironment(environment: EnvironmentInput): Environment
  # Delete environment
  deleteEnvironment(environment: EnvironmentInput): Environment
  # Create environment variable
  createSecret(secret: SecretInput): Secret
  # Update environment variable
  updateSecret(secret: SecretInput): Secret
  # Delete environment variable 
  deleteSecret(secret: SecretInput): Secret
  # Create extension spec
  createExtension(extension: ExtensionInput): Extension
  # Update extension spec
  updateExtension(extension: ExtensionInput): Extension
  # Delete extension spec
  deleteExtension(extension: ExtensionInput): Extension
  # Create extension
  createProjectExtension(projectExtension: ProjectExtensionInput): ProjectExtension
  # Update extension
  updateProjectExtension(projectExtension: ProjectExtensionInput): ProjectExtension
  # Delete extesion
  deleteProjectExtension(projectExtension: ProjectExtensionInput): ProjectExtension
  # Update user permissions
  updateUserPermissions(userPermissions: UserPermissionsInput): [String!]!
  # Update project environments
  updateProjectEnvironments(projectEnvironments: ProjectEnvironmentsInput): [Environment!]!
  # Bookmark project
  bookmarkProject(id: ID!): Boolean!
}

# Paginator
interface Paginator {
  page: Int!
  count: Int!
  nextCursor: String!
}

# ReleaseList
type ReleaseList implements Paginator {
  page: Int!
  count: Int!
  entries: [Release]!
  nextCursor: String!
}

# SecretList
type SecretList implements Paginator {
  page: Int!
  count: Int!
  entries: [Secret]!
  nextCursor: String!
}

# ServiceList
type ServiceList implements Paginator {
  page: Int!
  count: Int!
  entries: [Service]!
  nextCursor: String!
}

# FeatureList
type FeatureList implements Paginator {
  page: Int!
  count: Int!
  entries: [Feature]!
  nextCursor: String!
}

# ProjectList
type ProjectList implements Paginator {
  page: Int!
  count: Int!
  entries: [Project]!
  nextCursor: String!
}

# User
type User {
  id: ID!
  email: String!
  permissions: [String!]!
  created: Time!
}

# Feature
type Feature {
  id: ID!
  project: Project!
  message: String!
  user: String!
  hash: String!
  parentHash: String!
  ref: String!
  created: Time!
}

# Service
type Service {
  id: ID!
  project: Project!
  command: String!
  name: String!
  serviceSpec: ServiceSpec!
  count: String!
  ports: [JSON]!
  environment: Environment!
  type: String!
  created: Time!
}

# Environment
type Environment {
  id: ID!
  name: String!
  key: String!
  isDefault: Boolean!
  color: String!
  created: Time!
  projects: [Project]!
}

# Environment variable
type Secret {
  id: ID!
  key: String!
  value: String!
  scope: String!
  project: Project!
  user: User!
  type: String!
  versions: [Secret]!
  environment: Environment!
  created: Time!
  isSecret: Boolean!
}

# Service spec
type ServiceSpec {
  id: ID!
  name: String!
  cpuRequest: String!
  cpuLimit: String!
  memoryRequest: String!
  memoryLimit: String!
  terminationGracePeriod: String!
  created: Time!
}

# Release
type Release {
  id: ID!
  project: Project!
  user: User!
  artifacts: JSON!
  headFeature: Feature!
  tailFeature: Feature!
  state: String!
  releaseExtensions: [ReleaseExtension]!
  stateMessage: String!
  environment: Environment!
  created: Time!
}

# Project
type Project {
  id: ID!
  name: String!
  slug: String!
  repository: String!
  secret: String!
  gitUrl: String!
  gitProtocol: String!
  rsaPrivateKey: String!
  rsaPublicKey: String!
  features(showDeployed: Boolean, params: PaginatorInput): FeatureList!
  currentRelease: Release
  releases(params: PaginatorInput): ReleaseList!
  services(params: PaginatorInput): ServiceList!
  secrets(params: PaginatorInput): SecretList!
  extensions: [ProjectExtension]!
  gitBranch: String!
  continuousDeploy: Boolean!
  environments: [Environment!]!
  bookmarked: Boolean!
  created: Time!
}

# Extension spec
type Extension {
  id: ID!
  name: String!
  component: String!
  type: String!
  key: String!
  environment: Environment!
  config: JSON!
  created: Time!
}

# ProjectExtension
type ProjectExtension {
  id: ID!
  project: Project!
  extension: Extension!
  artifacts: JSON!
  config: JSON!
  customConfig: JSON!
  state: String!
  stateMessage: String!
  environment: Environment!
  created: Time!
}

# Release extension
type ReleaseExtension {
  id: ID!
  release: Release!
  extension: ProjectExtension!
  servicesSignature: String!
  secretsSignature: String!
  state: String!
  type: String!
  stateMessage: String!
  artifacts: JSON!
  finished: Time!
  created: Time!
}

# Project input
input ProjectInput {
  id: String
  gitProtocol: String!
  gitUrl: String!
  gitBranch: String
  bookmarked: Boolean
  environmentID: String
  continuousDeploy: Boolean
}

# ProjectSearch input
input ProjectSearchInput {
  repository: String
  bookmarked: Boolean!
}

# Pagination input
input PaginatorInput {
  cursor: String
  limit: Int
}

# Release input
input ReleaseInput {
  id: String
  headFeatureID: String!
  projectID: String!
  environmentID: String!
  forceRebuild: Boolean!
}

# Service input
input ServiceInput {
  id: String
  projectID: String!
  command: String!
  name: String!
  serviceSpecID: String!
  count: String!
  ports: [ServicePortInput!]
  type: String!
  environmentID: String!
}

# Container port input
input ServicePortInput {
  port: String!
  protocol: String!
}

# Service spec input
input ServiceSpecInput {
  id: String
  name: String!
  cpuRequest: String!
  cpuLimit: String!
  memoryRequest: String!
  memoryLimit: String!
  terminationGracePeriod: String!
}

# Environment input
input EnvironmentInput {
  id: String
  name: String!
  key: String!
  isDefault: Boolean!
  color: String!
}

# Environment variable input
input SecretInput {
  id: String
  key: String!
  value: String!
  type: String!
  scope: String!
  projectID: String
  environmentID: String!
  isSecret: Boolean!
}

# ProjectExtension spec input
input ExtensionInput {
  id: String
  name: String!
  key: String!
  component: String!
  environmentID: String!
  config: JSON!
  type: String!
}

# ProjectExtension input
input ProjectExtensionInput {
  id: String,
  projectID: String!,
  extensionID: String!,
  config: JSON!
  customConfig: JSON!
  environmentID: String!
}

# UserPermission input
input UserPermissionsInput {
  userID: String!
  permissions: [UserPermissionInput!]!
}

# UserPermission input
input UserPermissionInput {
  value: String!
  grant: Boolean!
}

# ProjectEnvironment input
input ProjectEnvironmentInput {
  environmentID: String!
  grant: Boolean!
}

# ProjectEnvironmentsInput
input ProjectEnvironmentsInput {
 projectID: String!
 permissions: [ProjectEnvironmentInput!]!
}

scalar Time

schema {
  query: Query
  mutation: Mutation
}

# The query type, represents all of the entry points into our object graph
type Query {
  # Retrieve single user by ID
  user(id: ID): User
  # Retrieve all users
  users(): [User]!
  # Retrieve single project by ID
  project(id: ID, slug: String, name: String): Project
  # Retrieve all projects
  projects(): [Project]!
  # Retrieve all features
  features(): [Feature]!

  # Retrieve all services
  services(): [Service]!

  # Retrieve all service specs
  serviceSpecs(): [ServiceSpec]!

  # Retrieve all releases
  releases(): [Release]!
}

# The mutation type, represents all updates we can make to our data
type Mutation {
  createProject(project: ProjectInput): Project
  updateProject(project: ProjectInput): Project
  createRelease(release: ReleaseInput): Release
  
  createService(service: ServiceInput): Service
  updateService(service: ServiceInput): Service
  deleteService(service: ServiceInput): Service

  createServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec
  updateServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec  
  deleteServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec  

  userToken(email: String!, password: String!): User
}

# User object
interface User {
  id: ID!
  email: String!
  token: String!
  permissions: [String!]!
}


# Feature object
interface Feature {
  id: ID!
  project: Project
  message: String!
  user: String!
  hash: String!
  parentHash: String!
  ref: String!
  created: Time!
}

interface ContainerPort {
  protocol: String!
  port: String!
}

interface Service { 
  id: ID!
  project: Project
  command: String!
  name: String!
  serviceSpec: String!
  count: String!
  containerPorts: [ContainerPort]!
  created: Time!
  oneShot: Boolean!
}

# ServiceSpec object
interface ServiceSpec {
  id: ID!
  name: String!
  cpuRequest: String!
  cpuLimit: String!
  memoryRequest: String! 
  memoryLimit: String!
  created: Time!
  terminationGracePeriod: String!
}

# Release object
interface Release {
  id: ID!
  project: Project
  user: User
  headFeature: Feature!
  tailFeature: Feature!
  state: String!        
  stateMessage: String!
  created: Time!
}

# Project object
interface Project {
  id: ID!
  name: String!
  slug: String!
  repository: String!
  secret: String!
  gitUrl: String!
  gitProtocol: String!
  rsaPrivateKey: String!
  rsaPublicKey: String!
  features: [Feature]!
  releases: [Release]!
  services: [Service]!
}

# ProjectInput object and all fields needed for creating new Project
input ProjectInput {
  id: String
  gitProtocol: String!
  gitUrl: String!
  bookmarked: Boolean
}

input ReleaseInput {
  id: String
  featureId: String
}

input ServiceInput { 
  id: String
  projectId: String!
  command: String!
  name: String!
  serviceSpec: String!
  count: String!
  containerPorts: [ContainerPortInput!]
  oneShot: Boolean!
}

input ContainerPortInput {
  port: String!
  protocol: String!
}

input ServiceSpecInput {
  id: String
  name: String
  cpuRequest: String
  cpuLimit: String
  memoryRequest: String
  memoryLimit: String
  terminationGracePeriod: String
}
scalar Time

schema {
  query: Query
  mutation: Mutation
}

# The query type, represents all of the entry points into our object graph
type Query {
  # Retrieve single user by ID
  user(id: ID): User
  # Retrieve all users
  users(): [User]!
  # Retrieve single project by ID
  project(id: ID, slug: String, name: String): Project
  # Retrieve all projects
  projects(): [Project]!
  # Retrieve all features
  features(): [Feature]!

  # Retrieve all services
  services(): [Service]!

  # Retrieve all service specs
  serviceSpecs(): [ServiceSpec]!

  # Retrieve all releases
  releases(): [Release]!

  # Retrieve all environment variables
  environmentVariables(): [EnvironmentVariable]!

  # Retrieve all extension specs
  extensionSpecs(): [ExtensionSpec]!

  # Retrieve all extensions
  extensions(): [Extension]!
}

# The mutation type, represents all updates we can make to our data
type Mutation {
  createProject(project: ProjectInput): Project
  updateProject(project: ProjectInput): Project
  
  createRelease(release: ReleaseInput): Release
  
  createService(service: ServiceInput): Service
  updateService(service: ServiceInput): Service
  deleteService(service: ServiceInput): Service

  createServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec
  updateServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec  
  deleteServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec  

  createEnvironmentVariable(environmentVariable: EnvironmentVariableInput): EnvironmentVariable
  updateEnvironmentVariable(environmentVariable: EnvironmentVariableInput): EnvironmentVariable
  deleteEnvironmentVariable(environmentVariable: EnvironmentVariableInput): EnvironmentVariable

  createExtensionSpec(extensionSpec: ExtensionSpecInput): ExtensionSpec
  updateExtensionSpec(extensionSpec: ExtensionSpecInput): ExtensionSpec
  deleteExtensionSpec(extensionSpec: ExtensionSpecInput): ExtensionSpec

  createExtension(extension: ExtensionInput): Extension

  userToken(email: String!, password: String!): User
}

# User object
interface User {
  id: ID!
  email: String!
  token: String!
  permissions: [String!]!
}


# Feature object
interface Feature {
  id: ID!
  project: Project
  message: String!
  user: String!
  hash: String!
  parentHash: String!
  ref: String!
  created: Time!
}

interface ContainerPort {
  protocol: String!
  port: String!
}

interface Service { 
  id: ID!
  project: Project
  command: String!
  name: String!
  serviceSpec: ServiceSpec!
  count: String!
  containerPorts: [ContainerPort]!
  created: Time!
  oneShot: Boolean!
}

# EnvironmentVariable object
interface EnvironmentVariable {
  id: ID!
  key: String!
  value: String!
  created: Time!
  project: Project!
  user: User!
  type: String!
  version: Int!
  versions: [EnvironmentVariable]!
}

# ServiceSpec object
interface ServiceSpec {
  id: ID!
  name: String!
  cpuRequest: String!
  cpuLimit: String!
  memoryRequest: String! 
  memoryLimit: String!
  created: Time!
  terminationGracePeriod: String!
}

# Release object
interface Release {
  id: ID!
  project: Project
  user: User
  headFeature: Feature!
  tailFeature: Feature!
  state: String!        
  stateMessage: String!
  created: Time!
}

# Project object
interface Project {
  id: ID!
  name: String!
  slug: String!
  repository: String!
  secret: String!
  gitUrl: String!
  gitProtocol: String!
  rsaPrivateKey: String!
  rsaPublicKey: String!
  features: [Feature]!
  currentRelease: Release
  releases: [Release]!
  services: [Service]!
  environmentVariables: [EnvironmentVariable]!
  extensions: [Extension]!
}

# ExtensionSpec object
interface ExtensionSpec {
  id: ID!
  name: String!
  component: String!
  formSpec: [KeyValue]!
  type: String!
}

# Extension object
interface Extension {
  id: ID!
  project: Project!
  extensionSpec: ExtensionSpec!
  state: String!
  created: Time!
}

# ProjectInput object and all fields needed for creating new Project
input ProjectInput {
  id: String
  gitProtocol: String!
  gitUrl: String!
  bookmarked: Boolean
}

input ReleaseInput {
  id: String
  headFeatureId: String!
  projectId: String!
}

input ServiceInput { 
  id: String
  projectId: String!
  command: String!
  name: String!
  serviceSpecId: String!
  count: String!
  containerPorts: [ContainerPortInput!]
  oneShot: Boolean!
}

input ContainerPortInput {
  port: String!
  protocol: String!
}

input ServiceSpecInput {
  id: String
  name: String!
  cpuRequest: String!
  cpuLimit: String!
  memoryRequest: String!
  memoryLimit: String!
  terminationGracePeriod: String!
}

input EnvironmentVariableInput {
  id: String
  key: String!
  value: String!
  type: String
  projectId: String
}

input ExtensionSpecInput {
  id: String
  name: String!
  component: String!
  formSpec: String!
  type: String!
}

input ExtensionInput {
  id: String,
  projectId: String!,
  extensionSpecId: String!,
  formSpecValues: String!
}

interface KeyValue {
  key: String!
  value: String!
}

input KeyValueInput {
  key: String!
  value: String!
}

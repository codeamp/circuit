scalar Time
scalar JSON

schema {
  query: Query
  mutation: Mutation
}

# Query
type Query {
  # User
  user(id: ID): User
  # Users
  users(): [User]!
  # Project
  project(id: ID, slug: String, name: String, environmentId: String): Project
  # Projects
  projects(): [Project]!
  # Features
  features(): [Feature]!
  # Services
  services(): [Service]!
  # Service specs
  serviceSpecs(): [ServiceSpec]!
  # Releases
  releases(): [Release]!
  # Environments
  environments(): [Environment]!
  # Environment variables
  environmentVariables(): [EnvironmentVariable]!
  # Extension spec
  extensionSpecs(): [ExtensionSpec]!
  # Extensions
  extensions(): [Extension]!
  # Release extensions
  releaseExtensions(): [ReleaseExtension]!
}

# Mutation
type Mutation {
  # Create project
  createProject(project: ProjectInput): Project
  # Update project
  updateProject(project: ProjectInput): Project
  # Create release
  createRelease(release: ReleaseInput): Release
  # Rollback release
  rollbackRelease(releaseId: ID!): Release
  # Create service
  createService(service: ServiceInput): Service
  # Update Service
  updateService(service: ServiceInput): Service
  # Delete service
  deleteService(service: ServiceInput): Service
  # Create service spec
  createServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec
  # Update service spec
  updateServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec
  # Delete service spec
  deleteServiceSpec(serviceSpec: ServiceSpecInput): ServiceSpec
  # Create environment
  createEnvironment(environment: EnvironmentInput): Environment
  # Update environment
  updateEnvironment(environment: EnvironmentInput): Environment
  # Delete environment
  deleteEnvironment(environment: EnvironmentInput): Environment
  # Create environment variable
  createEnvironmentVariable(environmentVariable: EnvironmentVariableInput): EnvironmentVariable
  # Update environment variable
  updateEnvironmentVariable(environmentVariable: EnvironmentVariableInput): EnvironmentVariable
  # Delete environment variable 
  deleteEnvironmentVariable(environmentVariable: EnvironmentVariableInput): EnvironmentVariable
  # Create extension spec
  createExtensionSpec(extensionSpec: ExtensionSpecInput): ExtensionSpec
  # Update extension spec
  updateExtensionSpec(extensionSpec: ExtensionSpecInput): ExtensionSpec
  # Delete extension spec
  deleteExtensionSpec(extensionSpec: ExtensionSpecInput): ExtensionSpec
  # Create extension
  createExtension(extension: ExtensionInput): Extension
  # Update extension
  updateExtension(extension: ExtensionInput): Extension
  # Delete extesion
  deleteExtension(extension: ExtensionInput): Extension
}

# User
type User {
  id: ID!
  email: String!
  permissions: [String!]!
  created: Time!
}

# Feature
type Feature {
  id: ID!
  project: Project!
  message: String!
  user: String!
  hash: String!
  parentHash: String!
  ref: String!
  created: Time!
}

# Service
type Service {
  id: ID!
  project: Project!
  command: String!
  name: String!
  serviceSpec: ServiceSpec!
  count: String!
  ports: [JSON]!
  environment: Environment!
  type: String!
  created: Time!
}

# Environment
type Environment {
  id: ID!
  name: String!
  color: String!
  created: Time!
}

# Environment variable
type EnvironmentVariable {
  id: ID!
  key: String!
  value: String!
  scope: String!
  project: Project!
  user: User!
  type: String!
  versions: [EnvironmentVariable]!
  environment: Environment!
  created: Time!
  isSecret: Boolean!
}

# Service spec
type ServiceSpec {
  id: ID!
  name: String!
  cpuRequest: String!
  cpuLimit: String!
  memoryRequest: String!
  memoryLimit: String!
  terminationGracePeriod: String!
  created: Time!
}

# Release
type Release {
  id: ID!
  project: Project!
  user: User!
  artifacts: JSON!
  headFeature: Feature!
  tailFeature: Feature!
  state: String!
  releaseExtensions: [ReleaseExtension]!
  stateMessage: String!
  environment: Environment!
  created: Time!
}

# Project
type Project {
  id: ID!
  name: String!
  slug: String!
  repository: String!
  secret: String!
  gitUrl: String!
  gitProtocol: String!
  rsaPrivateKey: String!
  rsaPublicKey: String!
  features: [Feature]!
  currentRelease: Release
  releases: [Release]!
  services: [Service]!
  environmentVariables: [EnvironmentVariable]!
  extensions: [Extension]!
  gitBranch: String!
  created: Time!
}

# Extension spec
type ExtensionSpec {
  id: ID!
  name: String!
  component: String!
  type: String!
  key: String!
  environment: Environment!
  config: JSON!
  created: Time!
}

# Extension
type Extension {
  id: ID!
  project: Project!
  extensionSpec: ExtensionSpec!
  artifacts: JSON!
  config: JSON!
  state: String!
  stateMessage: String!
  environment: Environment!
  created: Time!
}

# Release extension
type ReleaseExtension {
  id: ID!
  release: Release!
  extension: Extension!
  servicesSignature: String!
  secretsSignature: String!
  state: String!
  type: String!
  stateMessage: String!
  artifacts: JSON!
  finished: Time!
  created: Time!
}

# Project input
input ProjectInput {
  id: String
  gitProtocol: String!
  gitUrl: String!
  bookmarked: Boolean
  environmentId: String!
}

# Release input
input ReleaseInput {
  id: String
  headFeatureId: String!
  projectId: String!
  environmentId: String!
}

# Service input
input ServiceInput {
  id: String
  projectId: String!
  command: String!
  name: String!
  serviceSpecId: String!
  count: String!
  ports: [ServicePortInput!]
  type: String!
  environmentId: String!
}

# Container port input
input ServicePortInput {
  port: String!
  protocol: String!
}

# Service spec input
input ServiceSpecInput {
  id: String
  name: String!
  cpuRequest: String!
  cpuLimit: String!
  memoryRequest: String!
  memoryLimit: String!
  terminationGracePeriod: String!
}

# Environment input
input EnvironmentInput {
  id: String
  name: String!
  color: String!
}

# Environment variable input
input EnvironmentVariableInput {
  id: String
  key: String!
  value: String!
  type: String!
  scope: String!
  projectId: String
  environmentId: String!
  isSecret: Boolean!
}

# Extension spec input
input ExtensionSpecInput {
  id: String
  name: String!
  key: String!
  component: String!
  environmentId: String!
  config: JSON!
  type: String!
}

# Extension input
input ExtensionInput {
  id: String,
  projectId: String!,
  extensionSpecId: String!,
  config: JSON!
  environmentId: String!
}
